
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0800d950  0800d950  0000e950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8bc  0800e8bc  00010068  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8bc  0800e8bc  0000f8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8c4  0800e8c4  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8c4  0800e8c4  0000f8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8c8  0800e8c8  0000f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800e8cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010068  2**0
                  CONTENTS
 10 .bss          000006bc  20000068  20000068  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000724  20000724  00010068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a863  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dda  00000000  00000000  0002a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001800  00000000  00000000  0002e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129a  00000000  00000000  0002fed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b5f  00000000  00000000  00031172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb76  00000000  00000000  00056cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c03  00000000  00000000  00076847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d44a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a10  00000000  00000000  0014d490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00153ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d938 	.word	0x0800d938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800d938 	.word	0x0800d938

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96a 	b.w	8000cb0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460c      	mov	r4, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14e      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a00:	4694      	mov	ip, r2
 8000a02:	458c      	cmp	ip, r1
 8000a04:	4686      	mov	lr, r0
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	d962      	bls.n	8000ad2 <__udivmoddi4+0xde>
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0320 	rsb	r3, r2, #32
 8000a12:	4091      	lsls	r1, r2
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a26:	fa1f f68c 	uxth.w	r6, ip
 8000a2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a32:	fb07 1114 	mls	r1, r7, r4, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb04 f106 	mul.w	r1, r4, r6
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4a:	f080 8112 	bcs.w	8000c72 <__udivmoddi4+0x27e>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 810f 	bls.w	8000c72 <__udivmoddi4+0x27e>
 8000a54:	3c02      	subs	r4, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a62:	fb07 1110 	mls	r1, r7, r0, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb00 f606 	mul.w	r6, r0, r6
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7a:	f080 80fc 	bcs.w	8000c76 <__udivmoddi4+0x282>
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f240 80f9 	bls.w	8000c76 <__udivmoddi4+0x282>
 8000a84:	4463      	add	r3, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1b9b      	subs	r3, r3, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d905      	bls.n	8000aae <__udivmoddi4+0xba>
 8000aa2:	b10d      	cbz	r5, 8000aa8 <__udivmoddi4+0xb4>
 8000aa4:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e7f5      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000aae:	fab3 f183 	clz	r1, r3
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d146      	bne.n	8000b44 <__udivmoddi4+0x150>
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xcc>
 8000aba:	4290      	cmp	r0, r2
 8000abc:	f0c0 80f0 	bcc.w	8000ca0 <__udivmoddi4+0x2ac>
 8000ac0:	1a86      	subs	r6, r0, r2
 8000ac2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0e6      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000acc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad0:	e7e3      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x204>
 8000ad8:	eba1 040c 	sub.w	r4, r1, ip
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	fa1f f78c 	uxth.w	r7, ip
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aee:	fb08 4416 	mls	r4, r8, r6, r4
 8000af2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af6:	fb07 f006 	mul.w	r0, r7, r6
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x11c>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x11a>
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b0e:	4626      	mov	r6, r4
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb00 f707 	mul.w	r7, r0, r7
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x148>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x146>
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f200 80b0 	bhi.w	8000c9a <__udivmoddi4+0x2a6>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	1bdb      	subs	r3, r3, r7
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	e7a5      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b44:	f1c1 0620 	rsb	r6, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b54:	fa04 f301 	lsl.w	r3, r4, r1
 8000b58:	ea43 030c 	orr.w	r3, r3, ip
 8000b5c:	40f4      	lsrs	r4, r6
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	0c38      	lsrs	r0, r7, #16
 8000b64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b68:	fbb4 fef0 	udiv	lr, r4, r0
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	fb00 441e 	mls	r4, r0, lr, r4
 8000b74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b78:	fb0e f90c 	mul.w	r9, lr, ip
 8000b7c:	45a1      	cmp	r9, r4
 8000b7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x1a6>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8a:	f080 8084 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000b8e:	45a1      	cmp	r9, r4
 8000b90:	f240 8081 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000b94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	eba4 0409 	sub.w	r4, r4, r9
 8000b9e:	fa1f f983 	uxth.w	r9, r3
 8000ba2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ba6:	fb00 4413 	mls	r4, r0, r3, r4
 8000baa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x1d2>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bbc:	d267      	bcs.n	8000c8e <__udivmoddi4+0x29a>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0x29a>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bca:	fba0 9302 	umull	r9, r3, r0, r2
 8000bce:	eba4 040c 	sub.w	r4, r4, ip
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	46ce      	mov	lr, r9
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	d351      	bcc.n	8000c7e <__udivmoddi4+0x28a>
 8000bda:	d04e      	beq.n	8000c7a <__udivmoddi4+0x286>
 8000bdc:	b155      	cbz	r5, 8000bf4 <__udivmoddi4+0x200>
 8000bde:	ebb8 030e 	subs.w	r3, r8, lr
 8000be2:	eb64 040c 	sbc.w	r4, r4, ip
 8000be6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bea:	40cb      	lsrs	r3, r1
 8000bec:	431e      	orrs	r6, r3
 8000bee:	40cc      	lsrs	r4, r1
 8000bf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e750      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000bf8:	f1c2 0320 	rsb	r3, r2, #32
 8000bfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa24 f303 	lsr.w	r3, r4, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	430c      	orrs	r4, r1
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f107 	mul.w	r1, r0, r7
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x24c>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c36:	d22c      	bcs.n	8000c92 <__udivmoddi4+0x29e>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d92a      	bls.n	8000c92 <__udivmoddi4+0x29e>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c48:	fb08 3311 	mls	r3, r8, r1, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb01 f307 	mul.w	r3, r1, r7
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x276>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c60:	d213      	bcs.n	8000c8a <__udivmoddi4+0x296>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d911      	bls.n	8000c8a <__udivmoddi4+0x296>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1ae4      	subs	r4, r4, r3
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	e739      	b.n	8000ae6 <__udivmoddi4+0xf2>
 8000c72:	4604      	mov	r4, r0
 8000c74:	e6f0      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e706      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d2ae      	bcs.n	8000bdc <__udivmoddi4+0x1e8>
 8000c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7a8      	b.n	8000bdc <__udivmoddi4+0x1e8>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e7ed      	b.n	8000c6a <__udivmoddi4+0x276>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e799      	b.n	8000bc6 <__udivmoddi4+0x1d2>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e7d4      	b.n	8000c40 <__udivmoddi4+0x24c>
 8000c96:	46d6      	mov	lr, sl
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1a6>
 8000c9a:	4463      	add	r3, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e74d      	b.n	8000b3c <__udivmoddi4+0x148>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e70f      	b.n	8000ac8 <__udivmoddi4+0xd4>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	e730      	b.n	8000b10 <__udivmoddi4+0x11c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af02      	add	r7, sp, #8
 8000cba:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8000cbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cc0:	f00c fc92 	bl	800d5e8 <malloc>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <play_audio_file+0xe0>)
 8000cca:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <play_audio_file+0xe0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d058      	beq.n	8000d8a <play_audio_file+0xd6>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <play_audio_file+0xe0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f107 020f 	add.w	r2, r7, #15
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f002 fb8e 	bl	8003404 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <play_audio_file+0xe0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	2300      	movs	r3, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4828      	ldr	r0, [pc, #160]	@ (8000d98 <play_audio_file+0xe4>)
 8000cf8:	f003 feaa 	bl	8004a50 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000cfc:	e029      	b.n	8000d52 <play_audio_file+0x9e>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8000cfe:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <play_audio_file+0xe0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000d06:	f107 020f 	add.w	r2, r7, #15
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f002 fb79 	bl	8003404 <read_audio_file>
		while(flagDmaDAC == 0);
 8000d12:	bf00      	nop
 8000d14:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <play_audio_file+0xe8>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f083 0301 	eor.w	r3, r3, #1
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f7      	bne.n	8000d14 <play_audio_file+0x60>
		flagDmaDAC = 0;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <play_audio_file+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <play_audio_file+0xe0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f107 020f 	add.w	r2, r7, #15
 8000d32:	4619      	mov	r1, r3
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f002 fb65 	bl	8003404 <read_audio_file>
		while(flagDmaDAC == 0);
 8000d3a:	bf00      	nop
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <play_audio_file+0xe8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f7      	bne.n	8000d3c <play_audio_file+0x88>
		flagDmaDAC = 0;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <play_audio_file+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	f083 0301 	eor.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1cf      	bne.n	8000cfe <play_audio_file+0x4a>

	}

	while(flagDmaDAC == 0);
 8000d5e:	bf00      	nop
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <play_audio_file+0xe8>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	f083 0301 	eor.w	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f7      	bne.n	8000d60 <play_audio_file+0xac>
	flagDmaDAC = 0;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <play_audio_file+0xe8>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000d76:	2100      	movs	r1, #0
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <play_audio_file+0xe4>)
 8000d7a:	f003 ff2b 	bl	8004bd4 <HAL_DAC_Stop_DMA>

	free(buffer);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <play_audio_file+0xe0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00c fc38 	bl	800d5f8 <free>
 8000d88:	e000      	b.n	8000d8c <play_audio_file+0xd8>
		return;
 8000d8a:	bf00      	nop

}
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000084 	.word	0x20000084
 8000d98:	2000008c 	.word	0x2000008c
 8000d9c:	2000032e 	.word	0x2000032e

08000da0 <vibrato_filter>:


static void vibrato_filter(int8_t delay)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	 * FlagBuffer ne spune in ce buffer ne aflam in momentul prelucrarii 0 sau 1
	 * (prima jumatate sau a doua)
	 * Output: Void
	 */

	int16_t index = (int16_t)((delay*1000)/22.67);
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb60 	bl	800047c <__aeabi_i2d>
 8000dbc:	a340      	add	r3, pc, #256	@ (adr r3, 8000ec0 <vibrato_filter+0x120>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fcef 	bl	80007a4 <__aeabi_ddiv>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fdd1 	bl	8000974 <__aeabi_d2iz>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	817b      	strh	r3, [r7, #10]

	if(flagBuffer == 0)
 8000dd6:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <vibrato_filter+0x118>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	f083 0301 	eor.w	r3, r3, #1
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d039      	beq.n	8000e58 <vibrato_filter+0xb8>
	{
		/*Prima jumatate a bufferului*/

		for(int16_t i=1023; i>=0; i--)
 8000de4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000de8:	81fb      	strh	r3, [r7, #14]
 8000dea:	e030      	b.n	8000e4e <vibrato_filter+0xae>
		{

			if(i<index)
 8000dec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000df0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	da13      	bge.n	8000e20 <vibrato_filter+0x80>
			{
				/*Pentru cazul intarzierii*/

				buffer[i] = buffer[2047-(index-i)+1];
 8000df8:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <vibrato_filter+0x11c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000e00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	441a      	add	r2, r3
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <vibrato_filter+0x11c>)
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	440b      	add	r3, r1
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
				continue;
 8000e1e:	e010      	b.n	8000e42 <vibrato_filter+0xa2>
			}


			buffer[i] = buffer[i-index];
 8000e20:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <vibrato_filter+0x11c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000e28:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e2c:	1acb      	subs	r3, r1, r3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	441a      	add	r2, r3
 8000e32:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <vibrato_filter+0x11c>)
 8000e34:	6819      	ldr	r1, [r3, #0]
 8000e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	601a      	str	r2, [r3, #0]
		for(int16_t i=1023; i>=0; i--)
 8000e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	81fb      	strh	r3, [r7, #14]
 8000e4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	daca      	bge.n	8000dec <vibrato_filter+0x4c>
 8000e56:	e019      	b.n	8000e8c <vibrato_filter+0xec>

	else
	{
		/*A doua jumatate a bufferului*/

		for(uint16_t i=2047; i>=1024; i--)
 8000e58:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e5c:	81bb      	strh	r3, [r7, #12]
 8000e5e:	e011      	b.n	8000e84 <vibrato_filter+0xe4>
		{

			buffer[i] = buffer[i-index];
 8000e60:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <vibrato_filter+0x11c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	89b9      	ldrh	r1, [r7, #12]
 8000e66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e6a:	1acb      	subs	r3, r1, r3
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	441a      	add	r2, r3
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <vibrato_filter+0x11c>)
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	89bb      	ldrh	r3, [r7, #12]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	440b      	add	r3, r1
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	601a      	str	r2, [r3, #0]
		for(uint16_t i=2047; i>=1024; i--)
 8000e7e:	89bb      	ldrh	r3, [r7, #12]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	81bb      	strh	r3, [r7, #12]
 8000e84:	89bb      	ldrh	r3, [r7, #12]
 8000e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e8a:	d2e9      	bcs.n	8000e60 <vibrato_filter+0xc0>
		}

	}


	flagBuffer = !flagBuffer; /*schimbam jumatatea bufferului*/
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <vibrato_filter+0x118>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf14      	ite	ne
 8000e94:	2301      	movne	r3, #1
 8000e96:	2300      	moveq	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f083 0301 	eor.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <vibrato_filter+0x118>)
 8000ea8:	701a      	strb	r2, [r3, #0]


}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	20000088 	.word	0x20000088
 8000ebc:	20000084 	.word	0x20000084
 8000ec0:	1eb851ec 	.word	0x1eb851ec
 8000ec4:	4036ab85 	.word	0x4036ab85

08000ec8 <play_audio_file_vibrato>:



void play_audio_file_vibrato(char *path)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	6078      	str	r0, [r7, #4]
	 * Functie pentru redarea unui fisier audio din cardul cu efect vibrato SD.
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8000ed0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ed4:	f00c fb88 	bl	800d5e8 <malloc>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b77      	ldr	r3, [pc, #476]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 8000ede:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	72fb      	strb	r3, [r7, #11]
	flagBuffer = 1; /*Incepem din a doua jumatate*/
 8000ee4:	4b76      	ldr	r3, [pc, #472]	@ (80010c0 <play_audio_file_vibrato+0x1f8>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]

	int8_t delay = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 0; /*determinam intervalul de timp cand schimbam delayul -> la fiecare 8*1024 esantioane*/
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73bb      	strb	r3, [r7, #14]
	int8_t delayArray[] = {10,12,14};
 8000ef2:	4a74      	ldr	r2, [pc, #464]	@ (80010c4 <play_audio_file_vibrato+0x1fc>)
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	4611      	mov	r1, r2
 8000efc:	8019      	strh	r1, [r3, #0]
 8000efe:	3302      	adds	r3, #2
 8000f00:	0c12      	lsrs	r2, r2, #16
 8000f02:	701a      	strb	r2, [r3, #0]
	uint8_t delayIndex = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	737b      	strb	r3, [r7, #13]
	bool flagDx = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	733b      	strb	r3, [r7, #12]

	if(buffer == NULL)
 8000f0c:	4b6b      	ldr	r3, [pc, #428]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ce 	beq.w	80010b2 <play_audio_file_vibrato+0x1ea>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8000f16:	4b69      	ldr	r3, [pc, #420]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f107 020b 	add.w	r2, r7, #11
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f002 fa6f 	bl	8003404 <read_audio_file>
	k = (k+1) % 8;
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	425a      	negs	r2, r3
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	f002 0207 	and.w	r2, r2, #7
 8000f34:	bf58      	it	pl
 8000f36:	4253      	negpl	r3, r2
 8000f38:	73bb      	strb	r3, [r7, #14]

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8000f3a:	4b60      	ldr	r3, [pc, #384]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f46:	2100      	movs	r1, #0
 8000f48:	485f      	ldr	r0, [pc, #380]	@ (80010c8 <play_audio_file_vibrato+0x200>)
 8000f4a:	f003 fd81 	bl	8004a50 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000f4e:	e093      	b.n	8001078 <play_audio_file_vibrato+0x1b0>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8000f50:	4b5a      	ldr	r3, [pc, #360]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f58:	f107 020b 	add.w	r2, r7, #11
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f002 fa50 	bl	8003404 <read_audio_file>
		vibrato_filter(delay);
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff19 	bl	8000da0 <vibrato_filter>
		k = (k+1) % 8;
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	3301      	adds	r3, #1
 8000f72:	425a      	negs	r2, r3
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	f002 0207 	and.w	r2, r2, #7
 8000f7c:	bf58      	it	pl
 8000f7e:	4253      	negpl	r3, r2
 8000f80:	73bb      	strb	r3, [r7, #14]

		if(k == 0)
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d122      	bne.n	8000fce <play_audio_file_vibrato+0x106>
		{
			/*
			 * Schimbam valaorea delay-ului variational
			 */

			if(flagDx == 0)
 8000f88:	7b3b      	ldrb	r3, [r7, #12]
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <play_audio_file_vibrato+0xe0>
			{
				delay = delayArray[++delayIndex];
 8000f94:	7b7b      	ldrb	r3, [r7, #13]
 8000f96:	3301      	adds	r3, #1
 8000f98:	737b      	strb	r3, [r7, #13]
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	3310      	adds	r3, #16
 8000f9e:	443b      	add	r3, r7
 8000fa0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e008      	b.n	8000fba <play_audio_file_vibrato+0xf2>
			}

			else
			{
				delay = delayArray[--delayIndex];
 8000fa8:	7b7b      	ldrb	r3, [r7, #13]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	737b      	strb	r3, [r7, #13]
 8000fae:	7b7b      	ldrb	r3, [r7, #13]
 8000fb0:	3310      	adds	r3, #16
 8000fb2:	443b      	add	r3, r7
 8000fb4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fb8:	73fb      	strb	r3, [r7, #15]
			}

			if(delayIndex == 2)
 8000fba:	7b7b      	ldrb	r3, [r7, #13]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d101      	bne.n	8000fc4 <play_audio_file_vibrato+0xfc>
			{
				flagDx = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	733b      	strb	r3, [r7, #12]
			}

			if(delayIndex == 0)
 8000fc4:	7b7b      	ldrb	r3, [r7, #13]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <play_audio_file_vibrato+0x106>
			{
				flagDx = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	733b      	strb	r3, [r7, #12]
			}

		}

		while(flagDmaDAC == 0);
 8000fce:	bf00      	nop
 8000fd0:	4b3e      	ldr	r3, [pc, #248]	@ (80010cc <play_audio_file_vibrato+0x204>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f083 0301 	eor.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f7      	bne.n	8000fd0 <play_audio_file_vibrato+0x108>
		flagDmaDAC = 0;
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80010cc <play_audio_file_vibrato+0x204>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]

		read_audio_file(path, buffer, &flagAudioDone);
 8000fe6:	4b35      	ldr	r3, [pc, #212]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f107 020b 	add.w	r2, r7, #11
 8000fee:	4619      	mov	r1, r3
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 fa07 	bl	8003404 <read_audio_file>
		vibrato_filter(delay);
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fed0 	bl	8000da0 <vibrato_filter>
		k = (k+1) % 8;
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	3301      	adds	r3, #1
 8001004:	425a      	negs	r2, r3
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	f002 0207 	and.w	r2, r2, #7
 800100e:	bf58      	it	pl
 8001010:	4253      	negpl	r3, r2
 8001012:	73bb      	strb	r3, [r7, #14]

		if(k == 0)
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d122      	bne.n	8001060 <play_audio_file_vibrato+0x198>
		{
			/*
			 * Schimbam valaorea delay-ului variational
			 */

			if(flagDx == 0)
 800101a:	7b3b      	ldrb	r3, [r7, #12]
 800101c:	f083 0301 	eor.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d009      	beq.n	800103a <play_audio_file_vibrato+0x172>
			{
				delay = delayArray[++delayIndex];
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	3301      	adds	r3, #1
 800102a:	737b      	strb	r3, [r7, #13]
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	3310      	adds	r3, #16
 8001030:	443b      	add	r3, r7
 8001032:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e008      	b.n	800104c <play_audio_file_vibrato+0x184>
			}

			else
			{
				delay = delayArray[--delayIndex];
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	3b01      	subs	r3, #1
 800103e:	737b      	strb	r3, [r7, #13]
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	3310      	adds	r3, #16
 8001044:	443b      	add	r3, r7
 8001046:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800104a:	73fb      	strb	r3, [r7, #15]
			}

			if(delayIndex == 2)
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d101      	bne.n	8001056 <play_audio_file_vibrato+0x18e>
			{
				flagDx = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	733b      	strb	r3, [r7, #12]
			}

			if(delayIndex == 0)
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <play_audio_file_vibrato+0x198>
			{
				flagDx = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	733b      	strb	r3, [r7, #12]
			}

		}

		while(flagDmaDAC == 0);
 8001060:	bf00      	nop
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <play_audio_file_vibrato+0x204>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	f083 0301 	eor.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f7      	bne.n	8001062 <play_audio_file_vibrato+0x19a>
		flagDmaDAC = 0;
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <play_audio_file_vibrato+0x204>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	f47f af65 	bne.w	8000f50 <play_audio_file_vibrato+0x88>


	}

	while(flagDmaDAC == 0);
 8001086:	bf00      	nop
 8001088:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <play_audio_file_vibrato+0x204>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	f083 0301 	eor.w	r3, r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1f7      	bne.n	8001088 <play_audio_file_vibrato+0x1c0>
	flagDmaDAC = 0;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <play_audio_file_vibrato+0x204>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800109e:	2100      	movs	r1, #0
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <play_audio_file_vibrato+0x200>)
 80010a2:	f003 fd97 	bl	8004bd4 <HAL_DAC_Stop_DMA>

	free(buffer);
 80010a6:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <play_audio_file_vibrato+0x1f4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f00c faa4 	bl	800d5f8 <free>
 80010b0:	e000      	b.n	80010b4 <play_audio_file_vibrato+0x1ec>
		return;
 80010b2:	bf00      	nop

}
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000084 	.word	0x20000084
 80010c0:	20000088 	.word	0x20000088
 80010c4:	0800d950 	.word	0x0800d950
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	2000032e 	.word	0x2000032e

080010d0 <echo_filter>:


static void echo_filter(int8_t delay, float alpha)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	ed87 0a00 	vstr	s0, [r7]
 80010dc:	71fb      	strb	r3, [r7, #7]
	 * 		  coeficientul de atenuare alpha
	 * 		  alpha = [0,1]
	 * Output: void
	 */

	int16_t index = (int16_t)((delay*1000)/22.67); /*Impartim delay-ul la timpul necesar redarii unui esantion*/
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff f9c6 	bl	800047c <__aeabi_i2d>
 80010f0:	a35b      	add	r3, pc, #364	@ (adr r3, 8001260 <echo_filter+0x190>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fb55 	bl	80007a4 <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fc37 	bl	8000974 <__aeabi_d2iz>
 8001106:	4603      	mov	r3, r0
 8001108:	817b      	strh	r3, [r7, #10]
												   /*index va fi valoarea delay-ului in numar de esantioane*/


	if(flagBuffer == 0)
 800110a:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <echo_filter+0x188>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f083 0301 	eor.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d059      	beq.n	80011cc <echo_filter+0xfc>
	{
		/*Prima jumatate a bufferului*/

		for(int16_t i=1023; i>=0; i--)
 8001118:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800111c:	81fb      	strh	r3, [r7, #14]
 800111e:	e050      	b.n	80011c2 <echo_filter+0xf2>
		{

			if(i<index)
 8001120:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001124:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001128:	429a      	cmp	r2, r3
 800112a:	da23      	bge.n	8001174 <echo_filter+0xa4>
			{

				buffer[i] += (uint32_t)alpha*buffer[2047-(index-i)+1];
 800112c:	4b4b      	ldr	r3, [pc, #300]	@ (800125c <echo_filter+0x18c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	edd7 7a00 	vldr	s15, [r7]
 800113e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001142:	ee17 4a90 	vmov	r4, s15
 8001146:	4b45      	ldr	r3, [pc, #276]	@ (800125c <echo_filter+0x18c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800114e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001152:	1ac3      	subs	r3, r0, r3
 8001154:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	fb03 f204 	mul.w	r2, r3, r4
 8001162:	4b3e      	ldr	r3, [pc, #248]	@ (800125c <echo_filter+0x18c>)
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4403      	add	r3, r0
 800116e:	440a      	add	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
				continue;
 8001172:	e020      	b.n	80011b6 <echo_filter+0xe6>
			}

			buffer[i] += (uint32_t)alpha*buffer[i-index];
 8001174:	4b39      	ldr	r3, [pc, #228]	@ (800125c <echo_filter+0x18c>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	edd7 7a00 	vldr	s15, [r7]
 8001186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800118a:	ee17 4a90 	vmov	r4, s15
 800118e:	4b33      	ldr	r3, [pc, #204]	@ (800125c <echo_filter+0x18c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001196:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800119a:	1ac3      	subs	r3, r0, r3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	fb03 f204 	mul.w	r2, r3, r4
 80011a6:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <echo_filter+0x18c>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4403      	add	r3, r0
 80011b2:	440a      	add	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
		for(int16_t i=1023; i>=0; i--)
 80011b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b01      	subs	r3, #1
 80011be:	b29b      	uxth	r3, r3
 80011c0:	81fb      	strh	r3, [r7, #14]
 80011c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	daaa      	bge.n	8001120 <echo_filter+0x50>
 80011ca:	e02f      	b.n	800122c <echo_filter+0x15c>

	else
	{
		/*A doua jumatate a bufferului*/

		for(int16_t i=2047; i>=1024; i--)
 80011cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011d0:	81bb      	strh	r3, [r7, #12]
 80011d2:	e026      	b.n	8001222 <echo_filter+0x152>
		{

			buffer[i] += (uint32_t)alpha*buffer[i-index];
 80011d4:	4b21      	ldr	r3, [pc, #132]	@ (800125c <echo_filter+0x18c>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	6819      	ldr	r1, [r3, #0]
 80011e2:	edd7 7a00 	vldr	s15, [r7]
 80011e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ea:	ee17 4a90 	vmov	r4, s15
 80011ee:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <echo_filter+0x18c>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80011f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011fa:	1ac3      	subs	r3, r0, r3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	fb03 f204 	mul.w	r2, r3, r4
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <echo_filter+0x18c>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	4403      	add	r3, r0
 8001212:	440a      	add	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
		for(int16_t i=2047; i>=1024; i--)
 8001216:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	81bb      	strh	r3, [r7, #12]
 8001222:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800122a:	dad3      	bge.n	80011d4 <echo_filter+0x104>
		}

	}


	flagBuffer = !flagBuffer; /*schimbam jumatatea bufferului*/
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <echo_filter+0x188>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <echo_filter+0x188>)
 8001248:	701a      	strb	r2, [r3, #0]


}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	f3af 8000 	nop.w
 8001258:	20000088 	.word	0x20000088
 800125c:	20000084 	.word	0x20000084
 8001260:	1eb851ec 	.word	0x1eb851ec
 8001264:	4036ab85 	.word	0x4036ab85

08001268 <play_audio_file_echo>:


void play_audio_file_echo(char *path, int8_t delay, float alpha)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af02      	add	r7, sp, #8
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	460b      	mov	r3, r1
 8001272:	ed87 0a01 	vstr	s0, [r7, #4]
 8001276:	72fb      	strb	r3, [r7, #11]
	 * Functie pentru redarea unui fisier audio din cardul cu efect ecou SD.
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8001278:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800127c:	f00c f9b4 	bl	800d5e8 <malloc>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <play_audio_file_echo+0x108>)
 8001286:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	75fb      	strb	r3, [r7, #23]
	flagBuffer = 1; /*Incepem din a doua jumatate*/
 800128c:	4b39      	ldr	r3, [pc, #228]	@ (8001374 <play_audio_file_echo+0x10c>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]


	if(buffer == NULL)
 8001292:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <play_audio_file_echo+0x108>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d066      	beq.n	8001368 <play_audio_file_echo+0x100>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <play_audio_file_echo+0x108>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f107 0217 	add.w	r2, r7, #23
 80012a2:	4619      	mov	r1, r3
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f002 f8ad 	bl	8003404 <read_audio_file>

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80012aa:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <play_audio_file_echo+0x108>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012b6:	2100      	movs	r1, #0
 80012b8:	482f      	ldr	r0, [pc, #188]	@ (8001378 <play_audio_file_echo+0x110>)
 80012ba:	f003 fbc9 	bl	8004a50 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 80012be:	e037      	b.n	8001330 <play_audio_file_echo+0xc8>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 80012c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <play_audio_file_echo+0x108>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c8:	f107 0217 	add.w	r2, r7, #23
 80012cc:	4619      	mov	r1, r3
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f002 f898 	bl	8003404 <read_audio_file>
		echo_filter(delay, alpha);
 80012d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fef7 	bl	80010d0 <echo_filter>

		while(flagDmaDAC == 0);
 80012e2:	bf00      	nop
 80012e4:	4b25      	ldr	r3, [pc, #148]	@ (800137c <play_audio_file_echo+0x114>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f7      	bne.n	80012e4 <play_audio_file_echo+0x7c>
		flagDmaDAC = 0;
 80012f4:	4b21      	ldr	r3, [pc, #132]	@ (800137c <play_audio_file_echo+0x114>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]

		read_audio_file(path, buffer, &flagAudioDone);
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <play_audio_file_echo+0x108>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f107 0217 	add.w	r2, r7, #23
 8001302:	4619      	mov	r1, r3
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f002 f87d 	bl	8003404 <read_audio_file>
		echo_filter(delay, alpha);
 800130a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800130e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fedc 	bl	80010d0 <echo_filter>

		while(flagDmaDAC == 0);
 8001318:	bf00      	nop
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <play_audio_file_echo+0x114>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f083 0301 	eor.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f7      	bne.n	800131a <play_audio_file_echo+0xb2>
		flagDmaDAC = 0;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <play_audio_file_echo+0x114>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	f083 0301 	eor.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1c1      	bne.n	80012c0 <play_audio_file_echo+0x58>
	}

	while(flagDmaDAC == 0);
 800133c:	bf00      	nop
 800133e:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <play_audio_file_echo+0x114>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f7      	bne.n	800133e <play_audio_file_echo+0xd6>
	flagDmaDAC = 0;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <play_audio_file_echo+0x114>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001354:	2100      	movs	r1, #0
 8001356:	4808      	ldr	r0, [pc, #32]	@ (8001378 <play_audio_file_echo+0x110>)
 8001358:	f003 fc3c 	bl	8004bd4 <HAL_DAC_Stop_DMA>

	free(buffer);
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <play_audio_file_echo+0x108>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f00c f949 	bl	800d5f8 <free>
 8001366:	e000      	b.n	800136a <play_audio_file_echo+0x102>
		return;
 8001368:	bf00      	nop

}
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000084 	.word	0x20000084
 8001374:	20000088 	.word	0x20000088
 8001378:	2000008c 	.word	0x2000008c
 800137c:	2000032e 	.word	0x2000032e

08001380 <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	0adb      	lsrs	r3, r3, #11
 8001390:	b29b      	uxth	r3, r3
 8001392:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	115b      	asrs	r3, r3, #5
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800139e:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	4613      	mov	r3, r2
 80013ae:	019b      	lsls	r3, r3, #6
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	4a16      	ldr	r2, [pc, #88]	@ (800140c <convert_color_16_to_18+0x8c>)
 80013b4:	fb82 1203 	smull	r1, r2, r2, r3
 80013b8:	441a      	add	r2, r3
 80013ba:	1112      	asrs	r2, r2, #4
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 80013cc:	7b7a      	ldrb	r2, [r7, #13]
 80013ce:	4613      	mov	r3, r2
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <convert_color_16_to_18+0x8c>)
 80013d6:	fb82 1203 	smull	r1, r2, r2, r3
 80013da:	441a      	add	r2, r3
 80013dc:	1112      	asrs	r2, r2, #4
 80013de:	17db      	asrs	r3, r3, #31
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3302      	adds	r3, #2
 80013fa:	7b7a      	ldrb	r2, [r7, #13]
 80013fc:	701a      	strb	r2, [r3, #0]

}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	84210843 	.word	0x84210843

08001410 <write_color>:


void write_color(uint16_t color)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 800141a:	f107 020c 	add.w	r2, r7, #12
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ffac 	bl	8001380 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	2203      	movs	r2, #3
 8001432:	4803      	ldr	r0, [pc, #12]	@ (8001440 <write_color+0x30>)
 8001434:	f005 ff83 	bl	800733e <HAL_SPI_Transmit>


}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000184 	.word	0x20000184

08001444 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	80fb      	strh	r3, [r7, #6]
 800144e:	460b      	mov	r3, r1
 8001450:	80bb      	strh	r3, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	88b9      	ldrh	r1, [r7, #4]
 800145c:	88f8      	ldrh	r0, [r7, #6]
 800145e:	2477      	movs	r4, #119	@ 0x77
 8001460:	9400      	str	r4, [sp, #0]
 8001462:	f001 f907 	bl	8002674 <set_adress_window>

	DC_DATA();
 8001466:	2201      	movs	r2, #1
 8001468:	2108      	movs	r1, #8
 800146a:	480a      	ldr	r0, [pc, #40]	@ (8001494 <draw_pixel+0x50>)
 800146c:	f004 fa94 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 8001470:	2200      	movs	r2, #0
 8001472:	2110      	movs	r1, #16
 8001474:	4807      	ldr	r0, [pc, #28]	@ (8001494 <draw_pixel+0x50>)
 8001476:	f004 fa8f 	bl	8005998 <HAL_GPIO_WritePin>

	write_color(color);
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ffc7 	bl	8001410 <write_color>

	CS_D();
 8001482:	2201      	movs	r2, #1
 8001484:	2110      	movs	r1, #16
 8001486:	4803      	ldr	r0, [pc, #12]	@ (8001494 <draw_pixel+0x50>)
 8001488:	f004 fa86 	bl	8005998 <HAL_GPIO_WritePin>

}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	40020c00 	.word	0x40020c00

08001498 <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b085      	sub	sp, #20
 800149c:	af02      	add	r7, sp, #8
 800149e:	4603      	mov	r3, r0
 80014a0:	603a      	str	r2, [r7, #0]
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	460b      	mov	r3, r1
 80014a6:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 80014a8:	88bb      	ldrh	r3, [r7, #4]
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	88b9      	ldrh	r1, [r7, #4]
 80014ae:	88f8      	ldrh	r0, [r7, #6]
 80014b0:	2477      	movs	r4, #119	@ 0x77
 80014b2:	9400      	str	r4, [sp, #0]
 80014b4:	f001 f8de 	bl	8002674 <set_adress_window>

	DC_DATA();
 80014b8:	2201      	movs	r2, #1
 80014ba:	2108      	movs	r1, #8
 80014bc:	480b      	ldr	r0, [pc, #44]	@ (80014ec <draw_pixel_data+0x54>)
 80014be:	f004 fa6b 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 80014c2:	2200      	movs	r2, #0
 80014c4:	2110      	movs	r1, #16
 80014c6:	4809      	ldr	r0, [pc, #36]	@ (80014ec <draw_pixel_data+0x54>)
 80014c8:	f004 fa66 	bl	8005998 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	2203      	movs	r2, #3
 80014d2:	6839      	ldr	r1, [r7, #0]
 80014d4:	4806      	ldr	r0, [pc, #24]	@ (80014f0 <draw_pixel_data+0x58>)
 80014d6:	f005 ff32 	bl	800733e <HAL_SPI_Transmit>

	CS_D();
 80014da:	2201      	movs	r2, #1
 80014dc:	2110      	movs	r1, #16
 80014de:	4803      	ldr	r0, [pc, #12]	@ (80014ec <draw_pixel_data+0x54>)
 80014e0:	f004 fa5a 	bl	8005998 <HAL_GPIO_WritePin>

}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd90      	pop	{r4, r7, pc}
 80014ec:	40020c00 	.word	0x40020c00
 80014f0:	20000184 	.word	0x20000184

080014f4 <fill_screen1>:



void fill_screen1(uint16_t color)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff3a 	bl	8001380 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 800150c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8001510:	f00c f86a 	bl	800d5e8 <malloc>
 8001514:	4603      	mov	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8001518:	2377      	movs	r3, #119	@ 0x77
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	f240 13df 	movw	r3, #479	@ 0x1df
 8001520:	f240 123f 	movw	r2, #319	@ 0x13f
 8001524:	2100      	movs	r1, #0
 8001526:	2000      	movs	r0, #0
 8001528:	f001 f8a4 	bl	8002674 <set_adress_window>

	DC_DATA();
 800152c:	2201      	movs	r2, #1
 800152e:	2108      	movs	r1, #8
 8001530:	481e      	ldr	r0, [pc, #120]	@ (80015ac <fill_screen1+0xb8>)
 8001532:	f004 fa31 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 8001536:	2200      	movs	r2, #0
 8001538:	2110      	movs	r1, #16
 800153a:	481c      	ldr	r0, [pc, #112]	@ (80015ac <fill_screen1+0xb8>)
 800153c:	f004 fa2c 	bl	8005998 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8001540:	2300      	movs	r3, #0
 8001542:	82fb      	strh	r3, [r7, #22]
 8001544:	e00f      	b.n	8001566 <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 8001546:	8afa      	ldrh	r2, [r7, #22]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4413      	add	r3, r2
 8001552:	461a      	mov	r2, r3
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	8819      	ldrh	r1, [r3, #0]
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	8011      	strh	r1, [r2, #0]
 800155e:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 8001560:	8afb      	ldrh	r3, [r7, #22]
 8001562:	3301      	adds	r3, #1
 8001564:	82fb      	strh	r3, [r7, #22]
 8001566:	8afb      	ldrh	r3, [r7, #22]
 8001568:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800156c:	d3eb      	bcc.n	8001546 <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 800156e:	2300      	movs	r3, #0
 8001570:	82bb      	strh	r3, [r7, #20]
 8001572:	e00a      	b.n	800158a <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
 8001578:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <fill_screen1+0xbc>)
 8001580:	f005 fedd 	bl	800733e <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8001584:	8abb      	ldrh	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	82bb      	strh	r3, [r7, #20]
 800158a:	8abb      	ldrh	r3, [r7, #20]
 800158c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001590:	d3f0      	bcc.n	8001574 <fill_screen1+0x80>

	}

	free(line);
 8001592:	6938      	ldr	r0, [r7, #16]
 8001594:	f00c f830 	bl	800d5f8 <free>

	CS_D();
 8001598:	2201      	movs	r2, #1
 800159a:	2110      	movs	r1, #16
 800159c:	4803      	ldr	r0, [pc, #12]	@ (80015ac <fill_screen1+0xb8>)
 800159e:	f004 f9fb 	bl	8005998 <HAL_GPIO_WritePin>

}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	20000184 	.word	0x20000184

080015b4 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80015b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015b8:	b08f      	sub	sp, #60	@ 0x3c
 80015ba:	af02      	add	r7, sp, #8
 80015bc:	4603      	mov	r3, r0
 80015be:	80fb      	strh	r3, [r7, #6]
 80015c0:	466b      	mov	r3, sp
 80015c2:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80015c4:	2377      	movs	r3, #119	@ 0x77
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f240 13df 	movw	r3, #479	@ 0x1df
 80015cc:	f240 123f 	movw	r2, #319	@ 0x13f
 80015d0:	2100      	movs	r1, #0
 80015d2:	2000      	movs	r0, #0
 80015d4:	f001 f84e 	bl	8002674 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 80015d8:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 80015de:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 80015e2:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	0adb      	lsrs	r3, r3, #11
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	115b      	asrs	r3, r3, #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015f6:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f003 031f 	and.w	r3, r3, #31
 8001600:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8001602:	7ffa      	ldrb	r2, [r7, #31]
 8001604:	4613      	mov	r3, r2
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	4a4f      	ldr	r2, [pc, #316]	@ (8001748 <fill_screen2+0x194>)
 800160c:	fb82 1203 	smull	r1, r2, r2, r3
 8001610:	441a      	add	r2, r3
 8001612:	1112      	asrs	r2, r2, #4
 8001614:	17db      	asrs	r3, r3, #31
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800161a:	7fba      	ldrb	r2, [r7, #30]
 800161c:	4613      	mov	r3, r2
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <fill_screen2+0x198>)
 8001624:	fb82 1203 	smull	r1, r2, r2, r3
 8001628:	441a      	add	r2, r3
 800162a:	1152      	asrs	r2, r2, #5
 800162c:	17db      	asrs	r3, r3, #31
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 8001632:	7f7a      	ldrb	r2, [r7, #29]
 8001634:	4613      	mov	r3, r2
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <fill_screen2+0x194>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	441a      	add	r2, r3
 8001642:	1112      	asrs	r2, r2, #4
 8001644:	17db      	asrs	r3, r3, #31
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 800164a:	2201      	movs	r2, #1
 800164c:	2108      	movs	r1, #8
 800164e:	4840      	ldr	r0, [pc, #256]	@ (8001750 <fill_screen2+0x19c>)
 8001650:	f004 f9a2 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 8001654:	2200      	movs	r2, #0
 8001656:	2110      	movs	r1, #16
 8001658:	483d      	ldr	r0, [pc, #244]	@ (8001750 <fill_screen2+0x19c>)
 800165a:	f004 f99d 	bl	8005998 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 800165e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001660:	460b      	mov	r3, r1
 8001662:	3b01      	subs	r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	2300      	movs	r3, #0
 8001668:	4688      	mov	r8, r1
 800166a:	4699      	mov	r9, r3
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001678:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001680:	2300      	movs	r3, #0
 8001682:	460c      	mov	r4, r1
 8001684:	461d      	mov	r5, r3
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	00eb      	lsls	r3, r5, #3
 8001690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001694:	00e2      	lsls	r2, r4, #3
 8001696:	1dcb      	adds	r3, r1, #7
 8001698:	08db      	lsrs	r3, r3, #3
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	ebad 0d03 	sub.w	sp, sp, r3
 80016a0:	ab02      	add	r3, sp, #8
 80016a2:	3300      	adds	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016aa:	e011      	b.n	80016d0 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b0:	4413      	add	r3, r2
 80016b2:	7ffa      	ldrb	r2, [r7, #31]
 80016b4:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80016b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b8:	3301      	adds	r3, #1
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	7fb9      	ldrb	r1, [r7, #30]
 80016be:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	3302      	adds	r3, #2
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	7f79      	ldrb	r1, [r7, #29]
 80016c8:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 80016ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016cc:	3303      	adds	r3, #3
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3e9      	bcc.n	80016ac <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 80016d8:	6a3a      	ldr	r2, [r7, #32]
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <fill_screen2+0x1a0>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016f6:	e012      	b.n	800171e <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 80016f8:	bf00      	nop
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <fill_screen2+0x1a0>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0fa      	beq.n	80016fa <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <fill_screen2+0x1a0>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	6979      	ldr	r1, [r7, #20]
 8001712:	4811      	ldr	r0, [pc, #68]	@ (8001758 <fill_screen2+0x1a4>)
 8001714:	f006 fa1a 	bl	8007b4c <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8001718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171a:	3301      	adds	r3, #1
 800171c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800171e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3e8      	bcc.n	80016f8 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 8001726:	bf00      	nop
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <fill_screen2+0x1a0>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0fa      	beq.n	8001728 <fill_screen2+0x174>
	CS_D();
 8001732:	2201      	movs	r2, #1
 8001734:	2110      	movs	r1, #16
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <fill_screen2+0x19c>)
 8001738:	f004 f92e 	bl	8005998 <HAL_GPIO_WritePin>
 800173c:	46b5      	mov	sp, r6
}
 800173e:	bf00      	nop
 8001740:	3734      	adds	r7, #52	@ 0x34
 8001742:	46bd      	mov	sp, r7
 8001744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001748:	84210843 	.word	0x84210843
 800174c:	82082083 	.word	0x82082083
 8001750:	40020c00 	.word	0x40020c00
 8001754:	2000032c 	.word	0x2000032c
 8001758:	20000184 	.word	0x20000184

0800175c <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af02      	add	r7, sp, #8
 8001762:	4604      	mov	r4, r0
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4623      	mov	r3, r4
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	4603      	mov	r3, r0
 8001770:	80bb      	strh	r3, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
 8001776:	4613      	mov	r3, r2
 8001778:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 800177a:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <print_character+0x108>)
 800177c:	889a      	ldrh	r2, [r3, #4]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4413      	add	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29c      	uxth	r4, r3
 8001788:	4b36      	ldr	r3, [pc, #216]	@ (8001864 <print_character+0x108>)
 800178a:	88da      	ldrh	r2, [r3, #6]
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	88b9      	ldrh	r1, [r7, #4]
 8001798:	88f8      	ldrh	r0, [r7, #6]
 800179a:	2277      	movs	r2, #119	@ 0x77
 800179c:	9200      	str	r2, [sp, #0]
 800179e:	4622      	mov	r2, r4
 80017a0:	f000 ff68 	bl	8002674 <set_adress_window>

	uint16_t mask = 0x8000;
 80017a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017a8:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80017ae:	f107 020c 	add.w	r2, r7, #12
 80017b2:	883b      	ldrh	r3, [r7, #0]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fde2 	bl	8001380 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 80017bc:	f107 0208 	add.w	r2, r7, #8
 80017c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80017c2:	4611      	mov	r1, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fddb 	bl	8001380 <convert_color_16_to_18>


	DC_DATA();
 80017ca:	2201      	movs	r2, #1
 80017cc:	2108      	movs	r1, #8
 80017ce:	4826      	ldr	r0, [pc, #152]	@ (8001868 <print_character+0x10c>)
 80017d0:	f004 f8e2 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 80017d4:	2200      	movs	r2, #0
 80017d6:	2110      	movs	r1, #16
 80017d8:	4823      	ldr	r0, [pc, #140]	@ (8001868 <print_character+0x10c>)
 80017da:	f004 f8dd 	bl	8005998 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	e030      	b.n	8001846 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <print_character+0x108>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	3b20      	subs	r3, #32
 80017ec:	491d      	ldr	r1, [pc, #116]	@ (8001864 <print_character+0x108>)
 80017ee:	88c9      	ldrh	r1, [r1, #6]
 80017f0:	fb03 f101 	mul.w	r1, r3, r1
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	440b      	add	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8001800:	2300      	movs	r3, #0
 8001802:	75bb      	strb	r3, [r7, #22]
 8001804:	e016      	b.n	8001834 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8001806:	8a7a      	ldrh	r2, [r7, #18]
 8001808:	7dbb      	ldrb	r3, [r7, #22]
 800180a:	409a      	lsls	r2, r3
 800180c:	8abb      	ldrh	r3, [r7, #20]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2103      	movs	r1, #3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fd92 	bl	8002344 <LCD_send_data_multi>
 8001820:	e005      	b.n	800182e <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2103      	movs	r1, #3
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd8b 	bl	8002344 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 800182e:	7dbb      	ldrb	r3, [r7, #22]
 8001830:	3301      	adds	r3, #1
 8001832:	75bb      	strb	r3, [r7, #22]
 8001834:	7dbb      	ldrb	r3, [r7, #22]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <print_character+0x108>)
 800183a:	889b      	ldrh	r3, [r3, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3e2      	bcc.n	8001806 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	3301      	adds	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <print_character+0x108>)
 800184c:	88db      	ldrh	r3, [r3, #6]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3c8      	bcc.n	80017e4 <print_character+0x88>
			}
		}
	}

	CS_D();
 8001852:	2201      	movs	r2, #1
 8001854:	2110      	movs	r1, #16
 8001856:	4804      	ldr	r0, [pc, #16]	@ (8001868 <print_character+0x10c>)
 8001858:	f004 f89e 	bl	8005998 <HAL_GPIO_WritePin>

}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd90      	pop	{r4, r7, pc}
 8001864:	20000000 	.word	0x20000000
 8001868:	40020c00 	.word	0x40020c00

0800186c <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 800186c:	b590      	push	{r4, r7, lr}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af02      	add	r7, sp, #8
 8001872:	60ba      	str	r2, [r7, #8]
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	81fb      	strh	r3, [r7, #14]
 800187a:	460b      	mov	r3, r1
 800187c:	81bb      	strh	r3, [r7, #12]
 800187e:	4613      	mov	r3, r2
 8001880:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8001886:	e027      	b.n	80018d8 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8001888:	89fb      	ldrh	r3, [r7, #14]
 800188a:	4a19      	ldr	r2, [pc, #100]	@ (80018f0 <print_string+0x84>)
 800188c:	8892      	ldrh	r2, [r2, #4]
 800188e:	4413      	add	r3, r2
 8001890:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001894:	dd07      	ble.n	80018a6 <print_string+0x3a>
		{
			x = font.width;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <print_string+0x84>)
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <print_string+0x84>)
 800189e:	88da      	ldrh	r2, [r3, #6]
 80018a0:	89bb      	ldrh	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <print_string+0x84>)
 80018aa:	88d2      	ldrh	r2, [r2, #6]
 80018ac:	4413      	add	r3, r2
 80018ae:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80018b2:	dc18      	bgt.n	80018e6 <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 80018ba:	89b9      	ldrh	r1, [r7, #12]
 80018bc:	89f8      	ldrh	r0, [r7, #14]
 80018be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4623      	mov	r3, r4
 80018c4:	f7ff ff4a 	bl	800175c <print_character>
		string++;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	3301      	adds	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <print_string+0x84>)
 80018d0:	889a      	ldrh	r2, [r3, #4]
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	4413      	add	r3, r2
 80018d6:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4413      	add	r3, r2
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d3d1      	bcc.n	8001888 <print_string+0x1c>
 80018e4:	e000      	b.n	80018e8 <print_string+0x7c>
			return;
 80018e6:	bf00      	nop
	}

}
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000000 	.word	0x20000000

080018f4 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	80fb      	strh	r3, [r7, #6]
 8001906:	4603      	mov	r3, r0
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4413      	add	r3, r2
 8001918:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	88b9      	ldrh	r1, [r7, #4]
 8001924:	88f8      	ldrh	r0, [r7, #6]
 8001926:	2477      	movs	r4, #119	@ 0x77
 8001928:	9400      	str	r4, [sp, #0]
 800192a:	f000 fea3 	bl	8002674 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800192e:	f107 0208 	add.w	r2, r7, #8
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fd22 	bl	8001380 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 800193c:	2300      	movs	r3, #0
 800193e:	81fb      	strh	r3, [r7, #14]
 8001940:	e008      	b.n	8001954 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2103      	movs	r1, #3
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fcfb 	bl	8002344 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 800194e:	89fb      	ldrh	r3, [r7, #14]
 8001950:	3301      	adds	r3, #1
 8001952:	81fb      	strh	r3, [r7, #14]
 8001954:	89fa      	ldrh	r2, [r7, #14]
 8001956:	8879      	ldrh	r1, [r7, #2]
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	1acb      	subs	r3, r1, r3
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <draw_horizontal_line+0x4e>
	}


}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}

0800196a <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 800196a:	b590      	push	{r4, r7, lr}
 800196c:	b087      	sub	sp, #28
 800196e:	af02      	add	r7, sp, #8
 8001970:	4604      	mov	r4, r0
 8001972:	4608      	mov	r0, r1
 8001974:	4611      	mov	r1, r2
 8001976:	461a      	mov	r2, r3
 8001978:	4623      	mov	r3, r4
 800197a:	80fb      	strh	r3, [r7, #6]
 800197c:	4603      	mov	r3, r0
 800197e:	80bb      	strh	r3, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	807b      	strh	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	4413      	add	r3, r2
 800198e:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	3b01      	subs	r3, #1
 8001994:	b29b      	uxth	r3, r3
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	88b9      	ldrh	r1, [r7, #4]
 800199a:	88f8      	ldrh	r0, [r7, #6]
 800199c:	2477      	movs	r4, #119	@ 0x77
 800199e:	9400      	str	r4, [sp, #0]
 80019a0:	f000 fe68 	bl	8002674 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 80019a4:	f107 0208 	add.w	r2, r7, #8
 80019a8:	883b      	ldrh	r3, [r7, #0]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fce7 	bl	8001380 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	81fb      	strh	r3, [r7, #14]
 80019b6:	e008      	b.n	80019ca <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 80019b8:	f107 0308 	add.w	r3, r7, #8
 80019bc:	2103      	movs	r1, #3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fcc0 	bl	8002344 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 80019c4:	89fb      	ldrh	r3, [r7, #14]
 80019c6:	3301      	adds	r3, #1
 80019c8:	81fb      	strh	r3, [r7, #14]
 80019ca:	89fa      	ldrh	r2, [r7, #14]
 80019cc:	8879      	ldrh	r1, [r7, #2]
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	1acb      	subs	r3, r1, r3
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbf0      	blt.n	80019b8 <draw_vertical_line+0x4e>
	}


}
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd90      	pop	{r4, r7, pc}

080019e0 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	4604      	mov	r4, r0
 80019e8:	4608      	mov	r0, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	461a      	mov	r2, r3
 80019ee:	4623      	mov	r3, r4
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	4603      	mov	r3, r0
 80019f4:	80bb      	strh	r3, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	807b      	strh	r3, [r7, #2]
 80019fa:	4613      	mov	r3, r2
 80019fc:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	883b      	ldrh	r3, [r7, #0]
 8001a02:	fb12 f303 	smulbb	r3, r2, r3
 8001a06:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8001a08:	f107 020c 	add.w	r2, r7, #12
 8001a0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fcb5 	bl	8001380 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8001a16:	8aba      	ldrh	r2, [r7, #20]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00b fde2 	bl	800d5e8 <malloc>
 8001a24:	4603      	mov	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	82fb      	strh	r3, [r7, #22]
 8001a2c:	e00f      	b.n	8001a4e <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8001a2e:	8afa      	ldrh	r2, [r7, #22]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4413      	add	r3, r2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	8819      	ldrh	r1, [r3, #0]
 8001a42:	789b      	ldrb	r3, [r3, #2]
 8001a44:	8011      	strh	r1, [r2, #0]
 8001a46:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8001a48:	8afb      	ldrh	r3, [r7, #22]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	82fb      	strh	r3, [r7, #22]
 8001a4e:	8afa      	ldrh	r2, [r7, #22]
 8001a50:	8abb      	ldrh	r3, [r7, #20]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3eb      	bcc.n	8001a2e <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29c      	uxth	r4, r3
 8001a62:	88ba      	ldrh	r2, [r7, #4]
 8001a64:	883b      	ldrh	r3, [r7, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	88b9      	ldrh	r1, [r7, #4]
 8001a70:	88f8      	ldrh	r0, [r7, #6]
 8001a72:	2277      	movs	r2, #119	@ 0x77
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	4622      	mov	r2, r4
 8001a78:	f000 fdfc 	bl	8002674 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8001a7c:	8aba      	ldrh	r2, [r7, #20]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f000 fc5c 	bl	8002344 <LCD_send_data_multi>

	free(data);
 8001a8c:	6938      	ldr	r0, [r7, #16]
 8001a8e:	f00b fdb3 	bl	800d5f8 <free>

}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
	...

08001a9c <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <draw_entity+0x1c>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d163      	bne.n	8001b80 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	fb12 f303 	smulbb	r3, r2, r3
 8001acc:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	895b      	ldrh	r3, [r3, #10]
 8001ad2:	f107 020c 	add.w	r2, r7, #12
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc51 	bl	8001380 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8001ade:	8aba      	ldrh	r2, [r7, #20]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00b fd7e 	bl	800d5e8 <malloc>
 8001aec:	4603      	mov	r3, r0
 8001aee:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8001af0:	2300      	movs	r3, #0
 8001af2:	82fb      	strh	r3, [r7, #22]
 8001af4:	e00f      	b.n	8001b16 <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8001af6:	8afa      	ldrh	r2, [r7, #22]
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4413      	add	r3, r2
 8001b02:	461a      	mov	r2, r3
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	8819      	ldrh	r1, [r3, #0]
 8001b0a:	789b      	ldrb	r3, [r3, #2]
 8001b0c:	8011      	strh	r1, [r2, #0]
 8001b0e:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8001b10:	8afb      	ldrh	r3, [r7, #22]
 8001b12:	3301      	adds	r3, #1
 8001b14:	82fb      	strh	r3, [r7, #22]
 8001b16:	8afa      	ldrh	r2, [r7, #22]
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3eb      	bcc.n	8001af6 <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b24:	b298      	uxth	r0, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29c      	uxth	r4, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2277      	movs	r2, #119	@ 0x77
 8001b60:	9200      	str	r2, [sp, #0]
 8001b62:	4622      	mov	r2, r4
 8001b64:	f000 fd86 	bl	8002674 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8001b68:	8aba      	ldrh	r2, [r7, #20]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	6938      	ldr	r0, [r7, #16]
 8001b74:	f000 fbe6 	bl	8002344 <LCD_send_data_multi>

		free(data);
 8001b78:	6938      	ldr	r0, [r7, #16]
 8001b7a:	f00b fd3d 	bl	800d5f8 <free>
	{
 8001b7e:	e084      	b.n	8001c8a <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8001b80:	2300      	movs	r3, #0
 8001b82:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8001b84:	f107 030f 	add.w	r3, r7, #15
 8001b88:	f107 020a 	add.w	r2, r7, #10
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	6838      	ldr	r0, [r7, #0]
 8001b90:	f001 fd70 	bl	8003674 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b9a:	b298      	uxth	r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ba2:	b299      	uxth	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29c      	uxth	r4, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2277      	movs	r2, #119	@ 0x77
 8001bd6:	9200      	str	r2, [sp, #0]
 8001bd8:	4622      	mov	r2, r4
 8001bda:	f000 fd4b 	bl	8002674 <set_adress_window>

		DC_DATA();
 8001bde:	2201      	movs	r2, #1
 8001be0:	2108      	movs	r1, #8
 8001be2:	482b      	ldr	r0, [pc, #172]	@ (8001c90 <draw_entity+0x1f4>)
 8001be4:	f003 fed8 	bl	8005998 <HAL_GPIO_WritePin>
		CS_A();
 8001be8:	2200      	movs	r2, #0
 8001bea:	2110      	movs	r1, #16
 8001bec:	4828      	ldr	r0, [pc, #160]	@ (8001c90 <draw_entity+0x1f4>)
 8001bee:	f003 fed3 	bl	8005998 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001bf8:	d20c      	bcs.n	8001c14 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	897a      	ldrh	r2, [r7, #10]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fb9e 	bl	8002344 <LCD_send_data_multi>
			free(entity->data);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00b fcf3 	bl	800d5f8 <free>
 8001c12:	e03a      	b.n	8001c8a <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <draw_entity+0x1f8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	897a      	ldrh	r2, [r7, #10]
 8001c20:	4619      	mov	r1, r3
 8001c22:	481d      	ldr	r0, [pc, #116]	@ (8001c98 <draw_entity+0x1fc>)
 8001c24:	f005 ff92 	bl	8007b4c <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d11c      	bne.n	8001c68 <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8001c2e:	f107 030f 	add.w	r3, r7, #15
 8001c32:	f107 020a 	add.w	r2, r7, #10
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	6838      	ldr	r0, [r7, #0]
 8001c3a:	f001 fd1b 	bl	8003674 <read_image_file>

				while(flagDmaSpiTx == 0);
 8001c3e:	bf00      	nop
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <draw_entity+0x1f8>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0fa      	beq.n	8001c40 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <draw_entity+0x1f8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	897a      	ldrh	r2, [r7, #10]
 8001c56:	4619      	mov	r1, r3
 8001c58:	480f      	ldr	r0, [pc, #60]	@ (8001c98 <draw_entity+0x1fc>)
 8001c5a:	f005 ff77 	bl	8007b4c <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001c64:	d2e0      	bcs.n	8001c28 <draw_entity+0x18c>
 8001c66:	e000      	b.n	8001c6a <draw_entity+0x1ce>
					break;
 8001c68:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8001c6a:	bf00      	nop
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <draw_entity+0x1f8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0fa      	beq.n	8001c6c <draw_entity+0x1d0>
		free(entity->data);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00b fcbc 	bl	800d5f8 <free>
		CS_D();
 8001c80:	2201      	movs	r2, #1
 8001c82:	2110      	movs	r1, #16
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <draw_entity+0x1f4>)
 8001c86:	f003 fe87 	bl	8005998 <HAL_GPIO_WritePin>

	}


}
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd90      	pop	{r4, r7, pc}
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	2000032c 	.word	0x2000032c
 8001c98:	20000184 	.word	0x20000184

08001c9c <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8001c9c:	b5b0      	push	{r4, r5, r7, lr}
 8001c9e:	b08c      	sub	sp, #48	@ 0x30
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8001cb6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f2c0 80e6 	blt.w	8001e8c <translation_entity+0x1f0>
 8001cc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cc4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001cc8:	f300 80e0 	bgt.w	8001e8c <translation_entity+0x1f0>
 8001ccc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f2c0 80db 	blt.w	8001e8c <translation_entity+0x1f0>
 8001cd6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001cda:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001cde:	f300 80d5 	bgt.w	8001e8c <translation_entity+0x1f0>

		return;
	}


	ENTITY temp = *entity;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f107 0414 	add.w	r4, r7, #20
 8001ce8:	461d      	mov	r5, r3
 8001cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	897a      	ldrh	r2, [r7, #10]
 8001cf6:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	893a      	ldrh	r2, [r7, #8]
 8001cfc:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8001cfe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d02:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d157      	bne.n	8001dba <translation_entity+0x11e>
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d054      	beq.n	8001dba <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8001d10:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d1e:	440b      	add	r3, r1
 8001d20:	429a      	cmp	r2, r3
 8001d22:	da1d      	bge.n	8001d60 <translation_entity+0xc4>
 8001d24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dd17      	ble.n	8001d60 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8001d30:	2100      	movs	r1, #0
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff feb2 	bl	8001a9c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8001d38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d42:	b299      	uxth	r1, r3
 8001d44:	897a      	ldrh	r2, [r7, #10]
 8001d46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8001d5a:	9400      	str	r4, [sp, #0]
 8001d5c:	f7ff fe40 	bl	80019e0 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001d60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d64:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	f280 8091 	bge.w	8001e90 <translation_entity+0x1f4>
 8001d6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d72:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001d76:	4413      	add	r3, r2
 8001d78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f340 8087 	ble.w	8001e90 <translation_entity+0x1f4>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8001d82:	2100      	movs	r1, #0
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7ff fe89 	bl	8001a9c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8001d8a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	4413      	add	r3, r2
 8001d94:	b298      	uxth	r0, r3
 8001d96:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8001db2:	9400      	str	r4, [sp, #0]
 8001db4:	f7ff fe14 	bl	80019e0 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001db8:	e06a      	b.n	8001e90 <translation_entity+0x1f4>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8001dba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dbe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d157      	bne.n	8001e76 <translation_entity+0x1da>
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d054      	beq.n	8001e76 <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8001dcc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001dd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dda:	440b      	add	r3, r1
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	da1e      	bge.n	8001e1e <translation_entity+0x182>
 8001de0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001de4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	dd18      	ble.n	8001e1e <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8001dec:	2100      	movs	r1, #0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fe54 	bl	8001a9c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8001df4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001df8:	b298      	uxth	r0, r3
 8001dfa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001dfe:	b299      	uxth	r1, r3
 8001e00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e04:	b29c      	uxth	r4, r3
 8001e06:	893a      	ldrh	r2, [r7, #8]
 8001e08:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e16:	9200      	str	r2, [sp, #0]
 8001e18:	4622      	mov	r2, r4
 8001e1a:	f7ff fde1 	bl	80019e0 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001e1e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	da34      	bge.n	8001e94 <translation_entity+0x1f8>
 8001e2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e2e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e32:	4413      	add	r3, r2
 8001e34:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	dd2b      	ble.n	8001e94 <translation_entity+0x1f8>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff fe2c 	bl	8001a9c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8001e44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e48:	b298      	uxth	r0, r3
 8001e4a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	b299      	uxth	r1, r3
 8001e56:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e5a:	b29c      	uxth	r4, r3
 8001e5c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	893b      	ldrh	r3, [r7, #8]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e6c:	9200      	str	r2, [sp, #0]
 8001e6e:	4622      	mov	r2, r4
 8001e70:	f7ff fdb6 	bl	80019e0 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001e74:	e00e      	b.n	8001e94 <translation_entity+0x1f8>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 8001e76:	2100      	movs	r1, #0
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fe0f 	bl	8001a9c <draw_entity>
			draw_entity(&temp, NULL);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fe09 	bl	8001a9c <draw_entity>
 8001e8a:	e004      	b.n	8001e96 <translation_entity+0x1fa>
		return;
 8001e8c:	bf00      	nop
 8001e8e:	e002      	b.n	8001e96 <translation_entity+0x1fa>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001e90:	bf00      	nop
 8001e92:	e000      	b.n	8001e96 <translation_entity+0x1fa>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001e94:	bf00      	nop
		}


}
 8001e96:	3728      	adds	r7, #40	@ 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}

08001e9c <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor, char *filePathName, char *fileName)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b093      	sub	sp, #76	@ 0x4c
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ea8:	6079      	str	r1, [r7, #4]
 8001eaa:	603a      	str	r2, [r7, #0]
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 8001eac:	4baa      	ldr	r3, [pc, #680]	@ (8002158 <scaling_entity+0x2bc>)
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c

	scalFilePath = assign_filePath("graphic/scalare/");
 8001eb0:	48aa      	ldr	r0, [pc, #680]	@ (800215c <scaling_entity+0x2c0>)
 8001eb2:	f001 fa82 	bl	80033ba <assign_filePath>
 8001eb6:	62b8      	str	r0, [r7, #40]	@ 0x28
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 8001eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001eba:	f7fe f985 	bl	80001c8 <strlen>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	6838      	ldr	r0, [r7, #0]
 8001ec2:	f7fe f981 	bl	80001c8 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4423      	add	r3, r4
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ed0:	f00b fc48 	bl	800d764 <realloc>
 8001ed4:	62b8      	str	r0, [r7, #40]	@ 0x28
	strcat(scalFilePath, fileName);
 8001ed6:	6839      	ldr	r1, [r7, #0]
 8001ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001eda:	f00b fc81 	bl	800d7e0 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8001ede:	2300      	movs	r3, #0
 8001ee0:	827b      	strh	r3, [r7, #18]
	bool flagTerm = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	747b      	strb	r3, [r7, #17]

	int i = 0; /*indexi de referinta in M2*/
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
	int jk = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]

	bool flagPixel = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8001efc:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001f00:	f00b fb72 	bl	800d5e8 <malloc>
 8001f04:	4603      	mov	r3, r0
 8001f06:	61fb      	str	r3, [r7, #28]
	int16_t x1 = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	837b      	strh	r3, [r7, #26]
	int16_t y1 = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	833b      	strh	r3, [r7, #24]
	int16_t index = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	82fb      	strh	r3, [r7, #22]

	x1 = (int16_t)((entity->x1)*factor);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	837b      	strh	r3, [r7, #26]
	y1 = (int16_t)((entity->y1)*factor);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4e:	ee17 3a90 	vmov	r3, s15
 8001f52:	833b      	strh	r3, [r7, #24]



	while(!flagTerm)
 8001f54:	e0d1      	b.n	80020fa <scaling_entity+0x25e>
	{
		read_image_file_scaling(filePathName, entity, factor, &x, &flagTerm);
 8001f56:	f107 0311 	add.w	r3, r7, #17
 8001f5a:	f107 0212 	add.w	r2, r7, #18
 8001f5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f62:	68f9      	ldr	r1, [r7, #12]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f001 fdf5 	bl	8003b54 <read_image_file_scaling>

		i = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
		jk = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f7e:	e07d      	b.n	800207c <scaling_entity+0x1e0>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 8001f80:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	441a      	add	r2, r3
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f90:	fb01 f202 	mul.w	r2, r1, r2
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d107      	bne.n	8001faa <scaling_entity+0x10e>
 8001f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <scaling_entity+0x10e>
			{
				/*
				 * new line
				 */

				i++;
 8001fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 8001faa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fac:	4b6c      	ldr	r3, [pc, #432]	@ (8002160 <scaling_entity+0x2c4>)
 8001fae:	fb83 3201 	smull	r3, r2, r3, r1
 8001fb2:	17cb      	asrs	r3, r1, #31
 8001fb4:	1ad2      	subs	r2, r2, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	1aca      	subs	r2, r1, r3
 8001fbe:	2a00      	cmp	r2, #0
 8001fc0:	d102      	bne.n	8001fc8 <scaling_entity+0x12c>
			{
				flagPixel = 1;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 8001fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d052      	beq.n	8002076 <scaling_entity+0x1da>
			{
				ik = (int)i/factor;
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fda:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe6:	ee17 3a90 	vmov	r3, s15
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
				jk = (int)j/factor;
 8001fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ff6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002002:	ee17 3a90 	vmov	r3, s15
 8002006:	623b      	str	r3, [r7, #32]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800200e:	461a      	mov	r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	fb03 f202 	mul.w	r2, r3, r2
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	0052      	lsls	r2, r2, #1
 8002020:	4413      	add	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	82fb      	strh	r3, [r7, #22]

				data[k] = entity->data[index];
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800202e:	441a      	add	r2, r3
 8002030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002032:	69f9      	ldr	r1, [r7, #28]
 8002034:	440b      	add	r3, r1
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->data[index + 1];
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002042:	3301      	adds	r3, #1
 8002044:	441a      	add	r2, r3
 8002046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002048:	3301      	adds	r3, #1
 800204a:	69f9      	ldr	r1, [r7, #28]
 800204c:	440b      	add	r3, r1
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->data[index + 2];
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800205a:	3302      	adds	r3, #2
 800205c:	441a      	add	r2, r3
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	3302      	adds	r3, #2
 8002062:	69f9      	ldr	r1, [r7, #28]
 8002064:	440b      	add	r3, r1
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	701a      	strb	r2, [r3, #0]

				j++;
 800206a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800206c:	3301      	adds	r3, #1
 800206e:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8002076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002078:	3301      	adds	r3, #1
 800207a:	633b      	str	r3, [r7, #48]	@ 0x30
 800207c:	8a7b      	ldrh	r3, [r7, #18]
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002086:	edd7 7a02 	vldr	s15, [r7, #8]
 800208a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80020a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020aa:	ee17 2a90 	vmov	r2, s15
 80020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b0:	4293      	cmp	r3, r2
 80020b2:	f6ff af65 	blt.w	8001f80 <scaling_entity+0xe4>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 80020b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ce:	ee17 2a90 	vmov	r2, s15
 80020d2:	8a7b      	ldrh	r3, [r7, #18]
 80020d4:	fb03 f202 	mul.w	r2, r3, r2
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	460a      	mov	r2, r1
 80020f2:	69f9      	ldr	r1, [r7, #28]
 80020f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80020f6:	f001 ff2b 	bl	8003f50 <write_image_file>
	while(!flagTerm)
 80020fa:	7c7b      	ldrb	r3, [r7, #17]
 80020fc:	f083 0301 	eor.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	f47f af27 	bne.w	8001f56 <scaling_entity+0xba>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 8002108:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800210a:	f00b f86c 	bl	800d1e6 <f_unlink>
 800210e:	4603      	mov	r3, r0
 8002110:	757b      	strb	r3, [r7, #21]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8002112:	7d7b      	ldrb	r3, [r7, #21]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <scaling_entity+0x282>
 8002118:	7d7b      	ldrb	r3, [r7, #21]
 800211a:	2b04      	cmp	r3, #4
 800211c:	d115      	bne.n	800214a <scaling_entity+0x2ae>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 800211e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002120:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002122:	f00b f90b 	bl	800d33c <f_rename>
 8002126:	4603      	mov	r3, r0
 8002128:	757b      	strb	r3, [r7, #21]

	if(res != FR_OK)
 800212a:	7d7b      	ldrb	r3, [r7, #21]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <scaling_entity+0x2b2>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8b7a      	ldrh	r2, [r7, #26]
 8002134:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8b3a      	ldrh	r2, [r7, #24]
 800213a:	811a      	strh	r2, [r3, #8]
	entity->filePathName = scalFilePath;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002140:	611a      	str	r2, [r3, #16]

	free(data);
 8002142:	69f8      	ldr	r0, [r7, #28]
 8002144:	f00b fa58 	bl	800d5f8 <free>
 8002148:	e002      	b.n	8002150 <scaling_entity+0x2b4>
		return;
 800214a:	bf00      	nop
 800214c:	e000      	b.n	8002150 <scaling_entity+0x2b4>
		return;
 800214e:	bf00      	nop
	//free(entity->data);

}
 8002150:	3744      	adds	r7, #68	@ 0x44
 8002152:	46bd      	mov	sp, r7
 8002154:	bd90      	pop	{r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	0800d954 	.word	0x0800d954
 800215c:	0800d970 	.word	0x0800d970
 8002160:	55555556 	.word	0x55555556

08002164 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800217c:	0fd9      	lsrs	r1, r3, #31
 800217e:	440b      	add	r3, r1
 8002180:	105b      	asrs	r3, r3, #1
 8002182:	b21b      	sxth	r3, r3
 8002184:	b29b      	uxth	r3, r3
 8002186:	4413      	add	r3, r2
 8002188:	b29b      	uxth	r3, r3
 800218a:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002192:	b29a      	uxth	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800219a:	0fd9      	lsrs	r1, r3, #31
 800219c:	440b      	add	r3, r1
 800219e:	105b      	asrs	r3, r3, #1
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021b0:	0fda      	lsrs	r2, r3, #31
 80021b2:	4413      	add	r3, r2
 80021b4:	105b      	asrs	r3, r3, #1
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	425b      	negs	r3, r3
 80021bc:	b29b      	uxth	r3, r3
 80021be:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021c6:	0fda      	lsrs	r2, r3, #31
 80021c8:	4413      	add	r3, r2
 80021ca:	105b      	asrs	r3, r3, #1
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	425b      	negs	r3, r3
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 80021ea:	e075      	b.n	80022d8 <rotate_entity+0x174>
	{
		read_image_file(entity->filePathName, entity, &byteNr, &flagImgDone);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6918      	ldr	r0, [r3, #16]
 80021f0:	f107 030f 	add.w	r3, r7, #15
 80021f4:	f107 020c 	add.w	r2, r7, #12
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	f001 fa3b 	bl	8003674 <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 80021fe:	2300      	movs	r3, #0
 8002200:	833b      	strh	r3, [r7, #24]
 8002202:	e064      	b.n	80022ce <rotate_entity+0x16a>
		{
			if(j == (entity->x1/2))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800220a:	0fda      	lsrs	r2, r3, #31
 800220c:	4413      	add	r3, r2
 800220e:	105b      	asrs	r3, r3, #1
 8002210:	b21b      	sxth	r3, r3
 8002212:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002216:	429a      	cmp	r2, r3
 8002218:	d110      	bne.n	800223c <rotate_entity+0xd8>
			{
				i++;
 800221a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800221e:	b29b      	uxth	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	b29b      	uxth	r3, r3
 8002224:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800222c:	0fda      	lsrs	r2, r3, #31
 800222e:	4413      	add	r3, r2
 8002230:	105b      	asrs	r3, r3, #1
 8002232:	b21b      	sxth	r3, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	425b      	negs	r3, r3
 8002238:	b29b      	uxth	r3, r3
 800223a:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 800223c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002240:	4b2d      	ldr	r3, [pc, #180]	@ (80022f8 <rotate_entity+0x194>)
 8002242:	fb83 3102 	smull	r3, r1, r3, r2
 8002246:	17d3      	asrs	r3, r2, #31
 8002248:	1ac9      	subs	r1, r1, r3
 800224a:	460b      	mov	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	440b      	add	r3, r1
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	b21b      	sxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <rotate_entity+0xf8>
			{
				flagPixel = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 800225c:	7efb      	ldrb	r3, [r7, #27]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d02f      	beq.n	80022c2 <rotate_entity+0x15e>
			{
				pixel[0] = entity->data[k];
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800226a:	4413      	add	r3, r2
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->data[k+1];
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002278:	3301      	adds	r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->data[k+2];
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002288:	3302      	adds	r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 8002290:	8afa      	ldrh	r2, [r7, #22]
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	b29b      	uxth	r3, r3
 8002298:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 800229a:	8bba      	ldrh	r2, [r7, #28]
 800229c:	8abb      	ldrh	r3, [r7, #20]
 800229e:	4413      	add	r3, r2
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 80022a4:	8a7b      	ldrh	r3, [r7, #18]
 80022a6:	8a39      	ldrh	r1, [r7, #16]
 80022a8:	f107 0208 	add.w	r2, r7, #8
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f8f3 	bl	8001498 <draw_pixel_data>

				j++;
 80022b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 80022c2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	833b      	strh	r3, [r7, #24]
 80022ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80022d2:	89ba      	ldrh	r2, [r7, #12]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	db95      	blt.n	8002204 <rotate_entity+0xa0>
	while(!flagImgDone)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	f083 0301 	eor.w	r3, r3, #1
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d183      	bne.n	80021ec <rotate_entity+0x88>

		}
	}


	free(entity->data);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f00b f985 	bl	800d5f8 <free>

}
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	55555556 	.word	0x55555556

080022fc <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8002306:	2200      	movs	r2, #0
 8002308:	2108      	movs	r1, #8
 800230a:	480c      	ldr	r0, [pc, #48]	@ (800233c <LCD_send_command+0x40>)
 800230c:	f003 fb44 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8002310:	2200      	movs	r2, #0
 8002312:	2110      	movs	r1, #16
 8002314:	4809      	ldr	r0, [pc, #36]	@ (800233c <LCD_send_command+0x40>)
 8002316:	f003 fb3f 	bl	8005998 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 800231a:	1df9      	adds	r1, r7, #7
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
 8002320:	2201      	movs	r2, #1
 8002322:	4807      	ldr	r0, [pc, #28]	@ (8002340 <LCD_send_command+0x44>)
 8002324:	f005 f80b 	bl	800733e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8002328:	2201      	movs	r2, #1
 800232a:	2110      	movs	r1, #16
 800232c:	4803      	ldr	r0, [pc, #12]	@ (800233c <LCD_send_command+0x40>)
 800232e:	f003 fb33 	bl	8005998 <HAL_GPIO_WritePin>


}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40020c00 	.word	0x40020c00
 8002340:	20000184 	.word	0x20000184

08002344 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <LCD_send_data_multi+0xdc>)
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8002354:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002358:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	fbb3 f2f2 	udiv	r2, r3, r2
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	fb01 f202 	mul.w	r2, r1, r2
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8002376:	2201      	movs	r2, #1
 8002378:	2108      	movs	r1, #8
 800237a:	482a      	ldr	r0, [pc, #168]	@ (8002424 <LCD_send_data_multi+0xe0>)
 800237c:	f003 fb0c 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 8002380:	2200      	movs	r2, #0
 8002382:	2110      	movs	r1, #16
 8002384:	4827      	ldr	r0, [pc, #156]	@ (8002424 <LCD_send_data_multi+0xe0>)
 8002386:	f003 fb07 	bl	8005998 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d821      	bhi.n	80023d6 <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 8002392:	4b23      	ldr	r3, [pc, #140]	@ (8002420 <LCD_send_data_multi+0xdc>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4821      	ldr	r0, [pc, #132]	@ (8002428 <LCD_send_data_multi+0xe4>)
 80023a2:	f005 fbd3 	bl	8007b4c <HAL_SPI_Transmit_DMA>
 80023a6:	e02c      	b.n	8002402 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 80023a8:	bf00      	nop
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <LCD_send_data_multi+0xdc>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0fa      	beq.n	80023aa <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 80023b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <LCD_send_data_multi+0xdc>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4819      	ldr	r0, [pc, #100]	@ (8002428 <LCD_send_data_multi+0xe4>)
 80023c4:	f005 fbc2 	bl	8007b4c <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	607b      	str	r3, [r7, #4]
			nrFrames--;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1e5      	bne.n	80023a8 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00f      	beq.n	8002402 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 80023e2:	bf00      	nop
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <LCD_send_data_multi+0xdc>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0fa      	beq.n	80023e4 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <LCD_send_data_multi+0xdc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	480a      	ldr	r0, [pc, #40]	@ (8002428 <LCD_send_data_multi+0xe4>)
 80023fe:	f005 fba5 	bl	8007b4c <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8002402:	bf00      	nop
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <LCD_send_data_multi+0xdc>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0fa      	beq.n	8002404 <LCD_send_data_multi+0xc0>
	CS_D();
 800240e:	2201      	movs	r2, #1
 8002410:	2110      	movs	r1, #16
 8002412:	4804      	ldr	r0, [pc, #16]	@ (8002424 <LCD_send_data_multi+0xe0>)
 8002414:	f003 fac0 	bl	8005998 <HAL_GPIO_WritePin>

}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2000032c 	.word	0x2000032c
 8002424:	40020c00 	.word	0x40020c00
 8002428:	20000184 	.word	0x20000184

0800242c <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8002436:	2201      	movs	r2, #1
 8002438:	2108      	movs	r1, #8
 800243a:	480c      	ldr	r0, [pc, #48]	@ (800246c <LCD_send_data+0x40>)
 800243c:	f003 faac 	bl	8005998 <HAL_GPIO_WritePin>
	CS_A();
 8002440:	2200      	movs	r2, #0
 8002442:	2110      	movs	r1, #16
 8002444:	4809      	ldr	r0, [pc, #36]	@ (800246c <LCD_send_data+0x40>)
 8002446:	f003 faa7 	bl	8005998 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 800244a:	1df9      	adds	r1, r7, #7
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	2201      	movs	r2, #1
 8002452:	4807      	ldr	r0, [pc, #28]	@ (8002470 <LCD_send_data+0x44>)
 8002454:	f004 ff73 	bl	800733e <HAL_SPI_Transmit>

	CS_D();
 8002458:	2201      	movs	r2, #1
 800245a:	2110      	movs	r1, #16
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <LCD_send_data+0x40>)
 800245e:	f003 fa9b 	bl	8005998 <HAL_GPIO_WritePin>

}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40020c00 	.word	0x40020c00
 8002470:	20000184 	.word	0x20000184

08002474 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8002478:	2200      	movs	r2, #0
 800247a:	2140      	movs	r1, #64	@ 0x40
 800247c:	487c      	ldr	r0, [pc, #496]	@ (8002670 <ILI9488_driver_init+0x1fc>)
 800247e:	f003 fa8b 	bl	8005998 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002482:	200a      	movs	r0, #10
 8002484:	f002 f98c 	bl	80047a0 <HAL_Delay>
	RST_D();
 8002488:	2201      	movs	r2, #1
 800248a:	2140      	movs	r1, #64	@ 0x40
 800248c:	4878      	ldr	r0, [pc, #480]	@ (8002670 <ILI9488_driver_init+0x1fc>)
 800248e:	f003 fa83 	bl	8005998 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8002492:	2001      	movs	r0, #1
 8002494:	f7ff ff32 	bl	80022fc <LCD_send_command>
	HAL_Delay(150);
 8002498:	2096      	movs	r0, #150	@ 0x96
 800249a:	f002 f981 	bl	80047a0 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 800249e:	2011      	movs	r0, #17
 80024a0:	f7ff ff2c 	bl	80022fc <LCD_send_command>
	HAL_Delay(255);
 80024a4:	20ff      	movs	r0, #255	@ 0xff
 80024a6:	f002 f97b 	bl	80047a0 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 80024aa:	20e0      	movs	r0, #224	@ 0xe0
 80024ac:	f7ff ff26 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff ffbb 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0C);
 80024b6:	200c      	movs	r0, #12
 80024b8:	f7ff ffb8 	bl	800242c <LCD_send_data>
	LCD_send_data(0x05);
 80024bc:	2005      	movs	r0, #5
 80024be:	f7ff ffb5 	bl	800242c <LCD_send_data>
	LCD_send_data(0x04);
 80024c2:	2004      	movs	r0, #4
 80024c4:	f7ff ffb2 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0F);
 80024c8:	200f      	movs	r0, #15
 80024ca:	f7ff ffaf 	bl	800242c <LCD_send_data>
	LCD_send_data(0x06);
 80024ce:	2006      	movs	r0, #6
 80024d0:	f7ff ffac 	bl	800242c <LCD_send_data>
	LCD_send_data(0x3A);
 80024d4:	203a      	movs	r0, #58	@ 0x3a
 80024d6:	f7ff ffa9 	bl	800242c <LCD_send_data>
	LCD_send_data(0x56);
 80024da:	2056      	movs	r0, #86	@ 0x56
 80024dc:	f7ff ffa6 	bl	800242c <LCD_send_data>
	LCD_send_data(0x4D);
 80024e0:	204d      	movs	r0, #77	@ 0x4d
 80024e2:	f7ff ffa3 	bl	800242c <LCD_send_data>
	LCD_send_data(0x03);
 80024e6:	2003      	movs	r0, #3
 80024e8:	f7ff ffa0 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0A);
 80024ec:	200a      	movs	r0, #10
 80024ee:	f7ff ff9d 	bl	800242c <LCD_send_data>
	LCD_send_data(0x06);
 80024f2:	2006      	movs	r0, #6
 80024f4:	f7ff ff9a 	bl	800242c <LCD_send_data>
	LCD_send_data(0x30);
 80024f8:	2030      	movs	r0, #48	@ 0x30
 80024fa:	f7ff ff97 	bl	800242c <LCD_send_data>
	LCD_send_data(0x3E);
 80024fe:	203e      	movs	r0, #62	@ 0x3e
 8002500:	f7ff ff94 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0F);
 8002504:	200f      	movs	r0, #15
 8002506:	f7ff ff91 	bl	800242c <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 800250a:	20e1      	movs	r0, #225	@ 0xe1
 800250c:	f7ff fef6 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff ff8b 	bl	800242c <LCD_send_data>
	LCD_send_data(0x13);
 8002516:	2013      	movs	r0, #19
 8002518:	f7ff ff88 	bl	800242c <LCD_send_data>
	LCD_send_data(0x18);
 800251c:	2018      	movs	r0, #24
 800251e:	f7ff ff85 	bl	800242c <LCD_send_data>
	LCD_send_data(0x01);
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff ff82 	bl	800242c <LCD_send_data>
	LCD_send_data(0x11);
 8002528:	2011      	movs	r0, #17
 800252a:	f7ff ff7f 	bl	800242c <LCD_send_data>
	LCD_send_data(0x06);
 800252e:	2006      	movs	r0, #6
 8002530:	f7ff ff7c 	bl	800242c <LCD_send_data>
	LCD_send_data(0x38);
 8002534:	2038      	movs	r0, #56	@ 0x38
 8002536:	f7ff ff79 	bl	800242c <LCD_send_data>
	LCD_send_data(0x34);
 800253a:	2034      	movs	r0, #52	@ 0x34
 800253c:	f7ff ff76 	bl	800242c <LCD_send_data>
	LCD_send_data(0x4D);
 8002540:	204d      	movs	r0, #77	@ 0x4d
 8002542:	f7ff ff73 	bl	800242c <LCD_send_data>
	LCD_send_data(0x06);
 8002546:	2006      	movs	r0, #6
 8002548:	f7ff ff70 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0D);
 800254c:	200d      	movs	r0, #13
 800254e:	f7ff ff6d 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0B);
 8002552:	200b      	movs	r0, #11
 8002554:	f7ff ff6a 	bl	800242c <LCD_send_data>
	LCD_send_data(0x31);
 8002558:	2031      	movs	r0, #49	@ 0x31
 800255a:	f7ff ff67 	bl	800242c <LCD_send_data>
	LCD_send_data(0x37);
 800255e:	2037      	movs	r0, #55	@ 0x37
 8002560:	f7ff ff64 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0F);
 8002564:	200f      	movs	r0, #15
 8002566:	f7ff ff61 	bl	800242c <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 800256a:	20c0      	movs	r0, #192	@ 0xc0
 800256c:	f7ff fec6 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x18);
 8002570:	2018      	movs	r0, #24
 8002572:	f7ff ff5b 	bl	800242c <LCD_send_data>
	LCD_send_data(0x16);
 8002576:	2016      	movs	r0, #22
 8002578:	f7ff ff58 	bl	800242c <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 800257c:	20c1      	movs	r0, #193	@ 0xc1
 800257e:	f7ff febd 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x45);
 8002582:	2045      	movs	r0, #69	@ 0x45
 8002584:	f7ff ff52 	bl	800242c <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8002588:	20c2      	movs	r0, #194	@ 0xc2
 800258a:	f7ff feb7 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x33);
 800258e:	2033      	movs	r0, #51	@ 0x33
 8002590:	f7ff ff4c 	bl	800242c <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8002594:	20c3      	movs	r0, #195	@ 0xc3
 8002596:	f7ff feb1 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x33);
 800259a:	2033      	movs	r0, #51	@ 0x33
 800259c:	f7ff ff46 	bl	800242c <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 80025a0:	2036      	movs	r0, #54	@ 0x36
 80025a2:	f7ff feab 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 80025a6:	205c      	movs	r0, #92	@ 0x5c
 80025a8:	f7ff ff40 	bl	800242c <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 80025ac:	203a      	movs	r0, #58	@ 0x3a
 80025ae:	f7ff fea5 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 80025b2:	2006      	movs	r0, #6
 80025b4:	f7ff ff3a 	bl	800242c <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff fe9f 	bl	80022fc <LCD_send_command>
	LCD_send_command(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff fe9c 	bl	80022fc <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80025c4:	20b0      	movs	r0, #176	@ 0xb0
 80025c6:	f7ff fe99 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff ff2e 	bl	800242c <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 80025d0:	20b1      	movs	r0, #177	@ 0xb1
 80025d2:	f7ff fe93 	bl	80022fc <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 80025d6:	20a0      	movs	r0, #160	@ 0xa0
 80025d8:	f7ff ff28 	bl	800242c <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 80025dc:	2011      	movs	r0, #17
 80025de:	f7ff ff25 	bl	800242c <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 80025e2:	20b4      	movs	r0, #180	@ 0xb4
 80025e4:	f7ff fe8a 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7ff ff1f 	bl	800242c <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 80025ee:	20b5      	movs	r0, #181	@ 0xb5
 80025f0:	f7ff fe84 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x02);
 80025f4:	2002      	movs	r0, #2
 80025f6:	f7ff ff19 	bl	800242c <LCD_send_data>
	LCD_send_data(0x02);
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7ff ff16 	bl	800242c <LCD_send_data>
	LCD_send_data(0x0A);
 8002600:	200a      	movs	r0, #10
 8002602:	f7ff ff13 	bl	800242c <LCD_send_data>
	LCD_send_data(0x04);
 8002606:	2004      	movs	r0, #4
 8002608:	f7ff ff10 	bl	800242c <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 800260c:	20b6      	movs	r0, #182	@ 0xb6
 800260e:	f7ff fe75 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x02);
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff ff0a 	bl	800242c <LCD_send_data>
	LCD_send_data(0x02);
 8002618:	2002      	movs	r0, #2
 800261a:	f7ff ff07 	bl	800242c <LCD_send_data>
	LCD_send_data(0x3B);
 800261e:	203b      	movs	r0, #59	@ 0x3b
 8002620:	f7ff ff04 	bl	800242c <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8002624:	20e9      	movs	r0, #233	@ 0xe9
 8002626:	f7ff fe69 	bl	80022fc <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fefe 	bl	800242c <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8002630:	20f7      	movs	r0, #247	@ 0xf7
 8002632:	f7ff fe63 	bl	80022fc <LCD_send_command>
	LCD_send_data(0xA9);
 8002636:	20a9      	movs	r0, #169	@ 0xa9
 8002638:	f7ff fef8 	bl	800242c <LCD_send_data>
	LCD_send_data(0x51);
 800263c:	2051      	movs	r0, #81	@ 0x51
 800263e:	f7ff fef5 	bl	800242c <LCD_send_data>
	LCD_send_data(0x2C);
 8002642:	202c      	movs	r0, #44	@ 0x2c
 8002644:	f7ff fef2 	bl	800242c <LCD_send_data>
	LCD_send_data(0x82);
 8002648:	2082      	movs	r0, #130	@ 0x82
 800264a:	f7ff feef 	bl	800242c <LCD_send_data>


	LCD_send_command(0x11);
 800264e:	2011      	movs	r0, #17
 8002650:	f7ff fe54 	bl	80022fc <LCD_send_command>
	HAL_Delay(255);
 8002654:	20ff      	movs	r0, #255	@ 0xff
 8002656:	f002 f8a3 	bl	80047a0 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 800265a:	2051      	movs	r0, #81	@ 0x51
 800265c:	f7ff fe4e 	bl	80022fc <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8002660:	20ff      	movs	r0, #255	@ 0xff
 8002662:	f7ff fee3 	bl	800242c <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8002666:	2029      	movs	r0, #41	@ 0x29
 8002668:	f7ff fe48 	bl	80022fc <LCD_send_command>


}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40020c00 	.word	0x40020c00

08002674 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4623      	mov	r3, r4
 8002684:	80fb      	strh	r3, [r7, #6]
 8002686:	4603      	mov	r3, r0
 8002688:	80bb      	strh	r3, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	807b      	strh	r3, [r7, #2]
 800268e:	4613      	mov	r3, r2
 8002690:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8002692:	202a      	movs	r0, #42	@ 0x2a
 8002694:	f7ff fe32 	bl	80022fc <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29b      	uxth	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	733b      	strb	r3, [r7, #12]
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	73bb      	strb	r3, [r7, #14]
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80026b8:	f107 030c 	add.w	r3, r7, #12
 80026bc:	2104      	movs	r1, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe40 	bl	8002344 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80026c4:	202b      	movs	r0, #43	@ 0x2b
 80026c6:	f7ff fe19 	bl	80022fc <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80026ca:	88bb      	ldrh	r3, [r7, #4]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	733b      	strb	r3, [r7, #12]
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 80026da:	883b      	ldrh	r3, [r7, #0]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	73bb      	strb	r3, [r7, #14]
 80026e4:	883b      	ldrh	r3, [r7, #0]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	2104      	movs	r1, #4
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fe27 	bl	8002344 <LCD_send_data_multi>

	if(x == 'w')
 80026f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026fa:	2b77      	cmp	r3, #119	@ 0x77
 80026fc:	d102      	bne.n	8002704 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 80026fe:	202c      	movs	r0, #44	@ 0x2c
 8002700:	f7ff fdfc 	bl	80022fc <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8002704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002708:	2b72      	cmp	r3, #114	@ 0x72
 800270a:	d102      	bne.n	8002712 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 800270c:	202e      	movs	r0, #46	@ 0x2e
 800270e:	f7ff fdf5 	bl	80022fc <LCD_send_command>
	}


}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
	...

0800271c <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	4604      	mov	r4, r0
 8002724:	4608      	mov	r0, r1
 8002726:	4611      	mov	r1, r2
 8002728:	461a      	mov	r2, r3
 800272a:	4623      	mov	r3, r4
 800272c:	80fb      	strh	r3, [r7, #6]
 800272e:	4603      	mov	r3, r0
 8002730:	80bb      	strh	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 800273a:	4b7d      	ldr	r3, [pc, #500]	@ (8002930 <read_pixel_frame+0x214>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b7b      	ldr	r3, [pc, #492]	@ (8002930 <read_pixel_frame+0x214>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002748:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 800274a:	4b79      	ldr	r3, [pc, #484]	@ (8002930 <read_pixel_frame+0x214>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b77      	ldr	r3, [pc, #476]	@ (8002930 <read_pixel_frame+0x214>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002758:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 800275a:	4b75      	ldr	r3, [pc, #468]	@ (8002930 <read_pixel_frame+0x214>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b73      	ldr	r3, [pc, #460]	@ (8002930 <read_pixel_frame+0x214>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0210 	orr.w	r2, r2, #16
 8002768:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800276a:	4b71      	ldr	r3, [pc, #452]	@ (8002930 <read_pixel_frame+0x214>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b6f      	ldr	r3, [pc, #444]	@ (8002930 <read_pixel_frame+0x214>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002778:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 800277a:	4b6e      	ldr	r3, [pc, #440]	@ (8002934 <read_pixel_frame+0x218>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	bfb8      	it	lt
 800278e:	425b      	neglt	r3, r3
 8002790:	b29a      	uxth	r2, r3
 8002792:	8839      	ldrh	r1, [r7, #0]
 8002794:	88bb      	ldrh	r3, [r7, #4]
 8002796:	1acb      	subs	r3, r1, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bfb8      	it	lt
 800279c:	425b      	neglt	r3, r3
 800279e:	b29b      	uxth	r3, r3
 80027a0:	fb12 f303 	smulbb	r3, r2, r3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	0052      	lsls	r2, r2, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80027ae:	2300      	movs	r3, #0
 80027b0:	753b      	strb	r3, [r7, #20]

    free(data);
 80027b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027b4:	f00a ff20 	bl	800d5f8 <free>
    data = malloc(byteNr);
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f00a ff14 	bl	800d5e8 <malloc>
 80027c0:	4603      	mov	r3, r0
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	807b      	strh	r3, [r7, #2]
    y--;
 80027ca:	883b      	ldrh	r3, [r7, #0]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	743b      	strb	r3, [r7, #16]
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	747b      	strb	r3, [r7, #17]
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	74bb      	strb	r3, [r7, #18]
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 80027f0:	88bb      	ldrh	r3, [r7, #4]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	733b      	strb	r3, [r7, #12]
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	737b      	strb	r3, [r7, #13]
 8002800:	883b      	ldrh	r3, [r7, #0]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29b      	uxth	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	73bb      	strb	r3, [r7, #14]
 800280a:	883b      	ldrh	r3, [r7, #0]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8002810:	2200      	movs	r2, #0
 8002812:	2110      	movs	r1, #16
 8002814:	4848      	ldr	r0, [pc, #288]	@ (8002938 <read_pixel_frame+0x21c>)
 8002816:	f003 f8bf 	bl	8005998 <HAL_GPIO_WritePin>

    DC_COMMAND();
 800281a:	2200      	movs	r2, #0
 800281c:	2108      	movs	r1, #8
 800281e:	4846      	ldr	r0, [pc, #280]	@ (8002938 <read_pixel_frame+0x21c>)
 8002820:	f003 f8ba 	bl	8005998 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8002824:	232a      	movs	r3, #42	@ 0x2a
 8002826:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8002828:	f107 010b 	add.w	r1, r7, #11
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	2201      	movs	r2, #1
 8002832:	483f      	ldr	r0, [pc, #252]	@ (8002930 <read_pixel_frame+0x214>)
 8002834:	f004 fd83 	bl	800733e <HAL_SPI_Transmit>
    DC_DATA();
 8002838:	2201      	movs	r2, #1
 800283a:	2108      	movs	r1, #8
 800283c:	483e      	ldr	r0, [pc, #248]	@ (8002938 <read_pixel_frame+0x21c>)
 800283e:	f003 f8ab 	bl	8005998 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8002842:	f107 0110 	add.w	r1, r7, #16
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	2204      	movs	r2, #4
 800284c:	4838      	ldr	r0, [pc, #224]	@ (8002930 <read_pixel_frame+0x214>)
 800284e:	f004 fd76 	bl	800733e <HAL_SPI_Transmit>

    DC_COMMAND();
 8002852:	2200      	movs	r2, #0
 8002854:	2108      	movs	r1, #8
 8002856:	4838      	ldr	r0, [pc, #224]	@ (8002938 <read_pixel_frame+0x21c>)
 8002858:	f003 f89e 	bl	8005998 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 800285c:	232b      	movs	r3, #43	@ 0x2b
 800285e:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8002860:	f107 010a 	add.w	r1, r7, #10
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	2201      	movs	r2, #1
 800286a:	4831      	ldr	r0, [pc, #196]	@ (8002930 <read_pixel_frame+0x214>)
 800286c:	f004 fd67 	bl	800733e <HAL_SPI_Transmit>
    DC_DATA();
 8002870:	2201      	movs	r2, #1
 8002872:	2108      	movs	r1, #8
 8002874:	4830      	ldr	r0, [pc, #192]	@ (8002938 <read_pixel_frame+0x21c>)
 8002876:	f003 f88f 	bl	8005998 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 800287a:	f107 010c 	add.w	r1, r7, #12
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	2204      	movs	r2, #4
 8002884:	482a      	ldr	r0, [pc, #168]	@ (8002930 <read_pixel_frame+0x214>)
 8002886:	f004 fd5a 	bl	800733e <HAL_SPI_Transmit>

    DC_COMMAND();
 800288a:	2200      	movs	r2, #0
 800288c:	2108      	movs	r1, #8
 800288e:	482a      	ldr	r0, [pc, #168]	@ (8002938 <read_pixel_frame+0x21c>)
 8002890:	f003 f882 	bl	8005998 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8002894:	232e      	movs	r3, #46	@ 0x2e
 8002896:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8002898:	f107 0109 	add.w	r1, r7, #9
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	2201      	movs	r2, #1
 80028a2:	4823      	ldr	r0, [pc, #140]	@ (8002930 <read_pixel_frame+0x214>)
 80028a4:	f004 fd4b 	bl	800733e <HAL_SPI_Transmit>
    DC_DATA();
 80028a8:	2201      	movs	r2, #1
 80028aa:	2108      	movs	r1, #8
 80028ac:	4822      	ldr	r0, [pc, #136]	@ (8002938 <read_pixel_frame+0x21c>)
 80028ae:	f003 f873 	bl	8005998 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80028b2:	f107 0114 	add.w	r1, r7, #20
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	2201      	movs	r2, #1
 80028bc:	481c      	ldr	r0, [pc, #112]	@ (8002930 <read_pixel_frame+0x214>)
 80028be:	f004 fe82 	bl	80075c6 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80028c2:	8afb      	ldrh	r3, [r7, #22]
 80028c4:	461a      	mov	r2, r3
 80028c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028c8:	4819      	ldr	r0, [pc, #100]	@ (8002930 <read_pixel_frame+0x214>)
 80028ca:	f005 f9f1 	bl	8007cb0 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80028ce:	bf00      	nop
 80028d0:	4b18      	ldr	r3, [pc, #96]	@ (8002934 <read_pixel_frame+0x218>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0fa      	beq.n	80028d0 <read_pixel_frame+0x1b4>
    CS_D();
 80028da:	2201      	movs	r2, #1
 80028dc:	2110      	movs	r1, #16
 80028de:	4816      	ldr	r0, [pc, #88]	@ (8002938 <read_pixel_frame+0x21c>)
 80028e0:	f003 f85a 	bl	8005998 <HAL_GPIO_WritePin>

    free(data);
 80028e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e6:	f00a fe87 	bl	800d5f8 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <read_pixel_frame+0x214>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <read_pixel_frame+0x214>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f8:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80028fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <read_pixel_frame+0x214>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <read_pixel_frame+0x214>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002908:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 800290a:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <read_pixel_frame+0x214>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <read_pixel_frame+0x214>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8002916:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <read_pixel_frame+0x214>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <read_pixel_frame+0x214>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002924:	601a      	str	r2, [r3, #0]

}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	20000184 	.word	0x20000184
 8002934:	2000032d 	.word	0x2000032d
 8002938:	40020c00 	.word	0x40020c00

0800293c <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <HAL_SPI_TxCpltCallback+0x24>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d102      	bne.n	8002954 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_SPI_TxCpltCallback+0x28>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
	}



}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40013000 	.word	0x40013000
 8002964:	2000032c 	.word	0x2000032c

08002968 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a28      	ldr	r2, [pc, #160]	@ (8002a18 <HAL_SPI_RxCpltCallback+0xb0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d102      	bne.n	8002980 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 800297a:	4b28      	ldr	r3, [pc, #160]	@ (8002a1c <HAL_SPI_RxCpltCallback+0xb4>)
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a26      	ldr	r2, [pc, #152]	@ (8002a20 <HAL_SPI_RxCpltCallback+0xb8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d140      	bne.n	8002a0c <HAL_SPI_RxCpltCallback+0xa4>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 800298a:	4b26      	ldr	r3, [pc, #152]	@ (8002a24 <HAL_SPI_RxCpltCallback+0xbc>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	2b0f      	cmp	r3, #15
 8002994:	d836      	bhi.n	8002a04 <HAL_SPI_RxCpltCallback+0x9c>
 8002996:	a201      	add	r2, pc, #4	@ (adr r2, 800299c <HAL_SPI_RxCpltCallback+0x34>)
 8002998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299c:	080029dd 	.word	0x080029dd
 80029a0:	080029e5 	.word	0x080029e5
 80029a4:	08002a05 	.word	0x08002a05
 80029a8:	080029ed 	.word	0x080029ed
 80029ac:	08002a05 	.word	0x08002a05
 80029b0:	08002a05 	.word	0x08002a05
 80029b4:	08002a05 	.word	0x08002a05
 80029b8:	080029f5 	.word	0x080029f5
 80029bc:	08002a05 	.word	0x08002a05
 80029c0:	08002a05 	.word	0x08002a05
 80029c4:	08002a05 	.word	0x08002a05
 80029c8:	08002a05 	.word	0x08002a05
 80029cc:	08002a05 	.word	0x08002a05
 80029d0:	08002a05 	.word	0x08002a05
 80029d4:	08002a05 	.word	0x08002a05
 80029d8:	080029fd 	.word	0x080029fd
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 80029dc:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <HAL_SPI_RxCpltCallback+0xc0>)
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80029e2:	e013      	b.n	8002a0c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 80029e4:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_SPI_RxCpltCallback+0xc0>)
 80029e6:	2202      	movs	r2, #2
 80029e8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80029ea:	e00f      	b.n	8002a0c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 80029ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_SPI_RxCpltCallback+0xc0>)
 80029ee:	2204      	movs	r2, #4
 80029f0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80029f2:	e00b      	b.n	8002a0c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <HAL_SPI_RxCpltCallback+0xc0>)
 80029f6:	2208      	movs	r2, #8
 80029f8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80029fa:	e007      	b.n	8002a0c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_SPI_RxCpltCallback+0xc0>)
 80029fe:	2210      	movs	r2, #16
 8002a00:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002a02:	e003      	b.n	8002a0c <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 8002a04:	4b08      	ldr	r3, [pc, #32]	@ (8002a28 <HAL_SPI_RxCpltCallback+0xc0>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002a0a:	bf00      	nop
		}

	}

}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40013000 	.word	0x40013000
 8002a1c:	2000032d 	.word	0x2000032d
 8002a20:	40003800 	.word	0x40003800
 8002a24:	2000032f 	.word	0x2000032f
 8002a28:	20000330 	.word	0x20000330

08002a2c <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]

}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000032e 	.word	0x2000032e

08002a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b092      	sub	sp, #72	@ 0x48
 8002a50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a52:	f001 fe33 	bl	80046bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a56:	f000 fa77 	bl	8002f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a5a:	f000 fc13 	bl	8003284 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a5e:	f000 fbd3 	bl	8003208 <MX_DMA_Init>
  MX_SPI1_Init();
 8002a62:	f000 fb25 	bl	80030b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a66:	f000 fba5 	bl	80031b4 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8002a6a:	f000 fad7 	bl	800301c <MX_DAC_Init>
  MX_TIM2_Init();
 8002a6e:	f000 fb55 	bl	800311c <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8002a72:	f000 fafd 	bl	8003070 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002a76:	f007 fd1b 	bl	800a4b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8002a7a:	f000 fc67 	bl	800334c <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8002a7e:	f7ff fcf9 	bl	8002474 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8002a82:	48d0      	ldr	r0, [pc, #832]	@ (8002dc4 <main+0x378>)
 8002a84:	f005 fdd2 	bl	800862c <HAL_TIM_Base_Start>


  /*Test pentru tastatura*/

  fill_screen1(0x0000);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fe fd33 	bl	80014f4 <fill_screen1>

  //HAL_Delay(1000);
  play_audio_file("Audio/acoustic.txt");
 8002a8e:	48ce      	ldr	r0, [pc, #824]	@ (8002dc8 <main+0x37c>)
 8002a90:	f7fe f910 	bl	8000cb4 <play_audio_file>
  HAL_Delay(1000);
 8002a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a98:	f001 fe82 	bl	80047a0 <HAL_Delay>
  play_audio_file_vibrato("Audio/acoustic.txt");
 8002a9c:	48ca      	ldr	r0, [pc, #808]	@ (8002dc8 <main+0x37c>)
 8002a9e:	f7fe fa13 	bl	8000ec8 <play_audio_file_vibrato>
  HAL_Delay(1000);
 8002aa2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa6:	f001 fe7b 	bl	80047a0 <HAL_Delay>
  play_audio_file_echo("Audio/acoustic.txt", 22, 0.99);
 8002aaa:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 8002dcc <main+0x380>
 8002aae:	2116      	movs	r1, #22
 8002ab0:	48c5      	ldr	r0, [pc, #788]	@ (8002dc8 <main+0x37c>)
 8002ab2:	f7fe fbd9 	bl	8001268 <play_audio_file_echo>
  HAL_Delay(1000);
 8002ab6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aba:	f001 fe71 	bl	80047a0 <HAL_Delay>
  play_audio_file_echo("Audio/acoustic.txt", 22, 0);
 8002abe:	ed9f 0ac4 	vldr	s0, [pc, #784]	@ 8002dd0 <main+0x384>
 8002ac2:	2116      	movs	r1, #22
 8002ac4:	48c0      	ldr	r0, [pc, #768]	@ (8002dc8 <main+0x37c>)
 8002ac6:	f7fe fbcf 	bl	8001268 <play_audio_file_echo>
  HAL_Delay(1000);
 8002aca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ace:	f001 fe67 	bl	80047a0 <HAL_Delay>
  play_audio_file("Audio/king.txt"); //doremi mine songita song22 king acoustic bambina
 8002ad2:	48c0      	ldr	r0, [pc, #768]	@ (8002dd4 <main+0x388>)
 8002ad4:	f7fe f8ee 	bl	8000cb4 <play_audio_file>


  fill_screen1(0xF100);
 8002ad8:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002adc:	f7fe fd0a 	bl	80014f4 <fill_screen1>
  HAL_Delay(1000);
 8002ae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ae4:	f001 fe5c 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xF00F);
 8002ae8:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8002aec:	f7fe fd62 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002af4:	f001 fe54 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002af8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002afc:	f7fe fd5a 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b04:	f001 fe4c 	bl	80047a0 <HAL_Delay>

  unsigned int startTick = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	633b      	str	r3, [r7, #48]	@ 0x30
  ENTITY entity;


  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8002b14:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b18:	f7fe fd4c 	bl	80015b4 <fill_screen2>

  entity.x0 = 100;
 8002b1c:	2364      	movs	r3, #100	@ 0x64
 8002b1e:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8002b20:	2364      	movs	r3, #100	@ 0x64
 8002b22:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	763b      	strb	r3, [r7, #24]
  draw_entity(&entity, "graphic/multi2.bin");
 8002b28:	f107 0318 	add.w	r3, r7, #24
 8002b2c:	49aa      	ldr	r1, [pc, #680]	@ (8002dd8 <main+0x38c>)
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe ffb4 	bl	8001a9c <draw_entity>
  HAL_Delay(1000);
 8002b34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b38:	f001 fe32 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002b3c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b40:	f7fe fd38 	bl	80015b4 <fill_screen2>
  scaling_entity(&entity, 38, "graphic/multi2.bin", "multi2.bin");
 8002b44:	f107 0318 	add.w	r3, r7, #24
 8002b48:	4aa4      	ldr	r2, [pc, #656]	@ (8002ddc <main+0x390>)
 8002b4a:	49a3      	ldr	r1, [pc, #652]	@ (8002dd8 <main+0x38c>)
 8002b4c:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8002de0 <main+0x394>
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff f9a3 	bl	8001e9c <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8002b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff9c 	bl	8001a9c <draw_entity>

  //--------------------------------------------

  HAL_Delay(1000);
 8002b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b68:	f001 fe1a 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002b6c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b70:	f7fe fd20 	bl	80015b4 <fill_screen2>

  rotate_entity(&entity, 90);
 8002b74:	f107 0318 	add.w	r3, r7, #24
 8002b78:	215a      	movs	r1, #90	@ 0x5a
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff faf2 	bl	8002164 <rotate_entity>

  HAL_Delay(1000);
 8002b80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b84:	f001 fe0c 	bl	80047a0 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 8002b88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b8c:	f001 fe08 	bl	80047a0 <HAL_Delay>

  fill_screen2(0xFFFF);
 8002b90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002b94:	f7fe fd0e 	bl	80015b4 <fill_screen2>
  draw_entity(&entity, entity.filePathName);
 8002b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b9a:	f107 0318 	add.w	r3, r7, #24
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe ff7b 	bl	8001a9c <draw_entity>
  HAL_Delay(1000);
 8002ba6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002baa:	f001 fdf9 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002bae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bb2:	f7fe fcff 	bl	80015b4 <fill_screen2>
  scaling_entity(&entity, 0.5, entity.filePathName, "multi2.bin");
 8002bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	4a87      	ldr	r2, [pc, #540]	@ (8002ddc <main+0x390>)
 8002bbe:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f96a 	bl	8001e9c <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8002bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bca:	f107 0318 	add.w	r3, r7, #24
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe ff63 	bl	8001a9c <draw_entity>
  HAL_Delay(1000);
 8002bd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bda:	f001 fde1 	bl	80047a0 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 8002be6:	2300      	movs	r3, #0
 8002be8:	713b      	strb	r3, [r7, #4]
  draw_entity(&ent, "graphic/img5.bin");
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	497d      	ldr	r1, [pc, #500]	@ (8002de4 <main+0x398>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe ff54 	bl	8001a9c <draw_entity>
  HAL_Delay(2000);
 8002bf4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002bf8:	f001 fdd2 	bl	80047a0 <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	497a      	ldr	r1, [pc, #488]	@ (8002de8 <main+0x39c>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe ff4b 	bl	8001a9c <draw_entity>
  HAL_Delay(2000);
 8002c06:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c0a:	f001 fdc9 	bl	80047a0 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4976      	ldr	r1, [pc, #472]	@ (8002dec <main+0x3a0>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe ff42 	bl	8001a9c <draw_entity>
  HAL_Delay(2000);
 8002c18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c1c:	f001 fdc0 	bl	80047a0 <HAL_Delay>
  draw_entity(&ent, "graphic/img9.bin");
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	4973      	ldr	r1, [pc, #460]	@ (8002df0 <main+0x3a4>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ff39 	bl	8001a9c <draw_entity>
  HAL_Delay(2000);
 8002c2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c2e:	f001 fdb7 	bl	80047a0 <HAL_Delay>
  startTick = HAL_GetTick();
 8002c32:	f001 fda9 	bl	8004788 <HAL_GetTick>
 8002c36:	63b8      	str	r0, [r7, #56]	@ 0x38
  draw_entity(&ent, "graphic/img92.bin");
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	496e      	ldr	r1, [pc, #440]	@ (8002df4 <main+0x3a8>)
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe ff2d 	bl	8001a9c <draw_entity>
  endTick = HAL_GetTick();
 8002c42:	f001 fda1 	bl	8004788 <HAL_GetTick>
 8002c46:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8002c48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fe fcaf 	bl	80015b4 <fill_screen2>
  draw_entity(&ent, "graphic/pixel1.bin");
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	4967      	ldr	r1, [pc, #412]	@ (8002df8 <main+0x3ac>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe ff1e 	bl	8001a9c <draw_entity>
  HAL_Delay(3000);
 8002c60:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c64:	f001 fd9c 	bl	80047a0 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  entity.x0 = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 8002c70:	2340      	movs	r3, #64	@ 0x40
 8002c72:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 8002c74:	2340      	movs	r3, #64	@ 0x40
 8002c76:	843b      	strh	r3, [r7, #32]
  entity.color = 0xF100;
 8002c78:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002c7c:	847b      	strh	r3, [r7, #34]	@ 0x22

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 8002c7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c82:	f001 fd8d 	bl	80047a0 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 8002c86:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3364      	adds	r3, #100	@ 0x64
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	b219      	sxth	r1, r3
 8002c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3364      	adds	r3, #100	@ 0x64
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	f107 0018 	add.w	r0, r7, #24
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f7fe fffa 	bl	8001c9c <translation_entity>
  HAL_Delay(2000);
 8002ca8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002cac:	f001 fd78 	bl	80047a0 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8002cb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3320      	adds	r3, #32
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b219      	sxth	r1, r3
 8002cbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3320      	adds	r3, #32
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	f107 0018 	add.w	r0, r7, #24
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f7fe ffe5 	bl	8001c9c <translation_entity>
  HAL_Delay(500);
 8002cd2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cd6:	f001 fd63 	bl	80047a0 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8002cda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	b219      	sxth	r1, r3
 8002ce6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3320      	adds	r3, #32
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	f107 0018 	add.w	r0, r7, #24
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f7fe ffd0 	bl	8001c9c <translation_entity>
  HAL_Delay(500);
 8002cfc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d00:	f001 fd4e 	bl	80047a0 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8002d04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b219      	sxth	r1, r3
 8002d10:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002d14:	f107 0018 	add.w	r0, r7, #24
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f7fe ffbf 	bl	8001c9c <translation_entity>
  HAL_Delay(500);
 8002d1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d22:	f001 fd3d 	bl	80047a0 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8002d26:	4835      	ldr	r0, [pc, #212]	@ (8002dfc <main+0x3b0>)
 8002d28:	f7fd ffc4 	bl	8000cb4 <play_audio_file>

  fill_screen2(0xF100);
 8002d2c:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002d30:	f7fe fc40 	bl	80015b4 <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	@ 0x64
 8002d36:	f001 fd33 	bl	80047a0 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002d40:	e077      	b.n	8002e32 <main+0x3e6>
  {
	  for(uint8_t j=0; j<100;j++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002d48:	e06a      	b.n	8002e20 <main+0x3d4>
	  {

		  if(i==j)
 8002d4a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002d4e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d10b      	bne.n	8002d6e <main+0x322>
		  {
			  draw_pixel(i,j,0xF100);
 8002d56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002d60:	b291      	uxth	r1, r2
 8002d62:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fb6c 	bl	8001444 <draw_pixel>
			  continue;
 8002d6c:	e053      	b.n	8002e16 <main+0x3ca>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8002d6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d72:	2b50      	cmp	r3, #80	@ 0x50
 8002d74:	d103      	bne.n	8002d7e <main+0x332>
 8002d76:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002d7a:	2b14      	cmp	r3, #20
 8002d7c:	d017      	beq.n	8002dae <main+0x362>
 8002d7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d82:	2b50      	cmp	r3, #80	@ 0x50
 8002d84:	d103      	bne.n	8002d8e <main+0x342>
 8002d86:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002d8a:	2b13      	cmp	r3, #19
 8002d8c:	d00f      	beq.n	8002dae <main+0x362>
 8002d8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002d92:	2b51      	cmp	r3, #81	@ 0x51
 8002d94:	d103      	bne.n	8002d9e <main+0x352>
 8002d96:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002d9a:	2b14      	cmp	r3, #20
 8002d9c:	d007      	beq.n	8002dae <main+0x362>
 8002d9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002da2:	2b51      	cmp	r3, #81	@ 0x51
 8002da4:	d12c      	bne.n	8002e00 <main+0x3b4>
 8002da6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002daa:	2b13      	cmp	r3, #19
 8002dac:	d128      	bne.n	8002e00 <main+0x3b4>
		  {
			  draw_pixel(i,j,0x001F);
 8002dae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002db8:	b291      	uxth	r1, r2
 8002dba:	221f      	movs	r2, #31
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fb41 	bl	8001444 <draw_pixel>
			  continue;
 8002dc2:	e028      	b.n	8002e16 <main+0x3ca>
 8002dc4:	2000029c 	.word	0x2000029c
 8002dc8:	0800d984 	.word	0x0800d984
 8002dcc:	3f7d70a4 	.word	0x3f7d70a4
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	0800d998 	.word	0x0800d998
 8002dd8:	0800d9a8 	.word	0x0800d9a8
 8002ddc:	0800d9bc 	.word	0x0800d9bc
 8002de0:	42180000 	.word	0x42180000
 8002de4:	0800d9c8 	.word	0x0800d9c8
 8002de8:	0800d9dc 	.word	0x0800d9dc
 8002dec:	0800d9f0 	.word	0x0800d9f0
 8002df0:	0800da04 	.word	0x0800da04
 8002df4:	0800da18 	.word	0x0800da18
 8002df8:	0800da2c 	.word	0x0800da2c
 8002dfc:	0800da40 	.word	0x0800da40
		  }


		  draw_pixel(i,j,0xFFFF);
 8002e00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002e0a:	b291      	uxth	r1, r2
 8002e0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fb17 	bl	8001444 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8002e16:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002e20:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002e24:	2b63      	cmp	r3, #99	@ 0x63
 8002e26:	d990      	bls.n	8002d4a <main+0x2fe>
  for(uint8_t i=0;i<100;i++)
 8002e28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002e32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002e36:	2b63      	cmp	r3, #99	@ 0x63
 8002e38:	d983      	bls.n	8002d42 <main+0x2f6>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8002e3a:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002e3e:	f7fe fbb9 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002e42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e46:	f001 fcab 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xF150);
 8002e4a:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8002e4e:	f7fe fbb1 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002e52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e56:	f001 fca3 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xF111);
 8002e5a:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8002e5e:	f7fe fba9 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002e62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e66:	f001 fc9b 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xF10F);
 8002e6a:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8002e6e:	f7fe fba1 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002e72:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e76:	f001 fc93 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002e7a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002e7e:	f7fe fb99 	bl	80015b4 <fill_screen2>
  HAL_Delay(1000);
 8002e82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e86:	f001 fc8b 	bl	80047a0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002e8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002e8e:	f7fe fb91 	bl	80015b4 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8002e92:	231f      	movs	r3, #31
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	4a26      	ldr	r2, [pc, #152]	@ (8002f38 <main+0x4ec>)
 8002ea0:	21c8      	movs	r1, #200	@ 0xc8
 8002ea2:	2024      	movs	r0, #36	@ 0x24
 8002ea4:	f7fe fce2 	bl	800186c <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8002ea8:	4b24      	ldr	r3, [pc, #144]	@ (8002f3c <main+0x4f0>)
 8002eaa:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8002eac:	463b      	mov	r3, r7
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4823      	ldr	r0, [pc, #140]	@ (8002f40 <main+0x4f4>)
 8002eb4:	f004 fe4a 	bl	8007b4c <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8002eb8:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002ebc:	2250      	movs	r2, #80	@ 0x50
 8002ebe:	2114      	movs	r1, #20
 8002ec0:	2014      	movs	r0, #20
 8002ec2:	f7fe fd17 	bl	80018f4 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8002ec6:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002eca:	2250      	movs	r2, #80	@ 0x50
 8002ecc:	2114      	movs	r1, #20
 8002ece:	2014      	movs	r0, #20
 8002ed0:	f7fe fd4b 	bl	800196a <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f44 <main+0x4f8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002eda:	221f      	movs	r2, #31
 8002edc:	2100      	movs	r1, #0
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fe fab0 	bl	8001444 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002ee4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002ee8:	2100      	movs	r1, #0
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7fe faaa 	bl	8001444 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8002ef0:	221f      	movs	r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fe faa5 	bl	8001444 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002efa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002efe:	2101      	movs	r1, #1
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7fe fa9f 	bl	8001444 <draw_pixel>

  HAL_Delay(50);
 8002f06:	2032      	movs	r0, #50	@ 0x32
 8002f08:	f001 fc4a 	bl	80047a0 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f00a fb6b 	bl	800d5e8 <malloc>
 8002f12:	4603      	mov	r3, r0
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8002f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	2100      	movs	r1, #0
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7ff fbfb 	bl	800271c <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8002f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f28:	f00a fb66 	bl	800d5f8 <free>

  HAL_Delay(3000);
 8002f2c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002f30:	f001 fc36 	bl	80047a0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <main+0x4e8>
 8002f38:	0800da50 	.word	0x0800da50
 8002f3c:	04030201 	.word	0x04030201
 8002f40:	20000184 	.word	0x20000184
 8002f44:	2000032c 	.word	0x2000032c

08002f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b094      	sub	sp, #80	@ 0x50
 8002f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4e:	f107 0320 	add.w	r3, r7, #32
 8002f52:	2230      	movs	r2, #48	@ 0x30
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00a fc3a 	bl	800d7d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f5c:	f107 030c 	add.w	r3, r7, #12
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60bb      	str	r3, [r7, #8]
 8002f70:	4b28      	ldr	r3, [pc, #160]	@ (8003014 <SystemClock_Config+0xcc>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <SystemClock_Config+0xcc>)
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7c:	4b25      	ldr	r3, [pc, #148]	@ (8003014 <SystemClock_Config+0xcc>)
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a21      	ldr	r2, [pc, #132]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b1f      	ldr	r3, [pc, #124]	@ (8003018 <SystemClock_Config+0xd0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fb8:	2304      	movs	r3, #4
 8002fba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fbc:	23a8      	movs	r3, #168	@ 0xa8
 8002fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc8:	f107 0320 	add.w	r3, r7, #32
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fcfd 	bl	80059cc <HAL_RCC_OscConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002fd8:	f000 f9b2 	bl	8003340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fdc:	230f      	movs	r3, #15
 8002fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fe8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ff4:	f107 030c 	add.w	r3, r7, #12
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 ff5e 	bl	8005ebc <HAL_RCC_ClockConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003006:	f000 f99b 	bl	8003340 <Error_Handler>
  }
}
 800300a:	bf00      	nop
 800300c:	3750      	adds	r7, #80	@ 0x50
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40007000 	.word	0x40007000

0800301c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003022:	463b      	mov	r3, r7
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800302a:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <MX_DAC_Init+0x4c>)
 800302c:	4a0f      	ldr	r2, [pc, #60]	@ (800306c <MX_DAC_Init+0x50>)
 800302e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003030:	480d      	ldr	r0, [pc, #52]	@ (8003068 <MX_DAC_Init+0x4c>)
 8003032:	f001 fcea 	bl	8004a0a <HAL_DAC_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800303c:	f000 f980 	bl	8003340 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8003040:	2324      	movs	r3, #36	@ 0x24
 8003042:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003048:	463b      	mov	r3, r7
 800304a:	2200      	movs	r2, #0
 800304c:	4619      	mov	r1, r3
 800304e:	4806      	ldr	r0, [pc, #24]	@ (8003068 <MX_DAC_Init+0x4c>)
 8003050:	f001 fe21 	bl	8004c96 <HAL_DAC_ConfigChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800305a:	f000 f971 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000008c 	.word	0x2000008c
 800306c:	40007400 	.word	0x40007400

08003070 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003074:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003076:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <MX_SDIO_SD_Init+0x3c>)
 8003078:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800307a:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 800307c:	2200      	movs	r2, #0
 800307e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003080:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003086:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003088:	2200      	movs	r2, #0
 800308a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800308c:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 800308e:	2200      	movs	r2, #0
 8003090:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003092:	4b05      	ldr	r3, [pc, #20]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 8003094:	2200      	movs	r2, #0
 8003096:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8003098:	4b03      	ldr	r3, [pc, #12]	@ (80030a8 <MX_SDIO_SD_Init+0x38>)
 800309a:	2208      	movs	r2, #8
 800309c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20000100 	.word	0x20000100
 80030ac:	40012c00 	.word	0x40012c00

080030b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030b6:	4a18      	ldr	r2, [pc, #96]	@ (8003118 <MX_SPI1_Init+0x68>)
 80030b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ba:	4b16      	ldr	r3, [pc, #88]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030c2:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ce:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030da:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f4:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <MX_SPI1_Init+0x64>)
 80030fc:	220a      	movs	r2, #10
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003100:	4804      	ldr	r0, [pc, #16]	@ (8003114 <MX_SPI1_Init+0x64>)
 8003102:	f004 f893 	bl	800722c <HAL_SPI_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800310c:	f000 f918 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000184 	.word	0x20000184
 8003118:	40013000 	.word	0x40013000

0800311c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003130:	463b      	mov	r3, r7
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003138:	4b1d      	ldr	r3, [pc, #116]	@ (80031b0 <MX_TIM2_Init+0x94>)
 800313a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800313e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;//83
 8003140:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <MX_TIM2_Init+0x94>)
 8003142:	2253      	movs	r2, #83	@ 0x53
 8003144:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003146:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <MX_TIM2_Init+0x94>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11;//11
 800314c:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <MX_TIM2_Init+0x94>)
 800314e:	220b      	movs	r2, #11
 8003150:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003152:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <MX_TIM2_Init+0x94>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <MX_TIM2_Init+0x94>)
 800315a:	2200      	movs	r2, #0
 800315c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800315e:	4814      	ldr	r0, [pc, #80]	@ (80031b0 <MX_TIM2_Init+0x94>)
 8003160:	f005 fa14 	bl	800858c <HAL_TIM_Base_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800316a:	f000 f8e9 	bl	8003340 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800316e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003172:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	4619      	mov	r1, r3
 800317a:	480d      	ldr	r0, [pc, #52]	@ (80031b0 <MX_TIM2_Init+0x94>)
 800317c:	f005 fabe 	bl	80086fc <HAL_TIM_ConfigClockSource>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003186:	f000 f8db 	bl	8003340 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800318a:	2320      	movs	r3, #32
 800318c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003192:	463b      	mov	r3, r7
 8003194:	4619      	mov	r1, r3
 8003196:	4806      	ldr	r0, [pc, #24]	@ (80031b0 <MX_TIM2_Init+0x94>)
 8003198:	f005 fcbe 	bl	8008b18 <HAL_TIMEx_MasterConfigSynchronization>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80031a2:	f000 f8cd 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031a6:	bf00      	nop
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	2000029c 	.word	0x2000029c

080031b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b8:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031ba:	4a12      	ldr	r2, [pc, #72]	@ (8003204 <MX_USART1_UART_Init+0x50>)
 80031bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031d8:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031da:	220c      	movs	r2, #12
 80031dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031de:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031ea:	4805      	ldr	r0, [pc, #20]	@ (8003200 <MX_USART1_UART_Init+0x4c>)
 80031ec:	f005 fd10 	bl	8008c10 <HAL_UART_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031f6:	f000 f8a3 	bl	8003340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200002e4 	.word	0x200002e4
 8003204:	40011000 	.word	0x40011000

08003208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b1b      	ldr	r3, [pc, #108]	@ (8003280 <MX_DMA_Init+0x78>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <MX_DMA_Init+0x78>)
 8003218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800321c:	6313      	str	r3, [r2, #48]	@ 0x30
 800321e:	4b18      	ldr	r3, [pc, #96]	@ (8003280 <MX_DMA_Init+0x78>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b14      	ldr	r3, [pc, #80]	@ (8003280 <MX_DMA_Init+0x78>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	4a13      	ldr	r2, [pc, #76]	@ (8003280 <MX_DMA_Init+0x78>)
 8003234:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003238:	6313      	str	r3, [r2, #48]	@ 0x30
 800323a:	4b11      	ldr	r3, [pc, #68]	@ (8003280 <MX_DMA_Init+0x78>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2100      	movs	r1, #0
 800324a:	2010      	movs	r0, #16
 800324c:	f001 fba7 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003250:	2010      	movs	r0, #16
 8003252:	f001 fbc0 	bl	80049d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2100      	movs	r1, #0
 800325a:	2038      	movs	r0, #56	@ 0x38
 800325c:	f001 fb9f 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003260:	2038      	movs	r0, #56	@ 0x38
 8003262:	f001 fbb8 	bl	80049d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	2100      	movs	r1, #0
 800326a:	203b      	movs	r0, #59	@ 0x3b
 800326c:	f001 fb97 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003270:	203b      	movs	r0, #59	@ 0x3b
 8003272:	f001 fbb0 	bl	80049d6 <HAL_NVIC_EnableIRQ>

}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800

08003284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
 8003298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	4b26      	ldr	r3, [pc, #152]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032aa:	4b23      	ldr	r3, [pc, #140]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4a1e      	ldr	r2, [pc, #120]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a10      	ldr	r2, [pc, #64]	@ (8003338 <MX_GPIO_Init+0xb4>)
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <MX_GPIO_Init+0xb4>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800330a:	2200      	movs	r2, #0
 800330c:	2158      	movs	r1, #88	@ 0x58
 800330e:	480b      	ldr	r0, [pc, #44]	@ (800333c <MX_GPIO_Init+0xb8>)
 8003310:	f002 fb42 	bl	8005998 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8003314:	2358      	movs	r3, #88	@ 0x58
 8003316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003318:	2301      	movs	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	4619      	mov	r1, r3
 800332a:	4804      	ldr	r0, [pc, #16]	@ (800333c <MX_GPIO_Init+0xb8>)
 800332c:	f002 f998 	bl	8005660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003330:	bf00      	nop
 8003332:	3728      	adds	r7, #40	@ 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	40020c00 	.word	0x40020c00

08003340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <Error_Handler+0x8>

0800334c <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8003350:	2201      	movs	r2, #1
 8003352:	4903      	ldr	r1, [pc, #12]	@ (8003360 <init_cardSD+0x14>)
 8003354:	4803      	ldr	r0, [pc, #12]	@ (8003364 <init_cardSD+0x18>)
 8003356:	f008 ffe1 	bl	800c31c <f_mount>

}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	0800da60 	.word	0x0800da60
 8003364:	20000334 	.word	0x20000334

08003368 <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 8003374:	e015      	b.n	80033a2 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b2f      	cmp	r3, #47	@ 0x2f
 800337c:	d90e      	bls.n	800339c <string_to_int+0x34>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b39      	cmp	r3, #57	@ 0x39
 8003384:	d80a      	bhi.n	800339c <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	461a      	mov	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	3b30      	subs	r3, #48	@ 0x30
 800339a:	60fb      	str	r3, [r7, #12]
		}

		string++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3301      	adds	r3, #1
 80033a0:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b0a      	cmp	r3, #10
 80033a8:	d1e5      	bne.n	8003376 <string_to_int+0xe>
	}

	return number;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	b29b      	uxth	r3, r3
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 80033c6:	e002      	b.n	80033ce <assign_filePath+0x14>
	{
		i++;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	3301      	adds	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f6      	bne.n	80033c8 <assign_filePath+0xe>
	}

	i++;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	3301      	adds	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f00a f900 	bl	800d5e8 <malloc>
 80033e8:	4603      	mov	r3, r0
 80033ea:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	461a      	mov	r2, r3
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	68b8      	ldr	r0, [r7, #8]
 80033f4:	f00a fa40 	bl	800d878 <memcpy>

	return string;
 80033f8:	68bb      	ldr	r3, [r7, #8]


}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <read_audio_file>:




void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 8003404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003408:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800340c:	af00      	add	r7, sp, #0
 800340e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003412:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003416:	6018      	str	r0, [r3, #0]
 8003418:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800341c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003420:	6019      	str	r1, [r3, #0]
 8003422:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003426:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	466b      	mov	r3, sp
 800342e:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003430:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003434:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003438:	f107 0020 	add.w	r0, r7, #32
 800343c:	2201      	movs	r2, #1
 800343e:	6819      	ldr	r1, [r3, #0]
 8003440:	f008 ffb2 	bl	800c3a8 <f_open>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 800344a:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 8101 	bne.w	8003656 <read_audio_file+0x252>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003454:	4b83      	ldr	r3, [pc, #524]	@ (8003664 <read_audio_file+0x260>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	f107 0320 	add.w	r3, r7, #32
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f009 fcb8 	bl	800cdd4 <f_lseek>


	if(flagNewAudioFile == 1)
 8003464:	4b80      	ldr	r3, [pc, #512]	@ (8003668 <read_audio_file+0x264>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <read_audio_file+0x98>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 800346c:	4b7e      	ldr	r3, [pc, #504]	@ (8003668 <read_audio_file+0x264>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003472:	4b7e      	ldr	r3, [pc, #504]	@ (800366c <read_audio_file+0x268>)
 8003474:	2200      	movs	r2, #0
 8003476:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8003478:	4b7a      	ldr	r3, [pc, #488]	@ (8003664 <read_audio_file+0x260>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 800347e:	4b79      	ldr	r3, [pc, #484]	@ (8003664 <read_audio_file+0x260>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f107 0320 	add.w	r3, r7, #32
 8003486:	4611      	mov	r1, r2
 8003488:	4618      	mov	r0, r3
 800348a:	f009 fca3 	bl	800cdd4 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 800348e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003492:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <read_audio_file+0x26c>)
 800349a:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 800349c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034a0:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 80034a4:	4b72      	ldr	r3, [pc, #456]	@ (8003670 <read_audio_file+0x26c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 80034b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003670 <read_audio_file+0x26c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80034bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80034c0:	fb01 f202 	mul.w	r2, r1, r2
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <read_audio_file+0xd0>
	{
		nrFrames++;
 80034ca:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80034ce:	3301      	adds	r3, #1
 80034d0:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 80034da:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80034de:	3b01      	subs	r3, #1
 80034e0:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80034e4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80034e8:	2200      	movs	r2, #0
 80034ea:	4698      	mov	r8, r3
 80034ec:	4691      	mov	r9, r2
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003502:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003506:	2200      	movs	r2, #0
 8003508:	461c      	mov	r4, r3
 800350a:	4615      	mov	r5, r2
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	00eb      	lsls	r3, r5, #3
 8003516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800351a:	00e2      	lsls	r2, r4, #3
 800351c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003520:	3307      	adds	r3, #7
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	ebad 0d03 	sub.w	sp, sp, r3
 800352a:	466b      	mov	r3, sp
 800352c:	3300      	adds	r3, #0
 800352e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8003532:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003536:	1e5a      	subs	r2, r3, #1
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	f107 0020 	add.w	r0, r7, #32
 8003540:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8003544:	f009 f8ea 	bl	800c71c <f_read>
	tempBuffer[byteRead] = '\n';
 8003548:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800354c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003556:	210a      	movs	r1, #10
 8003558:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8003560:	e040      	b.n	80035e4 <read_audio_file+0x1e0>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8003562:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003566:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800356a:	5cd3      	ldrb	r3, [r2, r3]
 800356c:	2b0a      	cmp	r3, #10
 800356e:	d011      	beq.n	8003594 <read_audio_file+0x190>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8003570:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 8003574:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003578:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800357c:	5c89      	ldrb	r1, [r1, r2]
 800357e:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8003582:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8003586:	54d1      	strb	r1, [r2, r3]
			index++;
 8003588:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 800358c:	3301      	adds	r3, #1
 800358e:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 8003592:	e022      	b.n	80035da <read_audio_file+0x1d6>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 8003594:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003598:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800359c:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80035a0:	210a      	movs	r1, #10
 80035a2:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fedd 	bl	8003368 <string_to_int>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80035b6:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	601a      	str	r2, [r3, #0]
			buffer++;
 80035be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80035c2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80035c6:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80035ca:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	3204      	adds	r2, #4
 80035d2:	601a      	str	r2, [r3, #0]

			index = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 80035da:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80035de:	3301      	adds	r3, #1
 80035e0:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 80035e4:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80035e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80035ec:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3b5      	bcc.n	8003562 <read_audio_file+0x15e>


	}


	if(currentFrame == nrFrames)
 80035f6:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <read_audio_file+0x268>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003600:	4293      	cmp	r3, r2
 8003602:	d10f      	bne.n	8003624 <read_audio_file+0x220>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 8003604:	4b18      	ldr	r3, [pc, #96]	@ (8003668 <read_audio_file+0x264>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 800360a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800360e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 8003618:	f107 0320 	add.w	r3, r7, #32
 800361c:	4618      	mov	r0, r3
 800361e:	f009 fbaf 	bl	800cd80 <f_close>
		return;
 8003622:	e018      	b.n	8003656 <read_audio_file+0x252>
	}

	currentFrame++;
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <read_audio_file+0x268>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <read_audio_file+0x268>)
 800362e:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8003630:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003634:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <read_audio_file+0x260>)
 800363c:	6013      	str	r3, [r2, #0]
	currentPosition++;
 800363e:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <read_audio_file+0x260>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <read_audio_file+0x260>)
 8003646:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8003648:	f107 0320 	add.w	r3, r7, #32
 800364c:	4618      	mov	r0, r3
 800364e:	f009 fb97 	bl	800cd80 <f_close>
 8003652:	46b5      	mov	sp, r6
 8003654:	e000      	b.n	8003658 <read_audio_file+0x254>
		return;
 8003656:	46b5      	mov	sp, r6


}
 8003658:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003662:	bf00      	nop
 8003664:	20000564 	.word	0x20000564
 8003668:	20000008 	.word	0x20000008
 800366c:	20000568 	.word	0x20000568
 8003670:	2000056c 	.word	0x2000056c

08003674 <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 8003674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003678:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800367c:	af00      	add	r7, sp, #0
 800367e:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 8003682:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 8003686:	6030      	str	r0, [r6, #0]
 8003688:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 800368c:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 8003690:	6001      	str	r1, [r0, #0]
 8003692:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003696:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 800369a:	600a      	str	r2, [r1, #0]
 800369c:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80036a0:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	466b      	mov	r3, sp
 80036a8:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80036aa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80036b2:	f107 001c 	add.w	r0, r7, #28
 80036b6:	2201      	movs	r2, #1
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	f008 fe75 	bl	800c3a8 <f_open>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80036c4:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 81b0 	bne.w	8003a2e <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80036ce:	4ba9      	ldr	r3, [pc, #676]	@ (8003974 <read_image_file+0x300>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80d6 	beq.w	8003884 <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80036d8:	4ba7      	ldr	r3, [pc, #668]	@ (8003978 <read_image_file+0x304>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80036de:	4ba6      	ldr	r3, [pc, #664]	@ (8003978 <read_image_file+0x304>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f009 fb73 	bl	800cdd4 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80036ee:	f107 0318 	add.w	r3, r7, #24
 80036f2:	f107 0114 	add.w	r1, r7, #20
 80036f6:	f107 001c 	add.w	r0, r7, #28
 80036fa:	2204      	movs	r2, #4
 80036fc:	f009 f80e 	bl	800c71c <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8003700:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003704:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 800370e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003712:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2200      	movs	r2, #0
 800371a:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 800371c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003720:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800372a:	461a      	mov	r2, r3
 800372c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003730:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	4313      	orrs	r3, r2
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	b21a      	sxth	r2, r3
 800373c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003740:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800374a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800374e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	b21b      	sxth	r3, r3
 8003756:	430b      	orrs	r3, r1
 8003758:	b21b      	sxth	r3, r3
 800375a:	4313      	orrs	r3, r2
 800375c:	b21a      	sxth	r2, r3
 800375e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003762:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800376a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800376e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003778:	461a      	mov	r2, r3
 800377a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800377e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003782:	78db      	ldrb	r3, [r3, #3]
 8003784:	4313      	orrs	r3, r2
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	b21a      	sxth	r2, r3
 800378a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800378e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8003798:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800379c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80037a0:	789b      	ldrb	r3, [r3, #2]
 80037a2:	b21b      	sxth	r3, r3
 80037a4:	430b      	orrs	r3, r1
 80037a6:	b21b      	sxth	r3, r3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	b21a      	sxth	r2, r3
 80037ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037b0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80037b8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037bc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037cc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037de:	da1f      	bge.n	8003820 <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80037e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037e4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037f4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80037fe:	fb03 f202 	mul.w	r2, r3, r2
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f009 feed 	bl	800d5e8 <malloc>
 800380e:	4603      	mov	r3, r0
 8003810:	461a      	mov	r2, r3
 8003812:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003816:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e00b      	b.n	8003838 <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 8003820:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003824:	f009 fee0 	bl	800d5e8 <malloc>
 8003828:	4603      	mov	r3, r0
 800382a:	461a      	mov	r2, r3
 800382c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003830:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8003838:	4b4e      	ldr	r3, [pc, #312]	@ (8003974 <read_image_file+0x300>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 800383e:	4b4f      	ldr	r3, [pc, #316]	@ (800397c <read_image_file+0x308>)
 8003840:	2200      	movs	r2, #0
 8003842:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8003844:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003848:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4a      	ldr	r2, [pc, #296]	@ (8003978 <read_image_file+0x304>)
 8003850:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003852:	4b49      	ldr	r3, [pc, #292]	@ (8003978 <read_image_file+0x304>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	f107 031c 	add.w	r3, r7, #28
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f009 fab9 	bl	800cdd4 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8003862:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003866:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	3b04      	subs	r3, #4
 800386e:	4a44      	ldr	r2, [pc, #272]	@ (8003980 <read_image_file+0x30c>)
 8003870:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8003872:	4b43      	ldr	r3, [pc, #268]	@ (8003980 <read_image_file+0x30c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a43      	ldr	r2, [pc, #268]	@ (8003984 <read_image_file+0x310>)
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	fbb3 f3f2 	udiv	r3, r3, r2
 800387e:	4a42      	ldr	r2, [pc, #264]	@ (8003988 <read_image_file+0x314>)
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e007      	b.n	8003894 <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003884:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <read_image_file+0x304>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	4611      	mov	r1, r2
 800388e:	4618      	mov	r0, r3
 8003890:	f009 faa0 	bl	800cdd4 <f_lseek>
	}



	if(fileSize == n)
 8003894:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <read_image_file+0x30c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3a      	ldr	r2, [pc, #232]	@ (8003984 <read_image_file+0x310>)
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	4293      	cmp	r3, r2
 800389e:	d104      	bne.n	80038aa <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 80038a0:	4b39      	ldr	r3, [pc, #228]	@ (8003988 <read_image_file+0x314>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3b01      	subs	r3, #1
 80038a6:	4a38      	ldr	r2, [pc, #224]	@ (8003988 <read_image_file+0x314>)
 80038a8:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 80038aa:	4b35      	ldr	r3, [pc, #212]	@ (8003980 <read_image_file+0x30c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a35      	ldr	r2, [pc, #212]	@ (8003984 <read_image_file+0x310>)
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80038b6:	fb01 f202 	mul.w	r2, r1, r2
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <read_image_file+0x25e>
 80038c0:	4b31      	ldr	r3, [pc, #196]	@ (8003988 <read_image_file+0x314>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <read_image_file+0x25e>
	{
		nrFrames++;
 80038c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003988 <read_image_file+0x314>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003988 <read_image_file+0x314>)
 80038d0:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 80038d2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80038d6:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 80038e0:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <read_image_file+0x310>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80038ea:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <read_image_file+0x310>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	2300      	movs	r3, #0
 80038f2:	4690      	mov	r8, r2
 80038f4:	4699      	mov	r9, r3
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390a:	4b1e      	ldr	r3, [pc, #120]	@ (8003984 <read_image_file+0x310>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	2300      	movs	r3, #0
 8003912:	4614      	mov	r4, r2
 8003914:	461d      	mov	r5, r3
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	00eb      	lsls	r3, r5, #3
 8003920:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003924:	00e2      	lsls	r2, r4, #3
 8003926:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <read_image_file+0x310>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3307      	adds	r3, #7
 800392c:	08db      	lsrs	r3, r3, #3
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	ebad 0d03 	sub.w	sp, sp, r3
 8003934:	466b      	mov	r3, sp
 8003936:	3300      	adds	r3, #0
 8003938:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 800393c:	4b11      	ldr	r3, [pc, #68]	@ (8003984 <read_image_file+0x310>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	f107 0318 	add.w	r3, r7, #24
 8003946:	f107 001c 	add.w	r0, r7, #28
 800394a:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 800394e:	f008 fee5 	bl	800c71c <f_read>
	(*indexFlag) = byteRead;
 8003952:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003956:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b29a      	uxth	r2, r3
 800395e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003962:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 800396a:	2300      	movs	r3, #0
 800396c:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8003970:	e020      	b.n	80039b4 <read_image_file+0x340>
 8003972:	bf00      	nop
 8003974:	20000009 	.word	0x20000009
 8003978:	20000570 	.word	0x20000570
 800397c:	20000574 	.word	0x20000574
 8003980:	20000578 	.word	0x20000578
 8003984:	0800e804 	.word	0x0800e804
 8003988:	2000057c 	.word	0x2000057c
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 800398c:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8003990:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003994:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68d9      	ldr	r1, [r3, #12]
 800399c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80039a0:	440b      	add	r3, r1
 80039a2:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 80039a6:	5c8a      	ldrb	r2, [r1, r2]
 80039a8:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 80039aa:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80039ae:	3301      	adds	r3, #1
 80039b0:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 80039b4:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 80039b8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039bc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3e2      	bcc.n	800398c <read_image_file+0x318>

	}


	currentFrame++;
 80039c6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <read_image_file+0x3c8>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <read_image_file+0x3c8>)
 80039d0:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 80039d2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <read_image_file+0x3c8>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <read_image_file+0x3cc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d208      	bcs.n	80039f2 <read_image_file+0x37e>
 80039e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039e4:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039f0:	d20f      	bcs.n	8003a12 <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 80039f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039f6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8003a00:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <read_image_file+0x3d0>)
 8003a02:	2201      	movs	r2, #1
 8003a04:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003a06:	f107 031c 	add.w	r3, r7, #28
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f009 f9b8 	bl	800cd80 <f_close>
		return;
 8003a10:	e00d      	b.n	8003a2e <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 8003a12:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a16:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a48 <read_image_file+0x3d4>)
 8003a1e:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8003a20:	f107 031c 	add.w	r3, r7, #28
 8003a24:	4618      	mov	r0, r3
 8003a26:	f009 f9ab 	bl	800cd80 <f_close>
 8003a2a:	46b5      	mov	sp, r6
 8003a2c:	e000      	b.n	8003a30 <read_image_file+0x3bc>
		return;
 8003a2e:	46b5      	mov	sp, r6


}
 8003a30:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000574 	.word	0x20000574
 8003a40:	2000057c 	.word	0x2000057c
 8003a44:	20000009 	.word	0x20000009
 8003a48:	20000570 	.word	0x20000570

08003a4c <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8003a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	dd33      	ble.n	8003ad6 <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8003a6e:	e00b      	b.n	8003a88 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d102      	bne.n	8003a82 <frame_number_x+0x36>
			{
				return x;
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	e05f      	b.n	8003b42 <frame_number_x+0xf6>
			}

			x++;
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	3301      	adds	r3, #1
 8003a86:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003b50 <frame_number_x+0x104>
 8003ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d9d6      	bls.n	8003a70 <frame_number_x+0x24>
		}


		if(x==1)
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <frame_number_x+0x80>
		{
			return 1;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e03a      	b.n	8003b42 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	e035      	b.n	8003b42 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 8003ada:	e016      	b.n	8003b0a <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d102      	bne.n	8003aee <frame_number_x+0xa2>
			{
				return x;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	e029      	b.n	8003b42 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003afe:	edc7 7a01 	vstr	s15, [r7, #4]
 8003b02:	793a      	ldrb	r2, [r7, #4]
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	4413      	add	r3, r2
 8003b08:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b10:	461a      	mov	r2, r3
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	fb02 f303 	mul.w	r3, r2, r3
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	ddde      	ble.n	8003adc <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b28:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003b2c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003b30:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3c:	ee17 3a90 	vmov	r3, s15
 8003b40:	b29b      	uxth	r3, r3

	}


}
 8003b42:	4618      	mov	r0, r3
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	44800000 	.word	0x44800000

08003b54 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8003b60:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003b64:	6020      	str	r0, [r4, #0]
 8003b66:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8003b6a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003b6e:	6001      	str	r1, [r0, #0]
 8003b70:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003b74:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003b78:	ed81 0a00 	vstr	s0, [r1]
 8003b7c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003b80:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8003b84:	600a      	str	r2, [r1, #0]
 8003b86:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8003b8a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8003b8e:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003b90:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b94:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003b98:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	f008 fc02 	bl	800c3a8 <f_open>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8003baa:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 81be 	bne.w	8003f30 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8003bb4:	4ba9      	ldr	r3, [pc, #676]	@ (8003e5c <read_image_file_scaling+0x308>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8112 	beq.w	8003de2 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8003bbe:	4ba8      	ldr	r3, [pc, #672]	@ (8003e60 <read_image_file_scaling+0x30c>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8003bc4:	4ba6      	ldr	r3, [pc, #664]	@ (8003e60 <read_image_file_scaling+0x30c>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f009 f900 	bl	800cdd4 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8003bd4:	f107 0320 	add.w	r3, r7, #32
 8003bd8:	f107 011c 	add.w	r1, r7, #28
 8003bdc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003be0:	2204      	movs	r2, #4
 8003be2:	f008 fd9b 	bl	800c71c <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8003be6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bea:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8003bf4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bf8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8003c02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c06:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c16:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	b21a      	sxth	r2, r3
 8003c22:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c26:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8003c30:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c48:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8003c50:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c54:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c64:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003c68:	78db      	ldrb	r3, [r3, #3]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	b21a      	sxth	r2, r3
 8003c70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c74:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8003c7e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c82:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003c86:	789b      	ldrb	r3, [r3, #2]
 8003c88:	b21b      	sxth	r3, r3
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	b21a      	sxth	r2, r3
 8003c92:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c96:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8003c9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e5c <read_image_file_scaling+0x308>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8003e64 <read_image_file_scaling+0x310>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8003caa:	4b6f      	ldr	r3, [pc, #444]	@ (8003e68 <read_image_file_scaling+0x314>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8003cb0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cb4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a69      	ldr	r2, [pc, #420]	@ (8003e60 <read_image_file_scaling+0x30c>)
 8003cbc:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003cbe:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <read_image_file_scaling+0x30c>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f009 f883 	bl	800cdd4 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8003cce:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cd2:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8003cd6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cda:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003cde:	ed92 0a00 	vldr	s0, [r2]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	f7ff feb2 	bl	8003a4c <frame_number_x>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	4b5f      	ldr	r3, [pc, #380]	@ (8003e6c <read_image_file_scaling+0x318>)
 8003cee:	801a      	strh	r2, [r3, #0]
		*px = x;
 8003cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e6c <read_image_file_scaling+0x318>)
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cf8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8003d00:	4b5a      	ldr	r3, [pc, #360]	@ (8003e6c <read_image_file_scaling+0x318>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d0a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d125      	bne.n	8003d64 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8003d18:	4b53      	ldr	r3, [pc, #332]	@ (8003e68 <read_image_file_scaling+0x314>)
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8003d1e:	4b54      	ldr	r3, [pc, #336]	@ (8003e70 <read_image_file_scaling+0x31c>)
 8003d20:	2201      	movs	r2, #1
 8003d22:	601a      	str	r2, [r3, #0]
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8003d24:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d28:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d38:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d42:	fb03 f202 	mul.w	r2, r3, r2
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f009 fc4b 	bl	800d5e8 <malloc>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d5a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	e046      	b.n	8003df2 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->data = malloc(3*sizeof(char)*(entity->x1)*x);
 8003d64:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d68:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <read_image_file_scaling+0x318>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	fb03 f202 	mul.w	r2, r3, r2
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f009 fc30 	bl	800d5e8 <malloc>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d90:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8003d98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d9c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003da6:	461a      	mov	r2, r3
 8003da8:	4b30      	ldr	r3, [pc, #192]	@ (8003e6c <read_image_file_scaling+0x318>)
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	fb92 f3f3 	sdiv	r3, r2, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e70 <read_image_file_scaling+0x31c>)
 8003db4:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8003db6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003dba:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	@ (8003e6c <read_image_file_scaling+0x318>)
 8003dc6:	8812      	ldrh	r2, [r2, #0]
 8003dc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8003dcc:	fb01 f202 	mul.w	r2, r1, r2
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8003dd6:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <read_image_file_scaling+0x31c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <read_image_file_scaling+0x31c>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e007      	b.n	8003df2 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003de2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e60 <read_image_file_scaling+0x30c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f008 fff1 	bl	800cdd4 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <read_image_file_scaling+0x314>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03c      	beq.n	8003e74 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8003dfa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003dfe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68d9      	ldr	r1, [r3, #12]
 8003e06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003e0a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e14:	461a      	mov	r2, r3
 8003e16:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003e1a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e24:	fb03 f202 	mul.w	r2, r3, r2
 8003e28:	4613      	mov	r3, r2
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	441a      	add	r2, r3
 8003e2e:	f107 0320 	add.w	r3, r7, #32
 8003e32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003e36:	f008 fc71 	bl	800c71c <f_read>

		*flagTerm = 1;
 8003e3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003e3e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <read_image_file_scaling+0x308>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e52:	4618      	mov	r0, r3
 8003e54:	f008 ff94 	bl	800cd80 <f_close>
		return;
 8003e58:	e06b      	b.n	8003f32 <read_image_file_scaling+0x3de>
 8003e5a:	bf00      	nop
 8003e5c:	2000000a 	.word	0x2000000a
 8003e60:	20000580 	.word	0x20000580
 8003e64:	20000584 	.word	0x20000584
 8003e68:	20000586 	.word	0x20000586
 8003e6c:	20000588 	.word	0x20000588
 8003e70:	2000058c 	.word	0x2000058c

	}

	else
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8003e74:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003e78:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68d9      	ldr	r1, [r3, #12]
 8003e80:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003e84:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b2a      	ldr	r3, [pc, #168]	@ (8003f3c <read_image_file_scaling+0x3e8>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	fb03 f202 	mul.w	r2, r3, r2
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	f107 0320 	add.w	r3, r7, #32
 8003ea2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ea6:	f008 fc39 	bl	800c71c <f_read>

		currentFrame++;
 8003eaa:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <read_image_file_scaling+0x3ec>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	4b23      	ldr	r3, [pc, #140]	@ (8003f40 <read_image_file_scaling+0x3ec>)
 8003eb4:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 8003eb6:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <read_image_file_scaling+0x3ec>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b21      	ldr	r3, [pc, #132]	@ (8003f44 <read_image_file_scaling+0x3f0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d328      	bcc.n	8003f16 <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 8003ec4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003ec8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <read_image_file_scaling+0x3f0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b299      	uxth	r1, r3
 8003edc:	4b17      	ldr	r3, [pc, #92]	@ (8003f3c <read_image_file_scaling+0x3e8>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	fb11 f303 	smulbb	r3, r1, r3
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003eee:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 8003ef6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003efa:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 8003f04:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <read_image_file_scaling+0x3f4>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f008 ff36 	bl	800cd80 <f_close>
			return;
 8003f14:	e00d      	b.n	8003f32 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 8003f16:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003f1a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <read_image_file_scaling+0x3f8>)
 8003f22:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8003f24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f008 ff29 	bl	800cd80 <f_close>
 8003f2e:	e000      	b.n	8003f32 <read_image_file_scaling+0x3de>
		return;
 8003f30:	bf00      	nop

	}



}
 8003f32:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd90      	pop	{r4, r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000588 	.word	0x20000588
 8003f40:	20000584 	.word	0x20000584
 8003f44:	2000058c 	.word	0x2000058c
 8003f48:	2000000a 	.word	0x2000000a
 8003f4c:	20000580 	.word	0x20000580

08003f50 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003f5c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003f60:	6020      	str	r0, [r4, #0]
 8003f62:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8003f66:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003f6a:	6001      	str	r1, [r0, #0]
 8003f6c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003f70:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003f74:	600a      	str	r2, [r1, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003f7c:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003f80:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 8003f82:	4b4b      	ldr	r3, [pc, #300]	@ (80040b0 <write_image_file+0x160>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d04b      	beq.n	8004028 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003f90:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003f94:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003f98:	f107 001c 	add.w	r0, r7, #28
 8003f9c:	220a      	movs	r2, #10
 8003f9e:	6819      	ldr	r1, [r3, #0]
 8003fa0:	f008 fa02 	bl	800c3a8 <f_open>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 8003faa:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d177      	bne.n	80040a2 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 8003fb2:	4b40      	ldr	r3, [pc, #256]	@ (80040b4 <write_image_file+0x164>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 8003fb8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003fbc:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003fc8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003fcc:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 8003fce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003fd2:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fda:	121b      	asrs	r3, r3, #8
 8003fdc:	b21b      	sxth	r3, r3
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003fe4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003fe8:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 8003fea:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003ff4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003ff8:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8003ffa:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8003ffe:	121b      	asrs	r3, r3, #8
 8004000:	b21b      	sxth	r3, r3
 8004002:	b2da      	uxtb	r2, r3
 8004004:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004008:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800400c:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 800400e:	f107 0318 	add.w	r3, r7, #24
 8004012:	f107 0114 	add.w	r1, r7, #20
 8004016:	f107 001c 	add.w	r0, r7, #28
 800401a:	2204      	movs	r2, #4
 800401c:	f008 fcbd 	bl	800c99a <f_write>

		flagStart = 1;
 8004020:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <write_image_file+0x160>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e018      	b.n	800405a <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8004028:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800402c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004030:	f107 001c 	add.w	r0, r7, #28
 8004034:	2212      	movs	r2, #18
 8004036:	6819      	ldr	r1, [r3, #0]
 8004038:	f008 f9b6 	bl	800c3a8 <f_open>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8004042:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12d      	bne.n	80040a6 <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 800404a:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <write_image_file+0x164>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	f107 031c 	add.w	r3, r7, #28
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f008 febd 	bl	800cdd4 <f_lseek>

	}


	if(flagTerm == 1)
 800405a:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <write_image_file+0x118>
	{
		flagStart = 0;
 8004062:	4b13      	ldr	r3, [pc, #76]	@ (80040b0 <write_image_file+0x160>)
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8004068:	f107 0318 	add.w	r3, r7, #24
 800406c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8004070:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8004074:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8004078:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 800407c:	f107 001c 	add.w	r0, r7, #28
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	6809      	ldr	r1, [r1, #0]
 8004084:	f008 fc89 	bl	800c99a <f_write>
	currentPosition = f_tell(&file);
 8004088:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800408c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	4a08      	ldr	r2, [pc, #32]	@ (80040b4 <write_image_file+0x164>)
 8004094:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8004096:	f107 031c 	add.w	r3, r7, #28
 800409a:	4618      	mov	r0, r3
 800409c:	f008 fe70 	bl	800cd80 <f_close>
 80040a0:	e002      	b.n	80040a8 <write_image_file+0x158>
		    return;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <write_image_file+0x158>
		    return;
 80040a6:	bf00      	nop

}
 80040a8:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd90      	pop	{r4, r7, pc}
 80040b0:	20000590 	.word	0x20000590
 80040b4:	20000594 	.word	0x20000594

080040b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <HAL_MspInit+0x4c>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	4a0f      	ldr	r2, [pc, #60]	@ (8004104 <HAL_MspInit+0x4c>)
 80040c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <HAL_MspInit+0x4c>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <HAL_MspInit+0x4c>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	4a08      	ldr	r2, [pc, #32]	@ (8004104 <HAL_MspInit+0x4c>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_MspInit+0x4c>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800

08004108 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	@ 0x28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a30      	ldr	r2, [pc, #192]	@ (80041e8 <HAL_DAC_MspInit+0xe0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d159      	bne.n	80041de <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	4b2f      	ldr	r3, [pc, #188]	@ (80041ec <HAL_DAC_MspInit+0xe4>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	4a2e      	ldr	r2, [pc, #184]	@ (80041ec <HAL_DAC_MspInit+0xe4>)
 8004134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004138:	6413      	str	r3, [r2, #64]	@ 0x40
 800413a:	4b2c      	ldr	r3, [pc, #176]	@ (80041ec <HAL_DAC_MspInit+0xe4>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b28      	ldr	r3, [pc, #160]	@ (80041ec <HAL_DAC_MspInit+0xe4>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	4a27      	ldr	r2, [pc, #156]	@ (80041ec <HAL_DAC_MspInit+0xe4>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6313      	str	r3, [r2, #48]	@ 0x30
 8004156:	4b25      	ldr	r3, [pc, #148]	@ (80041ec <HAL_DAC_MspInit+0xe4>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004162:	2310      	movs	r3, #16
 8004164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004166:	2303      	movs	r3, #3
 8004168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800416e:	f107 0314 	add.w	r3, r7, #20
 8004172:	4619      	mov	r1, r3
 8004174:	481e      	ldr	r0, [pc, #120]	@ (80041f0 <HAL_DAC_MspInit+0xe8>)
 8004176:	f001 fa73 	bl	8005660 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 800417c:	4a1e      	ldr	r2, [pc, #120]	@ (80041f8 <HAL_DAC_MspInit+0xf0>)
 800417e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004180:	4b1c      	ldr	r3, [pc, #112]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 8004182:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8004186:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004188:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 800418a:	2240      	movs	r2, #64	@ 0x40
 800418c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800418e:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 8004190:	2200      	movs	r2, #0
 8004192:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004194:	4b17      	ldr	r3, [pc, #92]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 8004196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800419a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800419c:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 800419e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041a2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80041a4:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041aa:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041b2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80041b4:	4b0f      	ldr	r3, [pc, #60]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80041ba:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041bc:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041be:	2200      	movs	r2, #0
 80041c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80041c2:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041c4:	f000 fe4a 	bl	8004e5c <HAL_DMA_Init>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80041ce:	f7ff f8b7 	bl	8003340 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a07      	ldr	r2, [pc, #28]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	4a06      	ldr	r2, [pc, #24]	@ (80041f4 <HAL_DAC_MspInit+0xec>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80041de:	bf00      	nop
 80041e0:	3728      	adds	r7, #40	@ 0x28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40007400 	.word	0x40007400
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40020000 	.word	0x40020000
 80041f4:	200000a0 	.word	0x200000a0
 80041f8:	40026088 	.word	0x40026088

080041fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	@ 0x28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a31      	ldr	r2, [pc, #196]	@ (80042e0 <HAL_SD_MspInit+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d15b      	bne.n	80042d6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	4b30      	ldr	r3, [pc, #192]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	4a2f      	ldr	r2, [pc, #188]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004228:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800422c:	6453      	str	r3, [r2, #68]	@ 0x44
 800422e:	4b2d      	ldr	r3, [pc, #180]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	4b29      	ldr	r3, [pc, #164]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	4a28      	ldr	r2, [pc, #160]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6313      	str	r3, [r2, #48]	@ 0x30
 800424a:	4b26      	ldr	r3, [pc, #152]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425e:	4a21      	ldr	r2, [pc, #132]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004260:	f043 0308 	orr.w	r3, r3, #8
 8004264:	6313      	str	r3, [r2, #48]	@ 0x30
 8004266:	4b1f      	ldr	r3, [pc, #124]	@ (80042e4 <HAL_SD_MspInit+0xe8>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004278:	2302      	movs	r3, #2
 800427a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800427c:	2301      	movs	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004280:	2303      	movs	r3, #3
 8004282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004284:	230c      	movs	r3, #12
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	4619      	mov	r1, r3
 800428e:	4816      	ldr	r0, [pc, #88]	@ (80042e8 <HAL_SD_MspInit+0xec>)
 8004290:	f001 f9e6 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429a:	2302      	movs	r3, #2
 800429c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a2:	2303      	movs	r3, #3
 80042a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80042a6:	230c      	movs	r3, #12
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042aa:	f107 0314 	add.w	r3, r7, #20
 80042ae:	4619      	mov	r1, r3
 80042b0:	480d      	ldr	r0, [pc, #52]	@ (80042e8 <HAL_SD_MspInit+0xec>)
 80042b2:	f001 f9d5 	bl	8005660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042b6:	2304      	movs	r3, #4
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	2302      	movs	r3, #2
 80042bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042be:	2301      	movs	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80042c6:	230c      	movs	r3, #12
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	4619      	mov	r1, r3
 80042d0:	4806      	ldr	r0, [pc, #24]	@ (80042ec <HAL_SD_MspInit+0xf0>)
 80042d2:	f001 f9c5 	bl	8005660 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80042d6:	bf00      	nop
 80042d8:	3728      	adds	r7, #40	@ 0x28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00

080042f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	60da      	str	r2, [r3, #12]
 8004306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a47      	ldr	r2, [pc, #284]	@ (800442c <HAL_SPI_MspInit+0x13c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	f040 8088 	bne.w	8004424 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	4b45      	ldr	r3, [pc, #276]	@ (8004430 <HAL_SPI_MspInit+0x140>)
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	4a44      	ldr	r2, [pc, #272]	@ (8004430 <HAL_SPI_MspInit+0x140>)
 800431e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004322:	6453      	str	r3, [r2, #68]	@ 0x44
 8004324:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <HAL_SPI_MspInit+0x140>)
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <HAL_SPI_MspInit+0x140>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	4a3d      	ldr	r2, [pc, #244]	@ (8004430 <HAL_SPI_MspInit+0x140>)
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004340:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <HAL_SPI_MspInit+0x140>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800434c:	23e0      	movs	r3, #224	@ 0xe0
 800434e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004350:	2302      	movs	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004358:	2303      	movs	r3, #3
 800435a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800435c:	2305      	movs	r3, #5
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004360:	f107 0314 	add.w	r3, r7, #20
 8004364:	4619      	mov	r1, r3
 8004366:	4833      	ldr	r0, [pc, #204]	@ (8004434 <HAL_SPI_MspInit+0x144>)
 8004368:	f001 f97a 	bl	8005660 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800436c:	4b32      	ldr	r3, [pc, #200]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 800436e:	4a33      	ldr	r2, [pc, #204]	@ (800443c <HAL_SPI_MspInit+0x14c>)
 8004370:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 8004374:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004378:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800437a:	4b2f      	ldr	r3, [pc, #188]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 800437c:	2240      	movs	r2, #64	@ 0x40
 800437e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004380:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 8004382:	2200      	movs	r2, #0
 8004384:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004386:	4b2c      	ldr	r3, [pc, #176]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 8004388:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800438e:	4b2a      	ldr	r3, [pc, #168]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 8004390:	2200      	movs	r2, #0
 8004392:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004394:	4b28      	ldr	r3, [pc, #160]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 8004396:	2200      	movs	r2, #0
 8004398:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800439a:	4b27      	ldr	r3, [pc, #156]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 800439c:	2200      	movs	r2, #0
 800439e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043a0:	4b25      	ldr	r3, [pc, #148]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043a6:	4b24      	ldr	r3, [pc, #144]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80043ac:	4822      	ldr	r0, [pc, #136]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 80043ae:	f000 fd55 	bl	8004e5c <HAL_DMA_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80043b8:	f7fe ffc2 	bl	8003340 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1e      	ldr	r2, [pc, #120]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 80043c0:	649a      	str	r2, [r3, #72]	@ 0x48
 80043c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <HAL_SPI_MspInit+0x148>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004444 <HAL_SPI_MspInit+0x154>)
 80043cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80043ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043d0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80043d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043d8:	2200      	movs	r2, #0
 80043da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043dc:	4b18      	ldr	r3, [pc, #96]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043de:	2200      	movs	r2, #0
 80043e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043e2:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043f0:	4b13      	ldr	r3, [pc, #76]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80043f6:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043fc:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 80043fe:	2200      	movs	r2, #0
 8004400:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004402:	4b0f      	ldr	r3, [pc, #60]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 8004404:	2200      	movs	r2, #0
 8004406:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004408:	480d      	ldr	r0, [pc, #52]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 800440a:	f000 fd27 	bl	8004e5c <HAL_DMA_Init>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004414:	f7fe ff94 	bl	8003340 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 800441c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800441e:	4a08      	ldr	r2, [pc, #32]	@ (8004440 <HAL_SPI_MspInit+0x150>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004424:	bf00      	nop
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40013000 	.word	0x40013000
 8004430:	40023800 	.word	0x40023800
 8004434:	40020000 	.word	0x40020000
 8004438:	200001dc 	.word	0x200001dc
 800443c:	40026458 	.word	0x40026458
 8004440:	2000023c 	.word	0x2000023c
 8004444:	40026410 	.word	0x40026410

08004448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004458:	d10d      	bne.n	8004476 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <HAL_TIM_Base_MspInit+0x3c>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <HAL_TIM_Base_MspInit+0x3c>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6413      	str	r3, [r2, #64]	@ 0x40
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_TIM_Base_MspInit+0x3c>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800

08004488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	@ 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004490:	f107 0314 	add.w	r3, r7, #20
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <HAL_UART_MspInit+0x94>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d134      	bne.n	8004514 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004520 <HAL_UART_MspInit+0x98>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_UART_MspInit+0x98>)
 80044b4:	f043 0310 	orr.w	r3, r3, #16
 80044b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ba:	4b19      	ldr	r3, [pc, #100]	@ (8004520 <HAL_UART_MspInit+0x98>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <HAL_UART_MspInit+0x98>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	4a14      	ldr	r2, [pc, #80]	@ (8004520 <HAL_UART_MspInit+0x98>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044d6:	4b12      	ldr	r3, [pc, #72]	@ (8004520 <HAL_UART_MspInit+0x98>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e8:	2302      	movs	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f0:	2303      	movs	r3, #3
 80044f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044f4:	2307      	movs	r3, #7
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4619      	mov	r1, r3
 80044fe:	4809      	ldr	r0, [pc, #36]	@ (8004524 <HAL_UART_MspInit+0x9c>)
 8004500:	f001 f8ae 	bl	8005660 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004504:	2200      	movs	r2, #0
 8004506:	2100      	movs	r1, #0
 8004508:	2025      	movs	r0, #37	@ 0x25
 800450a:	f000 fa48 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800450e:	2025      	movs	r0, #37	@ 0x25
 8004510:	f000 fa61 	bl	80049d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004514:	bf00      	nop
 8004516:	3728      	adds	r7, #40	@ 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40011000 	.word	0x40011000
 8004520:	40023800 	.word	0x40023800
 8004524:	40020000 	.word	0x40020000

08004528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <NMI_Handler+0x4>

08004530 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <HardFault_Handler+0x4>

08004538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <MemManage_Handler+0x4>

08004540 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <BusFault_Handler+0x4>

08004548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <UsageFault_Handler+0x4>

08004550 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800457e:	f000 f8ef 	bl	8004760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800458c:	4802      	ldr	r0, [pc, #8]	@ (8004598 <DMA1_Stream5_IRQHandler+0x10>)
 800458e:	f000 fdfd 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004592:	bf00      	nop
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200000a0 	.word	0x200000a0

0800459c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045a0:	4802      	ldr	r0, [pc, #8]	@ (80045ac <USART1_IRQHandler+0x10>)
 80045a2:	f004 fb85 	bl	8008cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200002e4 	.word	0x200002e4

080045b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80045b4:	4802      	ldr	r0, [pc, #8]	@ (80045c0 <DMA2_Stream0_IRQHandler+0x10>)
 80045b6:	f000 fde9 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2000023c 	.word	0x2000023c

080045c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80045c8:	4802      	ldr	r0, [pc, #8]	@ (80045d4 <DMA2_Stream3_IRQHandler+0x10>)
 80045ca:	f000 fddf 	bl	800518c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200001dc 	.word	0x200001dc

080045d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045e0:	4a14      	ldr	r2, [pc, #80]	@ (8004634 <_sbrk+0x5c>)
 80045e2:	4b15      	ldr	r3, [pc, #84]	@ (8004638 <_sbrk+0x60>)
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <_sbrk+0x64>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <_sbrk+0x64>)
 80045f6:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <_sbrk+0x68>)
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045fa:	4b10      	ldr	r3, [pc, #64]	@ (800463c <_sbrk+0x64>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	429a      	cmp	r2, r3
 8004606:	d207      	bcs.n	8004618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004608:	f009 f90a 	bl	800d820 <__errno>
 800460c:	4603      	mov	r3, r0
 800460e:	220c      	movs	r2, #12
 8004610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
 8004616:	e009      	b.n	800462c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004618:	4b08      	ldr	r3, [pc, #32]	@ (800463c <_sbrk+0x64>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800461e:	4b07      	ldr	r3, [pc, #28]	@ (800463c <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	4a05      	ldr	r2, [pc, #20]	@ (800463c <_sbrk+0x64>)
 8004628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20020000 	.word	0x20020000
 8004638:	00000400 	.word	0x00000400
 800463c:	20000598 	.word	0x20000598
 8004640:	20000728 	.word	0x20000728

08004644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <SystemInit+0x20>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	4a05      	ldr	r2, [pc, #20]	@ (8004664 <SystemInit+0x20>)
 8004650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800466c:	f7ff ffea 	bl	8004644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004670:	480c      	ldr	r0, [pc, #48]	@ (80046a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004672:	490d      	ldr	r1, [pc, #52]	@ (80046a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004674:	4a0d      	ldr	r2, [pc, #52]	@ (80046ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004678:	e002      	b.n	8004680 <LoopCopyDataInit>

0800467a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800467a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800467c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800467e:	3304      	adds	r3, #4

08004680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004684:	d3f9      	bcc.n	800467a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004686:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004688:	4c0a      	ldr	r4, [pc, #40]	@ (80046b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800468a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800468c:	e001      	b.n	8004692 <LoopFillZerobss>

0800468e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800468e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004690:	3204      	adds	r2, #4

08004692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004694:	d3fb      	bcc.n	800468e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004696:	f009 f8c9 	bl	800d82c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800469a:	f7fe f9d7 	bl	8002a4c <main>
  bx  lr    
 800469e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80046a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80046ac:	0800e8cc 	.word	0x0800e8cc
  ldr r2, =_sbss
 80046b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80046b4:	20000724 	.word	0x20000724

080046b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046b8:	e7fe      	b.n	80046b8 <ADC_IRQHandler>
	...

080046bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c0:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <HAL_Init+0x40>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0d      	ldr	r2, [pc, #52]	@ (80046fc <HAL_Init+0x40>)
 80046c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_Init+0x40>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <HAL_Init+0x40>)
 80046d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046d8:	4b08      	ldr	r3, [pc, #32]	@ (80046fc <HAL_Init+0x40>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a07      	ldr	r2, [pc, #28]	@ (80046fc <HAL_Init+0x40>)
 80046de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e4:	2003      	movs	r0, #3
 80046e6:	f000 f94f 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ea:	200f      	movs	r0, #15
 80046ec:	f000 f808 	bl	8004700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f0:	f7ff fce2 	bl	80040b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023c00 	.word	0x40023c00

08004700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_InitTick+0x54>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b12      	ldr	r3, [pc, #72]	@ (8004758 <HAL_InitTick+0x58>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004716:	fbb3 f3f1 	udiv	r3, r3, r1
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f967 	bl	80049f2 <HAL_SYSTICK_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e00e      	b.n	800474c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b0f      	cmp	r3, #15
 8004732:	d80a      	bhi.n	800474a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004734:	2200      	movs	r2, #0
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
 800473c:	f000 f92f 	bl	800499e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004740:	4a06      	ldr	r2, [pc, #24]	@ (800475c <HAL_InitTick+0x5c>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	2000000c 	.word	0x2000000c
 8004758:	20000014 	.word	0x20000014
 800475c:	20000010 	.word	0x20000010

08004760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_IncTick+0x20>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_IncTick+0x24>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4413      	add	r3, r2
 8004770:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <HAL_IncTick+0x24>)
 8004772:	6013      	str	r3, [r2, #0]
}
 8004774:	bf00      	nop
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000014 	.word	0x20000014
 8004784:	2000059c 	.word	0x2000059c

08004788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return uwTick;
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_GetTick+0x14>)
 800478e:	681b      	ldr	r3, [r3, #0]
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2000059c 	.word	0x2000059c

080047a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047a8:	f7ff ffee 	bl	8004788 <HAL_GetTick>
 80047ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d005      	beq.n	80047c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ba:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <HAL_Delay+0x44>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047c6:	bf00      	nop
 80047c8:	f7ff ffde 	bl	8004788 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d8f7      	bhi.n	80047c8 <HAL_Delay+0x28>
  {
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000014 	.word	0x20000014

080047e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f8:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <__NVIC_SetPriorityGrouping+0x44>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800481a:	4a04      	ldr	r2, [pc, #16]	@ (800482c <__NVIC_SetPriorityGrouping+0x44>)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	60d3      	str	r3, [r2, #12]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000ed00 	.word	0xe000ed00

08004830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <__NVIC_GetPriorityGrouping+0x18>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 0307 	and.w	r3, r3, #7
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485a:	2b00      	cmp	r3, #0
 800485c:	db0b      	blt.n	8004876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	f003 021f 	and.w	r2, r3, #31
 8004864:	4907      	ldr	r1, [pc, #28]	@ (8004884 <__NVIC_EnableIRQ+0x38>)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2001      	movs	r0, #1
 800486e:	fa00 f202 	lsl.w	r2, r0, r2
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000e100 	.word	0xe000e100

08004888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004898:	2b00      	cmp	r3, #0
 800489a:	db0a      	blt.n	80048b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	490c      	ldr	r1, [pc, #48]	@ (80048d4 <__NVIC_SetPriority+0x4c>)
 80048a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	440b      	add	r3, r1
 80048ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b0:	e00a      	b.n	80048c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4908      	ldr	r1, [pc, #32]	@ (80048d8 <__NVIC_SetPriority+0x50>)
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3b04      	subs	r3, #4
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	761a      	strb	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000e100 	.word	0xe000e100
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	@ 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f1c3 0307 	rsb	r3, r3, #7
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf28      	it	cs
 80048fa:	2304      	movcs	r3, #4
 80048fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	2b06      	cmp	r3, #6
 8004904:	d902      	bls.n	800490c <NVIC_EncodePriority+0x30>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3b03      	subs	r3, #3
 800490a:	e000      	b.n	800490e <NVIC_EncodePriority+0x32>
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	401a      	ands	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004924:	f04f 31ff 	mov.w	r1, #4294967295
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	43d9      	mvns	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	4313      	orrs	r3, r2
         );
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	@ 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004954:	d301      	bcc.n	800495a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004956:	2301      	movs	r3, #1
 8004958:	e00f      	b.n	800497a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <SysTick_Config+0x40>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004962:	210f      	movs	r1, #15
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	f7ff ff8e 	bl	8004888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <SysTick_Config+0x40>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004972:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <SysTick_Config+0x40>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000e010 	.word	0xe000e010

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff29 	bl	80047e8 <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049b0:	f7ff ff3e 	bl	8004830 <__NVIC_GetPriorityGrouping>
 80049b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	6978      	ldr	r0, [r7, #20]
 80049bc:	f7ff ff8e 	bl	80048dc <NVIC_EncodePriority>
 80049c0:	4602      	mov	r2, r0
 80049c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff ff5d 	bl	8004888 <__NVIC_SetPriority>
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4603      	mov	r3, r0
 80049de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff31 	bl	800484c <__NVIC_EnableIRQ>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ffa2 	bl	8004944 <SysTick_Config>
 8004a00:	4603      	mov	r3, r0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e014      	b.n	8004a46 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	791b      	ldrb	r3, [r3, #4]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fb6b 	bl	8004108 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0a2      	b.n	8004bb2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	795b      	ldrb	r3, [r3, #5]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_DAC_Start_DMA+0x28>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e09c      	b.n	8004bb2 <HAL_DAC_Start_DMA+0x162>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2202      	movs	r2, #2
 8004a82:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d129      	bne.n	8004ade <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4a4b      	ldr	r2, [pc, #300]	@ (8004bbc <HAL_DAC_Start_DMA+0x16c>)
 8004a90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc0 <HAL_DAC_Start_DMA+0x170>)
 8004a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4a49      	ldr	r2, [pc, #292]	@ (8004bc4 <HAL_DAC_Start_DMA+0x174>)
 8004aa0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ab0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DAC_Start_DMA+0x70>
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d005      	beq.n	8004aca <HAL_DAC_Start_DMA+0x7a>
 8004abe:	e009      	b.n	8004ad4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	613b      	str	r3, [r7, #16]
        break;
 8004ac8:	e033      	b.n	8004b32 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	613b      	str	r3, [r7, #16]
        break;
 8004ad2:	e02e      	b.n	8004b32 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3310      	adds	r3, #16
 8004ada:	613b      	str	r3, [r7, #16]
        break;
 8004adc:	e029      	b.n	8004b32 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4a39      	ldr	r2, [pc, #228]	@ (8004bc8 <HAL_DAC_Start_DMA+0x178>)
 8004ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4a38      	ldr	r2, [pc, #224]	@ (8004bcc <HAL_DAC_Start_DMA+0x17c>)
 8004aec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4a37      	ldr	r2, [pc, #220]	@ (8004bd0 <HAL_DAC_Start_DMA+0x180>)
 8004af4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DAC_Start_DMA+0xc4>
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d005      	beq.n	8004b1e <HAL_DAC_Start_DMA+0xce>
 8004b12:	e009      	b.n	8004b28 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	613b      	str	r3, [r7, #16]
        break;
 8004b1c:	e009      	b.n	8004b32 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3318      	adds	r3, #24
 8004b24:	613b      	str	r3, [r7, #16]
        break;
 8004b26:	e004      	b.n	8004b32 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	331c      	adds	r3, #28
 8004b2e:	613b      	str	r3, [r7, #16]
        break;
 8004b30:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d111      	bne.n	8004b5c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b46:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6898      	ldr	r0, [r3, #8]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	f000 fa31 	bl	8004fb8 <HAL_DMA_Start_IT>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75fb      	strb	r3, [r7, #23]
 8004b5a:	e010      	b.n	8004b7e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004b6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68d8      	ldr	r0, [r3, #12]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	f000 fa1f 	bl	8004fb8 <HAL_DMA_Start_IT>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10c      	bne.n	8004ba4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e005      	b.n	8004bb0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f043 0204 	orr.w	r2, r3, #4
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	08004d49 	.word	0x08004d49
 8004bc0:	08004d6b 	.word	0x08004d6b
 8004bc4:	08004d87 	.word	0x08004d87
 8004bc8:	08004df1 	.word	0x08004df1
 8004bcc:	08004e13 	.word	0x08004e13
 8004bd0:	08004e2f 	.word	0x08004e2f

08004bd4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e03e      	b.n	8004c66 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	400a      	ands	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2201      	movs	r2, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	400a      	ands	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fa1b 	bl	8005068 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e00c      	b.n	8004c5e <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fa0d 	bl	8005068 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004c5c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b089      	sub	sp, #36	@ 0x24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_DAC_ConfigChannel+0x1c>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e042      	b.n	8004d3c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	795b      	ldrb	r3, [r3, #5]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_DAC_ConfigChannel+0x2c>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e03c      	b.n	8004d3c <HAL_DAC_ConfigChannel+0xa6>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	22c0      	movs	r2, #192	@ 0xc0
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3724      	adds	r7, #36	@ 0x24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff ff89 	bl	8004c6e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	711a      	strb	r2, [r3, #4]
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7fd fe57 	bl	8002a2c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f043 0204 	orr.w	r2, r3, #4
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff ff6e 	bl	8004c82 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	711a      	strb	r2, [r3, #4]
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ffd8 	bl	8004db4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2201      	movs	r2, #1
 8004e08:	711a      	strb	r2, [r3, #4]
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff ffd1 	bl	8004dc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f043 0204 	orr.w	r2, r3, #4
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ffc7 	bl	8004ddc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	711a      	strb	r2, [r3, #4]
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e68:	f7ff fc8e 	bl	8004788 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e099      	b.n	8004fac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e98:	e00f      	b.n	8004eba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e9a:	f7ff fc75 	bl	8004788 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d908      	bls.n	8004eba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e078      	b.n	8004fac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e8      	bne.n	8004e9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4b38      	ldr	r3, [pc, #224]	@ (8004fb4 <HAL_DMA_Init+0x158>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d107      	bne.n	8004f24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d117      	bne.n	8004f7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00e      	beq.n	8004f7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fb01 	bl	8005568 <DMA_CheckFifoParam>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2240      	movs	r2, #64	@ 0x40
 8004f70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e016      	b.n	8004fac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fab8 	bl	80054fc <DMA_CalcBaseAndBitshift>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f94:	223f      	movs	r2, #63	@ 0x3f
 8004f96:	409a      	lsls	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	f010803f 	.word	0xf010803f

08004fb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_DMA_Start_IT+0x26>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e040      	b.n	8005060 <HAL_DMA_Start_IT+0xa8>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d12f      	bne.n	8005052 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa4a 	bl	80054a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005010:	223f      	movs	r2, #63	@ 0x3f
 8005012:	409a      	lsls	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0216 	orr.w	r2, r2, #22
 8005026:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e005      	b.n	800505e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800505a:	2302      	movs	r3, #2
 800505c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800505e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005074:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005076:	f7ff fb87 	bl	8004788 <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d008      	beq.n	800509a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2280      	movs	r2, #128	@ 0x80
 800508c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e052      	b.n	8005140 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0216 	bic.w	r2, r2, #22
 80050a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <HAL_DMA_Abort+0x62>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0208 	bic.w	r2, r2, #8
 80050d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ea:	e013      	b.n	8005114 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050ec:	f7ff fb4c 	bl	8004788 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b05      	cmp	r3, #5
 80050f8:	d90c      	bls.n	8005114 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2203      	movs	r2, #3
 8005104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e015      	b.n	8005140 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e4      	bne.n	80050ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005126:	223f      	movs	r2, #63	@ 0x3f
 8005128:	409a      	lsls	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d004      	beq.n	8005166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2280      	movs	r2, #128	@ 0x80
 8005160:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e00c      	b.n	8005180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2205      	movs	r2, #5
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0201 	bic.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005198:	4b8e      	ldr	r3, [pc, #568]	@ (80053d4 <HAL_DMA_IRQHandler+0x248>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a8e      	ldr	r2, [pc, #568]	@ (80053d8 <HAL_DMA_IRQHandler+0x24c>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0a9b      	lsrs	r3, r3, #10
 80051a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b6:	2208      	movs	r2, #8
 80051b8:	409a      	lsls	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01a      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d013      	beq.n	80051f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0204 	bic.w	r2, r2, #4
 80051de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e4:	2208      	movs	r2, #8
 80051e6:	409a      	lsls	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f0:	f043 0201 	orr.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d012      	beq.n	800522e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800521a:	2201      	movs	r2, #1
 800521c:	409a      	lsls	r2, r3
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005226:	f043 0202 	orr.w	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005232:	2204      	movs	r2, #4
 8005234:	409a      	lsls	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4013      	ands	r3, r2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d012      	beq.n	8005264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005250:	2204      	movs	r2, #4
 8005252:	409a      	lsls	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005268:	2210      	movs	r2, #16
 800526a:	409a      	lsls	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d043      	beq.n	80052fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d03c      	beq.n	80052fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005286:	2210      	movs	r2, #16
 8005288:	409a      	lsls	r2, r3
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d018      	beq.n	80052ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d108      	bne.n	80052bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d024      	beq.n	80052fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
 80052ba:	e01f      	b.n	80052fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01b      	beq.n	80052fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	e016      	b.n	80052fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d107      	bne.n	80052ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0208 	bic.w	r2, r2, #8
 80052ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005300:	2220      	movs	r2, #32
 8005302:	409a      	lsls	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 808f 	beq.w	800542c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8087 	beq.w	800542c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005322:	2220      	movs	r2, #32
 8005324:	409a      	lsls	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b05      	cmp	r3, #5
 8005334:	d136      	bne.n	80053a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0216 	bic.w	r2, r2, #22
 8005344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <HAL_DMA_IRQHandler+0x1da>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0208 	bic.w	r2, r2, #8
 8005374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800537a:	223f      	movs	r2, #63	@ 0x3f
 800537c:	409a      	lsls	r2, r3
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005396:	2b00      	cmp	r3, #0
 8005398:	d07e      	beq.n	8005498 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
        }
        return;
 80053a2:	e079      	b.n	8005498 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01d      	beq.n	80053ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d031      	beq.n	800542c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	4798      	blx	r3
 80053d0:	e02c      	b.n	800542c <HAL_DMA_IRQHandler+0x2a0>
 80053d2:	bf00      	nop
 80053d4:	2000000c 	.word	0x2000000c
 80053d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d023      	beq.n	800542c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4798      	blx	r3
 80053ec:	e01e      	b.n	800542c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10f      	bne.n	800541c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0210 	bic.w	r2, r2, #16
 800540a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	2b00      	cmp	r3, #0
 8005432:	d032      	beq.n	800549a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d022      	beq.n	8005486 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2205      	movs	r2, #5
 8005444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	3301      	adds	r3, #1
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	429a      	cmp	r2, r3
 8005462:	d307      	bcc.n	8005474 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f2      	bne.n	8005458 <HAL_DMA_IRQHandler+0x2cc>
 8005472:	e000      	b.n	8005476 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005474:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
 8005496:	e000      	b.n	800549a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005498:	bf00      	nop
    }
  }
}
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	d108      	bne.n	80054e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054de:	e007      	b.n	80054f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	60da      	str	r2, [r3, #12]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	3b10      	subs	r3, #16
 800550c:	4a14      	ldr	r2, [pc, #80]	@ (8005560 <DMA_CalcBaseAndBitshift+0x64>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005516:	4a13      	ldr	r2, [pc, #76]	@ (8005564 <DMA_CalcBaseAndBitshift+0x68>)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d909      	bls.n	800553e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005532:	f023 0303 	bic.w	r3, r3, #3
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	659a      	str	r2, [r3, #88]	@ 0x58
 800553c:	e007      	b.n	800554e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	aaaaaaab 	.word	0xaaaaaaab
 8005564:	0800e820 	.word	0x0800e820

08005568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11f      	bne.n	80055c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d856      	bhi.n	8005636 <DMA_CheckFifoParam+0xce>
 8005588:	a201      	add	r2, pc, #4	@ (adr r2, 8005590 <DMA_CheckFifoParam+0x28>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055b3 	.word	0x080055b3
 8005598:	080055a1 	.word	0x080055a1
 800559c:	08005637 	.word	0x08005637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d046      	beq.n	800563a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b0:	e043      	b.n	800563a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055ba:	d140      	bne.n	800563e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c0:	e03d      	b.n	800563e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055ca:	d121      	bne.n	8005610 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d837      	bhi.n	8005642 <DMA_CheckFifoParam+0xda>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <DMA_CheckFifoParam+0x70>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055ef 	.word	0x080055ef
 80055e0:	080055e9 	.word	0x080055e9
 80055e4:	08005601 	.word	0x08005601
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]
      break;
 80055ec:	e030      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d025      	beq.n	8005646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055fe:	e022      	b.n	8005646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005608:	d11f      	bne.n	800564a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800560e:	e01c      	b.n	800564a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d903      	bls.n	800561e <DMA_CheckFifoParam+0xb6>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d003      	beq.n	8005624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800561c:	e018      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
      break;
 8005622:	e015      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00e      	beq.n	800564e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
      break;
 8005634:	e00b      	b.n	800564e <DMA_CheckFifoParam+0xe6>
      break;
 8005636:	bf00      	nop
 8005638:	e00a      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      break;
 800563a:	bf00      	nop
 800563c:	e008      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      break;
 800563e:	bf00      	nop
 8005640:	e006      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      break;
 8005642:	bf00      	nop
 8005644:	e004      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      break;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      break;   
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <DMA_CheckFifoParam+0xe8>
      break;
 800564e:	bf00      	nop
    }
  } 
  
  return status; 
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop

08005660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005660:	b480      	push	{r7}
 8005662:	b089      	sub	sp, #36	@ 0x24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	e16b      	b.n	8005954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800567c:	2201      	movs	r2, #1
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	429a      	cmp	r2, r3
 8005696:	f040 815a 	bne.w	800594e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d005      	beq.n	80056b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d130      	bne.n	8005714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	2203      	movs	r2, #3
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	005b      	lsls	r3, r3, #1
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056e8:	2201      	movs	r2, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	4013      	ands	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 0201 	and.w	r2, r3, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b03      	cmp	r3, #3
 800571e:	d017      	beq.n	8005750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	2203      	movs	r2, #3
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	43db      	mvns	r3, r3
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	4013      	ands	r3, r2
 8005736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4313      	orrs	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d123      	bne.n	80057a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	08da      	lsrs	r2, r3, #3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3208      	adds	r2, #8
 8005764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	220f      	movs	r2, #15
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	08da      	lsrs	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3208      	adds	r2, #8
 800579e:	69b9      	ldr	r1, [r7, #24]
 80057a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	2203      	movs	r2, #3
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 0203 	and.w	r2, r3, #3
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80b4 	beq.w	800594e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	4b60      	ldr	r3, [pc, #384]	@ (800596c <HAL_GPIO_Init+0x30c>)
 80057ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ee:	4a5f      	ldr	r2, [pc, #380]	@ (800596c <HAL_GPIO_Init+0x30c>)
 80057f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80057f6:	4b5d      	ldr	r3, [pc, #372]	@ (800596c <HAL_GPIO_Init+0x30c>)
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005802:	4a5b      	ldr	r2, [pc, #364]	@ (8005970 <HAL_GPIO_Init+0x310>)
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	3302      	adds	r3, #2
 800580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	220f      	movs	r2, #15
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a52      	ldr	r2, [pc, #328]	@ (8005974 <HAL_GPIO_Init+0x314>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d02b      	beq.n	8005886 <HAL_GPIO_Init+0x226>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a51      	ldr	r2, [pc, #324]	@ (8005978 <HAL_GPIO_Init+0x318>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d025      	beq.n	8005882 <HAL_GPIO_Init+0x222>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a50      	ldr	r2, [pc, #320]	@ (800597c <HAL_GPIO_Init+0x31c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01f      	beq.n	800587e <HAL_GPIO_Init+0x21e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a4f      	ldr	r2, [pc, #316]	@ (8005980 <HAL_GPIO_Init+0x320>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d019      	beq.n	800587a <HAL_GPIO_Init+0x21a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a4e      	ldr	r2, [pc, #312]	@ (8005984 <HAL_GPIO_Init+0x324>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_GPIO_Init+0x216>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a4d      	ldr	r2, [pc, #308]	@ (8005988 <HAL_GPIO_Init+0x328>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00d      	beq.n	8005872 <HAL_GPIO_Init+0x212>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a4c      	ldr	r2, [pc, #304]	@ (800598c <HAL_GPIO_Init+0x32c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <HAL_GPIO_Init+0x20e>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a4b      	ldr	r2, [pc, #300]	@ (8005990 <HAL_GPIO_Init+0x330>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <HAL_GPIO_Init+0x20a>
 8005866:	2307      	movs	r3, #7
 8005868:	e00e      	b.n	8005888 <HAL_GPIO_Init+0x228>
 800586a:	2308      	movs	r3, #8
 800586c:	e00c      	b.n	8005888 <HAL_GPIO_Init+0x228>
 800586e:	2306      	movs	r3, #6
 8005870:	e00a      	b.n	8005888 <HAL_GPIO_Init+0x228>
 8005872:	2305      	movs	r3, #5
 8005874:	e008      	b.n	8005888 <HAL_GPIO_Init+0x228>
 8005876:	2304      	movs	r3, #4
 8005878:	e006      	b.n	8005888 <HAL_GPIO_Init+0x228>
 800587a:	2303      	movs	r3, #3
 800587c:	e004      	b.n	8005888 <HAL_GPIO_Init+0x228>
 800587e:	2302      	movs	r3, #2
 8005880:	e002      	b.n	8005888 <HAL_GPIO_Init+0x228>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <HAL_GPIO_Init+0x228>
 8005886:	2300      	movs	r3, #0
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	f002 0203 	and.w	r2, r2, #3
 800588e:	0092      	lsls	r2, r2, #2
 8005890:	4093      	lsls	r3, r2
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005898:	4935      	ldr	r1, [pc, #212]	@ (8005970 <HAL_GPIO_Init+0x310>)
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	089b      	lsrs	r3, r3, #2
 800589e:	3302      	adds	r3, #2
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005994 <HAL_GPIO_Init+0x334>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4013      	ands	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058ca:	4a32      	ldr	r2, [pc, #200]	@ (8005994 <HAL_GPIO_Init+0x334>)
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058d0:	4b30      	ldr	r3, [pc, #192]	@ (8005994 <HAL_GPIO_Init+0x334>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058f4:	4a27      	ldr	r2, [pc, #156]	@ (8005994 <HAL_GPIO_Init+0x334>)
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058fa:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <HAL_GPIO_Init+0x334>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	43db      	mvns	r3, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4013      	ands	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800591e:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <HAL_GPIO_Init+0x334>)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005924:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <HAL_GPIO_Init+0x334>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005948:	4a12      	ldr	r2, [pc, #72]	@ (8005994 <HAL_GPIO_Init+0x334>)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3301      	adds	r3, #1
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	f67f ae90 	bls.w	800567c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3724      	adds	r7, #36	@ 0x24
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	40013800 	.word	0x40013800
 8005974:	40020000 	.word	0x40020000
 8005978:	40020400 	.word	0x40020400
 800597c:	40020800 	.word	0x40020800
 8005980:	40020c00 	.word	0x40020c00
 8005984:	40021000 	.word	0x40021000
 8005988:	40021400 	.word	0x40021400
 800598c:	40021800 	.word	0x40021800
 8005990:	40021c00 	.word	0x40021c00
 8005994:	40013c00 	.word	0x40013c00

08005998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
 80059a4:	4613      	mov	r3, r2
 80059a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059a8:	787b      	ldrb	r3, [r7, #1]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059ae:	887a      	ldrh	r2, [r7, #2]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059b4:	e003      	b.n	80059be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059b6:	887b      	ldrh	r3, [r7, #2]
 80059b8:	041a      	lsls	r2, r3, #16
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	619a      	str	r2, [r3, #24]
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e267      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d075      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059ea:	4b88      	ldr	r3, [pc, #544]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 030c 	and.w	r3, r3, #12
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d00c      	beq.n	8005a10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059f6:	4b85      	ldr	r3, [pc, #532]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d112      	bne.n	8005a28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a02:	4b82      	ldr	r3, [pc, #520]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a0e:	d10b      	bne.n	8005a28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	4b7e      	ldr	r3, [pc, #504]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d05b      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x108>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d157      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e242      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a30:	d106      	bne.n	8005a40 <HAL_RCC_OscConfig+0x74>
 8005a32:	4b76      	ldr	r3, [pc, #472]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a75      	ldr	r2, [pc, #468]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a3c:	6013      	str	r3, [r2, #0]
 8005a3e:	e01d      	b.n	8005a7c <HAL_RCC_OscConfig+0xb0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCC_OscConfig+0x98>
 8005a4a:	4b70      	ldr	r3, [pc, #448]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	4b6d      	ldr	r3, [pc, #436]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e00b      	b.n	8005a7c <HAL_RCC_OscConfig+0xb0>
 8005a64:	4b69      	ldr	r3, [pc, #420]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a68      	ldr	r2, [pc, #416]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	4b66      	ldr	r3, [pc, #408]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a65      	ldr	r2, [pc, #404]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d013      	beq.n	8005aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a84:	f7fe fe80 	bl	8004788 <HAL_GetTick>
 8005a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a8c:	f7fe fe7c 	bl	8004788 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b64      	cmp	r3, #100	@ 0x64
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e207      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9e:	4b5b      	ldr	r3, [pc, #364]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0xc0>
 8005aaa:	e014      	b.n	8005ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aac:	f7fe fe6c 	bl	8004788 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab4:	f7fe fe68 	bl	8004788 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b64      	cmp	r3, #100	@ 0x64
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e1f3      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac6:	4b51      	ldr	r3, [pc, #324]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f0      	bne.n	8005ab4 <HAL_RCC_OscConfig+0xe8>
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d063      	beq.n	8005baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aee:	4b47      	ldr	r3, [pc, #284]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d11c      	bne.n	8005b34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afa:	4b44      	ldr	r3, [pc, #272]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d116      	bne.n	8005b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b06:	4b41      	ldr	r3, [pc, #260]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_RCC_OscConfig+0x152>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d001      	beq.n	8005b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e1c7      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4937      	ldr	r1, [pc, #220]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b32:	e03a      	b.n	8005baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d020      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b3c:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <HAL_RCC_OscConfig+0x244>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b42:	f7fe fe21 	bl	8004788 <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4a:	f7fe fe1d 	bl	8004788 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e1a8      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b68:	4b28      	ldr	r3, [pc, #160]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4925      	ldr	r1, [pc, #148]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	600b      	str	r3, [r1, #0]
 8005b7c:	e015      	b.n	8005baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b7e:	4b24      	ldr	r3, [pc, #144]	@ (8005c10 <HAL_RCC_OscConfig+0x244>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b84:	f7fe fe00 	bl	8004788 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8c:	f7fe fdfc 	bl	8004788 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e187      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d036      	beq.n	8005c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d016      	beq.n	8005bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bbe:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <HAL_RCC_OscConfig+0x248>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc4:	f7fe fde0 	bl	8004788 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bcc:	f7fe fddc 	bl	8004788 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e167      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bde:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <HAL_RCC_OscConfig+0x240>)
 8005be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0x200>
 8005bea:	e01b      	b.n	8005c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bec:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <HAL_RCC_OscConfig+0x248>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf2:	f7fe fdc9 	bl	8004788 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf8:	e00e      	b.n	8005c18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfa:	f7fe fdc5 	bl	8004788 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d907      	bls.n	8005c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e150      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	42470000 	.word	0x42470000
 8005c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c18:	4b88      	ldr	r3, [pc, #544]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ea      	bne.n	8005bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8097 	beq.w	8005d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c32:	2300      	movs	r3, #0
 8005c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c36:	4b81      	ldr	r3, [pc, #516]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10f      	bne.n	8005c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	4b7d      	ldr	r3, [pc, #500]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c52:	4b7a      	ldr	r3, [pc, #488]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c62:	4b77      	ldr	r3, [pc, #476]	@ (8005e40 <HAL_RCC_OscConfig+0x474>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d118      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c6e:	4b74      	ldr	r3, [pc, #464]	@ (8005e40 <HAL_RCC_OscConfig+0x474>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a73      	ldr	r2, [pc, #460]	@ (8005e40 <HAL_RCC_OscConfig+0x474>)
 8005c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7a:	f7fe fd85 	bl	8004788 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c82:	f7fe fd81 	bl	8004788 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e10c      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c94:	4b6a      	ldr	r3, [pc, #424]	@ (8005e40 <HAL_RCC_OscConfig+0x474>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d106      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x2ea>
 8005ca8:	4b64      	ldr	r3, [pc, #400]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cac:	4a63      	ldr	r2, [pc, #396]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cae:	f043 0301 	orr.w	r3, r3, #1
 8005cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb4:	e01c      	b.n	8005cf0 <HAL_RCC_OscConfig+0x324>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x30c>
 8005cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cc4:	f043 0304 	orr.w	r3, r3, #4
 8005cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cca:	4b5c      	ldr	r3, [pc, #368]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cce:	4a5b      	ldr	r2, [pc, #364]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd6:	e00b      	b.n	8005cf0 <HAL_RCC_OscConfig+0x324>
 8005cd8:	4b58      	ldr	r3, [pc, #352]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cdc:	4a57      	ldr	r2, [pc, #348]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce4:	4b55      	ldr	r3, [pc, #340]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce8:	4a54      	ldr	r2, [pc, #336]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005cea:	f023 0304 	bic.w	r3, r3, #4
 8005cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d015      	beq.n	8005d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fe fd46 	bl	8004788 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d00:	f7fe fd42 	bl	8004788 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e0cb      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d16:	4b49      	ldr	r3, [pc, #292]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0ee      	beq.n	8005d00 <HAL_RCC_OscConfig+0x334>
 8005d22:	e014      	b.n	8005d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d24:	f7fe fd30 	bl	8004788 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2a:	e00a      	b.n	8005d42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d2c:	f7fe fd2c 	bl	8004788 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e0b5      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d42:	4b3e      	ldr	r3, [pc, #248]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1ee      	bne.n	8005d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d105      	bne.n	8005d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d54:	4b39      	ldr	r3, [pc, #228]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	4a38      	ldr	r2, [pc, #224]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80a1 	beq.w	8005eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d6a:	4b34      	ldr	r3, [pc, #208]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d05c      	beq.n	8005e30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d141      	bne.n	8005e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7e:	4b31      	ldr	r3, [pc, #196]	@ (8005e44 <HAL_RCC_OscConfig+0x478>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d84:	f7fe fd00 	bl	8004788 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8c:	f7fe fcfc 	bl	8004788 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e087      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9e:	4b27      	ldr	r3, [pc, #156]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	491b      	ldr	r1, [pc, #108]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <HAL_RCC_OscConfig+0x478>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dda:	f7fe fcd5 	bl	8004788 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de2:	f7fe fcd1 	bl	8004788 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e05c      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df4:	4b11      	ldr	r3, [pc, #68]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x416>
 8005e00:	e054      	b.n	8005eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e02:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <HAL_RCC_OscConfig+0x478>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7fe fcbe 	bl	8004788 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e10:	f7fe fcba 	bl	8004788 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e045      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e22:	4b06      	ldr	r3, [pc, #24]	@ (8005e3c <HAL_RCC_OscConfig+0x470>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x444>
 8005e2e:	e03d      	b.n	8005eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d107      	bne.n	8005e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e038      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	40007000 	.word	0x40007000
 8005e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e48:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <HAL_RCC_OscConfig+0x4ec>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d028      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d121      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d11a      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d111      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	3b01      	subs	r3, #1
 8005e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3718      	adds	r7, #24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40023800 	.word	0x40023800

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0cc      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b68      	ldr	r3, [pc, #416]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d90c      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b65      	ldr	r3, [pc, #404]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b63      	ldr	r3, [pc, #396]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0b8      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f10:	4b59      	ldr	r3, [pc, #356]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a58      	ldr	r2, [pc, #352]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f28:	4b53      	ldr	r3, [pc, #332]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a52      	ldr	r2, [pc, #328]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f34:	4b50      	ldr	r3, [pc, #320]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	494d      	ldr	r1, [pc, #308]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d044      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5a:	4b47      	ldr	r3, [pc, #284]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d119      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e07f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d003      	beq.n	8005f7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e06f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e067      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f9a:	4b37      	ldr	r3, [pc, #220]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f023 0203 	bic.w	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4934      	ldr	r1, [pc, #208]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fac:	f7fe fbec 	bl	8004788 <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb4:	f7fe fbe8 	bl	8004788 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e04f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	4b2b      	ldr	r3, [pc, #172]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 020c 	and.w	r2, r3, #12
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d1eb      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d20c      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b20      	ldr	r3, [pc, #128]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e032      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4916      	ldr	r1, [pc, #88]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602e:	4b12      	ldr	r3, [pc, #72]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	490e      	ldr	r1, [pc, #56]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006042:	f000 f821 	bl	8006088 <HAL_RCC_GetSysClockFreq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	490a      	ldr	r1, [pc, #40]	@ (800607c <HAL_RCC_ClockConfig+0x1c0>)
 8006054:	5ccb      	ldrb	r3, [r1, r3]
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800605e:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe fb4c 	bl	8004700 <HAL_InitTick>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023c00 	.word	0x40023c00
 8006078:	40023800 	.word	0x40023800
 800607c:	0800e808 	.word	0x0800e808
 8006080:	2000000c 	.word	0x2000000c
 8006084:	20000010 	.word	0x20000010

08006088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800608c:	b094      	sub	sp, #80	@ 0x50
 800608e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060a0:	4b79      	ldr	r3, [pc, #484]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 030c 	and.w	r3, r3, #12
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d00d      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0x40>
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	f200 80e1 	bhi.w	8006274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d002      	beq.n	80060bc <HAL_RCC_GetSysClockFreq+0x34>
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d003      	beq.n	80060c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ba:	e0db      	b.n	8006274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060bc:	4b73      	ldr	r3, [pc, #460]	@ (800628c <HAL_RCC_GetSysClockFreq+0x204>)
 80060be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060c0:	e0db      	b.n	800627a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060c2:	4b73      	ldr	r3, [pc, #460]	@ (8006290 <HAL_RCC_GetSysClockFreq+0x208>)
 80060c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060c6:	e0d8      	b.n	800627a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x200>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d063      	beq.n	80061a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060de:	4b6a      	ldr	r3, [pc, #424]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	099b      	lsrs	r3, r3, #6
 80060e4:	2200      	movs	r2, #0
 80060e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f2:	2300      	movs	r3, #0
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80060f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060fa:	4622      	mov	r2, r4
 80060fc:	462b      	mov	r3, r5
 80060fe:	f04f 0000 	mov.w	r0, #0
 8006102:	f04f 0100 	mov.w	r1, #0
 8006106:	0159      	lsls	r1, r3, #5
 8006108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800610c:	0150      	lsls	r0, r2, #5
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4621      	mov	r1, r4
 8006114:	1a51      	subs	r1, r2, r1
 8006116:	6139      	str	r1, [r7, #16]
 8006118:	4629      	mov	r1, r5
 800611a:	eb63 0301 	sbc.w	r3, r3, r1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800612c:	4659      	mov	r1, fp
 800612e:	018b      	lsls	r3, r1, #6
 8006130:	4651      	mov	r1, sl
 8006132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006136:	4651      	mov	r1, sl
 8006138:	018a      	lsls	r2, r1, #6
 800613a:	4651      	mov	r1, sl
 800613c:	ebb2 0801 	subs.w	r8, r2, r1
 8006140:	4659      	mov	r1, fp
 8006142:	eb63 0901 	sbc.w	r9, r3, r1
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800615a:	4690      	mov	r8, r2
 800615c:	4699      	mov	r9, r3
 800615e:	4623      	mov	r3, r4
 8006160:	eb18 0303 	adds.w	r3, r8, r3
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	462b      	mov	r3, r5
 8006168:	eb49 0303 	adc.w	r3, r9, r3
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800617a:	4629      	mov	r1, r5
 800617c:	024b      	lsls	r3, r1, #9
 800617e:	4621      	mov	r1, r4
 8006180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006184:	4621      	mov	r1, r4
 8006186:	024a      	lsls	r2, r1, #9
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800618e:	2200      	movs	r2, #0
 8006190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006198:	f7fa fc14 	bl	80009c4 <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4613      	mov	r3, r2
 80061a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a4:	e058      	b.n	8006258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061a6:	4b38      	ldr	r3, [pc, #224]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	099b      	lsrs	r3, r3, #6
 80061ac:	2200      	movs	r2, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	4611      	mov	r1, r2
 80061b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	2300      	movs	r3, #0
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80061bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	f04f 0000 	mov.w	r0, #0
 80061c8:	f04f 0100 	mov.w	r1, #0
 80061cc:	0159      	lsls	r1, r3, #5
 80061ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061d2:	0150      	lsls	r0, r2, #5
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4641      	mov	r1, r8
 80061da:	ebb2 0a01 	subs.w	sl, r2, r1
 80061de:	4649      	mov	r1, r9
 80061e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061f8:	ebb2 040a 	subs.w	r4, r2, sl
 80061fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	00eb      	lsls	r3, r5, #3
 800620a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800620e:	00e2      	lsls	r2, r4, #3
 8006210:	4614      	mov	r4, r2
 8006212:	461d      	mov	r5, r3
 8006214:	4643      	mov	r3, r8
 8006216:	18e3      	adds	r3, r4, r3
 8006218:	603b      	str	r3, [r7, #0]
 800621a:	464b      	mov	r3, r9
 800621c:	eb45 0303 	adc.w	r3, r5, r3
 8006220:	607b      	str	r3, [r7, #4]
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800622e:	4629      	mov	r1, r5
 8006230:	028b      	lsls	r3, r1, #10
 8006232:	4621      	mov	r1, r4
 8006234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006238:	4621      	mov	r1, r4
 800623a:	028a      	lsls	r2, r1, #10
 800623c:	4610      	mov	r0, r2
 800623e:	4619      	mov	r1, r3
 8006240:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006242:	2200      	movs	r2, #0
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	61fa      	str	r2, [r7, #28]
 8006248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800624c:	f7fa fbba 	bl	80009c4 <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4613      	mov	r3, r2
 8006256:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006258:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <HAL_RCC_GetSysClockFreq+0x200>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	0c1b      	lsrs	r3, r3, #16
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	3301      	adds	r3, #1
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006268:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800626a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006272:	e002      	b.n	800627a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006274:	4b05      	ldr	r3, [pc, #20]	@ (800628c <HAL_RCC_GetSysClockFreq+0x204>)
 8006276:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800627a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800627c:	4618      	mov	r0, r3
 800627e:	3750      	adds	r7, #80	@ 0x50
 8006280:	46bd      	mov	sp, r7
 8006282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	00f42400 	.word	0x00f42400
 8006290:	007a1200 	.word	0x007a1200

08006294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006298:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800629a:	681b      	ldr	r3, [r3, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	2000000c 	.word	0x2000000c

080062ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062b0:	f7ff fff0 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 80062b4:	4602      	mov	r2, r0
 80062b6:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	0a9b      	lsrs	r3, r3, #10
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	4903      	ldr	r1, [pc, #12]	@ (80062d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062c2:	5ccb      	ldrb	r3, [r1, r3]
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40023800 	.word	0x40023800
 80062d0:	0800e818 	.word	0x0800e818

080062d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062d8:	f7ff ffdc 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 80062dc:	4602      	mov	r2, r0
 80062de:	4b05      	ldr	r3, [pc, #20]	@ (80062f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	0b5b      	lsrs	r3, r3, #13
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	4903      	ldr	r1, [pc, #12]	@ (80062f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ea:	5ccb      	ldrb	r3, [r1, r3]
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40023800 	.word	0x40023800
 80062f8:	0800e818 	.word	0x0800e818

080062fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e022      	b.n	8006354 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d105      	bne.n	8006326 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fd ff6b 	bl	80041fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f814 	bl	800635c <HAL_SD_InitCard>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e00a      	b.n	8006354 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b08e      	sub	sp, #56	@ 0x38
 8006360:	af04      	add	r7, sp, #16
 8006362:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006364:	2300      	movs	r3, #0
 8006366:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800636c:	2300      	movs	r3, #0
 800636e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006374:	2300      	movs	r3, #0
 8006376:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006378:	2376      	movs	r3, #118	@ 0x76
 800637a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681d      	ldr	r5, [r3, #0]
 8006380:	466c      	mov	r4, sp
 8006382:	f107 0314 	add.w	r3, r7, #20
 8006386:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800638a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006394:	4628      	mov	r0, r5
 8006396:	f003 fb59 	bl	8009a4c <SDIO_Init>
 800639a:	4603      	mov	r3, r0
 800639c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80063a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e04f      	b.n	800644c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80063ac:	4b29      	ldr	r3, [pc, #164]	@ (8006454 <HAL_SD_InitCard+0xf8>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f003 fb91 	bl	8009ade <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80063bc:	4b25      	ldr	r3, [pc, #148]	@ (8006454 <HAL_SD_InitCard+0xf8>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80063c2:	2002      	movs	r0, #2
 80063c4:	f7fe f9ec 	bl	80047a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fe79 	bl	80070c0 <SD_PowerON>
 80063ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e02e      	b.n	800644c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fd98 	bl	8006f24 <SD_InitCard>
 80063f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e01b      	b.n	800644c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800641c:	4618      	mov	r0, r3
 800641e:	f003 fbf0 	bl	8009c02 <SDMMC_CmdBlockLength>
 8006422:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00f      	beq.n	800644a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a0a      	ldr	r2, [pc, #40]	@ (8006458 <HAL_SD_InitCard+0xfc>)
 8006430:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3728      	adds	r7, #40	@ 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bdb0      	pop	{r4, r5, r7, pc}
 8006454:	422580a0 	.word	0x422580a0
 8006458:	004005ff 	.word	0x004005ff

0800645c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b092      	sub	sp, #72	@ 0x48
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800646a:	f7fe f98d 	bl	8004788 <HAL_GetTick>
 800646e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e1c5      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	f040 81b8 	bne.w	800680c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	441a      	add	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d907      	bls.n	80064c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e1ac      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2203      	movs	r2, #3
 80064c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2200      	movs	r2, #0
 80064ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d002      	beq.n	80064de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80064d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064da:	025b      	lsls	r3, r3, #9
 80064dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	025b      	lsls	r3, r3, #9
 80064e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80064ea:	2390      	movs	r3, #144	@ 0x90
 80064ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80064ee:	2302      	movs	r3, #2
 80064f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80064f6:	2301      	movs	r3, #1
 80064f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f107 0214 	add.w	r2, r7, #20
 8006502:	4611      	mov	r1, r2
 8006504:	4618      	mov	r0, r3
 8006506:	f003 fb50 	bl	8009baa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d90a      	bls.n	8006526 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2202      	movs	r2, #2
 8006514:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800651c:	4618      	mov	r0, r3
 800651e:	f003 fbb4 	bl	8009c8a <SDMMC_CmdReadMultiBlock>
 8006522:	6478      	str	r0, [r7, #68]	@ 0x44
 8006524:	e009      	b.n	800653a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006532:	4618      	mov	r0, r3
 8006534:	f003 fb87 	bl	8009c46 <SDMMC_CmdReadSingleBlock>
 8006538:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800653a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653c:	2b00      	cmp	r3, #0
 800653e:	d012      	beq.n	8006566 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a7e      	ldr	r2, [pc, #504]	@ (8006740 <HAL_SD_ReadBlocks+0x2e4>)
 8006546:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800654c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654e:	431a      	orrs	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e159      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800656a:	e061      	b.n	8006630 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006572:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d03c      	beq.n	80065f4 <HAL_SD_ReadBlocks+0x198>
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d039      	beq.n	80065f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006580:	2300      	movs	r3, #0
 8006582:	643b      	str	r3, [r7, #64]	@ 0x40
 8006584:	e033      	b.n	80065ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f003 fa89 	bl	8009aa2 <SDIO_ReadFIFO>
 8006590:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006594:	b2da      	uxtb	r2, r3
 8006596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006598:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800659a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800659c:	3301      	adds	r3, #1
 800659e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a2:	3b01      	subs	r3, #1
 80065a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b2:	3301      	adds	r3, #1
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b8:	3b01      	subs	r3, #1
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c8:	3301      	adds	r3, #1
 80065ca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ce:	3b01      	subs	r3, #1
 80065d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	0e1b      	lsrs	r3, r3, #24
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065de:	3301      	adds	r3, #1
 80065e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e4:	3b01      	subs	r3, #1
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80065e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ea:	3301      	adds	r3, #1
 80065ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f0:	2b07      	cmp	r3, #7
 80065f2:	d9c8      	bls.n	8006586 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80065f4:	f7fe f8c8 	bl	8004788 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006600:	429a      	cmp	r2, r3
 8006602:	d902      	bls.n	800660a <HAL_SD_ReadBlocks+0x1ae>
 8006604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006606:	2b00      	cmp	r3, #0
 8006608:	d112      	bne.n	8006630 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a4c      	ldr	r2, [pc, #304]	@ (8006740 <HAL_SD_ReadBlocks+0x2e4>)
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e0f4      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006636:	f240 332a 	movw	r3, #810	@ 0x32a
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d095      	beq.n	800656c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664a:	2b00      	cmp	r3, #0
 800664c:	d022      	beq.n	8006694 <HAL_SD_ReadBlocks+0x238>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d91f      	bls.n	8006694 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	2b03      	cmp	r3, #3
 800665a:	d01b      	beq.n	8006694 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f003 fb79 	bl	8009d58 <SDMMC_CmdStopTransfer>
 8006666:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a33      	ldr	r2, [pc, #204]	@ (8006740 <HAL_SD_ReadBlocks+0x2e4>)
 8006674:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800667a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667c:	431a      	orrs	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0c2      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_SD_ReadBlocks+0x254>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <HAL_SD_ReadBlocks+0x2e4>)
 80066b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066bc:	f043 0208 	orr.w	r2, r3, #8
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e0a1      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d012      	beq.n	800670a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a15      	ldr	r2, [pc, #84]	@ (8006740 <HAL_SD_ReadBlocks+0x2e4>)
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f0:	f043 0202 	orr.w	r2, r3, #2
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e087      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d064      	beq.n	80067e2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a08      	ldr	r2, [pc, #32]	@ (8006740 <HAL_SD_ReadBlocks+0x2e4>)
 800671e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e06d      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
 800673e:	bf00      	nop
 8006740:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f003 f9aa 	bl	8009aa2 <SDIO_ReadFIFO>
 800674e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	b2da      	uxtb	r2, r3
 8006754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006756:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675a:	3301      	adds	r3, #1
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800675e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006760:	3b01      	subs	r3, #1
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	b2da      	uxtb	r2, r3
 800676a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	3301      	adds	r3, #1
 8006772:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006776:	3b01      	subs	r3, #1
 8006778:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	b2da      	uxtb	r2, r3
 8006780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006782:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006786:	3301      	adds	r3, #1
 8006788:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800678a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678c:	3b01      	subs	r3, #1
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006792:	0e1b      	lsrs	r3, r3, #24
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800679a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679c:	3301      	adds	r3, #1
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80067a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a2:	3b01      	subs	r3, #1
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80067a6:	f7fd ffef 	bl	8004788 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d902      	bls.n	80067bc <HAL_SD_ReadBlocks+0x360>
 80067b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d112      	bne.n	80067e2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a18      	ldr	r2, [pc, #96]	@ (8006824 <HAL_SD_ReadBlocks+0x3c8>)
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e01b      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SD_ReadBlocks+0x39a>
 80067f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1a6      	bne.n	8006744 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	e006      	b.n	800681a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006810:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
  }
}
 800681a:	4618      	mov	r0, r3
 800681c:	3748      	adds	r7, #72	@ 0x48
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	004005ff 	.word	0x004005ff

08006828 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b092      	sub	sp, #72	@ 0x48
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006836:	f7fd ffa7 	bl	8004788 <HAL_GetTick>
 800683a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d107      	bne.n	800685a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e16d      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b01      	cmp	r3, #1
 8006864:	f040 8160 	bne.w	8006b28 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800686e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	441a      	add	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006878:	429a      	cmp	r2, r3
 800687a:	d907      	bls.n	800688c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e154      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2200      	movs	r2, #0
 800689a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d002      	beq.n	80068aa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80068a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a6:	025b      	lsls	r3, r3, #9
 80068a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295
 80068ae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	025b      	lsls	r3, r3, #9
 80068b4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80068b6:	2390      	movs	r3, #144	@ 0x90
 80068b8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80068be:	2300      	movs	r3, #0
 80068c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f107 0218 	add.w	r2, r7, #24
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f003 f96a 	bl	8009baa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d90a      	bls.n	80068f2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068e8:	4618      	mov	r0, r3
 80068ea:	f003 fa12 	bl	8009d12 <SDMMC_CmdWriteMultiBlock>
 80068ee:	6478      	str	r0, [r7, #68]	@ 0x44
 80068f0:	e009      	b.n	8006906 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2210      	movs	r2, #16
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068fe:	4618      	mov	r0, r3
 8006900:	f003 f9e5 	bl	8009cce <SDMMC_CmdWriteSingleBlock>
 8006904:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006908:	2b00      	cmp	r3, #0
 800690a:	d012      	beq.n	8006932 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a8b      	ldr	r2, [pc, #556]	@ (8006b40 <HAL_SD_WriteBlocks+0x318>)
 8006912:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691a:	431a      	orrs	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e101      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006936:	e065      	b.n	8006a04 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d040      	beq.n	80069c8 <HAL_SD_WriteBlocks+0x1a0>
 8006946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d03d      	beq.n	80069c8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800694c:	2300      	movs	r3, #0
 800694e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006950:	e037      	b.n	80069c2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695a:	3301      	adds	r3, #1
 800695c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	3b01      	subs	r3, #1
 8006962:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	021a      	lsls	r2, r3, #8
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006972:	3301      	adds	r3, #1
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006978:	3b01      	subs	r3, #1
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800697c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	041a      	lsls	r2, r3, #16
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698a:	3301      	adds	r3, #1
 800698c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800698e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006990:	3b01      	subs	r3, #1
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	061a      	lsls	r2, r3, #24
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	3301      	adds	r3, #1
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80069a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a8:	3b01      	subs	r3, #1
 80069aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f107 0214 	add.w	r2, r7, #20
 80069b4:	4611      	mov	r1, r2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f003 f880 	bl	8009abc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80069bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069be:	3301      	adds	r3, #1
 80069c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069c4:	2b07      	cmp	r3, #7
 80069c6:	d9c4      	bls.n	8006952 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80069c8:	f7fd fede 	bl	8004788 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d902      	bls.n	80069de <HAL_SD_WriteBlocks+0x1b6>
 80069d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d112      	bne.n	8006a04 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a57      	ldr	r2, [pc, #348]	@ (8006b40 <HAL_SD_WriteBlocks+0x318>)
 80069e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ec:	431a      	orrs	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e098      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a0a:	f240 331a 	movw	r3, #794	@ 0x31a
 8006a0e:	4013      	ands	r3, r2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d091      	beq.n	8006938 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d022      	beq.n	8006a68 <HAL_SD_WriteBlocks+0x240>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d91f      	bls.n	8006a68 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d01b      	beq.n	8006a68 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f003 f98f 	bl	8009d58 <SDMMC_CmdStopTransfer>
 8006a3a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d012      	beq.n	8006a68 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a3e      	ldr	r2, [pc, #248]	@ (8006b40 <HAL_SD_WriteBlocks+0x318>)
 8006a48:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a50:	431a      	orrs	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e066      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_SD_WriteBlocks+0x25c>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d012      	beq.n	8006aaa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2d      	ldr	r2, [pc, #180]	@ (8006b40 <HAL_SD_WriteBlocks+0x318>)
 8006a8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	f043 0208 	orr.w	r2, r3, #8
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e045      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d012      	beq.n	8006ade <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a20      	ldr	r2, [pc, #128]	@ (8006b40 <HAL_SD_WriteBlocks+0x318>)
 8006abe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac4:	f043 0202 	orr.w	r2, r3, #2
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e02b      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d012      	beq.n	8006b12 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a13      	ldr	r2, [pc, #76]	@ (8006b40 <HAL_SD_WriteBlocks+0x318>)
 8006af2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af8:	f043 0210 	orr.w	r2, r3, #16
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e011      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	e006      	b.n	8006b36 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
  }
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3748      	adds	r7, #72	@ 0x48
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	004005ff 	.word	0x004005ff

08006b44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b52:	0f9b      	lsrs	r3, r3, #30
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5e:	0e9b      	lsrs	r3, r3, #26
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b70:	0e1b      	lsrs	r3, r3, #24
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b82:	0c1b      	lsrs	r3, r3, #16
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ba4:	0d1b      	lsrs	r3, r3, #20
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc2:	0bdb      	lsrs	r3, r3, #15
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd4:	0b9b      	lsrs	r3, r3, #14
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006be6:	0b5b      	lsrs	r3, r3, #13
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bf8:	0b1b      	lsrs	r3, r3, #12
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d163      	bne.n	8006cdc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c18:	009a      	lsls	r2, r3, #2
 8006c1a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006c1e:	4013      	ands	r3, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006c24:	0f92      	lsrs	r2, r2, #30
 8006c26:	431a      	orrs	r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c30:	0edb      	lsrs	r3, r3, #27
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c54:	0d5b      	lsrs	r3, r3, #21
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c66:	0c9b      	lsrs	r3, r3, #18
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c78:	0bdb      	lsrs	r3, r3, #15
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	7e1b      	ldrb	r3, [r3, #24]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006ca6:	fb03 f202 	mul.w	r2, r3, r2
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	7a1b      	ldrb	r3, [r3, #8]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 030f 	and.w	r3, r3, #15
 8006cb8:	2201      	movs	r2, #1
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006cc8:	0a52      	lsrs	r2, r2, #9
 8006cca:	fb03 f202 	mul.w	r2, r3, r2
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cd8:	661a      	str	r2, [r3, #96]	@ 0x60
 8006cda:	e031      	b.n	8006d40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d11d      	bne.n	8006d20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ce8:	041b      	lsls	r3, r3, #16
 8006cea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	029a      	lsls	r2, r3, #10
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d14:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006d1e:	e00f      	b.n	8006d40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a58      	ldr	r2, [pc, #352]	@ (8006e88 <HAL_SD_GetCardCSD+0x344>)
 8006d26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e09d      	b.n	8006e7c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d44:	0b9b      	lsrs	r3, r3, #14
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d56:	09db      	lsrs	r3, r3, #7
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d78:	0fdb      	lsrs	r3, r3, #31
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d84:	0f5b      	lsrs	r3, r3, #29
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	0e9b      	lsrs	r3, r3, #26
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da8:	0d9b      	lsrs	r3, r3, #22
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dba:	0d5b      	lsrs	r3, r3, #21
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd6:	0c1b      	lsrs	r3, r3, #16
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dea:	0bdb      	lsrs	r3, r3, #15
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfe:	0b9b      	lsrs	r3, r3, #14
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e12:	0b5b      	lsrs	r3, r3, #13
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e26:	0b1b      	lsrs	r3, r3, #12
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	0a9b      	lsrs	r3, r3, #10
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4e:	0a1b      	lsrs	r3, r3, #8
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	004005ff 	.word	0x004005ff

08006e8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ef0:	f107 030c 	add.w	r3, r7, #12
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f970 	bl	80071dc <SD_SendStatus>
 8006efc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0a5b      	lsrs	r3, r3, #9
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f1a:	693b      	ldr	r3, [r7, #16]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f24:	b5b0      	push	{r4, r5, r7, lr}
 8006f26:	b094      	sub	sp, #80	@ 0x50
 8006f28:	af04      	add	r7, sp, #16
 8006f2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f002 fde0 	bl	8009afa <SDIO_GetPowerState>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006f44:	e0b8      	b.n	80070b8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d02f      	beq.n	8006fae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f002 ffc7 	bl	8009ee6 <SDMMC_CmdSendCID>
 8006f58:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <SD_InitCard+0x40>
    {
      return errorstate;
 8006f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f62:	e0a9      	b.n	80070b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f002 fe0a 	bl	8009b84 <SDIO_GetResponse>
 8006f70:	4602      	mov	r2, r0
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f002 fe01 	bl	8009b84 <SDIO_GetResponse>
 8006f82:	4602      	mov	r2, r0
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2108      	movs	r1, #8
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f002 fdf8 	bl	8009b84 <SDIO_GetResponse>
 8006f94:	4602      	mov	r2, r0
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	210c      	movs	r1, #12
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f002 fdef 	bl	8009b84 <SDIO_GetResponse>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d00d      	beq.n	8006fd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f107 020e 	add.w	r2, r7, #14
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 ffcd 	bl	8009f60 <SDMMC_CmdSetRelAdd>
 8006fc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd0:	e072      	b.n	80070b8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d036      	beq.n	8007048 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f002 ff97 	bl	8009f22 <SDMMC_CmdSendCSD>
 8006ff4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffe:	e05b      	b.n	80070b8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f002 fdbc 	bl	8009b84 <SDIO_GetResponse>
 800700c:	4602      	mov	r2, r0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2104      	movs	r1, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f002 fdb3 	bl	8009b84 <SDIO_GetResponse>
 800701e:	4602      	mov	r2, r0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2108      	movs	r1, #8
 800702a:	4618      	mov	r0, r3
 800702c:	f002 fdaa 	bl	8009b84 <SDIO_GetResponse>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	210c      	movs	r1, #12
 800703c:	4618      	mov	r0, r3
 800703e:	f002 fda1 	bl	8009b84 <SDIO_GetResponse>
 8007042:	4602      	mov	r2, r0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2104      	movs	r1, #4
 800704e:	4618      	mov	r0, r3
 8007050:	f002 fd98 	bl	8009b84 <SDIO_GetResponse>
 8007054:	4603      	mov	r3, r0
 8007056:	0d1a      	lsrs	r2, r3, #20
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800705c:	f107 0310 	add.w	r3, r7, #16
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fd6e 	bl	8006b44 <HAL_SD_GetCardCSD>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800706e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007072:	e021      	b.n	80070b8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6819      	ldr	r1, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	2200      	movs	r2, #0
 8007080:	461c      	mov	r4, r3
 8007082:	4615      	mov	r5, r2
 8007084:	4622      	mov	r2, r4
 8007086:	462b      	mov	r3, r5
 8007088:	4608      	mov	r0, r1
 800708a:	f002 fe87 	bl	8009d9c <SDMMC_CmdSelDesel>
 800708e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <SD_InitCard+0x176>
  {
    return errorstate;
 8007096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007098:	e00e      	b.n	80070b8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681d      	ldr	r5, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	466c      	mov	r4, sp
 80070a2:	f103 0210 	add.w	r2, r3, #16
 80070a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80070a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070ac:	3304      	adds	r3, #4
 80070ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070b0:	4628      	mov	r0, r5
 80070b2:	f002 fccb 	bl	8009a4c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3740      	adds	r7, #64	@ 0x40
 80070bc:	46bd      	mov	sp, r7
 80070be:	bdb0      	pop	{r4, r5, r7, pc}

080070c0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 fe82 	bl	8009de2 <SDMMC_CmdGoIdleState>
 80070de:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <SD_PowerON+0x2a>
  {
    return errorstate;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	e072      	b.n	80071d0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f002 fe95 	bl	8009e1e <SDMMC_CmdOperCond>
 80070f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f002 fe6b 	bl	8009de2 <SDMMC_CmdGoIdleState>
 800710c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	e05b      	b.n	80071d0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	2b01      	cmp	r3, #1
 8007124:	d137      	bne.n	8007196 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f002 fe95 	bl	8009e5c <SDMMC_CmdAppCommand>
 8007132:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02d      	beq.n	8007196 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800713a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800713e:	e047      	b.n	80071d0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2100      	movs	r1, #0
 8007146:	4618      	mov	r0, r3
 8007148:	f002 fe88 	bl	8009e5c <SDMMC_CmdAppCommand>
 800714c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <SD_PowerON+0x98>
    {
      return errorstate;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	e03b      	b.n	80071d0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	491e      	ldr	r1, [pc, #120]	@ (80071d8 <SD_PowerON+0x118>)
 800715e:	4618      	mov	r0, r3
 8007160:	f002 fe9e 	bl	8009ea0 <SDMMC_CmdAppOperCommand>
 8007164:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800716c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007170:	e02e      	b.n	80071d0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2100      	movs	r1, #0
 8007178:	4618      	mov	r0, r3
 800717a:	f002 fd03 	bl	8009b84 <SDIO_GetResponse>
 800717e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	0fdb      	lsrs	r3, r3, #31
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <SD_PowerON+0xcc>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <SD_PowerON+0xce>
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]

    count++;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	3301      	adds	r3, #1
 8007194:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800719c:	4293      	cmp	r3, r2
 800719e:	d802      	bhi.n	80071a6 <SD_PowerON+0xe6>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0cc      	beq.n	8007140 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d902      	bls.n	80071b6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071b4:	e00c      	b.n	80071d0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80071c6:	e002      	b.n	80071ce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	c1100000 	.word	0xc1100000

080071dc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071f0:	e018      	b.n	8007224 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f002 fecf 	bl	8009fa2 <SDMMC_CmdSendStatus>
 8007204:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <SD_SendStatus+0x34>
  {
    return errorstate;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	e009      	b.n	8007224 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f002 fcb4 	bl	8009b84 <SDIO_GetResponse>
 800721c:	4602      	mov	r2, r0
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e07b      	b.n	8007336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800724e:	d009      	beq.n	8007264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	61da      	str	r2, [r3, #28]
 8007256:	e005      	b.n	8007264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fd f836 	bl	80042f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800729a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072b6:	431a      	orrs	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	431a      	orrs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	431a      	orrs	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e8:	ea42 0103 	orr.w	r1, r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f003 0104 	and.w	r1, r3, #4
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	f003 0210 	and.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b088      	sub	sp, #32
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	4613      	mov	r3, r2
 800734c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800734e:	f7fd fa1b 	bl	8004788 <HAL_GetTick>
 8007352:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b01      	cmp	r3, #1
 8007362:	d001      	beq.n	8007368 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007364:	2302      	movs	r3, #2
 8007366:	e12a      	b.n	80075be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_SPI_Transmit+0x36>
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e122      	b.n	80075be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_SPI_Transmit+0x48>
 8007382:	2302      	movs	r3, #2
 8007384:	e11b      	b.n	80075be <HAL_SPI_Transmit+0x280>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	88fa      	ldrh	r2, [r7, #6]
 80073a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d4:	d10f      	bne.n	80073f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007400:	2b40      	cmp	r3, #64	@ 0x40
 8007402:	d007      	beq.n	8007414 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800741c:	d152      	bne.n	80074c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SPI_Transmit+0xee>
 8007426:	8b7b      	ldrh	r3, [r7, #26]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d145      	bne.n	80074b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007430:	881a      	ldrh	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743c:	1c9a      	adds	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007450:	e032      	b.n	80074b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b02      	cmp	r3, #2
 800745e:	d112      	bne.n	8007486 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007484:	e018      	b.n	80074b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007486:	f7fd f97f 	bl	8004788 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d803      	bhi.n	800749e <HAL_SPI_Transmit+0x160>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d102      	bne.n	80074a4 <HAL_SPI_Transmit+0x166>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e082      	b.n	80075be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1c7      	bne.n	8007452 <HAL_SPI_Transmit+0x114>
 80074c2:	e053      	b.n	800756c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_SPI_Transmit+0x194>
 80074cc:	8b7b      	ldrh	r3, [r7, #26]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d147      	bne.n	8007562 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80074f8:	e033      	b.n	8007562 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b02      	cmp	r3, #2
 8007506:	d113      	bne.n	8007530 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	7812      	ldrb	r2, [r2, #0]
 8007514:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	1c5a      	adds	r2, r3, #1
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800752e:	e018      	b.n	8007562 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007530:	f7fd f92a 	bl	8004788 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d803      	bhi.n	8007548 <HAL_SPI_Transmit+0x20a>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d102      	bne.n	800754e <HAL_SPI_Transmit+0x210>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e02d      	b.n	80075be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1c6      	bne.n	80074fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 ffb7 	bl	80084e4 <SPI_EndRxTxTransaction>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2220      	movs	r2, #32
 8007580:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10a      	bne.n	80075a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80075bc:	2300      	movs	r3, #0
  }
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3720      	adds	r7, #32
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b088      	sub	sp, #32
 80075ca:	af02      	add	r7, sp, #8
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d001      	beq.n	80075e6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80075e2:	2302      	movs	r3, #2
 80075e4:	e104      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ee:	d112      	bne.n	8007616 <HAL_SPI_Receive+0x50>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10e      	bne.n	8007616 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2204      	movs	r2, #4
 80075fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007600:	88fa      	ldrh	r2, [r7, #6]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	4613      	mov	r3, r2
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f8f3 	bl	80077f8 <HAL_SPI_TransmitReceive>
 8007612:	4603      	mov	r3, r0
 8007614:	e0ec      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007616:	f7fd f8b7 	bl	8004788 <HAL_GetTick>
 800761a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_SPI_Receive+0x62>
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e0e1      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007632:	2b01      	cmp	r3, #1
 8007634:	d101      	bne.n	800763a <HAL_SPI_Receive+0x74>
 8007636:	2302      	movs	r3, #2
 8007638:	e0da      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2204      	movs	r2, #4
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	88fa      	ldrh	r2, [r7, #6]
 800765a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007688:	d10f      	bne.n	80076aa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007698:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b4:	2b40      	cmp	r3, #64	@ 0x40
 80076b6:	d007      	beq.n	80076c8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d170      	bne.n	80077b2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076d0:	e035      	b.n	800773e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d115      	bne.n	800770c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f103 020c 	add.w	r2, r3, #12
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007700:	b29b      	uxth	r3, r3
 8007702:	3b01      	subs	r3, #1
 8007704:	b29a      	uxth	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800770a:	e018      	b.n	800773e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770c:	f7fd f83c 	bl	8004788 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	429a      	cmp	r2, r3
 800771a:	d803      	bhi.n	8007724 <HAL_SPI_Receive+0x15e>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007722:	d102      	bne.n	800772a <HAL_SPI_Receive+0x164>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e058      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1c4      	bne.n	80076d2 <HAL_SPI_Receive+0x10c>
 8007748:	e038      	b.n	80077bc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b01      	cmp	r3, #1
 8007756:	d113      	bne.n	8007780 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007762:	b292      	uxth	r2, r2
 8007764:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776a:	1c9a      	adds	r2, r3, #2
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800777e:	e018      	b.n	80077b2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007780:	f7fd f802 	bl	8004788 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d803      	bhi.n	8007798 <HAL_SPI_Receive+0x1d2>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d102      	bne.n	800779e <HAL_SPI_Receive+0x1d8>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e01e      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1c6      	bne.n	800774a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 fe29 	bl	8008418 <SPI_EndRxTransaction>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2220      	movs	r2, #32
 80077d0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80077ee:	2300      	movs	r3, #0
  }
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
 8007804:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007806:	2301      	movs	r3, #1
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800780a:	f7fc ffbd 	bl	8004788 <HAL_GetTick>
 800780e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007816:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800781e:	887b      	ldrh	r3, [r7, #2]
 8007820:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007822:	7ffb      	ldrb	r3, [r7, #31]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d00c      	beq.n	8007842 <HAL_SPI_TransmitReceive+0x4a>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782e:	d106      	bne.n	800783e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <HAL_SPI_TransmitReceive+0x46>
 8007838:	7ffb      	ldrb	r3, [r7, #31]
 800783a:	2b04      	cmp	r3, #4
 800783c:	d001      	beq.n	8007842 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800783e:	2302      	movs	r3, #2
 8007840:	e17f      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x5c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x5c>
 800784e:	887b      	ldrh	r3, [r7, #2]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e174      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_SPI_TransmitReceive+0x6e>
 8007862:	2302      	movs	r3, #2
 8007864:	e16d      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b04      	cmp	r3, #4
 8007878:	d003      	beq.n	8007882 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2205      	movs	r2, #5
 800787e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	887a      	ldrh	r2, [r7, #2]
 8007892:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	887a      	ldrh	r2, [r7, #2]
 8007898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	887a      	ldrh	r2, [r7, #2]
 80078a4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	887a      	ldrh	r2, [r7, #2]
 80078aa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c2:	2b40      	cmp	r3, #64	@ 0x40
 80078c4:	d007      	beq.n	80078d6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078de:	d17e      	bne.n	80079de <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <HAL_SPI_TransmitReceive+0xf6>
 80078e8:	8afb      	ldrh	r3, [r7, #22]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d16c      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f2:	881a      	ldrh	r2, [r3, #0]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fe:	1c9a      	adds	r2, r3, #2
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007912:	e059      	b.n	80079c8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b02      	cmp	r3, #2
 8007920:	d11b      	bne.n	800795a <HAL_SPI_TransmitReceive+0x162>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d016      	beq.n	800795a <HAL_SPI_TransmitReceive+0x162>
 800792c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792e:	2b01      	cmp	r3, #1
 8007930:	d113      	bne.n	800795a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007936:	881a      	ldrh	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d119      	bne.n	800799c <HAL_SPI_TransmitReceive+0x1a4>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d014      	beq.n	800799c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797c:	b292      	uxth	r2, r2
 800797e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007984:	1c9a      	adds	r2, r3, #2
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800799c:	f7fc fef4 	bl	8004788 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d80d      	bhi.n	80079c8 <HAL_SPI_TransmitReceive+0x1d0>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d009      	beq.n	80079c8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e0bc      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1a0      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x11c>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d19b      	bne.n	8007914 <HAL_SPI_TransmitReceive+0x11c>
 80079dc:	e082      	b.n	8007ae4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_SPI_TransmitReceive+0x1f4>
 80079e6:	8afb      	ldrh	r3, [r7, #22]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d171      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	7812      	ldrb	r2, [r2, #0]
 80079f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a12:	e05d      	b.n	8007ad0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d11c      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x264>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x264>
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d114      	bne.n	8007a5c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	330c      	adds	r3, #12
 8007a3c:	7812      	ldrb	r2, [r2, #0]
 8007a3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d119      	bne.n	8007a9e <HAL_SPI_TransmitReceive+0x2a6>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d014      	beq.n	8007a9e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a9e:	f7fc fe73 	bl	8004788 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d803      	bhi.n	8007ab6 <HAL_SPI_TransmitReceive+0x2be>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_TransmitReceive+0x2c4>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e038      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d19c      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x21c>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d197      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fcfb 	bl	80084e4 <SPI_EndRxTxTransaction>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2220      	movs	r2, #32
 8007af8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e01d      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10a      	bne.n	8007b24 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	613b      	str	r3, [r7, #16]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007b40:	2300      	movs	r3, #0
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	@ 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d001      	beq.n	8007b6a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007b66:	2302      	movs	r3, #2
 8007b68:	e097      	b.n	8007c9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_Transmit_DMA+0x2a>
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e08f      	b.n	8007c9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_SPI_Transmit_DMA+0x3c>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e088      	b.n	8007c9a <HAL_SPI_Transmit_DMA+0x14e>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2203      	movs	r2, #3
 8007b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	88fa      	ldrh	r2, [r7, #6]
 8007ba8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd6:	d10f      	bne.n	8007bf8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bf6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bfc:	4a29      	ldr	r2, [pc, #164]	@ (8007ca4 <HAL_SPI_Transmit_DMA+0x158>)
 8007bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c04:	4a28      	ldr	r2, [pc, #160]	@ (8007ca8 <HAL_SPI_Transmit_DMA+0x15c>)
 8007c06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0c:	4a27      	ldr	r2, [pc, #156]	@ (8007cac <HAL_SPI_Transmit_DMA+0x160>)
 8007c0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c14:	2200      	movs	r2, #0
 8007c16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c20:	4619      	mov	r1, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c2e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c30:	f7fd f9c2 	bl	8004fb8 <HAL_DMA_Start_IT>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c3e:	f043 0210 	orr.w	r2, r3, #16
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e023      	b.n	8007c9a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c5c:	2b40      	cmp	r3, #64	@ 0x40
 8007c5e:	d007      	beq.n	8007c70 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c6e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0220 	orr.w	r2, r2, #32
 8007c86:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0202 	orr.w	r2, r2, #2
 8007c96:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08008275 	.word	0x08008275
 8007ca8:	08008095 	.word	0x08008095
 8007cac:	080082c9 	.word	0x080082c9

08007cb0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d001      	beq.n	8007cce <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	e0a9      	b.n	8007e22 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d110      	bne.n	8007cf8 <HAL_SPI_Receive_DMA+0x48>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cde:	d10b      	bne.n	8007cf8 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2204      	movs	r2, #4
 8007ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f8a2 	bl	8007e38 <HAL_SPI_TransmitReceive_DMA>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	e094      	b.n	8007e22 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <HAL_SPI_Receive_DMA+0x54>
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e08c      	b.n	8007e22 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d101      	bne.n	8007d16 <HAL_SPI_Receive_DMA+0x66>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e085      	b.n	8007e22 <HAL_SPI_Receive_DMA+0x172>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2204      	movs	r2, #4
 8007d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d5e:	d10f      	bne.n	8007d80 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d84:	4a29      	ldr	r2, [pc, #164]	@ (8007e2c <HAL_SPI_Receive_DMA+0x17c>)
 8007d86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8c:	4a28      	ldr	r2, [pc, #160]	@ (8007e30 <HAL_SPI_Receive_DMA+0x180>)
 8007d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d94:	4a27      	ldr	r2, [pc, #156]	@ (8007e34 <HAL_SPI_Receive_DMA+0x184>)
 8007d96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	4619      	mov	r1, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007db8:	f7fd f8fe 	bl	8004fb8 <HAL_DMA_Start_IT>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00b      	beq.n	8007dda <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc6:	f043 0210 	orr.w	r2, r3, #16
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e023      	b.n	8007e22 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de4:	2b40      	cmp	r3, #64	@ 0x40
 8007de6:	d007      	beq.n	8007df8 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007df6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0220 	orr.w	r2, r2, #32
 8007e0e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0201 	orr.w	r2, r2, #1
 8007e1e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08008291 	.word	0x08008291
 8007e30:	0800813d 	.word	0x0800813d
 8007e34:	080082c9 	.word	0x080082c9

08007e38 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e4c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d00c      	beq.n	8007e74 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e60:	d106      	bne.n	8007e70 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	d001      	beq.n	8007e74 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
 8007e72:	e0cf      	b.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d005      	beq.n	8007e86 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007e80:	887b      	ldrh	r3, [r7, #2]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0c4      	b.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_SPI_TransmitReceive_DMA+0x60>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e0bd      	b.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d003      	beq.n	8007eb4 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2205      	movs	r2, #5
 8007eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	887a      	ldrh	r2, [r7, #2]
 8007ec4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	887a      	ldrh	r2, [r7, #2]
 8007eca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	887a      	ldrh	r2, [r7, #2]
 8007ed6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	887a      	ldrh	r2, [r7, #2]
 8007edc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d108      	bne.n	8007f08 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efa:	4a48      	ldr	r2, [pc, #288]	@ (800801c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007efc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f02:	4a47      	ldr	r2, [pc, #284]	@ (8008020 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007f04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f06:	e007      	b.n	8007f18 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0c:	4a45      	ldr	r2, [pc, #276]	@ (8008024 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f14:	4a44      	ldr	r2, [pc, #272]	@ (8008028 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f1c:	4a43      	ldr	r2, [pc, #268]	@ (800802c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007f1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f24:	2200      	movs	r2, #0
 8007f26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	4619      	mov	r1, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f40:	f7fd f83a 	bl	8004fb8 <HAL_DMA_Start_IT>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d00b      	beq.n	8007f62 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4e:	f043 0210 	orr.w	r2, r3, #16
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e058      	b.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f76:	2200      	movs	r2, #0
 8007f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f7e:	2200      	movs	r2, #0
 8007f80:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f86:	2200      	movs	r2, #0
 8007f88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f8e:	2200      	movs	r2, #0
 8007f90:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fa8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007faa:	f7fd f805 	bl	8004fb8 <HAL_DMA_Start_IT>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb8:	f043 0210 	orr.w	r2, r3, #16
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e023      	b.n	8008014 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd6:	2b40      	cmp	r3, #64	@ 0x40
 8007fd8:	d007      	beq.n	8007fea <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fe8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0220 	orr.w	r2, r2, #32
 8008000:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0202 	orr.w	r2, r2, #2
 8008010:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	08008291 	.word	0x08008291
 8008020:	0800813d 	.word	0x0800813d
 8008024:	080082ad 	.word	0x080082ad
 8008028:	080081e5 	.word	0x080081e5
 800802c:	080082c9 	.word	0x080082c9

08008030 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080a2:	f7fc fb71 	bl	8004788 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b6:	d03b      	beq.n	8008130 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0220 	bic.w	r2, r2, #32
 80080c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0202 	bic.w	r2, r2, #2
 80080d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	2164      	movs	r1, #100	@ 0x64
 80080dc:	6978      	ldr	r0, [r7, #20]
 80080de:	f000 fa01 	bl	80084e4 <SPI_EndRxTxTransaction>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ec:	f043 0220 	orr.w	r2, r3, #32
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2200      	movs	r2, #0
 8008116:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008128:	6978      	ldr	r0, [r7, #20]
 800812a:	f7ff ffa9 	bl	8008080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800812e:	e002      	b.n	8008136 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008130:	6978      	ldr	r0, [r7, #20]
 8008132:	f7fa fc03 	bl	800293c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800814a:	f7fc fb1d 	bl	8004788 <HAL_GetTick>
 800814e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800815e:	d03b      	beq.n	80081d8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f022 0220 	bic.w	r2, r2, #32
 800816e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10d      	bne.n	8008194 <SPI_DMAReceiveCplt+0x58>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008180:	d108      	bne.n	8008194 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0203 	bic.w	r2, r2, #3
 8008190:	605a      	str	r2, [r3, #4]
 8008192:	e007      	b.n	80081a4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	2164      	movs	r1, #100	@ 0x64
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 f935 	bl	8008418 <SPI_EndRxTransaction>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2220      	movs	r2, #32
 80081b8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f7ff ff55 	bl	8008080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80081d6:	e002      	b.n	80081de <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f7fa fbc5 	bl	8002968 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081f2:	f7fc fac9 	bl	8004788 <HAL_GetTick>
 80081f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008206:	d02f      	beq.n	8008268 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0220 	bic.w	r2, r2, #32
 8008216:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	2164      	movs	r1, #100	@ 0x64
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f961 	bl	80084e4 <SPI_EndRxTxTransaction>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d005      	beq.n	8008234 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822c:	f043 0220 	orr.w	r2, r3, #32
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0203 	bic.w	r2, r2, #3
 8008242:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f7ff ff0d 	bl	8008080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008266:	e002      	b.n	800826e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f7ff fee1 	bl	8008030 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008280:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fede 	bl	8008044 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008288:	bf00      	nop
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f7ff feda 	bl	8008058 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082a4:	bf00      	nop
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff fed6 	bl	800806c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082c0:	bf00      	nop
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0203 	bic.w	r2, r2, #3
 80082e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	f043 0210 	orr.w	r2, r3, #16
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fec0 	bl	8008080 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	4613      	mov	r3, r2
 8008316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008318:	f7fc fa36 	bl	8004788 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	4413      	add	r3, r2
 8008326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008328:	f7fc fa2e 	bl	8004788 <HAL_GetTick>
 800832c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800832e:	4b39      	ldr	r3, [pc, #228]	@ (8008414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	015b      	lsls	r3, r3, #5
 8008334:	0d1b      	lsrs	r3, r3, #20
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	fb02 f303 	mul.w	r3, r2, r3
 800833c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800833e:	e054      	b.n	80083ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d050      	beq.n	80083ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008348:	f7fc fa1e 	bl	8004788 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	69fa      	ldr	r2, [r7, #28]
 8008354:	429a      	cmp	r2, r3
 8008356:	d902      	bls.n	800835e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d13d      	bne.n	80083da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800836c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008376:	d111      	bne.n	800839c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008380:	d004      	beq.n	800838c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800838a:	d107      	bne.n	800839c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800839a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a4:	d10f      	bne.n	80083c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e017      	b.n	800840a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083e0:	2300      	movs	r3, #0
 80083e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4013      	ands	r3, r2
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	bf0c      	ite	eq
 80083fa:	2301      	moveq	r3, #1
 80083fc:	2300      	movne	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	429a      	cmp	r2, r3
 8008406:	d19b      	bne.n	8008340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	2000000c 	.word	0x2000000c

08008418 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800842c:	d111      	bne.n	8008452 <SPI_EndRxTransaction+0x3a>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008436:	d004      	beq.n	8008442 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008440:	d107      	bne.n	8008452 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008450:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800845a:	d12a      	bne.n	80084b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008464:	d012      	beq.n	800848c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2200      	movs	r2, #0
 800846e:	2180      	movs	r1, #128	@ 0x80
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7ff ff49 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d02d      	beq.n	80084d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008480:	f043 0220 	orr.w	r2, r3, #32
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e026      	b.n	80084da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	2101      	movs	r1, #1
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f7ff ff36 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01a      	beq.n	80084d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a6:	f043 0220 	orr.w	r2, r3, #32
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e013      	b.n	80084da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2200      	movs	r2, #0
 80084ba:	2101      	movs	r1, #1
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7ff ff23 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084cc:	f043 0220 	orr.w	r2, r3, #32
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e000      	b.n	80084da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2201      	movs	r2, #1
 80084f8:	2102      	movs	r1, #2
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7ff ff04 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850a:	f043 0220 	orr.w	r2, r3, #32
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e032      	b.n	800857c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008516:	4b1b      	ldr	r3, [pc, #108]	@ (8008584 <SPI_EndRxTxTransaction+0xa0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1b      	ldr	r2, [pc, #108]	@ (8008588 <SPI_EndRxTxTransaction+0xa4>)
 800851c:	fba2 2303 	umull	r2, r3, r2, r3
 8008520:	0d5b      	lsrs	r3, r3, #21
 8008522:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008534:	d112      	bne.n	800855c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	2200      	movs	r2, #0
 800853e:	2180      	movs	r1, #128	@ 0x80
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff fee1 	bl	8008308 <SPI_WaitFlagStateUntilTimeout>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d016      	beq.n	800857a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008550:	f043 0220 	orr.w	r2, r3, #32
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e00f      	b.n	800857c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	3b01      	subs	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008572:	2b80      	cmp	r3, #128	@ 0x80
 8008574:	d0f2      	beq.n	800855c <SPI_EndRxTxTransaction+0x78>
 8008576:	e000      	b.n	800857a <SPI_EndRxTxTransaction+0x96>
        break;
 8008578:	bf00      	nop
  }

  return HAL_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3718      	adds	r7, #24
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	2000000c 	.word	0x2000000c
 8008588:	165e9f81 	.word	0x165e9f81

0800858c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e041      	b.n	8008622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fb ff48 	bl	8004448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f000 f95e 	bl	800888c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	d001      	beq.n	8008644 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e046      	b.n	80086d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a23      	ldr	r2, [pc, #140]	@ (80086e0 <HAL_TIM_Base_Start+0xb4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d022      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865e:	d01d      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1f      	ldr	r2, [pc, #124]	@ (80086e4 <HAL_TIM_Base_Start+0xb8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d018      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a1e      	ldr	r2, [pc, #120]	@ (80086e8 <HAL_TIM_Base_Start+0xbc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d013      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1c      	ldr	r2, [pc, #112]	@ (80086ec <HAL_TIM_Base_Start+0xc0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00e      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1b      	ldr	r2, [pc, #108]	@ (80086f0 <HAL_TIM_Base_Start+0xc4>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d009      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a19      	ldr	r2, [pc, #100]	@ (80086f4 <HAL_TIM_Base_Start+0xc8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d004      	beq.n	800869c <HAL_TIM_Base_Start+0x70>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a18      	ldr	r2, [pc, #96]	@ (80086f8 <HAL_TIM_Base_Start+0xcc>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d111      	bne.n	80086c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b06      	cmp	r3, #6
 80086ac:	d010      	beq.n	80086d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f042 0201 	orr.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086be:	e007      	b.n	80086d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40001800 	.word	0x40001800

080086fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIM_ConfigClockSource+0x1c>
 8008714:	2302      	movs	r3, #2
 8008716:	e0b4      	b.n	8008882 <HAL_TIM_ConfigClockSource+0x186>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800873e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008750:	d03e      	beq.n	80087d0 <HAL_TIM_ConfigClockSource+0xd4>
 8008752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008756:	f200 8087 	bhi.w	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 800875a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800875e:	f000 8086 	beq.w	800886e <HAL_TIM_ConfigClockSource+0x172>
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008766:	d87f      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008768:	2b70      	cmp	r3, #112	@ 0x70
 800876a:	d01a      	beq.n	80087a2 <HAL_TIM_ConfigClockSource+0xa6>
 800876c:	2b70      	cmp	r3, #112	@ 0x70
 800876e:	d87b      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008770:	2b60      	cmp	r3, #96	@ 0x60
 8008772:	d050      	beq.n	8008816 <HAL_TIM_ConfigClockSource+0x11a>
 8008774:	2b60      	cmp	r3, #96	@ 0x60
 8008776:	d877      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008778:	2b50      	cmp	r3, #80	@ 0x50
 800877a:	d03c      	beq.n	80087f6 <HAL_TIM_ConfigClockSource+0xfa>
 800877c:	2b50      	cmp	r3, #80	@ 0x50
 800877e:	d873      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008780:	2b40      	cmp	r3, #64	@ 0x40
 8008782:	d058      	beq.n	8008836 <HAL_TIM_ConfigClockSource+0x13a>
 8008784:	2b40      	cmp	r3, #64	@ 0x40
 8008786:	d86f      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008788:	2b30      	cmp	r3, #48	@ 0x30
 800878a:	d064      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 800878c:	2b30      	cmp	r3, #48	@ 0x30
 800878e:	d86b      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008790:	2b20      	cmp	r3, #32
 8008792:	d060      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 8008794:	2b20      	cmp	r3, #32
 8008796:	d867      	bhi.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d05c      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 800879c:	2b10      	cmp	r3, #16
 800879e:	d05a      	beq.n	8008856 <HAL_TIM_ConfigClockSource+0x15a>
 80087a0:	e062      	b.n	8008868 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087b2:	f000 f991 	bl	8008ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	609a      	str	r2, [r3, #8]
      break;
 80087ce:	e04f      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087e0:	f000 f97a 	bl	8008ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689a      	ldr	r2, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f2:	609a      	str	r2, [r3, #8]
      break;
 80087f4:	e03c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008802:	461a      	mov	r2, r3
 8008804:	f000 f8ee 	bl	80089e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2150      	movs	r1, #80	@ 0x50
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f947 	bl	8008aa2 <TIM_ITRx_SetConfig>
      break;
 8008814:	e02c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008822:	461a      	mov	r2, r3
 8008824:	f000 f90d 	bl	8008a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2160      	movs	r1, #96	@ 0x60
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f937 	bl	8008aa2 <TIM_ITRx_SetConfig>
      break;
 8008834:	e01c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008842:	461a      	mov	r2, r3
 8008844:	f000 f8ce 	bl	80089e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2140      	movs	r1, #64	@ 0x40
 800884e:	4618      	mov	r0, r3
 8008850:	f000 f927 	bl	8008aa2 <TIM_ITRx_SetConfig>
      break;
 8008854:	e00c      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4619      	mov	r1, r3
 8008860:	4610      	mov	r0, r2
 8008862:	f000 f91e 	bl	8008aa2 <TIM_ITRx_SetConfig>
      break;
 8008866:	e003      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	73fb      	strb	r3, [r7, #15]
      break;
 800886c:	e000      	b.n	8008870 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800886e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a46      	ldr	r2, [pc, #280]	@ (80089b8 <TIM_Base_SetConfig+0x12c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d013      	beq.n	80088cc <TIM_Base_SetConfig+0x40>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088aa:	d00f      	beq.n	80088cc <TIM_Base_SetConfig+0x40>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a43      	ldr	r2, [pc, #268]	@ (80089bc <TIM_Base_SetConfig+0x130>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00b      	beq.n	80088cc <TIM_Base_SetConfig+0x40>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a42      	ldr	r2, [pc, #264]	@ (80089c0 <TIM_Base_SetConfig+0x134>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d007      	beq.n	80088cc <TIM_Base_SetConfig+0x40>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a41      	ldr	r2, [pc, #260]	@ (80089c4 <TIM_Base_SetConfig+0x138>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d003      	beq.n	80088cc <TIM_Base_SetConfig+0x40>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a40      	ldr	r2, [pc, #256]	@ (80089c8 <TIM_Base_SetConfig+0x13c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d108      	bne.n	80088de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a35      	ldr	r2, [pc, #212]	@ (80089b8 <TIM_Base_SetConfig+0x12c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d02b      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ec:	d027      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a32      	ldr	r2, [pc, #200]	@ (80089bc <TIM_Base_SetConfig+0x130>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d023      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a31      	ldr	r2, [pc, #196]	@ (80089c0 <TIM_Base_SetConfig+0x134>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d01f      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a30      	ldr	r2, [pc, #192]	@ (80089c4 <TIM_Base_SetConfig+0x138>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d01b      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a2f      	ldr	r2, [pc, #188]	@ (80089c8 <TIM_Base_SetConfig+0x13c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d017      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a2e      	ldr	r2, [pc, #184]	@ (80089cc <TIM_Base_SetConfig+0x140>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d013      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a2d      	ldr	r2, [pc, #180]	@ (80089d0 <TIM_Base_SetConfig+0x144>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00f      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a2c      	ldr	r2, [pc, #176]	@ (80089d4 <TIM_Base_SetConfig+0x148>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d00b      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a2b      	ldr	r2, [pc, #172]	@ (80089d8 <TIM_Base_SetConfig+0x14c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d007      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a2a      	ldr	r2, [pc, #168]	@ (80089dc <TIM_Base_SetConfig+0x150>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d003      	beq.n	800893e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a29      	ldr	r2, [pc, #164]	@ (80089e0 <TIM_Base_SetConfig+0x154>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d108      	bne.n	8008950 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008944:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	4313      	orrs	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	4a10      	ldr	r2, [pc, #64]	@ (80089b8 <TIM_Base_SetConfig+0x12c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <TIM_Base_SetConfig+0xf8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a12      	ldr	r2, [pc, #72]	@ (80089c8 <TIM_Base_SetConfig+0x13c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d103      	bne.n	800898c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	691a      	ldr	r2, [r3, #16]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b01      	cmp	r3, #1
 800899c:	d105      	bne.n	80089aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f023 0201 	bic.w	r2, r3, #1
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	611a      	str	r2, [r3, #16]
  }
}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40010000 	.word	0x40010000
 80089bc:	40000400 	.word	0x40000400
 80089c0:	40000800 	.word	0x40000800
 80089c4:	40000c00 	.word	0x40000c00
 80089c8:	40010400 	.word	0x40010400
 80089cc:	40014000 	.word	0x40014000
 80089d0:	40014400 	.word	0x40014400
 80089d4:	40014800 	.word	0x40014800
 80089d8:	40001800 	.word	0x40001800
 80089dc:	40001c00 	.word	0x40001c00
 80089e0:	40002000 	.word	0x40002000

080089e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b087      	sub	sp, #28
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f023 0201 	bic.w	r2, r3, #1
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	f023 030a 	bic.w	r3, r3, #10
 8008a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b087      	sub	sp, #28
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	f023 0210 	bic.w	r2, r3, #16
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	031b      	lsls	r3, r3, #12
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	621a      	str	r2, [r3, #32]
}
 8008a96:	bf00      	nop
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	f043 0307 	orr.w	r3, r3, #7
 8008ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	609a      	str	r2, [r3, #8]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	021a      	lsls	r2, r3, #8
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	609a      	str	r2, [r3, #8]
}
 8008b0c:	bf00      	nop
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e05a      	b.n	8008be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a21      	ldr	r2, [pc, #132]	@ (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d022      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b7c:	d01d      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d018      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1a      	ldr	r2, [pc, #104]	@ (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00e      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a18      	ldr	r2, [pc, #96]	@ (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d009      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a17      	ldr	r2, [pc, #92]	@ (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d004      	beq.n	8008bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a15      	ldr	r2, [pc, #84]	@ (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d10c      	bne.n	8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40001800 	.word	0x40001800

08008c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e042      	b.n	8008ca8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fb fc26 	bl	8004488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2224      	movs	r2, #36	@ 0x24
 8008c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68da      	ldr	r2, [r3, #12]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fc85 	bl	8009564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	691a      	ldr	r2, [r3, #16]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	695a      	ldr	r2, [r3, #20]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68da      	ldr	r2, [r3, #12]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b0ba      	sub	sp, #232	@ 0xe8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10f      	bne.n	8008d16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d009      	beq.n	8008d16 <HAL_UART_IRQHandler+0x66>
 8008d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d06:	f003 0320 	and.w	r3, r3, #32
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fb69 	bl	80093e6 <UART_Receive_IT>
      return;
 8008d14:	e25b      	b.n	80091ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 80de 	beq.w	8008edc <HAL_UART_IRQHandler+0x22c>
 8008d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80d1 	beq.w	8008edc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <HAL_UART_IRQHandler+0xae>
 8008d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d56:	f043 0201 	orr.w	r2, r3, #1
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d62:	f003 0304 	and.w	r3, r3, #4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00b      	beq.n	8008d82 <HAL_UART_IRQHandler+0xd2>
 8008d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d005      	beq.n	8008d82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7a:	f043 0202 	orr.w	r2, r3, #2
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00b      	beq.n	8008da6 <HAL_UART_IRQHandler+0xf6>
 8008d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d9e:	f043 0204 	orr.w	r2, r3, #4
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008daa:	f003 0308 	and.w	r3, r3, #8
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d011      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x126>
 8008db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db6:	f003 0320 	and.w	r3, r3, #32
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d105      	bne.n	8008dca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dce:	f043 0208 	orr.w	r2, r3, #8
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 81f2 	beq.w	80091c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d008      	beq.n	8008dfe <HAL_UART_IRQHandler+0x14e>
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 faf4 	bl	80093e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e08:	2b40      	cmp	r3, #64	@ 0x40
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1a:	f003 0308 	and.w	r3, r3, #8
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <HAL_UART_IRQHandler+0x17a>
 8008e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d04f      	beq.n	8008eca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f9fc 	bl	8009228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3a:	2b40      	cmp	r3, #64	@ 0x40
 8008e3c:	d141      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	3314      	adds	r3, #20
 8008e44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3314      	adds	r3, #20
 8008e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e7a:	e841 2300 	strex	r3, r2, [r1]
 8008e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1d9      	bne.n	8008e3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d013      	beq.n	8008eba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e96:	4a7e      	ldr	r2, [pc, #504]	@ (8009090 <HAL_UART_IRQHandler+0x3e0>)
 8008e98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fc f952 	bl	8005148 <HAL_DMA_Abort_IT>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d016      	beq.n	8008ed8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb8:	e00e      	b.n	8008ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f99e 	bl	80091fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec0:	e00a      	b.n	8008ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f99a 	bl	80091fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec8:	e006      	b.n	8008ed8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f996 	bl	80091fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008ed6:	e175      	b.n	80091c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed8:	bf00      	nop
    return;
 8008eda:	e173      	b.n	80091c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	f040 814f 	bne.w	8009184 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 8148 	beq.w	8009184 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef8:	f003 0310 	and.w	r3, r3, #16
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 8141 	beq.w	8009184 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f02:	2300      	movs	r3, #0
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60bb      	str	r3, [r7, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	60bb      	str	r3, [r7, #8]
 8008f16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f22:	2b40      	cmp	r3, #64	@ 0x40
 8008f24:	f040 80b6 	bne.w	8009094 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 8145 	beq.w	80091c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f46:	429a      	cmp	r2, r3
 8008f48:	f080 813e 	bcs.w	80091c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f5e:	f000 8088 	beq.w	8009072 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	330c      	adds	r3, #12
 8008f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	330c      	adds	r3, #12
 8008f8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008f8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1d9      	bne.n	8008f62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3314      	adds	r3, #20
 8008fb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3314      	adds	r3, #20
 8008fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e1      	bne.n	8008fae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3314      	adds	r3, #20
 8008ff0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3314      	adds	r3, #20
 800900a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800900e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009010:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009014:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800901c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e3      	bne.n	8008fea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009042:	f023 0310 	bic.w	r3, r3, #16
 8009046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	330c      	adds	r3, #12
 8009050:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009054:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009056:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800905a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e3      	bne.n	8009030 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906c:	4618      	mov	r0, r3
 800906e:	f7fb fffb 	bl	8005068 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009080:	b29b      	uxth	r3, r3
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	b29b      	uxth	r3, r3
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8c1 	bl	8009210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800908e:	e09b      	b.n	80091c8 <HAL_UART_IRQHandler+0x518>
 8009090:	080092ef 	.word	0x080092ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800909c:	b29b      	uxth	r3, r3
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 808e 	beq.w	80091cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80090b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8089 	beq.w	80091cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	330c      	adds	r3, #12
 80090c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	330c      	adds	r3, #12
 80090da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80090de:	647a      	str	r2, [r7, #68]	@ 0x44
 80090e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090e6:	e841 2300 	strex	r3, r2, [r1]
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1e3      	bne.n	80090ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3314      	adds	r3, #20
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	e853 3f00 	ldrex	r3, [r3]
 8009100:	623b      	str	r3, [r7, #32]
   return(result);
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	f023 0301 	bic.w	r3, r3, #1
 8009108:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3314      	adds	r3, #20
 8009112:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009116:	633a      	str	r2, [r7, #48]	@ 0x30
 8009118:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800911c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e3      	bne.n	80090f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	330c      	adds	r3, #12
 800913e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	e853 3f00 	ldrex	r3, [r3]
 8009146:	60fb      	str	r3, [r7, #12]
   return(result);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0310 	bic.w	r3, r3, #16
 800914e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800915c:	61fa      	str	r2, [r7, #28]
 800915e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	69b9      	ldr	r1, [r7, #24]
 8009162:	69fa      	ldr	r2, [r7, #28]
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	617b      	str	r3, [r7, #20]
   return(result);
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e3      	bne.n	8009138 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f847 	bl	8009210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009182:	e023      	b.n	80091cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <HAL_UART_IRQHandler+0x4f4>
 8009190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f8ba 	bl	8009316 <UART_Transmit_IT>
    return;
 80091a2:	e014      	b.n	80091ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80091a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <HAL_UART_IRQHandler+0x51e>
 80091b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d008      	beq.n	80091ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8fa 	bl	80093b6 <UART_EndTransmit_IT>
    return;
 80091c2:	e004      	b.n	80091ce <HAL_UART_IRQHandler+0x51e>
    return;
 80091c4:	bf00      	nop
 80091c6:	e002      	b.n	80091ce <HAL_UART_IRQHandler+0x51e>
      return;
 80091c8:	bf00      	nop
 80091ca:	e000      	b.n	80091ce <HAL_UART_IRQHandler+0x51e>
      return;
 80091cc:	bf00      	nop
  }
}
 80091ce:	37e8      	adds	r7, #232	@ 0xe8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b095      	sub	sp, #84	@ 0x54
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	330c      	adds	r3, #12
 8009236:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009246:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009250:	643a      	str	r2, [r7, #64]	@ 0x40
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009254:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009256:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009258:	e841 2300 	strex	r3, r2, [r1]
 800925c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1e5      	bne.n	8009230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3314      	adds	r3, #20
 800926a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	61fb      	str	r3, [r7, #28]
   return(result);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3314      	adds	r3, #20
 8009282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009286:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009288:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800928a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800928c:	e841 2300 	strex	r3, r2, [r1]
 8009290:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e5      	bne.n	8009264 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929c:	2b01      	cmp	r3, #1
 800929e:	d119      	bne.n	80092d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	330c      	adds	r3, #12
 80092a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0310 	bic.w	r3, r3, #16
 80092b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	330c      	adds	r3, #12
 80092be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092c0:	61ba      	str	r2, [r7, #24]
 80092c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	613b      	str	r3, [r7, #16]
   return(result);
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80092e2:	bf00      	nop
 80092e4:	3754      	adds	r7, #84	@ 0x54
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f7ff ff77 	bl	80091fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800930e:	bf00      	nop
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b21      	cmp	r3, #33	@ 0x21
 8009328:	d13e      	bne.n	80093a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009332:	d114      	bne.n	800935e <UART_Transmit_IT+0x48>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d110      	bne.n	800935e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	881b      	ldrh	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009350:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a1b      	ldr	r3, [r3, #32]
 8009356:	1c9a      	adds	r2, r3, #2
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	621a      	str	r2, [r3, #32]
 800935c:	e008      	b.n	8009370 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	1c59      	adds	r1, r3, #1
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	6211      	str	r1, [r2, #32]
 8009368:	781a      	ldrb	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29b      	uxth	r3, r3
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	4619      	mov	r1, r3
 800937e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10f      	bne.n	80093a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009392:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e000      	b.n	80093aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093a8:	2302      	movs	r3, #2
  }
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fefc 	bl	80091d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b08c      	sub	sp, #48	@ 0x30
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b22      	cmp	r3, #34	@ 0x22
 80093f8:	f040 80ae 	bne.w	8009558 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009404:	d117      	bne.n	8009436 <UART_Receive_IT+0x50>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d113      	bne.n	8009436 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009416:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009424:	b29a      	uxth	r2, r3
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942e:	1c9a      	adds	r2, r3, #2
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	629a      	str	r2, [r3, #40]	@ 0x28
 8009434:	e026      	b.n	8009484 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800943c:	2300      	movs	r3, #0
 800943e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009448:	d007      	beq.n	800945a <UART_Receive_IT+0x74>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10a      	bne.n	8009468 <UART_Receive_IT+0x82>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e008      	b.n	800947a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009474:	b2da      	uxtb	r2, r3
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29b      	uxth	r3, r3
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4619      	mov	r1, r3
 8009492:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009494:	2b00      	cmp	r3, #0
 8009496:	d15d      	bne.n	8009554 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0220 	bic.w	r2, r2, #32
 80094a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80094b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	695a      	ldr	r2, [r3, #20]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0201 	bic.w	r2, r2, #1
 80094c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d135      	bne.n	800954a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	330c      	adds	r3, #12
 80094ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	e853 3f00 	ldrex	r3, [r3]
 80094f2:	613b      	str	r3, [r7, #16]
   return(result);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f023 0310 	bic.w	r3, r3, #16
 80094fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	330c      	adds	r3, #12
 8009502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009504:	623a      	str	r2, [r7, #32]
 8009506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	69f9      	ldr	r1, [r7, #28]
 800950a:	6a3a      	ldr	r2, [r7, #32]
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	61bb      	str	r3, [r7, #24]
   return(result);
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e5      	bne.n	80094e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2b10      	cmp	r3, #16
 8009524:	d10a      	bne.n	800953c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7ff fe64 	bl	8009210 <HAL_UARTEx_RxEventCallback>
 8009548:	e002      	b.n	8009550 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fe4c 	bl	80091e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	e002      	b.n	800955a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	e000      	b.n	800955a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009558:	2302      	movs	r3, #2
  }
}
 800955a:	4618      	mov	r0, r3
 800955c:	3730      	adds	r7, #48	@ 0x30
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009568:	b0c0      	sub	sp, #256	@ 0x100
 800956a:	af00      	add	r7, sp, #0
 800956c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009580:	68d9      	ldr	r1, [r3, #12]
 8009582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	ea40 0301 	orr.w	r3, r0, r1
 800958c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800958e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009592:	689a      	ldr	r2, [r3, #8]
 8009594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	431a      	orrs	r2, r3
 800959c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a8:	69db      	ldr	r3, [r3, #28]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80095bc:	f021 010c 	bic.w	r1, r1, #12
 80095c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80095ca:	430b      	orrs	r3, r1
 80095cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80095ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095de:	6999      	ldr	r1, [r3, #24]
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	ea40 0301 	orr.w	r3, r0, r1
 80095ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	4b8f      	ldr	r3, [pc, #572]	@ (8009830 <UART_SetConfig+0x2cc>)
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d005      	beq.n	8009604 <UART_SetConfig+0xa0>
 80095f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009834 <UART_SetConfig+0x2d0>)
 8009600:	429a      	cmp	r2, r3
 8009602:	d104      	bne.n	800960e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009604:	f7fc fe66 	bl	80062d4 <HAL_RCC_GetPCLK2Freq>
 8009608:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800960c:	e003      	b.n	8009616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800960e:	f7fc fe4d 	bl	80062ac <HAL_RCC_GetPCLK1Freq>
 8009612:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009620:	f040 810c 	bne.w	800983c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009628:	2200      	movs	r2, #0
 800962a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800962e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009636:	4622      	mov	r2, r4
 8009638:	462b      	mov	r3, r5
 800963a:	1891      	adds	r1, r2, r2
 800963c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800963e:	415b      	adcs	r3, r3
 8009640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009646:	4621      	mov	r1, r4
 8009648:	eb12 0801 	adds.w	r8, r2, r1
 800964c:	4629      	mov	r1, r5
 800964e:	eb43 0901 	adc.w	r9, r3, r1
 8009652:	f04f 0200 	mov.w	r2, #0
 8009656:	f04f 0300 	mov.w	r3, #0
 800965a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800965e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009666:	4690      	mov	r8, r2
 8009668:	4699      	mov	r9, r3
 800966a:	4623      	mov	r3, r4
 800966c:	eb18 0303 	adds.w	r3, r8, r3
 8009670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009674:	462b      	mov	r3, r5
 8009676:	eb49 0303 	adc.w	r3, r9, r3
 800967a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800967e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800968a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800968e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009692:	460b      	mov	r3, r1
 8009694:	18db      	adds	r3, r3, r3
 8009696:	653b      	str	r3, [r7, #80]	@ 0x50
 8009698:	4613      	mov	r3, r2
 800969a:	eb42 0303 	adc.w	r3, r2, r3
 800969e:	657b      	str	r3, [r7, #84]	@ 0x54
 80096a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80096a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80096a8:	f7f7 f98c 	bl	80009c4 <__aeabi_uldivmod>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	4b61      	ldr	r3, [pc, #388]	@ (8009838 <UART_SetConfig+0x2d4>)
 80096b2:	fba3 2302 	umull	r2, r3, r3, r2
 80096b6:	095b      	lsrs	r3, r3, #5
 80096b8:	011c      	lsls	r4, r3, #4
 80096ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80096c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	1891      	adds	r1, r2, r2
 80096d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80096d4:	415b      	adcs	r3, r3
 80096d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80096dc:	4641      	mov	r1, r8
 80096de:	eb12 0a01 	adds.w	sl, r2, r1
 80096e2:	4649      	mov	r1, r9
 80096e4:	eb43 0b01 	adc.w	fp, r3, r1
 80096e8:	f04f 0200 	mov.w	r2, #0
 80096ec:	f04f 0300 	mov.w	r3, #0
 80096f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096fc:	4692      	mov	sl, r2
 80096fe:	469b      	mov	fp, r3
 8009700:	4643      	mov	r3, r8
 8009702:	eb1a 0303 	adds.w	r3, sl, r3
 8009706:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800970a:	464b      	mov	r3, r9
 800970c:	eb4b 0303 	adc.w	r3, fp, r3
 8009710:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009720:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009728:	460b      	mov	r3, r1
 800972a:	18db      	adds	r3, r3, r3
 800972c:	643b      	str	r3, [r7, #64]	@ 0x40
 800972e:	4613      	mov	r3, r2
 8009730:	eb42 0303 	adc.w	r3, r2, r3
 8009734:	647b      	str	r3, [r7, #68]	@ 0x44
 8009736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800973a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800973e:	f7f7 f941 	bl	80009c4 <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4611      	mov	r1, r2
 8009748:	4b3b      	ldr	r3, [pc, #236]	@ (8009838 <UART_SetConfig+0x2d4>)
 800974a:	fba3 2301 	umull	r2, r3, r3, r1
 800974e:	095b      	lsrs	r3, r3, #5
 8009750:	2264      	movs	r2, #100	@ 0x64
 8009752:	fb02 f303 	mul.w	r3, r2, r3
 8009756:	1acb      	subs	r3, r1, r3
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800975e:	4b36      	ldr	r3, [pc, #216]	@ (8009838 <UART_SetConfig+0x2d4>)
 8009760:	fba3 2302 	umull	r2, r3, r3, r2
 8009764:	095b      	lsrs	r3, r3, #5
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800976c:	441c      	add	r4, r3
 800976e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009778:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800977c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009780:	4642      	mov	r2, r8
 8009782:	464b      	mov	r3, r9
 8009784:	1891      	adds	r1, r2, r2
 8009786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009788:	415b      	adcs	r3, r3
 800978a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800978c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009790:	4641      	mov	r1, r8
 8009792:	1851      	adds	r1, r2, r1
 8009794:	6339      	str	r1, [r7, #48]	@ 0x30
 8009796:	4649      	mov	r1, r9
 8009798:	414b      	adcs	r3, r1
 800979a:	637b      	str	r3, [r7, #52]	@ 0x34
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80097a8:	4659      	mov	r1, fp
 80097aa:	00cb      	lsls	r3, r1, #3
 80097ac:	4651      	mov	r1, sl
 80097ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097b2:	4651      	mov	r1, sl
 80097b4:	00ca      	lsls	r2, r1, #3
 80097b6:	4610      	mov	r0, r2
 80097b8:	4619      	mov	r1, r3
 80097ba:	4603      	mov	r3, r0
 80097bc:	4642      	mov	r2, r8
 80097be:	189b      	adds	r3, r3, r2
 80097c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097c4:	464b      	mov	r3, r9
 80097c6:	460a      	mov	r2, r1
 80097c8:	eb42 0303 	adc.w	r3, r2, r3
 80097cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80097dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80097e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097e4:	460b      	mov	r3, r1
 80097e6:	18db      	adds	r3, r3, r3
 80097e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097ea:	4613      	mov	r3, r2
 80097ec:	eb42 0303 	adc.w	r3, r2, r3
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80097fa:	f7f7 f8e3 	bl	80009c4 <__aeabi_uldivmod>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4b0d      	ldr	r3, [pc, #52]	@ (8009838 <UART_SetConfig+0x2d4>)
 8009804:	fba3 1302 	umull	r1, r3, r3, r2
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	2164      	movs	r1, #100	@ 0x64
 800980c:	fb01 f303 	mul.w	r3, r1, r3
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	3332      	adds	r3, #50	@ 0x32
 8009816:	4a08      	ldr	r2, [pc, #32]	@ (8009838 <UART_SetConfig+0x2d4>)
 8009818:	fba2 2303 	umull	r2, r3, r2, r3
 800981c:	095b      	lsrs	r3, r3, #5
 800981e:	f003 0207 	and.w	r2, r3, #7
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4422      	add	r2, r4
 800982a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800982c:	e106      	b.n	8009a3c <UART_SetConfig+0x4d8>
 800982e:	bf00      	nop
 8009830:	40011000 	.word	0x40011000
 8009834:	40011400 	.word	0x40011400
 8009838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800983c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009840:	2200      	movs	r2, #0
 8009842:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009846:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800984a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800984e:	4642      	mov	r2, r8
 8009850:	464b      	mov	r3, r9
 8009852:	1891      	adds	r1, r2, r2
 8009854:	6239      	str	r1, [r7, #32]
 8009856:	415b      	adcs	r3, r3
 8009858:	627b      	str	r3, [r7, #36]	@ 0x24
 800985a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800985e:	4641      	mov	r1, r8
 8009860:	1854      	adds	r4, r2, r1
 8009862:	4649      	mov	r1, r9
 8009864:	eb43 0501 	adc.w	r5, r3, r1
 8009868:	f04f 0200 	mov.w	r2, #0
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	00eb      	lsls	r3, r5, #3
 8009872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009876:	00e2      	lsls	r2, r4, #3
 8009878:	4614      	mov	r4, r2
 800987a:	461d      	mov	r5, r3
 800987c:	4643      	mov	r3, r8
 800987e:	18e3      	adds	r3, r4, r3
 8009880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009884:	464b      	mov	r3, r9
 8009886:	eb45 0303 	adc.w	r3, r5, r3
 800988a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800989a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80098aa:	4629      	mov	r1, r5
 80098ac:	008b      	lsls	r3, r1, #2
 80098ae:	4621      	mov	r1, r4
 80098b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098b4:	4621      	mov	r1, r4
 80098b6:	008a      	lsls	r2, r1, #2
 80098b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80098bc:	f7f7 f882 	bl	80009c4 <__aeabi_uldivmod>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4b60      	ldr	r3, [pc, #384]	@ (8009a48 <UART_SetConfig+0x4e4>)
 80098c6:	fba3 2302 	umull	r2, r3, r3, r2
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	011c      	lsls	r4, r3, #4
 80098ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80098dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80098e0:	4642      	mov	r2, r8
 80098e2:	464b      	mov	r3, r9
 80098e4:	1891      	adds	r1, r2, r2
 80098e6:	61b9      	str	r1, [r7, #24]
 80098e8:	415b      	adcs	r3, r3
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098f0:	4641      	mov	r1, r8
 80098f2:	1851      	adds	r1, r2, r1
 80098f4:	6139      	str	r1, [r7, #16]
 80098f6:	4649      	mov	r1, r9
 80098f8:	414b      	adcs	r3, r1
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	f04f 0200 	mov.w	r2, #0
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009908:	4659      	mov	r1, fp
 800990a:	00cb      	lsls	r3, r1, #3
 800990c:	4651      	mov	r1, sl
 800990e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009912:	4651      	mov	r1, sl
 8009914:	00ca      	lsls	r2, r1, #3
 8009916:	4610      	mov	r0, r2
 8009918:	4619      	mov	r1, r3
 800991a:	4603      	mov	r3, r0
 800991c:	4642      	mov	r2, r8
 800991e:	189b      	adds	r3, r3, r2
 8009920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009924:	464b      	mov	r3, r9
 8009926:	460a      	mov	r2, r1
 8009928:	eb42 0303 	adc.w	r3, r2, r3
 800992c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	67bb      	str	r3, [r7, #120]	@ 0x78
 800993a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	f04f 0300 	mov.w	r3, #0
 8009944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009948:	4649      	mov	r1, r9
 800994a:	008b      	lsls	r3, r1, #2
 800994c:	4641      	mov	r1, r8
 800994e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009952:	4641      	mov	r1, r8
 8009954:	008a      	lsls	r2, r1, #2
 8009956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800995a:	f7f7 f833 	bl	80009c4 <__aeabi_uldivmod>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4611      	mov	r1, r2
 8009964:	4b38      	ldr	r3, [pc, #224]	@ (8009a48 <UART_SetConfig+0x4e4>)
 8009966:	fba3 2301 	umull	r2, r3, r3, r1
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	2264      	movs	r2, #100	@ 0x64
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	1acb      	subs	r3, r1, r3
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	3332      	adds	r3, #50	@ 0x32
 8009978:	4a33      	ldr	r2, [pc, #204]	@ (8009a48 <UART_SetConfig+0x4e4>)
 800997a:	fba2 2303 	umull	r2, r3, r2, r3
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009984:	441c      	add	r4, r3
 8009986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800998a:	2200      	movs	r2, #0
 800998c:	673b      	str	r3, [r7, #112]	@ 0x70
 800998e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009990:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009994:	4642      	mov	r2, r8
 8009996:	464b      	mov	r3, r9
 8009998:	1891      	adds	r1, r2, r2
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	415b      	adcs	r3, r3
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099a4:	4641      	mov	r1, r8
 80099a6:	1851      	adds	r1, r2, r1
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	4649      	mov	r1, r9
 80099ac:	414b      	adcs	r3, r1
 80099ae:	607b      	str	r3, [r7, #4]
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099bc:	4659      	mov	r1, fp
 80099be:	00cb      	lsls	r3, r1, #3
 80099c0:	4651      	mov	r1, sl
 80099c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099c6:	4651      	mov	r1, sl
 80099c8:	00ca      	lsls	r2, r1, #3
 80099ca:	4610      	mov	r0, r2
 80099cc:	4619      	mov	r1, r3
 80099ce:	4603      	mov	r3, r0
 80099d0:	4642      	mov	r2, r8
 80099d2:	189b      	adds	r3, r3, r2
 80099d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099d6:	464b      	mov	r3, r9
 80099d8:	460a      	mov	r2, r1
 80099da:	eb42 0303 	adc.w	r3, r2, r3
 80099de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80099ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80099f8:	4649      	mov	r1, r9
 80099fa:	008b      	lsls	r3, r1, #2
 80099fc:	4641      	mov	r1, r8
 80099fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a02:	4641      	mov	r1, r8
 8009a04:	008a      	lsls	r2, r1, #2
 8009a06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009a0a:	f7f6 ffdb 	bl	80009c4 <__aeabi_uldivmod>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	4b0d      	ldr	r3, [pc, #52]	@ (8009a48 <UART_SetConfig+0x4e4>)
 8009a14:	fba3 1302 	umull	r1, r3, r3, r2
 8009a18:	095b      	lsrs	r3, r3, #5
 8009a1a:	2164      	movs	r1, #100	@ 0x64
 8009a1c:	fb01 f303 	mul.w	r3, r1, r3
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	3332      	adds	r3, #50	@ 0x32
 8009a26:	4a08      	ldr	r2, [pc, #32]	@ (8009a48 <UART_SetConfig+0x4e4>)
 8009a28:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	f003 020f 	and.w	r2, r3, #15
 8009a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4422      	add	r2, r4
 8009a3a:	609a      	str	r2, [r3, #8]
}
 8009a3c:	bf00      	nop
 8009a3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009a42:	46bd      	mov	sp, r7
 8009a44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a48:	51eb851f 	.word	0x51eb851f

08009a4c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	f107 001c 	add.w	r0, r7, #28
 8009a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009a62:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009a64:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009a66:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009a6a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009a6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8009a72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009a76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009a86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	431a      	orrs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	b004      	add	sp, #16
 8009aa0:	4770      	bx	lr

08009aa2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009aa2:	b480      	push	{r7}
 8009aa4:	b083      	sub	sp, #12
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2203      	movs	r2, #3
 8009aea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0303 	and.w	r3, r3, #3
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b085      	sub	sp, #20
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b34:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b3a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b40:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009b50:	f023 030f 	bic.w	r3, r3, #15
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	431a      	orrs	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	b2db      	uxtb	r3, r3
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3314      	adds	r3, #20
 8009b92:	461a      	mov	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	4413      	add	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
}  
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b085      	sub	sp, #20
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bd0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009bd6:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009bdc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0

}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b088      	sub	sp, #32
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c10:	2310      	movs	r3, #16
 8009c12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c14:	2340      	movs	r3, #64	@ 0x40
 8009c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c22:	f107 0308 	add.w	r3, r7, #8
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff ff74 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c32:	2110      	movs	r1, #16
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f9d7 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c3c:	69fb      	ldr	r3, [r7, #28]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3720      	adds	r7, #32
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b088      	sub	sp, #32
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009c54:	2311      	movs	r3, #17
 8009c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c58:	2340      	movs	r3, #64	@ 0x40
 8009c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff ff52 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c76:	2111      	movs	r1, #17
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f9b5 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c80:	69fb      	ldr	r3, [r7, #28]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3720      	adds	r7, #32
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b088      	sub	sp, #32
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009c98:	2312      	movs	r3, #18
 8009c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c9c:	2340      	movs	r3, #64	@ 0x40
 8009c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ca4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ca8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009caa:	f107 0308 	add.w	r3, r7, #8
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff ff30 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cba:	2112      	movs	r1, #18
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f993 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009cc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3720      	adds	r7, #32
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b088      	sub	sp, #32
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009cdc:	2318      	movs	r3, #24
 8009cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ce0:	2340      	movs	r3, #64	@ 0x40
 8009ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ce8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff ff0e 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cfe:	2118      	movs	r1, #24
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f971 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d08:	69fb      	ldr	r3, [r7, #28]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d20:	2319      	movs	r3, #25
 8009d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d24:	2340      	movs	r3, #64	@ 0x40
 8009d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d32:	f107 0308 	add.w	r3, r7, #8
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff feec 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d42:	2119      	movs	r1, #25
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f94f 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d4c:	69fb      	ldr	r3, [r7, #28]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3720      	adds	r7, #32
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009d64:	230c      	movs	r3, #12
 8009d66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d68:	2340      	movs	r3, #64	@ 0x40
 8009d6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d76:	f107 0308 	add.w	r3, r7, #8
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff feca 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009d82:	4a05      	ldr	r2, [pc, #20]	@ (8009d98 <SDMMC_CmdStopTransfer+0x40>)
 8009d84:	210c      	movs	r1, #12
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f92e 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	05f5e100 	.word	0x05f5e100

08009d9c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08a      	sub	sp, #40	@ 0x28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009dac:	2307      	movs	r3, #7
 8009dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009db0:	2340      	movs	r3, #64	@ 0x40
 8009db2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009db4:	2300      	movs	r3, #0
 8009db6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009db8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dbc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dbe:	f107 0310 	add.w	r3, r7, #16
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f7ff fea6 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dce:	2107      	movs	r1, #7
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f909 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009dd6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3728      	adds	r7, #40	@ 0x28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b088      	sub	sp, #32
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009dea:	2300      	movs	r3, #0
 8009dec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009df2:	2300      	movs	r3, #0
 8009df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009df6:	2300      	movs	r3, #0
 8009df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e00:	f107 0308 	add.w	r3, r7, #8
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7ff fe85 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fb23 	bl	800a458 <SDMMC_GetCmdError>
 8009e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e14:	69fb      	ldr	r3, [r7, #28]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b088      	sub	sp, #32
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009e26:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e30:	2340      	movs	r3, #64	@ 0x40
 8009e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e3e:	f107 0308 	add.w	r3, r7, #8
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff fe66 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fab6 	bl	800a3bc <SDMMC_GetCmdResp7>
 8009e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e52:	69fb      	ldr	r3, [r7, #28]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009e6a:	2337      	movs	r3, #55	@ 0x37
 8009e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e6e:	2340      	movs	r3, #64	@ 0x40
 8009e70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e72:	2300      	movs	r3, #0
 8009e74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e7c:	f107 0308 	add.w	r3, r7, #8
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fe47 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e8c:	2137      	movs	r1, #55	@ 0x37
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f8aa 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009e94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e96:	69fb      	ldr	r3, [r7, #28]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3720      	adds	r7, #32
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009eb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009eb6:	2329      	movs	r3, #41	@ 0x29
 8009eb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eba:	2340      	movs	r3, #64	@ 0x40
 8009ebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ec6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ec8:	f107 0308 	add.w	r3, r7, #8
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7ff fe21 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f9bd 	bl	800a254 <SDMMC_GetCmdResp3>
 8009eda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009edc:	69fb      	ldr	r3, [r7, #28]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3720      	adds	r7, #32
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b088      	sub	sp, #32
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009ef2:	2302      	movs	r3, #2
 8009ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009ef6:	23c0      	movs	r3, #192	@ 0xc0
 8009ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009efa:	2300      	movs	r3, #0
 8009efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f04:	f107 0308 	add.w	r3, r7, #8
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff fe03 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f957 	bl	800a1c4 <SDMMC_GetCmdResp2>
 8009f16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f18:	69fb      	ldr	r3, [r7, #28]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b088      	sub	sp, #32
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f30:	2309      	movs	r3, #9
 8009f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009f34:	23c0      	movs	r3, #192	@ 0xc0
 8009f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff fde4 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f938 	bl	800a1c4 <SDMMC_GetCmdResp2>
 8009f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f56:	69fb      	ldr	r3, [r7, #28]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3720      	adds	r7, #32
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b088      	sub	sp, #32
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f72:	2340      	movs	r3, #64	@ 0x40
 8009f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff fdc5 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	2103      	movs	r1, #3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f99d 	bl	800a2d0 <SDMMC_GetCmdResp6>
 8009f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f98:	69fb      	ldr	r3, [r7, #28]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3720      	adds	r7, #32
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b088      	sub	sp, #32
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009fb0:	230d      	movs	r3, #13
 8009fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fb4:	2340      	movs	r3, #64	@ 0x40
 8009fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fc2:	f107 0308 	add.w	r3, r7, #8
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff fda4 	bl	8009b16 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fd2:	210d      	movs	r1, #13
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f807 	bl	8009fe8 <SDMMC_GetCmdResp1>
 8009fda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009ff6:	4b70      	ldr	r3, [pc, #448]	@ (800a1b8 <SDMMC_GetCmdResp1+0x1d0>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a70      	ldr	r2, [pc, #448]	@ (800a1bc <SDMMC_GetCmdResp1+0x1d4>)
 8009ffc:	fba2 2303 	umull	r2, r3, r2, r3
 800a000:	0a5a      	lsrs	r2, r3, #9
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	fb02 f303 	mul.w	r3, r2, r3
 800a008:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	1e5a      	subs	r2, r3, #1
 800a00e:	61fa      	str	r2, [r7, #28]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d102      	bne.n	800a01a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a014:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a018:	e0c9      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a01e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0ef      	beq.n	800a00a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1ea      	bne.n	800a00a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2204      	movs	r2, #4
 800a044:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a046:	2304      	movs	r3, #4
 800a048:	e0b1      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e0a6      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	22c5      	movs	r2, #197	@ 0xc5
 800a064:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff fd7f 	bl	8009b6a <SDIO_GetCommandResponse>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	4293      	cmp	r3, r2
 800a074:	d001      	beq.n	800a07a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a076:	2301      	movs	r3, #1
 800a078:	e099      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a07a:	2100      	movs	r1, #0
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7ff fd81 	bl	8009b84 <SDIO_GetResponse>
 800a082:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4b4e      	ldr	r3, [pc, #312]	@ (800a1c0 <SDMMC_GetCmdResp1+0x1d8>)
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a08e:	2300      	movs	r3, #0
 800a090:	e08d      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	da02      	bge.n	800a09e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a098:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a09c:	e087      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0a8:	2340      	movs	r3, #64	@ 0x40
 800a0aa:	e080      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0b6:	2380      	movs	r3, #128	@ 0x80
 800a0b8:	e079      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0c8:	e071      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0d8:	e069      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0e8:	e061      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0f8:	e059      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a108:	e051      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a118:	e049      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a124:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a128:	e041      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a138:	e039      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a148:	e031      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a154:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a158:	e029      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a164:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a168:	e021      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a174:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a178:	e019      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a184:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a188:	e011      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a194:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a198:	e009      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f003 0308 	and.w	r3, r3, #8
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1a4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a1a8:	e001      	b.n	800a1ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	2000000c 	.word	0x2000000c
 800a1bc:	10624dd3 	.word	0x10624dd3
 800a1c0:	fdffe008 	.word	0xfdffe008

0800a1c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a1cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a24c <SDMMC_GetCmdResp2+0x88>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a1f      	ldr	r2, [pc, #124]	@ (800a250 <SDMMC_GetCmdResp2+0x8c>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	0a5b      	lsrs	r3, r3, #9
 800a1d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1dc:	fb02 f303 	mul.w	r3, r2, r3
 800a1e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	1e5a      	subs	r2, r3, #1
 800a1e6:	60fa      	str	r2, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d102      	bne.n	800a1f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a1f0:	e026      	b.n	800a240 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0ef      	beq.n	800a1e2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1ea      	bne.n	800a1e2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	d004      	beq.n	800a222 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2204      	movs	r2, #4
 800a21c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a21e:	2304      	movs	r3, #4
 800a220:	e00e      	b.n	800a240 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a234:	2301      	movs	r3, #1
 800a236:	e003      	b.n	800a240 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	22c5      	movs	r2, #197	@ 0xc5
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	2000000c 	.word	0x2000000c
 800a250:	10624dd3 	.word	0x10624dd3

0800a254 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a25c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c8 <SDMMC_GetCmdResp3+0x74>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a1a      	ldr	r2, [pc, #104]	@ (800a2cc <SDMMC_GetCmdResp3+0x78>)
 800a262:	fba2 2303 	umull	r2, r3, r2, r3
 800a266:	0a5b      	lsrs	r3, r3, #9
 800a268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a26c:	fb02 f303 	mul.w	r3, r2, r3
 800a270:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	1e5a      	subs	r2, r3, #1
 800a276:	60fa      	str	r2, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a27c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a280:	e01b      	b.n	800a2ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a286:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0ef      	beq.n	800a272 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1ea      	bne.n	800a272 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d004      	beq.n	800a2b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2204      	movs	r2, #4
 800a2ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ae:	2304      	movs	r3, #4
 800a2b0:	e003      	b.n	800a2ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	22c5      	movs	r2, #197	@ 0xc5
 800a2b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	2000000c 	.word	0x2000000c
 800a2cc:	10624dd3 	.word	0x10624dd3

0800a2d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2de:	4b35      	ldr	r3, [pc, #212]	@ (800a3b4 <SDMMC_GetCmdResp6+0xe4>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a35      	ldr	r2, [pc, #212]	@ (800a3b8 <SDMMC_GetCmdResp6+0xe8>)
 800a2e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e8:	0a5b      	lsrs	r3, r3, #9
 800a2ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2ee:	fb02 f303 	mul.w	r3, r2, r3
 800a2f2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	1e5a      	subs	r2, r3, #1
 800a2f8:	61fa      	str	r2, [r7, #28]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d102      	bne.n	800a304 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a302:	e052      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a308:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0ef      	beq.n	800a2f4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1ea      	bne.n	800a2f4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a322:	f003 0304 	and.w	r3, r3, #4
 800a326:	2b00      	cmp	r3, #0
 800a328:	d004      	beq.n	800a334 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2204      	movs	r2, #4
 800a32e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a330:	2304      	movs	r3, #4
 800a332:	e03a      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d004      	beq.n	800a34a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2201      	movs	r2, #1
 800a344:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a346:	2301      	movs	r3, #1
 800a348:	e02f      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7ff fc0d 	bl	8009b6a <SDIO_GetCommandResponse>
 800a350:	4603      	mov	r3, r0
 800a352:	461a      	mov	r2, r3
 800a354:	7afb      	ldrb	r3, [r7, #11]
 800a356:	4293      	cmp	r3, r2
 800a358:	d001      	beq.n	800a35e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e025      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	22c5      	movs	r2, #197	@ 0xc5
 800a362:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a364:	2100      	movs	r1, #0
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff fc0c 	bl	8009b84 <SDIO_GetResponse>
 800a36c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d106      	bne.n	800a386 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	0c1b      	lsrs	r3, r3, #16
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a382:	2300      	movs	r3, #0
 800a384:	e011      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a390:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a394:	e009      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3a4:	e001      	b.n	800a3aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2000000c 	.word	0x2000000c
 800a3b8:	10624dd3 	.word	0x10624dd3

0800a3bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3c4:	4b22      	ldr	r3, [pc, #136]	@ (800a450 <SDMMC_GetCmdResp7+0x94>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a22      	ldr	r2, [pc, #136]	@ (800a454 <SDMMC_GetCmdResp7+0x98>)
 800a3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ce:	0a5b      	lsrs	r3, r3, #9
 800a3d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3d4:	fb02 f303 	mul.w	r3, r2, r3
 800a3d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1e5a      	subs	r2, r3, #1
 800a3de:	60fa      	str	r2, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d102      	bne.n	800a3ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a3e8:	e02c      	b.n	800a444 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0ef      	beq.n	800a3da <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1ea      	bne.n	800a3da <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2204      	movs	r2, #4
 800a414:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a416:	2304      	movs	r3, #4
 800a418:	e014      	b.n	800a444 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d004      	beq.n	800a430 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e009      	b.n	800a444 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2240      	movs	r2, #64	@ 0x40
 800a440:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a442:	2300      	movs	r3, #0
  
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	2000000c 	.word	0x2000000c
 800a454:	10624dd3 	.word	0x10624dd3

0800a458 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a460:	4b11      	ldr	r3, [pc, #68]	@ (800a4a8 <SDMMC_GetCmdError+0x50>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a11      	ldr	r2, [pc, #68]	@ (800a4ac <SDMMC_GetCmdError+0x54>)
 800a466:	fba2 2303 	umull	r2, r3, r2, r3
 800a46a:	0a5b      	lsrs	r3, r3, #9
 800a46c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a470:	fb02 f303 	mul.w	r3, r2, r3
 800a474:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	1e5a      	subs	r2, r3, #1
 800a47a:	60fa      	str	r2, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a480:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a484:	e009      	b.n	800a49a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d0f1      	beq.n	800a476 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	22c5      	movs	r2, #197	@ 0xc5
 800a496:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	2000000c 	.word	0x2000000c
 800a4ac:	10624dd3 	.word	0x10624dd3

0800a4b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a4b4:	4904      	ldr	r1, [pc, #16]	@ (800a4c8 <MX_FATFS_Init+0x18>)
 800a4b6:	4805      	ldr	r0, [pc, #20]	@ (800a4cc <MX_FATFS_Init+0x1c>)
 800a4b8:	f003 f886 	bl	800d5c8 <FATFS_LinkDriver>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	4b03      	ldr	r3, [pc, #12]	@ (800a4d0 <MX_FATFS_Init+0x20>)
 800a4c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a4c4:	bf00      	nop
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	200005a4 	.word	0x200005a4
 800a4cc:	0800e828 	.word	0x0800e828
 800a4d0:	200005a0 	.word	0x200005a0

0800a4d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a4ee:	f000 f86b 	bl	800a5c8 <BSP_SD_IsDetected>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d001      	beq.n	800a4fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e005      	b.n	800a508 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a4fc:	4804      	ldr	r0, [pc, #16]	@ (800a510 <BSP_SD_Init+0x2c>)
 800a4fe:	f7fb fefd 	bl	80062fc <HAL_SD_Init>
 800a502:	4603      	mov	r3, r0
 800a504:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a506:	79fb      	ldrb	r3, [r7, #7]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20000100 	.word	0x20000100

0800a514 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af02      	add	r7, sp, #8
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	68f9      	ldr	r1, [r7, #12]
 800a530:	4806      	ldr	r0, [pc, #24]	@ (800a54c <BSP_SD_ReadBlocks+0x38>)
 800a532:	f7fb ff93 	bl	800645c <HAL_SD_ReadBlocks>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a540:	7dfb      	ldrb	r3, [r7, #23]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000100 	.word	0x20000100

0800a550 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af02      	add	r7, sp, #8
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	9300      	str	r3, [sp, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	68f9      	ldr	r1, [r7, #12]
 800a56c:	4806      	ldr	r0, [pc, #24]	@ (800a588 <BSP_SD_WriteBlocks+0x38>)
 800a56e:	f7fc f95b 	bl	8006828 <HAL_SD_WriteBlocks>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000100 	.word	0x20000100

0800a58c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a590:	4805      	ldr	r0, [pc, #20]	@ (800a5a8 <BSP_SD_GetCardState+0x1c>)
 800a592:	f7fc fca7 	bl	8006ee4 <HAL_SD_GetCardState>
 800a596:	4603      	mov	r3, r0
 800a598:	2b04      	cmp	r3, #4
 800a59a:	bf14      	ite	ne
 800a59c:	2301      	movne	r3, #1
 800a59e:	2300      	moveq	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000100 	.word	0x20000100

0800a5ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a5b4:	6879      	ldr	r1, [r7, #4]
 800a5b6:	4803      	ldr	r0, [pc, #12]	@ (800a5c4 <BSP_SD_GetCardInfo+0x18>)
 800a5b8:	f7fc fc68 	bl	8006e8c <HAL_SD_GetCardInfo>
}
 800a5bc:	bf00      	nop
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	20000100 	.word	0x20000100

0800a5c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a5d2:	79fb      	ldrb	r3, [r7, #7]
 800a5d4:	b2db      	uxtb	r3, r3
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a5ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a61c <SD_CheckStatus+0x38>)
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a5f4:	f7ff ffca 	bl	800a58c <BSP_SD_GetCardState>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d107      	bne.n	800a60e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a5fe:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <SD_CheckStatus+0x38>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <SD_CheckStatus+0x38>)
 800a60c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a60e:	4b03      	ldr	r3, [pc, #12]	@ (800a61c <SD_CheckStatus+0x38>)
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	b2db      	uxtb	r3, r3
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20000015 	.word	0x20000015

0800a620 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a62a:	4b0b      	ldr	r3, [pc, #44]	@ (800a658 <SD_initialize+0x38>)
 800a62c:	2201      	movs	r2, #1
 800a62e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a630:	f7ff ff58 	bl	800a4e4 <BSP_SD_Init>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d107      	bne.n	800a64a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff ffd1 	bl	800a5e4 <SD_CheckStatus>
 800a642:	4603      	mov	r3, r0
 800a644:	461a      	mov	r2, r3
 800a646:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <SD_initialize+0x38>)
 800a648:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a64a:	4b03      	ldr	r3, [pc, #12]	@ (800a658 <SD_initialize+0x38>)
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b2db      	uxtb	r3, r3
}
 800a650:	4618      	mov	r0, r3
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20000015 	.word	0x20000015

0800a65c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	4618      	mov	r0, r3
 800a66a:	f7ff ffbb 	bl	800a5e4 <SD_CheckStatus>
 800a66e:	4603      	mov	r3, r0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
 800a682:	603b      	str	r3, [r7, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a68c:	f04f 33ff 	mov.w	r3, #4294967295
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	68b8      	ldr	r0, [r7, #8]
 800a696:	f7ff ff3d 	bl	800a514 <BSP_SD_ReadBlocks>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d107      	bne.n	800a6b0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a6a0:	bf00      	nop
 800a6a2:	f7ff ff73 	bl	800a58c <BSP_SD_GetCardState>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1fa      	bne.n	800a6a2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b086      	sub	sp, #24
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	68b8      	ldr	r0, [r7, #8]
 800a6d8:	f7ff ff3a 	bl	800a550 <BSP_SD_WriteBlocks>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d107      	bne.n	800a6f2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a6e2:	bf00      	nop
 800a6e4:	f7ff ff52 	bl	800a58c <BSP_SD_GetCardState>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1fa      	bne.n	800a6e4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3718      	adds	r7, #24
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b08c      	sub	sp, #48	@ 0x30
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	603a      	str	r2, [r7, #0]
 800a706:	71fb      	strb	r3, [r7, #7]
 800a708:	460b      	mov	r3, r1
 800a70a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a712:	4b25      	ldr	r3, [pc, #148]	@ (800a7a8 <SD_ioctl+0xac>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <SD_ioctl+0x28>
 800a720:	2303      	movs	r3, #3
 800a722:	e03c      	b.n	800a79e <SD_ioctl+0xa2>

  switch (cmd)
 800a724:	79bb      	ldrb	r3, [r7, #6]
 800a726:	2b03      	cmp	r3, #3
 800a728:	d834      	bhi.n	800a794 <SD_ioctl+0x98>
 800a72a:	a201      	add	r2, pc, #4	@ (adr r2, 800a730 <SD_ioctl+0x34>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a749 	.word	0x0800a749
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a77b 	.word	0x0800a77b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a746:	e028      	b.n	800a79a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a748:	f107 030c 	add.w	r3, r7, #12
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff ff2d 	bl	800a5ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a75e:	e01c      	b.n	800a79a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a760:	f107 030c 	add.w	r3, r7, #12
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff ff21 	bl	800a5ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a778:	e00f      	b.n	800a79a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a77a:	f107 030c 	add.w	r3, r7, #12
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff ff14 	bl	800a5ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a786:	0a5a      	lsrs	r2, r3, #9
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a792:	e002      	b.n	800a79a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a794:	2304      	movs	r3, #4
 800a796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a79a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3730      	adds	r7, #48	@ 0x30
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000015 	.word	0x20000015

0800a7ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a7b6:	79fb      	ldrb	r3, [r7, #7]
 800a7b8:	4a08      	ldr	r2, [pc, #32]	@ (800a7dc <disk_status+0x30>)
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	79fa      	ldrb	r2, [r7, #7]
 800a7c4:	4905      	ldr	r1, [pc, #20]	@ (800a7dc <disk_status+0x30>)
 800a7c6:	440a      	add	r2, r1
 800a7c8:	7a12      	ldrb	r2, [r2, #8]
 800a7ca:	4610      	mov	r0, r2
 800a7cc:	4798      	blx	r3
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200005d0 	.word	0x200005d0

0800a7e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	4a0e      	ldr	r2, [pc, #56]	@ (800a82c <disk_initialize+0x4c>)
 800a7f2:	5cd3      	ldrb	r3, [r2, r3]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d114      	bne.n	800a822 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	4a0c      	ldr	r2, [pc, #48]	@ (800a82c <disk_initialize+0x4c>)
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	79fa      	ldrb	r2, [r7, #7]
 800a806:	4909      	ldr	r1, [pc, #36]	@ (800a82c <disk_initialize+0x4c>)
 800a808:	440a      	add	r2, r1
 800a80a:	7a12      	ldrb	r2, [r2, #8]
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a814:	7bfb      	ldrb	r3, [r7, #15]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d103      	bne.n	800a822 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	4a03      	ldr	r2, [pc, #12]	@ (800a82c <disk_initialize+0x4c>)
 800a81e:	2101      	movs	r1, #1
 800a820:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	200005d0 	.word	0x200005d0

0800a830 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	607a      	str	r2, [r7, #4]
 800a83a:	603b      	str	r3, [r7, #0]
 800a83c:	4603      	mov	r3, r0
 800a83e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a840:	7bfb      	ldrb	r3, [r7, #15]
 800a842:	4a0a      	ldr	r2, [pc, #40]	@ (800a86c <disk_read+0x3c>)
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	689c      	ldr	r4, [r3, #8]
 800a84c:	7bfb      	ldrb	r3, [r7, #15]
 800a84e:	4a07      	ldr	r2, [pc, #28]	@ (800a86c <disk_read+0x3c>)
 800a850:	4413      	add	r3, r2
 800a852:	7a18      	ldrb	r0, [r3, #8]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	47a0      	blx	r4
 800a85c:	4603      	mov	r3, r0
 800a85e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
}
 800a862:	4618      	mov	r0, r3
 800a864:	371c      	adds	r7, #28
 800a866:	46bd      	mov	sp, r7
 800a868:	bd90      	pop	{r4, r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200005d0 	.word	0x200005d0

0800a870 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a870:	b590      	push	{r4, r7, lr}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	60b9      	str	r1, [r7, #8]
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	4a0a      	ldr	r2, [pc, #40]	@ (800a8ac <disk_write+0x3c>)
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	68dc      	ldr	r4, [r3, #12]
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4a07      	ldr	r2, [pc, #28]	@ (800a8ac <disk_write+0x3c>)
 800a890:	4413      	add	r3, r2
 800a892:	7a18      	ldrb	r0, [r3, #8]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	47a0      	blx	r4
 800a89c:	4603      	mov	r3, r0
 800a89e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd90      	pop	{r4, r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	200005d0 	.word	0x200005d0

0800a8b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	603a      	str	r2, [r7, #0]
 800a8ba:	71fb      	strb	r3, [r7, #7]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	4a09      	ldr	r2, [pc, #36]	@ (800a8e8 <disk_ioctl+0x38>)
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	79fa      	ldrb	r2, [r7, #7]
 800a8ce:	4906      	ldr	r1, [pc, #24]	@ (800a8e8 <disk_ioctl+0x38>)
 800a8d0:	440a      	add	r2, r1
 800a8d2:	7a10      	ldrb	r0, [r2, #8]
 800a8d4:	79b9      	ldrb	r1, [r7, #6]
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4798      	blx	r3
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	200005d0 	.word	0x200005d0

0800a8ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a8fc:	89fb      	ldrh	r3, [r7, #14]
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	b21a      	sxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	b21b      	sxth	r3, r3
 800a908:	4313      	orrs	r3, r2
 800a90a:	b21b      	sxth	r3, r3
 800a90c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a90e:	89fb      	ldrh	r3, [r7, #14]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3303      	adds	r3, #3
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	3202      	adds	r2, #2
 800a934:	7812      	ldrb	r2, [r2, #0]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	021b      	lsls	r3, r3, #8
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	3201      	adds	r2, #1
 800a942:	7812      	ldrb	r2, [r2, #0]
 800a944:	4313      	orrs	r3, r2
 800a946:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	021b      	lsls	r3, r3, #8
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	60fb      	str	r3, [r7, #12]
	return rv;
 800a954:	68fb      	ldr	r3, [r7, #12]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	460b      	mov	r3, r1
 800a96c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	887a      	ldrh	r2, [r7, #2]
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	0a1b      	lsrs	r3, r3, #8
 800a97e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	607a      	str	r2, [r7, #4]
 800a986:	887a      	ldrh	r2, [r7, #2]
 800a988:	b2d2      	uxtb	r2, r2
 800a98a:	701a      	strb	r2, [r3, #0]
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	b2d2      	uxtb	r2, r2
 800a9ac:	701a      	strb	r2, [r3, #0]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	0a1b      	lsrs	r3, r3, #8
 800a9b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	607a      	str	r2, [r7, #4]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	b2d2      	uxtb	r2, r2
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	0a1b      	lsrs	r3, r3, #8
 800a9c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	b2d2      	uxtb	r2, r2
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	0a1b      	lsrs	r3, r3, #8
 800a9d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	607a      	str	r2, [r7, #4]
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	b2d2      	uxtb	r2, r2
 800a9e2:	701a      	strb	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00d      	beq.n	800aa26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	1c53      	adds	r3, r2, #1
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	1c59      	adds	r1, r3, #1
 800aa14:	6179      	str	r1, [r7, #20]
 800aa16:	7812      	ldrb	r2, [r2, #0]
 800aa18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1f1      	bne.n	800aa0a <mem_cpy+0x1a>
	}
}
 800aa26:	bf00      	nop
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800aa32:	b480      	push	{r7}
 800aa34:	b087      	sub	sp, #28
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60f8      	str	r0, [r7, #12]
 800aa3a:	60b9      	str	r1, [r7, #8]
 800aa3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	617a      	str	r2, [r7, #20]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	607b      	str	r3, [r7, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f3      	bne.n	800aa42 <mem_set+0x10>
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	371c      	adds	r7, #28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800aa68:	b480      	push	{r7}
 800aa6a:	b089      	sub	sp, #36	@ 0x24
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	61fb      	str	r3, [r7, #28]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	61fa      	str	r2, [r7, #28]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	61ba      	str	r2, [r7, #24]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	1acb      	subs	r3, r1, r3
 800aa94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	607b      	str	r3, [r7, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d002      	beq.n	800aaa8 <mem_cmp+0x40>
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0eb      	beq.n	800aa80 <mem_cmp+0x18>

	return r;
 800aaa8:	697b      	ldr	r3, [r7, #20]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3724      	adds	r7, #36	@ 0x24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800aac0:	e002      	b.n	800aac8 <chk_chr+0x12>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	3301      	adds	r3, #1
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <chk_chr+0x26>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	4293      	cmp	r3, r2
 800aada:	d1f2      	bne.n	800aac2 <chk_chr+0xc>
	return *str;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	781b      	ldrb	r3, [r3, #0]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60bb      	str	r3, [r7, #8]
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	60fb      	str	r3, [r7, #12]
 800aafe:	e029      	b.n	800ab54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ab00:	4a27      	ldr	r2, [pc, #156]	@ (800aba0 <chk_lock+0xb4>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4413      	add	r3, r2
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01d      	beq.n	800ab4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab0e:	4a24      	ldr	r2, [pc, #144]	@ (800aba0 <chk_lock+0xb4>)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	4413      	add	r3, r2
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d116      	bne.n	800ab4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ab20:	4a1f      	ldr	r2, [pc, #124]	@ (800aba0 <chk_lock+0xb4>)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	011b      	lsls	r3, r3, #4
 800ab26:	4413      	add	r3, r2
 800ab28:	3304      	adds	r3, #4
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d10c      	bne.n	800ab4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab34:	4a1a      	ldr	r2, [pc, #104]	@ (800aba0 <chk_lock+0xb4>)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	011b      	lsls	r3, r3, #4
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d102      	bne.n	800ab4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ab48:	e007      	b.n	800ab5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d9d2      	bls.n	800ab00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d109      	bne.n	800ab74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <chk_lock+0x80>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d101      	bne.n	800ab70 <chk_lock+0x84>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	e010      	b.n	800ab92 <chk_lock+0xa6>
 800ab70:	2312      	movs	r3, #18
 800ab72:	e00e      	b.n	800ab92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d108      	bne.n	800ab8c <chk_lock+0xa0>
 800ab7a:	4a09      	ldr	r2, [pc, #36]	@ (800aba0 <chk_lock+0xb4>)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	011b      	lsls	r3, r3, #4
 800ab80:	4413      	add	r3, r2
 800ab82:	330c      	adds	r3, #12
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab8a:	d101      	bne.n	800ab90 <chk_lock+0xa4>
 800ab8c:	2310      	movs	r3, #16
 800ab8e:	e000      	b.n	800ab92 <chk_lock+0xa6>
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	200005b0 	.word	0x200005b0

0800aba4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800abaa:	2300      	movs	r3, #0
 800abac:	607b      	str	r3, [r7, #4]
 800abae:	e002      	b.n	800abb6 <enq_lock+0x12>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	3301      	adds	r3, #1
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d806      	bhi.n	800abca <enq_lock+0x26>
 800abbc:	4a09      	ldr	r2, [pc, #36]	@ (800abe4 <enq_lock+0x40>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	4413      	add	r3, r2
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f2      	bne.n	800abb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b02      	cmp	r3, #2
 800abce:	bf14      	ite	ne
 800abd0:	2301      	movne	r3, #1
 800abd2:	2300      	moveq	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	200005b0 	.word	0x200005b0

0800abe8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	e01f      	b.n	800ac38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800abf8:	4a41      	ldr	r2, [pc, #260]	@ (800ad00 <inc_lock+0x118>)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	011b      	lsls	r3, r3, #4
 800abfe:	4413      	add	r3, r2
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d113      	bne.n	800ac32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ac0a:	4a3d      	ldr	r2, [pc, #244]	@ (800ad00 <inc_lock+0x118>)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	011b      	lsls	r3, r3, #4
 800ac10:	4413      	add	r3, r2
 800ac12:	3304      	adds	r3, #4
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d109      	bne.n	800ac32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ac1e:	4a38      	ldr	r2, [pc, #224]	@ (800ad00 <inc_lock+0x118>)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	011b      	lsls	r3, r3, #4
 800ac24:	4413      	add	r3, r2
 800ac26:	3308      	adds	r3, #8
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d006      	beq.n	800ac40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3301      	adds	r3, #1
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d9dc      	bls.n	800abf8 <inc_lock+0x10>
 800ac3e:	e000      	b.n	800ac42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ac40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d132      	bne.n	800acae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	e002      	b.n	800ac54 <inc_lock+0x6c>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3301      	adds	r3, #1
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d806      	bhi.n	800ac68 <inc_lock+0x80>
 800ac5a:	4a29      	ldr	r2, [pc, #164]	@ (800ad00 <inc_lock+0x118>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	4413      	add	r3, r2
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1f2      	bne.n	800ac4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d101      	bne.n	800ac72 <inc_lock+0x8a>
 800ac6e:	2300      	movs	r3, #0
 800ac70:	e040      	b.n	800acf4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	4922      	ldr	r1, [pc, #136]	@ (800ad00 <inc_lock+0x118>)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	440b      	add	r3, r1
 800ac7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	491e      	ldr	r1, [pc, #120]	@ (800ad00 <inc_lock+0x118>)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	011b      	lsls	r3, r3, #4
 800ac8a:	440b      	add	r3, r1
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	695a      	ldr	r2, [r3, #20]
 800ac94:	491a      	ldr	r1, [pc, #104]	@ (800ad00 <inc_lock+0x118>)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	011b      	lsls	r3, r3, #4
 800ac9a:	440b      	add	r3, r1
 800ac9c:	3308      	adds	r3, #8
 800ac9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aca0:	4a17      	ldr	r2, [pc, #92]	@ (800ad00 <inc_lock+0x118>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	4413      	add	r3, r2
 800aca8:	330c      	adds	r3, #12
 800acaa:	2200      	movs	r2, #0
 800acac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d009      	beq.n	800acc8 <inc_lock+0xe0>
 800acb4:	4a12      	ldr	r2, [pc, #72]	@ (800ad00 <inc_lock+0x118>)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	011b      	lsls	r3, r3, #4
 800acba:	4413      	add	r3, r2
 800acbc:	330c      	adds	r3, #12
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <inc_lock+0xe0>
 800acc4:	2300      	movs	r3, #0
 800acc6:	e015      	b.n	800acf4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d108      	bne.n	800ace0 <inc_lock+0xf8>
 800acce:	4a0c      	ldr	r2, [pc, #48]	@ (800ad00 <inc_lock+0x118>)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	011b      	lsls	r3, r3, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	330c      	adds	r3, #12
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	3301      	adds	r3, #1
 800acdc:	b29a      	uxth	r2, r3
 800acde:	e001      	b.n	800ace4 <inc_lock+0xfc>
 800ace0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ace4:	4906      	ldr	r1, [pc, #24]	@ (800ad00 <inc_lock+0x118>)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	440b      	add	r3, r1
 800acec:	330c      	adds	r3, #12
 800acee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	3301      	adds	r3, #1
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr
 800ad00:	200005b0 	.word	0x200005b0

0800ad04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	607b      	str	r3, [r7, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d825      	bhi.n	800ad64 <dec_lock+0x60>
		n = Files[i].ctr;
 800ad18:	4a17      	ldr	r2, [pc, #92]	@ (800ad78 <dec_lock+0x74>)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	011b      	lsls	r3, r3, #4
 800ad1e:	4413      	add	r3, r2
 800ad20:	330c      	adds	r3, #12
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ad26:	89fb      	ldrh	r3, [r7, #14]
 800ad28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad2c:	d101      	bne.n	800ad32 <dec_lock+0x2e>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ad32:	89fb      	ldrh	r3, [r7, #14]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <dec_lock+0x3a>
 800ad38:	89fb      	ldrh	r3, [r7, #14]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ad3e:	4a0e      	ldr	r2, [pc, #56]	@ (800ad78 <dec_lock+0x74>)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	011b      	lsls	r3, r3, #4
 800ad44:	4413      	add	r3, r2
 800ad46:	330c      	adds	r3, #12
 800ad48:	89fa      	ldrh	r2, [r7, #14]
 800ad4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ad4c:	89fb      	ldrh	r3, [r7, #14]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d105      	bne.n	800ad5e <dec_lock+0x5a>
 800ad52:	4a09      	ldr	r2, [pc, #36]	@ (800ad78 <dec_lock+0x74>)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	011b      	lsls	r3, r3, #4
 800ad58:	4413      	add	r3, r2
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	737b      	strb	r3, [r7, #13]
 800ad62:	e001      	b.n	800ad68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ad64:	2302      	movs	r3, #2
 800ad66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ad68:	7b7b      	ldrb	r3, [r7, #13]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	200005b0 	.word	0x200005b0

0800ad7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ad84:	2300      	movs	r3, #0
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	e010      	b.n	800adac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ad8a:	4a0d      	ldr	r2, [pc, #52]	@ (800adc0 <clear_lock+0x44>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	4413      	add	r3, r2
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d105      	bne.n	800ada6 <clear_lock+0x2a>
 800ad9a:	4a09      	ldr	r2, [pc, #36]	@ (800adc0 <clear_lock+0x44>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	4413      	add	r3, r2
 800ada2:	2200      	movs	r2, #0
 800ada4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d9eb      	bls.n	800ad8a <clear_lock+0xe>
	}
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	200005b0 	.word	0x200005b0

0800adc4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	78db      	ldrb	r3, [r3, #3]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d034      	beq.n	800ae42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800addc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7858      	ldrb	r0, [r3, #1]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ade8:	2301      	movs	r3, #1
 800adea:	697a      	ldr	r2, [r7, #20]
 800adec:	f7ff fd40 	bl	800a870 <disk_write>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <sync_window+0x38>
			res = FR_DISK_ERR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	73fb      	strb	r3, [r7, #15]
 800adfa:	e022      	b.n	800ae42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	1ad2      	subs	r2, r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d217      	bcs.n	800ae42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	789b      	ldrb	r3, [r3, #2]
 800ae16:	613b      	str	r3, [r7, #16]
 800ae18:	e010      	b.n	800ae3c <sync_window+0x78>
					wsect += fs->fsize;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	4413      	add	r3, r2
 800ae22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	7858      	ldrb	r0, [r3, #1]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae2e:	2301      	movs	r3, #1
 800ae30:	697a      	ldr	r2, [r7, #20]
 800ae32:	f7ff fd1d 	bl	800a870 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	613b      	str	r3, [r7, #16]
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d8eb      	bhi.n	800ae1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d01b      	beq.n	800ae9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ffad 	bl	800adc4 <sync_window>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d113      	bne.n	800ae9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	7858      	ldrb	r0, [r3, #1]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ae7e:	2301      	movs	r3, #1
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	f7ff fcd5 	bl	800a830 <disk_read>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}
	...

0800aea8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff ff87 	bl	800adc4 <sync_window>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d158      	bne.n	800af72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	2b03      	cmp	r3, #3
 800aec6:	d148      	bne.n	800af5a <sync_fs+0xb2>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	791b      	ldrb	r3, [r3, #4]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d144      	bne.n	800af5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	3330      	adds	r3, #48	@ 0x30
 800aed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aed8:	2100      	movs	r1, #0
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fda9 	bl	800aa32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3330      	adds	r3, #48	@ 0x30
 800aee4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aee8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7ff fd38 	bl	800a962 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3330      	adds	r3, #48	@ 0x30
 800aef6:	4921      	ldr	r1, [pc, #132]	@ (800af7c <sync_fs+0xd4>)
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff fd4d 	bl	800a998 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3330      	adds	r3, #48	@ 0x30
 800af02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800af06:	491e      	ldr	r1, [pc, #120]	@ (800af80 <sync_fs+0xd8>)
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fd45 	bl	800a998 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	3330      	adds	r3, #48	@ 0x30
 800af12:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7ff fd3b 	bl	800a998 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3330      	adds	r3, #48	@ 0x30
 800af26:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f7ff fd31 	bl	800a998 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69db      	ldr	r3, [r3, #28]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	7858      	ldrb	r0, [r3, #1]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af4e:	2301      	movs	r3, #1
 800af50:	f7ff fc8e 	bl	800a870 <disk_write>
			fs->fsi_flag = 0;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	2200      	movs	r2, #0
 800af60:	2100      	movs	r1, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff fca4 	bl	800a8b0 <disk_ioctl>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <sync_fs+0xca>
 800af6e:	2301      	movs	r3, #1
 800af70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800af72:	7bfb      	ldrb	r3, [r7, #15]
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	41615252 	.word	0x41615252
 800af80:	61417272 	.word	0x61417272

0800af84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	3b02      	subs	r3, #2
 800af92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	695b      	ldr	r3, [r3, #20]
 800af98:	3b02      	subs	r3, #2
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d301      	bcc.n	800afa4 <clust2sect+0x20>
 800afa0:	2300      	movs	r3, #0
 800afa2:	e008      	b.n	800afb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	895b      	ldrh	r3, [r3, #10]
 800afa8:	461a      	mov	r2, r3
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	fb03 f202 	mul.w	r2, r3, r2
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb4:	4413      	add	r3, r2
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d904      	bls.n	800afe2 <get_fat+0x20>
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d302      	bcc.n	800afe8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800afe2:	2301      	movs	r3, #1
 800afe4:	617b      	str	r3, [r7, #20]
 800afe6:	e08e      	b.n	800b106 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800afe8:	f04f 33ff 	mov.w	r3, #4294967295
 800afec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d061      	beq.n	800b0ba <get_fat+0xf8>
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	dc7b      	bgt.n	800b0f2 <get_fat+0x130>
 800affa:	2b01      	cmp	r3, #1
 800affc:	d002      	beq.n	800b004 <get_fat+0x42>
 800affe:	2b02      	cmp	r3, #2
 800b000:	d041      	beq.n	800b086 <get_fat+0xc4>
 800b002:	e076      	b.n	800b0f2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	085b      	lsrs	r3, r3, #1
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4413      	add	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	6a1a      	ldr	r2, [r3, #32]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	0a5b      	lsrs	r3, r3, #9
 800b01a:	4413      	add	r3, r2
 800b01c:	4619      	mov	r1, r3
 800b01e:	6938      	ldr	r0, [r7, #16]
 800b020:	f7ff ff14 	bl	800ae4c <move_window>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d166      	bne.n	800b0f8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	60fa      	str	r2, [r7, #12]
 800b030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	4413      	add	r3, r2
 800b038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b03c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	0a5b      	lsrs	r3, r3, #9
 800b046:	4413      	add	r3, r2
 800b048:	4619      	mov	r1, r3
 800b04a:	6938      	ldr	r0, [r7, #16]
 800b04c:	f7ff fefe 	bl	800ae4c <move_window>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d152      	bne.n	800b0fc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	4413      	add	r3, r2
 800b060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b064:	021b      	lsls	r3, r3, #8
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	4313      	orrs	r3, r2
 800b06a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d002      	beq.n	800b07c <get_fat+0xba>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	091b      	lsrs	r3, r3, #4
 800b07a:	e002      	b.n	800b082 <get_fat+0xc0>
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b082:	617b      	str	r3, [r7, #20]
			break;
 800b084:	e03f      	b.n	800b106 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	6a1a      	ldr	r2, [r3, #32]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	0a1b      	lsrs	r3, r3, #8
 800b08e:	4413      	add	r3, r2
 800b090:	4619      	mov	r1, r3
 800b092:	6938      	ldr	r0, [r7, #16]
 800b094:	f7ff feda 	bl	800ae4c <move_window>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d130      	bne.n	800b100 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b0ac:	4413      	add	r3, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7ff fc1c 	bl	800a8ec <ld_word>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	617b      	str	r3, [r7, #20]
			break;
 800b0b8:	e025      	b.n	800b106 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	6a1a      	ldr	r2, [r3, #32]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	09db      	lsrs	r3, r3, #7
 800b0c2:	4413      	add	r3, r2
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6938      	ldr	r0, [r7, #16]
 800b0c8:	f7ff fec0 	bl	800ae4c <move_window>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d118      	bne.n	800b104 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b0e0:	4413      	add	r3, r2
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fc1a 	bl	800a91c <ld_dword>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b0ee:	617b      	str	r3, [r7, #20]
			break;
 800b0f0:	e009      	b.n	800b106 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	617b      	str	r3, [r7, #20]
 800b0f6:	e006      	b.n	800b106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0f8:	bf00      	nop
 800b0fa:	e004      	b.n	800b106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b0fc:	bf00      	nop
 800b0fe:	e002      	b.n	800b106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b100:	bf00      	nop
 800b102:	e000      	b.n	800b106 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b104:	bf00      	nop
		}
	}

	return val;
 800b106:	697b      	ldr	r3, [r7, #20]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b089      	sub	sp, #36	@ 0x24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b11c:	2302      	movs	r3, #2
 800b11e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b01      	cmp	r3, #1
 800b124:	f240 80d9 	bls.w	800b2da <put_fat+0x1ca>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	429a      	cmp	r2, r3
 800b130:	f080 80d3 	bcs.w	800b2da <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	f000 8096 	beq.w	800b26a <put_fat+0x15a>
 800b13e:	2b03      	cmp	r3, #3
 800b140:	f300 80cb 	bgt.w	800b2da <put_fat+0x1ca>
 800b144:	2b01      	cmp	r3, #1
 800b146:	d002      	beq.n	800b14e <put_fat+0x3e>
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d06e      	beq.n	800b22a <put_fat+0x11a>
 800b14c:	e0c5      	b.n	800b2da <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	085b      	lsrs	r3, r3, #1
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	4413      	add	r3, r2
 800b15a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a1a      	ldr	r2, [r3, #32]
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	0a5b      	lsrs	r3, r3, #9
 800b164:	4413      	add	r3, r2
 800b166:	4619      	mov	r1, r3
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f7ff fe6f 	bl	800ae4c <move_window>
 800b16e:	4603      	mov	r3, r0
 800b170:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b172:	7ffb      	ldrb	r3, [r7, #31]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f040 80a9 	bne.w	800b2cc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	1c59      	adds	r1, r3, #1
 800b184:	61b9      	str	r1, [r7, #24]
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	4413      	add	r3, r2
 800b18c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00d      	beq.n	800b1b4 <put_fat+0xa4>
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	b25b      	sxtb	r3, r3
 800b19e:	f003 030f 	and.w	r3, r3, #15
 800b1a2:	b25a      	sxtb	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	011b      	lsls	r3, r3, #4
 800b1aa:	b25b      	sxtb	r3, r3
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	b25b      	sxtb	r3, r3
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	e001      	b.n	800b1b8 <put_fat+0xa8>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	697a      	ldr	r2, [r7, #20]
 800b1ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6a1a      	ldr	r2, [r3, #32]
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	0a5b      	lsrs	r3, r3, #9
 800b1ca:	4413      	add	r3, r2
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	68f8      	ldr	r0, [r7, #12]
 800b1d0:	f7ff fe3c 	bl	800ae4c <move_window>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b1d8:	7ffb      	ldrb	r3, [r7, #31]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d178      	bne.n	800b2d0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ea:	4413      	add	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f003 0301 	and.w	r3, r3, #1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <put_fat+0xf0>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	091b      	lsrs	r3, r3, #4
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	e00e      	b.n	800b21e <put_fat+0x10e>
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	b25b      	sxtb	r3, r3
 800b206:	f023 030f 	bic.w	r3, r3, #15
 800b20a:	b25a      	sxtb	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	b25b      	sxtb	r3, r3
 800b212:	f003 030f 	and.w	r3, r3, #15
 800b216:	b25b      	sxtb	r3, r3
 800b218:	4313      	orrs	r3, r2
 800b21a:	b25b      	sxtb	r3, r3
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2201      	movs	r2, #1
 800b226:	70da      	strb	r2, [r3, #3]
			break;
 800b228:	e057      	b.n	800b2da <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6a1a      	ldr	r2, [r3, #32]
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	0a1b      	lsrs	r3, r3, #8
 800b232:	4413      	add	r3, r2
 800b234:	4619      	mov	r1, r3
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7ff fe08 	bl	800ae4c <move_window>
 800b23c:	4603      	mov	r3, r0
 800b23e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b240:	7ffb      	ldrb	r3, [r7, #31]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d146      	bne.n	800b2d4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	005b      	lsls	r3, r3, #1
 800b250:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b254:	4413      	add	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	b292      	uxth	r2, r2
 800b25a:	4611      	mov	r1, r2
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7ff fb80 	bl	800a962 <st_word>
			fs->wflag = 1;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2201      	movs	r2, #1
 800b266:	70da      	strb	r2, [r3, #3]
			break;
 800b268:	e037      	b.n	800b2da <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a1a      	ldr	r2, [r3, #32]
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	09db      	lsrs	r3, r3, #7
 800b272:	4413      	add	r3, r2
 800b274:	4619      	mov	r1, r3
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	f7ff fde8 	bl	800ae4c <move_window>
 800b27c:	4603      	mov	r3, r0
 800b27e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b280:	7ffb      	ldrb	r3, [r7, #31]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d128      	bne.n	800b2d8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b29a:	4413      	add	r3, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fb3d 	bl	800a91c <ld_dword>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b2a8:	4323      	orrs	r3, r4
 800b2aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b2ba:	4413      	add	r3, r2
 800b2bc:	6879      	ldr	r1, [r7, #4]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fb6a 	bl	800a998 <st_dword>
			fs->wflag = 1;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	70da      	strb	r2, [r3, #3]
			break;
 800b2ca:	e006      	b.n	800b2da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2cc:	bf00      	nop
 800b2ce:	e004      	b.n	800b2da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2d0:	bf00      	nop
 800b2d2:	e002      	b.n	800b2da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2d4:	bf00      	nop
 800b2d6:	e000      	b.n	800b2da <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b2d8:	bf00      	nop
		}
	}
	return res;
 800b2da:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3724      	adds	r7, #36	@ 0x24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd90      	pop	{r4, r7, pc}

0800b2e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d904      	bls.n	800b30a <remove_chain+0x26>
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	695b      	ldr	r3, [r3, #20]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	429a      	cmp	r2, r3
 800b308:	d301      	bcc.n	800b30e <remove_chain+0x2a>
 800b30a:	2302      	movs	r3, #2
 800b30c:	e04b      	b.n	800b3a6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00c      	beq.n	800b32e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b314:	f04f 32ff 	mov.w	r2, #4294967295
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	69b8      	ldr	r0, [r7, #24]
 800b31c:	f7ff fef8 	bl	800b110 <put_fat>
 800b320:	4603      	mov	r3, r0
 800b322:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b324:	7ffb      	ldrb	r3, [r7, #31]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <remove_chain+0x4a>
 800b32a:	7ffb      	ldrb	r3, [r7, #31]
 800b32c:	e03b      	b.n	800b3a6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7ff fe46 	bl	800afc2 <get_fat>
 800b336:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d031      	beq.n	800b3a2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d101      	bne.n	800b348 <remove_chain+0x64>
 800b344:	2302      	movs	r3, #2
 800b346:	e02e      	b.n	800b3a6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34e:	d101      	bne.n	800b354 <remove_chain+0x70>
 800b350:	2301      	movs	r3, #1
 800b352:	e028      	b.n	800b3a6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b354:	2200      	movs	r2, #0
 800b356:	68b9      	ldr	r1, [r7, #8]
 800b358:	69b8      	ldr	r0, [r7, #24]
 800b35a:	f7ff fed9 	bl	800b110 <put_fat>
 800b35e:	4603      	mov	r3, r0
 800b360:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b362:	7ffb      	ldrb	r3, [r7, #31]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <remove_chain+0x88>
 800b368:	7ffb      	ldrb	r3, [r7, #31]
 800b36a:	e01c      	b.n	800b3a6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	691a      	ldr	r2, [r3, #16]
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	3b02      	subs	r3, #2
 800b376:	429a      	cmp	r2, r3
 800b378:	d20b      	bcs.n	800b392 <remove_chain+0xae>
			fs->free_clst++;
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	691b      	ldr	r3, [r3, #16]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	791b      	ldrb	r3, [r3, #4]
 800b388:	f043 0301 	orr.w	r3, r3, #1
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d3c6      	bcc.n	800b32e <remove_chain+0x4a>
 800b3a0:	e000      	b.n	800b3a4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b3a2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3720      	adds	r7, #32
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b088      	sub	sp, #32
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10d      	bne.n	800b3e0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d004      	beq.n	800b3da <create_chain+0x2c>
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	695b      	ldr	r3, [r3, #20]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d31b      	bcc.n	800b412 <create_chain+0x64>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	61bb      	str	r3, [r7, #24]
 800b3de:	e018      	b.n	800b412 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fded 	bl	800afc2 <get_fat>
 800b3e8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d801      	bhi.n	800b3f4 <create_chain+0x46>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e070      	b.n	800b4d6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d101      	bne.n	800b400 <create_chain+0x52>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	e06a      	b.n	800b4d6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	429a      	cmp	r2, r3
 800b408:	d201      	bcs.n	800b40e <create_chain+0x60>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	e063      	b.n	800b4d6 <create_chain+0x128>
		scl = clst;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	3301      	adds	r3, #1
 800b41a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	429a      	cmp	r2, r3
 800b424:	d307      	bcc.n	800b436 <create_chain+0x88>
				ncl = 2;
 800b426:	2302      	movs	r3, #2
 800b428:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b42a:	69fa      	ldr	r2, [r7, #28]
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d901      	bls.n	800b436 <create_chain+0x88>
 800b432:	2300      	movs	r3, #0
 800b434:	e04f      	b.n	800b4d6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b436:	69f9      	ldr	r1, [r7, #28]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff fdc2 	bl	800afc2 <get_fat>
 800b43e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00e      	beq.n	800b464 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d003      	beq.n	800b454 <create_chain+0xa6>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b452:	d101      	bne.n	800b458 <create_chain+0xaa>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	e03e      	b.n	800b4d6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d1da      	bne.n	800b416 <create_chain+0x68>
 800b460:	2300      	movs	r3, #0
 800b462:	e038      	b.n	800b4d6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b464:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b466:	f04f 32ff 	mov.w	r2, #4294967295
 800b46a:	69f9      	ldr	r1, [r7, #28]
 800b46c:	6938      	ldr	r0, [r7, #16]
 800b46e:	f7ff fe4f 	bl	800b110 <put_fat>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d109      	bne.n	800b490 <create_chain+0xe2>
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d006      	beq.n	800b490 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6938      	ldr	r0, [r7, #16]
 800b488:	f7ff fe42 	bl	800b110 <put_fat>
 800b48c:	4603      	mov	r3, r0
 800b48e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d116      	bne.n	800b4c4 <create_chain+0x116>
		fs->last_clst = ncl;
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	691a      	ldr	r2, [r3, #16]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	3b02      	subs	r3, #2
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d804      	bhi.n	800b4b4 <create_chain+0x106>
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	1e5a      	subs	r2, r3, #1
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	791b      	ldrb	r3, [r3, #4]
 800b4b8:	f043 0301 	orr.w	r3, r3, #1
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	711a      	strb	r2, [r3, #4]
 800b4c2:	e007      	b.n	800b4d4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b4c4:	7dfb      	ldrb	r3, [r7, #23]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d102      	bne.n	800b4d0 <create_chain+0x122>
 800b4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ce:	e000      	b.n	800b4d2 <create_chain+0x124>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b4d4:	69fb      	ldr	r3, [r7, #28]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b087      	sub	sp, #28
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	0a5b      	lsrs	r3, r3, #9
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	8952      	ldrh	r2, [r2, #10]
 800b4fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800b502:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	1d1a      	adds	r2, r3, #4
 800b508:	613a      	str	r2, [r7, #16]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <clmt_clust+0x3a>
 800b514:	2300      	movs	r3, #0
 800b516:	e010      	b.n	800b53a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d307      	bcc.n	800b530 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	617b      	str	r3, [r7, #20]
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	3304      	adds	r3, #4
 800b52c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b52e:	e7e9      	b.n	800b504 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b530:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	4413      	add	r3, r2
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	371c      	adds	r7, #28
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b086      	sub	sp, #24
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b55c:	d204      	bcs.n	800b568 <dir_sdi+0x22>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	f003 031f 	and.w	r3, r3, #31
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <dir_sdi+0x26>
		return FR_INT_ERR;
 800b568:	2302      	movs	r3, #2
 800b56a:	e063      	b.n	800b634 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <dir_sdi+0x46>
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b02      	cmp	r3, #2
 800b584:	d902      	bls.n	800b58c <dir_sdi+0x46>
		clst = fs->dirbase;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10c      	bne.n	800b5ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	095b      	lsrs	r3, r3, #5
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	8912      	ldrh	r2, [r2, #8]
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d301      	bcc.n	800b5a2 <dir_sdi+0x5c>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	e048      	b.n	800b634 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	61da      	str	r2, [r3, #28]
 800b5aa:	e029      	b.n	800b600 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	895b      	ldrh	r3, [r3, #10]
 800b5b0:	025b      	lsls	r3, r3, #9
 800b5b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5b4:	e019      	b.n	800b5ea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6979      	ldr	r1, [r7, #20]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff fd01 	bl	800afc2 <get_fat>
 800b5c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c8:	d101      	bne.n	800b5ce <dir_sdi+0x88>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e032      	b.n	800b634 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d904      	bls.n	800b5de <dir_sdi+0x98>
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d301      	bcc.n	800b5e2 <dir_sdi+0x9c>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e028      	b.n	800b634 <dir_sdi+0xee>
			ofs -= csz;
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d2e1      	bcs.n	800b5b6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b5f2:	6979      	ldr	r1, [r7, #20]
 800b5f4:	6938      	ldr	r0, [r7, #16]
 800b5f6:	f7ff fcc5 	bl	800af84 <clust2sect>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <dir_sdi+0xcc>
 800b60e:	2302      	movs	r3, #2
 800b610:	e010      	b.n	800b634 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	69da      	ldr	r2, [r3, #28]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	0a5b      	lsrs	r3, r3, #9
 800b61a:	441a      	add	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b62c:	441a      	add	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	3320      	adds	r3, #32
 800b652:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <dir_next+0x28>
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b662:	d301      	bcc.n	800b668 <dir_next+0x2c>
 800b664:	2304      	movs	r3, #4
 800b666:	e0aa      	b.n	800b7be <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f040 8098 	bne.w	800b7a4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	69db      	ldr	r3, [r3, #28]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	699b      	ldr	r3, [r3, #24]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10b      	bne.n	800b69e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	095b      	lsrs	r3, r3, #5
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	8912      	ldrh	r2, [r2, #8]
 800b68e:	4293      	cmp	r3, r2
 800b690:	f0c0 8088 	bcc.w	800b7a4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	61da      	str	r2, [r3, #28]
 800b69a:	2304      	movs	r3, #4
 800b69c:	e08f      	b.n	800b7be <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	0a5b      	lsrs	r3, r3, #9
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	8952      	ldrh	r2, [r2, #10]
 800b6a6:	3a01      	subs	r2, #1
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d17a      	bne.n	800b7a4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	f7ff fc83 	bl	800afc2 <get_fat>
 800b6bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d801      	bhi.n	800b6c8 <dir_next+0x8c>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e07a      	b.n	800b7be <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ce:	d101      	bne.n	800b6d4 <dir_next+0x98>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e074      	b.n	800b7be <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d358      	bcc.n	800b790 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	61da      	str	r2, [r3, #28]
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	e067      	b.n	800b7be <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	699b      	ldr	r3, [r3, #24]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7ff fe59 	bl	800b3ae <create_chain>
 800b6fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <dir_next+0xcc>
 800b704:	2307      	movs	r3, #7
 800b706:	e05a      	b.n	800b7be <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d101      	bne.n	800b712 <dir_next+0xd6>
 800b70e:	2302      	movs	r3, #2
 800b710:	e055      	b.n	800b7be <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b718:	d101      	bne.n	800b71e <dir_next+0xe2>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e04f      	b.n	800b7be <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f7ff fb50 	bl	800adc4 <sync_window>
 800b724:	4603      	mov	r3, r0
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <dir_next+0xf2>
 800b72a:	2301      	movs	r3, #1
 800b72c:	e047      	b.n	800b7be <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	3330      	adds	r3, #48	@ 0x30
 800b732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f7ff f97a 	bl	800aa32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b73e:	2300      	movs	r3, #0
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	6979      	ldr	r1, [r7, #20]
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fc1d 	bl	800af84 <clust2sect>
 800b74a:	4602      	mov	r2, r0
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b750:	e012      	b.n	800b778 <dir_next+0x13c>
						fs->wflag = 1;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2201      	movs	r2, #1
 800b756:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f7ff fb33 	bl	800adc4 <sync_window>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d001      	beq.n	800b768 <dir_next+0x12c>
 800b764:	2301      	movs	r3, #1
 800b766:	e02a      	b.n	800b7be <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	3301      	adds	r3, #1
 800b76c:	613b      	str	r3, [r7, #16]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	895b      	ldrh	r3, [r3, #10]
 800b77c:	461a      	mov	r2, r3
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	4293      	cmp	r3, r2
 800b782:	d3e6      	bcc.n	800b752 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	1ad2      	subs	r2, r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b796:	6979      	ldr	r1, [r7, #20]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff fbf3 	bl	800af84 <clust2sect>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7b6:	441a      	add	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b086      	sub	sp, #24
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff feb4 	bl	800b546 <dir_sdi>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b7e2:	7dfb      	ldrb	r3, [r7, #23]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d12b      	bne.n	800b840 <dir_alloc+0x7a>
		n = 0;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f7ff fb2a 	bl	800ae4c <move_window>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d11d      	bne.n	800b83e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	2be5      	cmp	r3, #229	@ 0xe5
 800b80a:	d004      	beq.n	800b816 <dir_alloc+0x50>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d107      	bne.n	800b826 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	3301      	adds	r3, #1
 800b81a:	613b      	str	r3, [r7, #16]
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d102      	bne.n	800b82a <dir_alloc+0x64>
 800b824:	e00c      	b.n	800b840 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b826:	2300      	movs	r3, #0
 800b828:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b82a:	2101      	movs	r1, #1
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff ff05 	bl	800b63c <dir_next>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b836:	7dfb      	ldrb	r3, [r7, #23]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d0d7      	beq.n	800b7ec <dir_alloc+0x26>
 800b83c:	e000      	b.n	800b840 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b83e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	2b04      	cmp	r3, #4
 800b844:	d101      	bne.n	800b84a <dir_alloc+0x84>
 800b846:	2307      	movs	r3, #7
 800b848:	75fb      	strb	r3, [r7, #23]
	return res;
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	331a      	adds	r3, #26
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff f842 	bl	800a8ec <ld_word>
 800b868:	4603      	mov	r3, r0
 800b86a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2b03      	cmp	r3, #3
 800b872:	d109      	bne.n	800b888 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	3314      	adds	r3, #20
 800b878:	4618      	mov	r0, r3
 800b87a:	f7ff f837 	bl	800a8ec <ld_word>
 800b87e:	4603      	mov	r3, r0
 800b880:	041b      	lsls	r3, r3, #16
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	4313      	orrs	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b888:	68fb      	ldr	r3, [r7, #12]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	331a      	adds	r3, #26
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	b292      	uxth	r2, r2
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7ff f85a 	bl	800a962 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	d109      	bne.n	800b8ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f103 0214 	add.w	r2, r3, #20
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	0c1b      	lsrs	r3, r3, #16
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	f7ff f84c 	bl	800a962 <st_word>
	}
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b086      	sub	sp, #24
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b8dc:	2304      	movs	r3, #4
 800b8de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b8e6:	e03c      	b.n	800b962 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6938      	ldr	r0, [r7, #16]
 800b8f0:	f7ff faac 	bl	800ae4c <move_window>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d136      	bne.n	800b96c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b90c:	2304      	movs	r3, #4
 800b90e:	75fb      	strb	r3, [r7, #23]
 800b910:	e031      	b.n	800b976 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	330b      	adds	r3, #11
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b91e:	73bb      	strb	r3, [r7, #14]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7bba      	ldrb	r2, [r7, #14]
 800b924:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	2be5      	cmp	r3, #229	@ 0xe5
 800b92a:	d011      	beq.n	800b950 <dir_read+0x7e>
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b930:	d00e      	beq.n	800b950 <dir_read+0x7e>
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	2b0f      	cmp	r3, #15
 800b936:	d00b      	beq.n	800b950 <dir_read+0x7e>
 800b938:	7bbb      	ldrb	r3, [r7, #14]
 800b93a:	f023 0320 	bic.w	r3, r3, #32
 800b93e:	2b08      	cmp	r3, #8
 800b940:	bf0c      	ite	eq
 800b942:	2301      	moveq	r3, #1
 800b944:	2300      	movne	r3, #0
 800b946:	b2db      	uxtb	r3, r3
 800b948:	461a      	mov	r2, r3
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d00f      	beq.n	800b970 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b950:	2100      	movs	r1, #0
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fe72 	bl	800b63c <dir_next>
 800b958:	4603      	mov	r3, r0
 800b95a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b95c:	7dfb      	ldrb	r3, [r7, #23]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d108      	bne.n	800b974 <dir_read+0xa2>
	while (dp->sect) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	69db      	ldr	r3, [r3, #28]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1be      	bne.n	800b8e8 <dir_read+0x16>
 800b96a:	e004      	b.n	800b976 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b96c:	bf00      	nop
 800b96e:	e002      	b.n	800b976 <dir_read+0xa4>
				break;
 800b970:	bf00      	nop
 800b972:	e000      	b.n	800b976 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b974:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <dir_read+0xb0>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	61da      	str	r2, [r3, #28]
	return res;
 800b982:	7dfb      	ldrb	r3, [r7, #23]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b99a:	2100      	movs	r1, #0
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff fdd2 	bl	800b546 <dir_sdi>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <dir_find+0x24>
 800b9ac:	7dfb      	ldrb	r3, [r7, #23]
 800b9ae:	e03e      	b.n	800ba2e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	69db      	ldr	r3, [r3, #28]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6938      	ldr	r0, [r7, #16]
 800b9b8:	f7ff fa48 	bl	800ae4c <move_window>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d12f      	bne.n	800ba26 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d102      	bne.n	800b9da <dir_find+0x4e>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	75fb      	strb	r3, [r7, #23]
 800b9d8:	e028      	b.n	800ba2c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	330b      	adds	r3, #11
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a1b      	ldr	r3, [r3, #32]
 800b9f0:	330b      	adds	r3, #11
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f003 0308 	and.w	r3, r3, #8
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <dir_find+0x86>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a18      	ldr	r0, [r3, #32]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	3324      	adds	r3, #36	@ 0x24
 800ba04:	220b      	movs	r2, #11
 800ba06:	4619      	mov	r1, r3
 800ba08:	f7ff f82e 	bl	800aa68 <mem_cmp>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba12:	2100      	movs	r1, #0
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff fe11 	bl	800b63c <dir_next>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba1e:	7dfb      	ldrb	r3, [r7, #23]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d0c5      	beq.n	800b9b0 <dir_find+0x24>
 800ba24:	e002      	b.n	800ba2c <dir_find+0xa0>
		if (res != FR_OK) break;
 800ba26:	bf00      	nop
 800ba28:	e000      	b.n	800ba2c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ba2a:	bf00      	nop

	return res;
 800ba2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ba44:	2101      	movs	r1, #1
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff febd 	bl	800b7c6 <dir_alloc>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d11c      	bne.n	800ba90 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	69db      	ldr	r3, [r3, #28]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	68b8      	ldr	r0, [r7, #8]
 800ba5e:	f7ff f9f5 	bl	800ae4c <move_window>
 800ba62:	4603      	mov	r3, r0
 800ba64:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ba66:	7bfb      	ldrb	r3, [r7, #15]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d111      	bne.n	800ba90 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a1b      	ldr	r3, [r3, #32]
 800ba70:	2220      	movs	r2, #32
 800ba72:	2100      	movs	r1, #0
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe ffdc 	bl	800aa32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a18      	ldr	r0, [r3, #32]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3324      	adds	r3, #36	@ 0x24
 800ba82:	220b      	movs	r2, #11
 800ba84:	4619      	mov	r1, r3
 800ba86:	f7fe ffb3 	bl	800a9f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	69db      	ldr	r3, [r3, #28]
 800baac:	4619      	mov	r1, r3
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff f9cc 	bl	800ae4c <move_window>
 800bab4:	4603      	mov	r3, r0
 800bab6:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800bab8:	7afb      	ldrb	r3, [r7, #11]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	22e5      	movs	r2, #229	@ 0xe5
 800bac4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2201      	movs	r2, #1
 800baca:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800bacc:	7afb      	ldrb	r3, [r7, #11]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	3324      	adds	r3, #36	@ 0x24
 800baec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800baee:	220b      	movs	r2, #11
 800baf0:	2120      	movs	r1, #32
 800baf2:	68b8      	ldr	r0, [r7, #8]
 800baf4:	f7fe ff9d 	bl	800aa32 <mem_set>
	si = i = 0; ni = 8;
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	2308      	movs	r3, #8
 800bb02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	61fa      	str	r2, [r7, #28]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bb12:	7efb      	ldrb	r3, [r7, #27]
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	d94e      	bls.n	800bbb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bb18:	7efb      	ldrb	r3, [r7, #27]
 800bb1a:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb1c:	d006      	beq.n	800bb2c <create_name+0x54>
 800bb1e:	7efb      	ldrb	r3, [r7, #27]
 800bb20:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb22:	d110      	bne.n	800bb46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bb24:	e002      	b.n	800bb2c <create_name+0x54>
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	61fb      	str	r3, [r7, #28]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	4413      	add	r3, r2
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb36:	d0f6      	beq.n	800bb26 <create_name+0x4e>
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b5c      	cmp	r3, #92	@ 0x5c
 800bb42:	d0f0      	beq.n	800bb26 <create_name+0x4e>
			break;
 800bb44:	e038      	b.n	800bbb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bb46:	7efb      	ldrb	r3, [r7, #27]
 800bb48:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb4a:	d003      	beq.n	800bb54 <create_name+0x7c>
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d30c      	bcc.n	800bb6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2b0b      	cmp	r3, #11
 800bb58:	d002      	beq.n	800bb60 <create_name+0x88>
 800bb5a:	7efb      	ldrb	r3, [r7, #27]
 800bb5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb5e:	d001      	beq.n	800bb64 <create_name+0x8c>
 800bb60:	2306      	movs	r3, #6
 800bb62:	e044      	b.n	800bbee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bb64:	2308      	movs	r3, #8
 800bb66:	613b      	str	r3, [r7, #16]
 800bb68:	230b      	movs	r3, #11
 800bb6a:	617b      	str	r3, [r7, #20]
			continue;
 800bb6c:	e022      	b.n	800bbb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bb6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	da04      	bge.n	800bb80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bb76:	7efb      	ldrb	r3, [r7, #27]
 800bb78:	3b80      	subs	r3, #128	@ 0x80
 800bb7a:	4a1f      	ldr	r2, [pc, #124]	@ (800bbf8 <create_name+0x120>)
 800bb7c:	5cd3      	ldrb	r3, [r2, r3]
 800bb7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bb80:	7efb      	ldrb	r3, [r7, #27]
 800bb82:	4619      	mov	r1, r3
 800bb84:	481d      	ldr	r0, [pc, #116]	@ (800bbfc <create_name+0x124>)
 800bb86:	f7fe ff96 	bl	800aab6 <chk_chr>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <create_name+0xbc>
 800bb90:	2306      	movs	r3, #6
 800bb92:	e02c      	b.n	800bbee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bb94:	7efb      	ldrb	r3, [r7, #27]
 800bb96:	2b60      	cmp	r3, #96	@ 0x60
 800bb98:	d905      	bls.n	800bba6 <create_name+0xce>
 800bb9a:	7efb      	ldrb	r3, [r7, #27]
 800bb9c:	2b7a      	cmp	r3, #122	@ 0x7a
 800bb9e:	d802      	bhi.n	800bba6 <create_name+0xce>
 800bba0:	7efb      	ldrb	r3, [r7, #27]
 800bba2:	3b20      	subs	r3, #32
 800bba4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	1c5a      	adds	r2, r3, #1
 800bbaa:	613a      	str	r2, [r7, #16]
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	4413      	add	r3, r2
 800bbb0:	7efa      	ldrb	r2, [r7, #27]
 800bbb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bbb4:	e7a6      	b.n	800bb04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bbb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	441a      	add	r2, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <create_name+0xf4>
 800bbc8:	2306      	movs	r3, #6
 800bbca:	e010      	b.n	800bbee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	2be5      	cmp	r3, #229	@ 0xe5
 800bbd2:	d102      	bne.n	800bbda <create_name+0x102>
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2205      	movs	r2, #5
 800bbd8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bbda:	7efb      	ldrb	r3, [r7, #27]
 800bbdc:	2b20      	cmp	r3, #32
 800bbde:	d801      	bhi.n	800bbe4 <create_name+0x10c>
 800bbe0:	2204      	movs	r2, #4
 800bbe2:	e000      	b.n	800bbe6 <create_name+0x10e>
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	330b      	adds	r3, #11
 800bbea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bbec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3720      	adds	r7, #32
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	bf00      	nop
 800bbf8:	0800e83c 	.word	0x0800e83c
 800bbfc:	0800da64 	.word	0x0800da64

0800bc00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc14:	e002      	b.n	800bc1c <follow_path+0x1c>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc22:	d0f8      	beq.n	800bc16 <follow_path+0x16>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc2a:	d0f4      	beq.n	800bc16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	2b1f      	cmp	r3, #31
 800bc38:	d80a      	bhi.n	800bc50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2280      	movs	r2, #128	@ 0x80
 800bc3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bc42:	2100      	movs	r1, #0
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fc7e 	bl	800b546 <dir_sdi>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75fb      	strb	r3, [r7, #23]
 800bc4e:	e043      	b.n	800bcd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc50:	463b      	mov	r3, r7
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff ff3f 	bl	800bad8 <create_name>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc5e:	7dfb      	ldrb	r3, [r7, #23]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d134      	bne.n	800bcce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff fe91 	bl	800b98c <dir_find>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bc74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00a      	beq.n	800bc92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bc7c:	7dfb      	ldrb	r3, [r7, #23]
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	d127      	bne.n	800bcd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bc82:	7afb      	ldrb	r3, [r7, #11]
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d122      	bne.n	800bcd2 <follow_path+0xd2>
 800bc8c:	2305      	movs	r3, #5
 800bc8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bc90:	e01f      	b.n	800bcd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc92:	7afb      	ldrb	r3, [r7, #11]
 800bc94:	f003 0304 	and.w	r3, r3, #4
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d11c      	bne.n	800bcd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	799b      	ldrb	r3, [r3, #6]
 800bca0:	f003 0310 	and.w	r3, r3, #16
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bca8:	2305      	movs	r3, #5
 800bcaa:	75fb      	strb	r3, [r7, #23]
 800bcac:	e014      	b.n	800bcd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcbc:	4413      	add	r3, r2
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fdc7 	bl	800b854 <ld_clust>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bccc:	e7c0      	b.n	800bc50 <follow_path+0x50>
			if (res != FR_OK) break;
 800bcce:	bf00      	nop
 800bcd0:	e002      	b.n	800bcd8 <follow_path+0xd8>
				break;
 800bcd2:	bf00      	nop
 800bcd4:	e000      	b.n	800bcd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bcd6:	bf00      	nop
			}
		}
	}

	return res;
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b087      	sub	sp, #28
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bcea:	f04f 33ff 	mov.w	r3, #4294967295
 800bcee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d031      	beq.n	800bd5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	617b      	str	r3, [r7, #20]
 800bcfe:	e002      	b.n	800bd06 <get_ldnumber+0x24>
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	3301      	adds	r3, #1
 800bd04:	617b      	str	r3, [r7, #20]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b20      	cmp	r3, #32
 800bd0c:	d903      	bls.n	800bd16 <get_ldnumber+0x34>
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd14:	d1f4      	bne.n	800bd00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd1c:	d11c      	bne.n	800bd58 <get_ldnumber+0x76>
			tp = *path;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	60fa      	str	r2, [r7, #12]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	3b30      	subs	r3, #48	@ 0x30
 800bd2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	2b09      	cmp	r3, #9
 800bd34:	d80e      	bhi.n	800bd54 <get_ldnumber+0x72>
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d10a      	bne.n	800bd54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d107      	bne.n	800bd54 <get_ldnumber+0x72>
					vol = (int)i;
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	617b      	str	r3, [r7, #20]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	e002      	b.n	800bd5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bd58:	2300      	movs	r3, #0
 800bd5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bd5c:	693b      	ldr	r3, [r7, #16]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
	...

0800bd6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	70da      	strb	r2, [r3, #3]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd82:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff f860 	bl	800ae4c <move_window>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <check_fs+0x2a>
 800bd92:	2304      	movs	r3, #4
 800bd94:	e038      	b.n	800be08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	3330      	adds	r3, #48	@ 0x30
 800bd9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fe fda4 	bl	800a8ec <ld_word>
 800bda4:	4603      	mov	r3, r0
 800bda6:	461a      	mov	r2, r3
 800bda8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d001      	beq.n	800bdb4 <check_fs+0x48>
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e029      	b.n	800be08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdba:	2be9      	cmp	r3, #233	@ 0xe9
 800bdbc:	d009      	beq.n	800bdd2 <check_fs+0x66>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdc4:	2beb      	cmp	r3, #235	@ 0xeb
 800bdc6:	d11e      	bne.n	800be06 <check_fs+0x9a>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bdce:	2b90      	cmp	r3, #144	@ 0x90
 800bdd0:	d119      	bne.n	800be06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	3330      	adds	r3, #48	@ 0x30
 800bdd6:	3336      	adds	r3, #54	@ 0x36
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe fd9f 	bl	800a91c <ld_dword>
 800bdde:	4603      	mov	r3, r0
 800bde0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bde4:	4a0a      	ldr	r2, [pc, #40]	@ (800be10 <check_fs+0xa4>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d101      	bne.n	800bdee <check_fs+0x82>
 800bdea:	2300      	movs	r3, #0
 800bdec:	e00c      	b.n	800be08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	3330      	adds	r3, #48	@ 0x30
 800bdf2:	3352      	adds	r3, #82	@ 0x52
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fe fd91 	bl	800a91c <ld_dword>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	4a05      	ldr	r2, [pc, #20]	@ (800be14 <check_fs+0xa8>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d101      	bne.n	800be06 <check_fs+0x9a>
 800be02:	2300      	movs	r3, #0
 800be04:	e000      	b.n	800be08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be06:	2302      	movs	r3, #2
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	00544146 	.word	0x00544146
 800be14:	33544146 	.word	0x33544146

0800be18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b096      	sub	sp, #88	@ 0x58
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	4613      	mov	r3, r2
 800be24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f7ff ff58 	bl	800bce2 <get_ldnumber>
 800be32:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be36:	2b00      	cmp	r3, #0
 800be38:	da01      	bge.n	800be3e <find_volume+0x26>
 800be3a:	230b      	movs	r3, #11
 800be3c:	e22d      	b.n	800c29a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be3e:	4aa1      	ldr	r2, [pc, #644]	@ (800c0c4 <find_volume+0x2ac>)
 800be40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be46:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800be48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d101      	bne.n	800be52 <find_volume+0x3a>
 800be4e:	230c      	movs	r3, #12
 800be50:	e223      	b.n	800c29a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	f023 0301 	bic.w	r3, r3, #1
 800be5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800be60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01a      	beq.n	800be9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800be68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6a:	785b      	ldrb	r3, [r3, #1]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe fc9d 	bl	800a7ac <disk_status>
 800be72:	4603      	mov	r3, r0
 800be74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800be78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10c      	bne.n	800be9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d007      	beq.n	800be9a <find_volume+0x82>
 800be8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be8e:	f003 0304 	and.w	r3, r3, #4
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800be96:	230a      	movs	r3, #10
 800be98:	e1ff      	b.n	800c29a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800be9a:	2300      	movs	r3, #0
 800be9c:	e1fd      	b.n	800c29a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea0:	2200      	movs	r2, #0
 800bea2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beaa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800beac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beae:	785b      	ldrb	r3, [r3, #1]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe fc95 	bl	800a7e0 <disk_initialize>
 800beb6:	4603      	mov	r3, r0
 800beb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bec0:	f003 0301 	and.w	r3, r3, #1
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bec8:	2303      	movs	r3, #3
 800beca:	e1e6      	b.n	800c29a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d007      	beq.n	800bee2 <find_volume+0xca>
 800bed2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bede:	230a      	movs	r3, #10
 800bee0:	e1db      	b.n	800c29a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bee6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bee8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800beea:	f7ff ff3f 	bl	800bd6c <check_fs>
 800beee:	4603      	mov	r3, r0
 800bef0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bef4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d149      	bne.n	800bf90 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800befc:	2300      	movs	r3, #0
 800befe:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf00:	e01e      	b.n	800bf40 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bf10:	4413      	add	r3, r2
 800bf12:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf16:	3304      	adds	r3, #4
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <find_volume+0x114>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	3308      	adds	r3, #8
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe fcfa 	bl	800a91c <ld_dword>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	e000      	b.n	800bf2e <find_volume+0x116>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	3358      	adds	r3, #88	@ 0x58
 800bf34:	443b      	add	r3, r7
 800bf36:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d9dd      	bls.n	800bf02 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bf46:	2300      	movs	r3, #0
 800bf48:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bf4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <find_volume+0x13e>
 800bf50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf52:	3b01      	subs	r3, #1
 800bf54:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bf56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	3358      	adds	r3, #88	@ 0x58
 800bf5c:	443b      	add	r3, r7
 800bf5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bf62:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d005      	beq.n	800bf76 <find_volume+0x15e>
 800bf6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf6e:	f7ff fefd 	bl	800bd6c <check_fs>
 800bf72:	4603      	mov	r3, r0
 800bf74:	e000      	b.n	800bf78 <find_volume+0x160>
 800bf76:	2303      	movs	r3, #3
 800bf78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d905      	bls.n	800bf90 <find_volume+0x178>
 800bf84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf86:	3301      	adds	r3, #1
 800bf88:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf8c:	2b03      	cmp	r3, #3
 800bf8e:	d9e2      	bls.n	800bf56 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d101      	bne.n	800bf9c <find_volume+0x184>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e17e      	b.n	800c29a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d901      	bls.n	800bfa8 <find_volume+0x190>
 800bfa4:	230d      	movs	r3, #13
 800bfa6:	e178      	b.n	800c29a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfaa:	3330      	adds	r3, #48	@ 0x30
 800bfac:	330b      	adds	r3, #11
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fc9c 	bl	800a8ec <ld_word>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bfba:	d001      	beq.n	800bfc0 <find_volume+0x1a8>
 800bfbc:	230d      	movs	r3, #13
 800bfbe:	e16c      	b.n	800c29a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc2:	3330      	adds	r3, #48	@ 0x30
 800bfc4:	3316      	adds	r3, #22
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fc90 	bl	800a8ec <ld_word>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bfd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d106      	bne.n	800bfe4 <find_volume+0x1cc>
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd8:	3330      	adds	r3, #48	@ 0x30
 800bfda:	3324      	adds	r3, #36	@ 0x24
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fe fc9d 	bl	800a91c <ld_dword>
 800bfe2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfe8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfec:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800bff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff6:	789b      	ldrb	r3, [r3, #2]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d005      	beq.n	800c008 <find_volume+0x1f0>
 800bffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffe:	789b      	ldrb	r3, [r3, #2]
 800c000:	2b02      	cmp	r3, #2
 800c002:	d001      	beq.n	800c008 <find_volume+0x1f0>
 800c004:	230d      	movs	r3, #13
 800c006:	e148      	b.n	800c29a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00a:	789b      	ldrb	r3, [r3, #2]
 800c00c:	461a      	mov	r2, r3
 800c00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c010:	fb02 f303 	mul.w	r3, r2, r3
 800c014:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c01c:	461a      	mov	r2, r3
 800c01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c020:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c024:	895b      	ldrh	r3, [r3, #10]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d008      	beq.n	800c03c <find_volume+0x224>
 800c02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02c:	895b      	ldrh	r3, [r3, #10]
 800c02e:	461a      	mov	r2, r3
 800c030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c032:	895b      	ldrh	r3, [r3, #10]
 800c034:	3b01      	subs	r3, #1
 800c036:	4013      	ands	r3, r2
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <find_volume+0x228>
 800c03c:	230d      	movs	r3, #13
 800c03e:	e12c      	b.n	800c29a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c042:	3330      	adds	r3, #48	@ 0x30
 800c044:	3311      	adds	r3, #17
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fc50 	bl	800a8ec <ld_word>
 800c04c:	4603      	mov	r3, r0
 800c04e:	461a      	mov	r2, r3
 800c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c052:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c056:	891b      	ldrh	r3, [r3, #8]
 800c058:	f003 030f 	and.w	r3, r3, #15
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <find_volume+0x24e>
 800c062:	230d      	movs	r3, #13
 800c064:	e119      	b.n	800c29a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c068:	3330      	adds	r3, #48	@ 0x30
 800c06a:	3313      	adds	r3, #19
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7fe fc3d 	bl	800a8ec <ld_word>
 800c072:	4603      	mov	r3, r0
 800c074:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d106      	bne.n	800c08a <find_volume+0x272>
 800c07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07e:	3330      	adds	r3, #48	@ 0x30
 800c080:	3320      	adds	r3, #32
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fc4a 	bl	800a91c <ld_dword>
 800c088:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	3330      	adds	r3, #48	@ 0x30
 800c08e:	330e      	adds	r3, #14
 800c090:	4618      	mov	r0, r3
 800c092:	f7fe fc2b 	bl	800a8ec <ld_word>
 800c096:	4603      	mov	r3, r0
 800c098:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c09a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <find_volume+0x28c>
 800c0a0:	230d      	movs	r3, #13
 800c0a2:	e0fa      	b.n	800c29a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c0a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c0a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a8:	4413      	add	r3, r2
 800c0aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ac:	8912      	ldrh	r2, [r2, #8]
 800c0ae:	0912      	lsrs	r2, r2, #4
 800c0b0:	b292      	uxth	r2, r2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c0b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d204      	bcs.n	800c0c8 <find_volume+0x2b0>
 800c0be:	230d      	movs	r3, #13
 800c0c0:	e0eb      	b.n	800c29a <find_volume+0x482>
 800c0c2:	bf00      	nop
 800c0c4:	200005a8 	.word	0x200005a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c0c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0d0:	8952      	ldrh	r2, [r2, #10]
 800c0d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d101      	bne.n	800c0e2 <find_volume+0x2ca>
 800c0de:	230d      	movs	r3, #13
 800c0e0:	e0db      	b.n	800c29a <find_volume+0x482>
		fmt = FS_FAT32;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d802      	bhi.n	800c0f8 <find_volume+0x2e0>
 800c0f2:	2302      	movs	r3, #2
 800c0f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d802      	bhi.n	800c108 <find_volume+0x2f0>
 800c102:	2301      	movs	r3, #1
 800c104:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10a:	1c9a      	adds	r2, r3, #2
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c112:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c114:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c116:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c11a:	441a      	add	r2, r3
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c120:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	441a      	add	r2, r3
 800c126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c128:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c12a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d11e      	bne.n	800c170 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	3330      	adds	r3, #48	@ 0x30
 800c136:	332a      	adds	r3, #42	@ 0x2a
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fe fbd7 	bl	800a8ec <ld_word>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <find_volume+0x330>
 800c144:	230d      	movs	r3, #13
 800c146:	e0a8      	b.n	800c29a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14a:	891b      	ldrh	r3, [r3, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <find_volume+0x33c>
 800c150:	230d      	movs	r3, #13
 800c152:	e0a2      	b.n	800c29a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c156:	3330      	adds	r3, #48	@ 0x30
 800c158:	332c      	adds	r3, #44	@ 0x2c
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe fbde 	bl	800a91c <ld_dword>
 800c160:	4602      	mov	r2, r0
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c16e:	e01f      	b.n	800c1b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c172:	891b      	ldrh	r3, [r3, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <find_volume+0x364>
 800c178:	230d      	movs	r3, #13
 800c17a:	e08e      	b.n	800c29a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17e:	6a1a      	ldr	r2, [r3, #32]
 800c180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c182:	441a      	add	r2, r3
 800c184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c186:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d103      	bne.n	800c198 <find_volume+0x380>
 800c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	e00a      	b.n	800c1ae <find_volume+0x396>
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	695a      	ldr	r2, [r3, #20]
 800c19c:	4613      	mov	r3, r2
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	4413      	add	r3, r2
 800c1a2:	085a      	lsrs	r2, r3, #1
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c1ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	699a      	ldr	r2, [r3, #24]
 800c1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c1ba:	0a5b      	lsrs	r3, r3, #9
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d201      	bcs.n	800c1c4 <find_volume+0x3ac>
 800c1c0:	230d      	movs	r3, #13
 800c1c2:	e06a      	b.n	800c29a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ca:	611a      	str	r2, [r3, #16]
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	691a      	ldr	r2, [r3, #16]
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d6:	2280      	movs	r2, #128	@ 0x80
 800c1d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c1da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d149      	bne.n	800c276 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	3330      	adds	r3, #48	@ 0x30
 800c1e6:	3330      	adds	r3, #48	@ 0x30
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fe fb7f 	bl	800a8ec <ld_word>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d140      	bne.n	800c276 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c1f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c1fc:	f7fe fe26 	bl	800ae4c <move_window>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d137      	bne.n	800c276 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c208:	2200      	movs	r2, #0
 800c20a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c20e:	3330      	adds	r3, #48	@ 0x30
 800c210:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe fb69 	bl	800a8ec <ld_word>
 800c21a:	4603      	mov	r3, r0
 800c21c:	461a      	mov	r2, r3
 800c21e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c222:	429a      	cmp	r2, r3
 800c224:	d127      	bne.n	800c276 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c228:	3330      	adds	r3, #48	@ 0x30
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fb76 	bl	800a91c <ld_dword>
 800c230:	4603      	mov	r3, r0
 800c232:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a4 <find_volume+0x48c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d11e      	bne.n	800c276 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23a:	3330      	adds	r3, #48	@ 0x30
 800c23c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe fb6b 	bl	800a91c <ld_dword>
 800c246:	4603      	mov	r3, r0
 800c248:	4a17      	ldr	r2, [pc, #92]	@ (800c2a8 <find_volume+0x490>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d113      	bne.n	800c276 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c250:	3330      	adds	r3, #48	@ 0x30
 800c252:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fb60 	bl	800a91c <ld_dword>
 800c25c:	4602      	mov	r2, r0
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c264:	3330      	adds	r3, #48	@ 0x30
 800c266:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fe fb56 	bl	800a91c <ld_dword>
 800c270:	4602      	mov	r2, r0
 800c272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c274:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c278:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c27c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c27e:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ac <find_volume+0x494>)
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	3301      	adds	r3, #1
 800c284:	b29a      	uxth	r2, r3
 800c286:	4b09      	ldr	r3, [pc, #36]	@ (800c2ac <find_volume+0x494>)
 800c288:	801a      	strh	r2, [r3, #0]
 800c28a:	4b08      	ldr	r3, [pc, #32]	@ (800c2ac <find_volume+0x494>)
 800c28c:	881a      	ldrh	r2, [r3, #0]
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c292:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c294:	f7fe fd72 	bl	800ad7c <clear_lock>
#endif
	return FR_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3758      	adds	r7, #88	@ 0x58
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	41615252 	.word	0x41615252
 800c2a8:	61417272 	.word	0x61417272
 800c2ac:	200005ac 	.word	0x200005ac

0800c2b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c2ba:	2309      	movs	r3, #9
 800c2bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d01c      	beq.n	800c2fe <validate+0x4e>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d018      	beq.n	800c2fe <validate+0x4e>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d013      	beq.n	800c2fe <validate+0x4e>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	889a      	ldrh	r2, [r3, #4]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	88db      	ldrh	r3, [r3, #6]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d10c      	bne.n	800c2fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	785b      	ldrb	r3, [r3, #1]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fa5e 	bl	800a7ac <disk_status>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <validate+0x4e>
			res = FR_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d102      	bne.n	800c30a <validate+0x5a>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	e000      	b.n	800c30c <validate+0x5c>
 800c30a:	2300      	movs	r3, #0
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	6013      	str	r3, [r2, #0]
	return res;
 800c310:	7bfb      	ldrb	r3, [r7, #15]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	4613      	mov	r3, r2
 800c328:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c32e:	f107 0310 	add.w	r3, r7, #16
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff fcd5 	bl	800bce2 <get_ldnumber>
 800c338:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	da01      	bge.n	800c344 <f_mount+0x28>
 800c340:	230b      	movs	r3, #11
 800c342:	e02b      	b.n	800c39c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c344:	4a17      	ldr	r2, [pc, #92]	@ (800c3a4 <f_mount+0x88>)
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c34c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d005      	beq.n	800c360 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c354:	69b8      	ldr	r0, [r7, #24]
 800c356:	f7fe fd11 	bl	800ad7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	490d      	ldr	r1, [pc, #52]	@ (800c3a4 <f_mount+0x88>)
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <f_mount+0x66>
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d001      	beq.n	800c386 <f_mount+0x6a>
 800c382:	2300      	movs	r3, #0
 800c384:	e00a      	b.n	800c39c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c386:	f107 010c 	add.w	r1, r7, #12
 800c38a:	f107 0308 	add.w	r3, r7, #8
 800c38e:	2200      	movs	r2, #0
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff fd41 	bl	800be18 <find_volume>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3720      	adds	r7, #32
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	200005a8 	.word	0x200005a8

0800c3a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b098      	sub	sp, #96	@ 0x60
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <f_open+0x18>
 800c3bc:	2309      	movs	r3, #9
 800c3be:	e1a9      	b.n	800c714 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c3c0:	79fb      	ldrb	r3, [r7, #7]
 800c3c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c3c8:	79fa      	ldrb	r2, [r7, #7]
 800c3ca:	f107 0110 	add.w	r1, r7, #16
 800c3ce:	f107 0308 	add.w	r3, r7, #8
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fd20 	bl	800be18 <find_volume>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c3de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f040 818d 	bne.w	800c702 <f_open+0x35a>
		dj.obj.fs = fs;
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	f107 0314 	add.w	r3, r7, #20
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fc03 	bl	800bc00 <follow_path>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c400:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c404:	2b00      	cmp	r3, #0
 800c406:	d118      	bne.n	800c43a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c408:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c40c:	b25b      	sxtb	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	da03      	bge.n	800c41a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c412:	2306      	movs	r3, #6
 800c414:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c418:	e00f      	b.n	800c43a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c41a:	79fb      	ldrb	r3, [r7, #7]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	bf8c      	ite	hi
 800c420:	2301      	movhi	r3, #1
 800c422:	2300      	movls	r3, #0
 800c424:	b2db      	uxtb	r3, r3
 800c426:	461a      	mov	r2, r3
 800c428:	f107 0314 	add.w	r3, r7, #20
 800c42c:	4611      	mov	r1, r2
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe fb5c 	bl	800aaec <chk_lock>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	f003 031c 	and.w	r3, r3, #28
 800c440:	2b00      	cmp	r3, #0
 800c442:	d07f      	beq.n	800c544 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c444:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d017      	beq.n	800c47c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c44c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c450:	2b04      	cmp	r3, #4
 800c452:	d10e      	bne.n	800c472 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c454:	f7fe fba6 	bl	800aba4 <enq_lock>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d006      	beq.n	800c46c <f_open+0xc4>
 800c45e:	f107 0314 	add.w	r3, r7, #20
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff fae7 	bl	800ba36 <dir_register>
 800c468:	4603      	mov	r3, r0
 800c46a:	e000      	b.n	800c46e <f_open+0xc6>
 800c46c:	2312      	movs	r3, #18
 800c46e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c472:	79fb      	ldrb	r3, [r7, #7]
 800c474:	f043 0308 	orr.w	r3, r3, #8
 800c478:	71fb      	strb	r3, [r7, #7]
 800c47a:	e010      	b.n	800c49e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c47c:	7ebb      	ldrb	r3, [r7, #26]
 800c47e:	f003 0311 	and.w	r3, r3, #17
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <f_open+0xe6>
					res = FR_DENIED;
 800c486:	2307      	movs	r3, #7
 800c488:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c48c:	e007      	b.n	800c49e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c48e:	79fb      	ldrb	r3, [r7, #7]
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <f_open+0xf6>
 800c498:	2308      	movs	r3, #8
 800c49a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c49e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d168      	bne.n	800c578 <f_open+0x1d0>
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	f003 0308 	and.w	r3, r3, #8
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d063      	beq.n	800c578 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c4b0:	f7fe f810 	bl	800a4d4 <get_fattime>
 800c4b4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b8:	330e      	adds	r3, #14
 800c4ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe fa6b 	bl	800a998 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c4c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4c4:	3316      	adds	r3, #22
 800c4c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fe fa65 	bl	800a998 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	330b      	adds	r3, #11
 800c4d2:	2220      	movs	r2, #32
 800c4d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4da:	4611      	mov	r1, r2
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7ff f9b9 	bl	800b854 <ld_clust>
 800c4e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff f9d1 	bl	800b892 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4f2:	331c      	adds	r3, #28
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fe fa4e 	bl	800a998 <st_dword>
					fs->wflag = 1;
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2201      	movs	r2, #1
 800c500:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d037      	beq.n	800c578 <f_open+0x1d0>
						dw = fs->winsect;
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c50c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c50e:	f107 0314 	add.w	r3, r7, #20
 800c512:	2200      	movs	r2, #0
 800c514:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe fee4 	bl	800b2e4 <remove_chain>
 800c51c:	4603      	mov	r3, r0
 800c51e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c522:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c526:	2b00      	cmp	r3, #0
 800c528:	d126      	bne.n	800c578 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c52e:	4618      	mov	r0, r3
 800c530:	f7fe fc8c 	bl	800ae4c <move_window>
 800c534:	4603      	mov	r3, r0
 800c536:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c53e:	3a01      	subs	r2, #1
 800c540:	60da      	str	r2, [r3, #12]
 800c542:	e019      	b.n	800c578 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c544:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d115      	bne.n	800c578 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c54c:	7ebb      	ldrb	r3, [r7, #26]
 800c54e:	f003 0310 	and.w	r3, r3, #16
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <f_open+0x1b6>
					res = FR_NO_FILE;
 800c556:	2304      	movs	r3, #4
 800c558:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c55c:	e00c      	b.n	800c578 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c55e:	79fb      	ldrb	r3, [r7, #7]
 800c560:	f003 0302 	and.w	r3, r3, #2
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <f_open+0x1d0>
 800c568:	7ebb      	ldrb	r3, [r7, #26]
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <f_open+0x1d0>
						res = FR_DENIED;
 800c572:	2307      	movs	r3, #7
 800c574:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c578:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d126      	bne.n	800c5ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c580:	79fb      	ldrb	r3, [r7, #7]
 800c582:	f003 0308 	and.w	r3, r3, #8
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c590:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c59a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5a0:	79fb      	ldrb	r3, [r7, #7]
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	bf8c      	ite	hi
 800c5a6:	2301      	movhi	r3, #1
 800c5a8:	2300      	movls	r3, #0
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	f107 0314 	add.w	r3, r7, #20
 800c5b2:	4611      	mov	r1, r2
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe fb17 	bl	800abe8 <inc_lock>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d102      	bne.n	800c5ce <f_open+0x226>
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c5ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f040 8095 	bne.w	800c702 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5dc:	4611      	mov	r1, r2
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff f938 	bl	800b854 <ld_clust>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c5ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ec:	331c      	adds	r3, #28
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fe f994 	bl	800a91c <ld_dword>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	88da      	ldrh	r2, [r3, #6]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	79fa      	ldrb	r2, [r7, #7]
 800c612:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3330      	adds	r3, #48	@ 0x30
 800c62a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe f9fe 	bl	800aa32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	f003 0320 	and.w	r3, r3, #32
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d060      	beq.n	800c702 <f_open+0x35a>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d05c      	beq.n	800c702 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	895b      	ldrh	r3, [r3, #10]
 800c654:	025b      	lsls	r3, r3, #9
 800c656:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	657b      	str	r3, [r7, #84]	@ 0x54
 800c664:	e016      	b.n	800c694 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe fca9 	bl	800afc2 <get_fat>
 800c670:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c674:	2b01      	cmp	r3, #1
 800c676:	d802      	bhi.n	800c67e <f_open+0x2d6>
 800c678:	2302      	movs	r3, #2
 800c67a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c684:	d102      	bne.n	800c68c <f_open+0x2e4>
 800c686:	2301      	movs	r3, #1
 800c688:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c68c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c68e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	657b      	str	r3, [r7, #84]	@ 0x54
 800c694:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d103      	bne.n	800c6a4 <f_open+0x2fc>
 800c69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c69e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d8e0      	bhi.n	800c666 <f_open+0x2be>
				}
				fp->clust = clst;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c6a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c6aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d127      	bne.n	800c702 <f_open+0x35a>
 800c6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d022      	beq.n	800c702 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fe fc5f 	bl	800af84 <clust2sect>
 800c6c6:	6478      	str	r0, [r7, #68]	@ 0x44
 800c6c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d103      	bne.n	800c6d6 <f_open+0x32e>
						res = FR_INT_ERR;
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c6d4:	e015      	b.n	800c702 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d8:	0a5a      	lsrs	r2, r3, #9
 800c6da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6dc:	441a      	add	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	7858      	ldrb	r0, [r3, #1]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6a1a      	ldr	r2, [r3, #32]
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f7fe f89d 	bl	800a830 <disk_read>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <f_open+0x35a>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c706:	2b00      	cmp	r3, #0
 800c708:	d002      	beq.n	800c710 <f_open+0x368>
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c710:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c714:	4618      	mov	r0, r3
 800c716:	3760      	adds	r7, #96	@ 0x60
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b08e      	sub	sp, #56	@ 0x38
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	2200      	movs	r2, #0
 800c732:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f107 0214 	add.w	r2, r7, #20
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fdb7 	bl	800c2b0 <validate>
 800c742:	4603      	mov	r3, r0
 800c744:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c748:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d107      	bne.n	800c760 <f_read+0x44>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	7d5b      	ldrb	r3, [r3, #21]
 800c754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <f_read+0x4a>
 800c760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c764:	e115      	b.n	800c992 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	7d1b      	ldrb	r3, [r3, #20]
 800c76a:	f003 0301 	and.w	r3, r3, #1
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <f_read+0x5a>
 800c772:	2307      	movs	r3, #7
 800c774:	e10d      	b.n	800c992 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68da      	ldr	r2, [r3, #12]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	699b      	ldr	r3, [r3, #24]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6a3b      	ldr	r3, [r7, #32]
 800c786:	429a      	cmp	r2, r3
 800c788:	f240 80fe 	bls.w	800c988 <f_read+0x26c>
 800c78c:	6a3b      	ldr	r3, [r7, #32]
 800c78e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c790:	e0fa      	b.n	800c988 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f040 80c6 	bne.w	800c92c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	0a5b      	lsrs	r3, r3, #9
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	8952      	ldrh	r2, [r2, #10]
 800c7aa:	3a01      	subs	r2, #1
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d12f      	bne.n	800c816 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d103      	bne.n	800c7c6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7c4:	e013      	b.n	800c7ee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d007      	beq.n	800c7de <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f7fe fe82 	bl	800b4de <clmt_clust>
 800c7da:	6338      	str	r0, [r7, #48]	@ 0x30
 800c7dc:	e007      	b.n	800c7ee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	69db      	ldr	r3, [r3, #28]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7fe fbeb 	bl	800afc2 <get_fat>
 800c7ec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d804      	bhi.n	800c7fe <f_read+0xe2>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	755a      	strb	r2, [r3, #21]
 800c7fa:	2302      	movs	r3, #2
 800c7fc:	e0c9      	b.n	800c992 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c804:	d104      	bne.n	800c810 <f_read+0xf4>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2201      	movs	r2, #1
 800c80a:	755a      	strb	r2, [r3, #21]
 800c80c:	2301      	movs	r3, #1
 800c80e:	e0c0      	b.n	800c992 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c814:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	4619      	mov	r1, r3
 800c81e:	4610      	mov	r0, r2
 800c820:	f7fe fbb0 	bl	800af84 <clust2sect>
 800c824:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d104      	bne.n	800c836 <f_read+0x11a>
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2202      	movs	r2, #2
 800c830:	755a      	strb	r2, [r3, #21]
 800c832:	2302      	movs	r3, #2
 800c834:	e0ad      	b.n	800c992 <f_read+0x276>
			sect += csect;
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	4413      	add	r3, r2
 800c83c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	0a5b      	lsrs	r3, r3, #9
 800c842:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c846:	2b00      	cmp	r3, #0
 800c848:	d039      	beq.n	800c8be <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84e:	4413      	add	r3, r2
 800c850:	697a      	ldr	r2, [r7, #20]
 800c852:	8952      	ldrh	r2, [r2, #10]
 800c854:	4293      	cmp	r3, r2
 800c856:	d905      	bls.n	800c864 <f_read+0x148>
					cc = fs->csize - csect;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	895b      	ldrh	r3, [r3, #10]
 800c85c:	461a      	mov	r2, r3
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	7858      	ldrb	r0, [r3, #1]
 800c868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86a:	69ba      	ldr	r2, [r7, #24]
 800c86c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c86e:	f7fd ffdf 	bl	800a830 <disk_read>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d004      	beq.n	800c882 <f_read+0x166>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2201      	movs	r2, #1
 800c87c:	755a      	strb	r2, [r3, #21]
 800c87e:	2301      	movs	r3, #1
 800c880:	e087      	b.n	800c992 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	7d1b      	ldrb	r3, [r3, #20]
 800c886:	b25b      	sxtb	r3, r3
 800c888:	2b00      	cmp	r3, #0
 800c88a:	da14      	bge.n	800c8b6 <f_read+0x19a>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6a1a      	ldr	r2, [r3, #32]
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c896:	429a      	cmp	r2, r3
 800c898:	d90d      	bls.n	800c8b6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6a1a      	ldr	r2, [r3, #32]
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	025b      	lsls	r3, r3, #9
 800c8a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8a6:	18d0      	adds	r0, r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3330      	adds	r3, #48	@ 0x30
 800c8ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	f7fe f89d 	bl	800a9f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b8:	025b      	lsls	r3, r3, #9
 800c8ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c8bc:	e050      	b.n	800c960 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d02e      	beq.n	800c926 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	7d1b      	ldrb	r3, [r3, #20]
 800c8cc:	b25b      	sxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	da18      	bge.n	800c904 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	7858      	ldrb	r0, [r3, #1]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6a1a      	ldr	r2, [r3, #32]
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f7fd ffc5 	bl	800a870 <disk_write>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <f_read+0x1da>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	755a      	strb	r2, [r3, #21]
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e04d      	b.n	800c992 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	7d1b      	ldrb	r3, [r3, #20]
 800c8fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	7858      	ldrb	r0, [r3, #1]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c90e:	2301      	movs	r3, #1
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	f7fd ff8d 	bl	800a830 <disk_read>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d004      	beq.n	800c926 <f_read+0x20a>
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2201      	movs	r2, #1
 800c920:	755a      	strb	r2, [r3, #21]
 800c922:	2301      	movs	r3, #1
 800c924:	e035      	b.n	800c992 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	699b      	ldr	r3, [r3, #24]
 800c930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c934:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c938:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d901      	bls.n	800c946 <f_read+0x22a>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	699b      	ldr	r3, [r3, #24]
 800c950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c954:	4413      	add	r3, r2
 800c956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c958:	4619      	mov	r1, r3
 800c95a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c95c:	f7fe f848 	bl	800a9f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	4413      	add	r3, r2
 800c966:	627b      	str	r3, [r7, #36]	@ 0x24
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	699a      	ldr	r2, [r3, #24]
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	441a      	add	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	619a      	str	r2, [r3, #24]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97a:	441a      	add	r2, r3
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f47f af01 	bne.w	800c792 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3738      	adds	r7, #56	@ 0x38
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b08c      	sub	sp, #48	@ 0x30
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	607a      	str	r2, [r7, #4]
 800c9a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f107 0210 	add.w	r2, r7, #16
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f7ff fc78 	bl	800c2b0 <validate>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c9c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d107      	bne.n	800c9de <f_write+0x44>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	7d5b      	ldrb	r3, [r3, #21]
 800c9d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <f_write+0x4a>
 800c9de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c9e2:	e14b      	b.n	800cc7c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	7d1b      	ldrb	r3, [r3, #20]
 800c9e8:	f003 0302 	and.w	r3, r3, #2
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <f_write+0x5a>
 800c9f0:	2307      	movs	r3, #7
 800c9f2:	e143      	b.n	800cc7c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	699a      	ldr	r2, [r3, #24]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	441a      	add	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	f080 812d 	bcs.w	800cc60 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	43db      	mvns	r3, r3
 800ca0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ca0e:	e127      	b.n	800cc60 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f040 80e3 	bne.w	800cbe4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	0a5b      	lsrs	r3, r3, #9
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	8952      	ldrh	r2, [r2, #10]
 800ca28:	3a01      	subs	r2, #1
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d143      	bne.n	800cabc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	699b      	ldr	r3, [r3, #24]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d10c      	bne.n	800ca56 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ca42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d11a      	bne.n	800ca7e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fe fcae 	bl	800b3ae <create_chain>
 800ca52:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ca54:	e013      	b.n	800ca7e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d007      	beq.n	800ca6e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	4619      	mov	r1, r3
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7fe fd3a 	bl	800b4de <clmt_clust>
 800ca6a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ca6c:	e007      	b.n	800ca7e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	4619      	mov	r1, r3
 800ca76:	4610      	mov	r0, r2
 800ca78:	f7fe fc99 	bl	800b3ae <create_chain>
 800ca7c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 80f2 	beq.w	800cc6a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d104      	bne.n	800ca96 <f_write+0xfc>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	755a      	strb	r2, [r3, #21]
 800ca92:	2302      	movs	r3, #2
 800ca94:	e0f2      	b.n	800cc7c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9c:	d104      	bne.n	800caa8 <f_write+0x10e>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2201      	movs	r2, #1
 800caa2:	755a      	strb	r2, [r3, #21]
 800caa4:	2301      	movs	r3, #1
 800caa6:	e0e9      	b.n	800cc7c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800caac:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d102      	bne.n	800cabc <f_write+0x122>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800caba:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	7d1b      	ldrb	r3, [r3, #20]
 800cac0:	b25b      	sxtb	r3, r3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	da18      	bge.n	800caf8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	7858      	ldrb	r0, [r3, #1]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6a1a      	ldr	r2, [r3, #32]
 800cad4:	2301      	movs	r3, #1
 800cad6:	f7fd fecb 	bl	800a870 <disk_write>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d004      	beq.n	800caea <f_write+0x150>
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2201      	movs	r2, #1
 800cae4:	755a      	strb	r2, [r3, #21]
 800cae6:	2301      	movs	r3, #1
 800cae8:	e0c8      	b.n	800cc7c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	7d1b      	ldrb	r3, [r3, #20]
 800caee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800caf8:	693a      	ldr	r2, [r7, #16]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	f7fe fa3f 	bl	800af84 <clust2sect>
 800cb06:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d104      	bne.n	800cb18 <f_write+0x17e>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2202      	movs	r2, #2
 800cb12:	755a      	strb	r2, [r3, #21]
 800cb14:	2302      	movs	r3, #2
 800cb16:	e0b1      	b.n	800cc7c <f_write+0x2e2>
			sect += csect;
 800cb18:	697a      	ldr	r2, [r7, #20]
 800cb1a:	69bb      	ldr	r3, [r7, #24]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	0a5b      	lsrs	r3, r3, #9
 800cb24:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cb26:	6a3b      	ldr	r3, [r7, #32]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d03c      	beq.n	800cba6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	4413      	add	r3, r2
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	8952      	ldrh	r2, [r2, #10]
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d905      	bls.n	800cb46 <f_write+0x1ac>
					cc = fs->csize - csect;
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	895b      	ldrh	r3, [r3, #10]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	7858      	ldrb	r0, [r3, #1]
 800cb4a:	6a3b      	ldr	r3, [r7, #32]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	69f9      	ldr	r1, [r7, #28]
 800cb50:	f7fd fe8e 	bl	800a870 <disk_write>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d004      	beq.n	800cb64 <f_write+0x1ca>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	755a      	strb	r2, [r3, #21]
 800cb60:	2301      	movs	r3, #1
 800cb62:	e08b      	b.n	800cc7c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	6a1a      	ldr	r2, [r3, #32]
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	6a3a      	ldr	r2, [r7, #32]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d915      	bls.n	800cb9e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6a1a      	ldr	r2, [r3, #32]
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	025b      	lsls	r3, r3, #9
 800cb82:	69fa      	ldr	r2, [r7, #28]
 800cb84:	4413      	add	r3, r2
 800cb86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	f7fd ff30 	bl	800a9f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	7d1b      	ldrb	r3, [r3, #20]
 800cb94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	025b      	lsls	r3, r3, #9
 800cba2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cba4:	e03f      	b.n	800cc26 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d016      	beq.n	800cbde <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	699a      	ldr	r2, [r3, #24]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d210      	bcs.n	800cbde <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	7858      	ldrb	r0, [r3, #1]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	f7fd fe31 	bl	800a830 <disk_read>
 800cbce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	755a      	strb	r2, [r3, #21]
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e04e      	b.n	800cc7c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	697a      	ldr	r2, [r7, #20]
 800cbe2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cbf0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cbf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d901      	bls.n	800cbfe <f_write+0x264>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	699b      	ldr	r3, [r3, #24]
 800cc08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc0c:	4413      	add	r3, r2
 800cc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc10:	69f9      	ldr	r1, [r7, #28]
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7fd feec 	bl	800a9f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	7d1b      	ldrb	r3, [r3, #20]
 800cc1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2a:	4413      	add	r3, r2
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	699a      	ldr	r2, [r3, #24]
 800cc32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc34:	441a      	add	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	619a      	str	r2, [r3, #24]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	68da      	ldr	r2, [r3, #12]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	699b      	ldr	r3, [r3, #24]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	bf38      	it	cc
 800cc46:	461a      	movcc	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	60da      	str	r2, [r3, #12]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc52:	441a      	add	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	601a      	str	r2, [r3, #0]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f47f aed4 	bne.w	800ca10 <f_write+0x76>
 800cc68:	e000      	b.n	800cc6c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc6a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	7d1b      	ldrb	r3, [r3, #20]
 800cc70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3730      	adds	r7, #48	@ 0x30
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f107 0208 	add.w	r2, r7, #8
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fb0b 	bl	800c2b0 <validate>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d168      	bne.n	800cd76 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	7d1b      	ldrb	r3, [r3, #20]
 800cca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d062      	beq.n	800cd76 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	7d1b      	ldrb	r3, [r3, #20]
 800ccb4:	b25b      	sxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	da15      	bge.n	800cce6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	7858      	ldrb	r0, [r3, #1]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a1a      	ldr	r2, [r3, #32]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f7fd fdd1 	bl	800a870 <disk_write>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <f_sync+0x54>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e04f      	b.n	800cd78 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	7d1b      	ldrb	r3, [r3, #20]
 800ccdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cce6:	f7fd fbf5 	bl	800a4d4 <get_fattime>
 800ccea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	f7fe f8a9 	bl	800ae4c <move_window>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d138      	bne.n	800cd76 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd08:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	330b      	adds	r3, #11
 800cd0e:	781a      	ldrb	r2, [r3, #0]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	330b      	adds	r3, #11
 800cd14:	f042 0220 	orr.w	r2, r2, #32
 800cd18:	b2d2      	uxtb	r2, r2
 800cd1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6818      	ldr	r0, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	461a      	mov	r2, r3
 800cd26:	68f9      	ldr	r1, [r7, #12]
 800cd28:	f7fe fdb3 	bl	800b892 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f103 021c 	add.w	r2, r3, #28
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	4619      	mov	r1, r3
 800cd38:	4610      	mov	r0, r2
 800cd3a:	f7fd fe2d 	bl	800a998 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3316      	adds	r3, #22
 800cd42:	6939      	ldr	r1, [r7, #16]
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fd fe27 	bl	800a998 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3312      	adds	r3, #18
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fd fe06 	bl	800a962 <st_word>
					fs->wflag = 1;
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe f8a2 	bl	800aea8 <sync_fs>
 800cd64:	4603      	mov	r3, r0
 800cd66:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7d1b      	ldrb	r3, [r3, #20]
 800cd6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3718      	adds	r7, #24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff ff7b 	bl	800cc84 <f_sync>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d118      	bne.n	800cdca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f107 0208 	add.w	r2, r7, #8
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7ff fa85 	bl	800c2b0 <validate>
 800cda6:	4603      	mov	r3, r0
 800cda8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d10c      	bne.n	800cdca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	691b      	ldr	r3, [r3, #16]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fd ffa5 	bl	800ad04 <dec_lock>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d102      	bne.n	800cdca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b090      	sub	sp, #64	@ 0x40
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f107 0208 	add.w	r2, r7, #8
 800cde4:	4611      	mov	r1, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fa62 	bl	800c2b0 <validate>
 800cdec:	4603      	mov	r3, r0
 800cdee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cdf2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d103      	bne.n	800ce02 <f_lseek+0x2e>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7d5b      	ldrb	r3, [r3, #21]
 800cdfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ce02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <f_lseek+0x3c>
 800ce0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ce0e:	e1e6      	b.n	800d1de <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 80d1 	beq.w	800cfbc <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce20:	d15a      	bne.n	800ced8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce26:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	1d1a      	adds	r2, r3, #4
 800ce2c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	617b      	str	r3, [r7, #20]
 800ce32:	2302      	movs	r3, #2
 800ce34:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d03a      	beq.n	800ceb8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ce42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce44:	613b      	str	r3, [r7, #16]
 800ce46:	2300      	movs	r3, #0
 800ce48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4c:	3302      	adds	r3, #2
 800ce4e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ce50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	3301      	adds	r3, #1
 800ce58:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe f8af 	bl	800afc2 <get_fat>
 800ce64:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d804      	bhi.n	800ce76 <f_lseek+0xa2>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2202      	movs	r2, #2
 800ce70:	755a      	strb	r2, [r3, #21]
 800ce72:	2302      	movs	r3, #2
 800ce74:	e1b3      	b.n	800d1de <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7c:	d104      	bne.n	800ce88 <f_lseek+0xb4>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	755a      	strb	r2, [r3, #21]
 800ce84:	2301      	movs	r3, #1
 800ce86:	e1aa      	b.n	800d1de <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d0de      	beq.n	800ce50 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d809      	bhi.n	800ceae <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	1d1a      	adds	r2, r3, #4
 800ce9e:	627a      	str	r2, [r7, #36]	@ 0x24
 800cea0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea6:	1d1a      	adds	r2, r3, #4
 800cea8:	627a      	str	r2, [r7, #36]	@ 0x24
 800ceaa:	693a      	ldr	r2, [r7, #16]
 800ceac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d3c4      	bcc.n	800ce42 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cebe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d803      	bhi.n	800ced0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	e184      	b.n	800d1da <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ced0:	2311      	movs	r3, #17
 800ced2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ced6:	e180      	b.n	800d1da <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	683a      	ldr	r2, [r7, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d902      	bls.n	800cee8 <f_lseek+0x114>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68db      	ldr	r3, [r3, #12]
 800cee6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	683a      	ldr	r2, [r7, #0]
 800ceec:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 8172 	beq.w	800d1da <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f7fe faee 	bl	800b4de <clmt_clust>
 800cf02:	4602      	mov	r2, r0
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fe f837 	bl	800af84 <clust2sect>
 800cf16:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d104      	bne.n	800cf28 <f_lseek+0x154>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2202      	movs	r2, #2
 800cf22:	755a      	strb	r2, [r3, #21]
 800cf24:	2302      	movs	r3, #2
 800cf26:	e15a      	b.n	800d1de <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	0a5b      	lsrs	r3, r3, #9
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	8952      	ldrh	r2, [r2, #10]
 800cf32:	3a01      	subs	r2, #1
 800cf34:	4013      	ands	r3, r2
 800cf36:	69ba      	ldr	r2, [r7, #24]
 800cf38:	4413      	add	r3, r2
 800cf3a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	699b      	ldr	r3, [r3, #24]
 800cf40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 8148 	beq.w	800d1da <f_lseek+0x406>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	69ba      	ldr	r2, [r7, #24]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	f000 8142 	beq.w	800d1da <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	7d1b      	ldrb	r3, [r3, #20]
 800cf5a:	b25b      	sxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	da18      	bge.n	800cf92 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	7858      	ldrb	r0, [r3, #1]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1a      	ldr	r2, [r3, #32]
 800cf6e:	2301      	movs	r3, #1
 800cf70:	f7fd fc7e 	bl	800a870 <disk_write>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d004      	beq.n	800cf84 <f_lseek+0x1b0>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	755a      	strb	r2, [r3, #21]
 800cf80:	2301      	movs	r3, #1
 800cf82:	e12c      	b.n	800d1de <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	7d1b      	ldrb	r3, [r3, #20]
 800cf88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf8c:	b2da      	uxtb	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	7858      	ldrb	r0, [r3, #1]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	69ba      	ldr	r2, [r7, #24]
 800cfa0:	f7fd fc46 	bl	800a830 <disk_read>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d004      	beq.n	800cfb4 <f_lseek+0x1e0>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2201      	movs	r2, #1
 800cfae:	755a      	strb	r2, [r3, #21]
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e114      	b.n	800d1de <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	69ba      	ldr	r2, [r7, #24]
 800cfb8:	621a      	str	r2, [r3, #32]
 800cfba:	e10e      	b.n	800d1da <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d908      	bls.n	800cfd8 <f_lseek+0x204>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	7d1b      	ldrb	r3, [r3, #20]
 800cfca:	f003 0302 	and.w	r3, r3, #2
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d102      	bne.n	800cfd8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	699b      	ldr	r3, [r3, #24]
 800cfdc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfe6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 80a7 	beq.w	800d13e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	895b      	ldrh	r3, [r3, #10]
 800cff4:	025b      	lsls	r3, r3, #9
 800cff6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cff8:	6a3b      	ldr	r3, [r7, #32]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d01b      	beq.n	800d036 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	1e5a      	subs	r2, r3, #1
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	fbb2 f2f3 	udiv	r2, r2, r3
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	1e59      	subs	r1, r3, #1
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d012:	429a      	cmp	r2, r3
 800d014:	d30f      	bcc.n	800d036 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	1e5a      	subs	r2, r3, #1
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	425b      	negs	r3, r3
 800d01e:	401a      	ands	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	1ad3      	subs	r3, r2, r3
 800d02c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	69db      	ldr	r3, [r3, #28]
 800d032:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d034:	e022      	b.n	800d07c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d119      	bne.n	800d076 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2100      	movs	r1, #0
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe f9b1 	bl	800b3ae <create_chain>
 800d04c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d050:	2b01      	cmp	r3, #1
 800d052:	d104      	bne.n	800d05e <f_lseek+0x28a>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2202      	movs	r2, #2
 800d058:	755a      	strb	r2, [r3, #21]
 800d05a:	2302      	movs	r3, #2
 800d05c:	e0bf      	b.n	800d1de <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d064:	d104      	bne.n	800d070 <f_lseek+0x29c>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	755a      	strb	r2, [r3, #21]
 800d06c:	2301      	movs	r3, #1
 800d06e:	e0b6      	b.n	800d1de <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d074:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d07a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d05d      	beq.n	800d13e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d082:	e03a      	b.n	800d0fa <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	603b      	str	r3, [r7, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	699a      	ldr	r2, [r3, #24]
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	441a      	add	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7d1b      	ldrb	r3, [r3, #20]
 800d09c:	f003 0302 	and.w	r3, r3, #2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d00b      	beq.n	800d0bc <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe f980 	bl	800b3ae <create_chain>
 800d0ae:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d108      	bne.n	800d0c8 <f_lseek+0x2f4>
							ofs = 0; break;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	603b      	str	r3, [r7, #0]
 800d0ba:	e022      	b.n	800d102 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fd ff7e 	bl	800afc2 <get_fat>
 800d0c6:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ce:	d104      	bne.n	800d0da <f_lseek+0x306>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	755a      	strb	r2, [r3, #21]
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e081      	b.n	800d1de <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d904      	bls.n	800d0ea <f_lseek+0x316>
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d304      	bcc.n	800d0f4 <f_lseek+0x320>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2202      	movs	r2, #2
 800d0ee:	755a      	strb	r2, [r3, #21]
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	e074      	b.n	800d1de <f_lseek+0x40a>
					fp->clust = clst;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0f8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d8c0      	bhi.n	800d084 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	699a      	ldr	r2, [r3, #24]
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	441a      	add	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d114:	2b00      	cmp	r3, #0
 800d116:	d012      	beq.n	800d13e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7fd ff31 	bl	800af84 <clust2sect>
 800d122:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d126:	2b00      	cmp	r3, #0
 800d128:	d104      	bne.n	800d134 <f_lseek+0x360>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2202      	movs	r2, #2
 800d12e:	755a      	strb	r2, [r3, #21]
 800d130:	2302      	movs	r3, #2
 800d132:	e054      	b.n	800d1de <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	0a5b      	lsrs	r3, r3, #9
 800d138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d13a:	4413      	add	r3, r2
 800d13c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	699a      	ldr	r2, [r3, #24]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	429a      	cmp	r2, r3
 800d148:	d90a      	bls.n	800d160 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	699a      	ldr	r2, [r3, #24]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	7d1b      	ldrb	r3, [r3, #20]
 800d156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	699b      	ldr	r3, [r3, #24]
 800d164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d036      	beq.n	800d1da <f_lseek+0x406>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6a1b      	ldr	r3, [r3, #32]
 800d170:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d172:	429a      	cmp	r2, r3
 800d174:	d031      	beq.n	800d1da <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	7d1b      	ldrb	r3, [r3, #20]
 800d17a:	b25b      	sxtb	r3, r3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	da18      	bge.n	800d1b2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	7858      	ldrb	r0, [r3, #1]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1a      	ldr	r2, [r3, #32]
 800d18e:	2301      	movs	r3, #1
 800d190:	f7fd fb6e 	bl	800a870 <disk_write>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d004      	beq.n	800d1a4 <f_lseek+0x3d0>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	755a      	strb	r2, [r3, #21]
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e01c      	b.n	800d1de <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	7d1b      	ldrb	r3, [r3, #20]
 800d1a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1ac:	b2da      	uxtb	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	7858      	ldrb	r0, [r3, #1]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1bc:	2301      	movs	r3, #1
 800d1be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1c0:	f7fd fb36 	bl	800a830 <disk_read>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d004      	beq.n	800d1d4 <f_lseek+0x400>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	755a      	strb	r2, [r3, #21]
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e004      	b.n	800d1de <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1d8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d1da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3740      	adds	r7, #64	@ 0x40
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}

0800d1e6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b09e      	sub	sp, #120	@ 0x78
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d1f2:	f107 010c 	add.w	r1, r7, #12
 800d1f6:	1d3b      	adds	r3, r7, #4
 800d1f8:	2202      	movs	r2, #2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fe0c 	bl	800be18 <find_volume>
 800d200:	4603      	mov	r3, r0
 800d202:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800d20a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f040 808e 	bne.w	800d330 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d21a:	4611      	mov	r1, r2
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fcef 	bl	800bc00 <follow_path>
 800d222:	4603      	mov	r3, r0
 800d224:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800d228:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d108      	bne.n	800d242 <f_unlink+0x5c>
 800d230:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d234:	2102      	movs	r1, #2
 800d236:	4618      	mov	r0, r3
 800d238:	f7fd fc58 	bl	800aaec <chk_lock>
 800d23c:	4603      	mov	r3, r0
 800d23e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800d242:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d246:	2b00      	cmp	r3, #0
 800d248:	d172      	bne.n	800d330 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d24a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d24e:	b25b      	sxtb	r3, r3
 800d250:	2b00      	cmp	r3, #0
 800d252:	da03      	bge.n	800d25c <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800d254:	2306      	movs	r3, #6
 800d256:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800d25a:	e008      	b.n	800d26e <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800d25c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800d260:	f003 0301 	and.w	r3, r3, #1
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800d268:	2307      	movs	r3, #7
 800d26a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800d26e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d272:	2b00      	cmp	r3, #0
 800d274:	d134      	bne.n	800d2e0 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d27a:	4611      	mov	r1, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe fae9 	bl	800b854 <ld_clust>
 800d282:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800d284:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800d288:	f003 0310 	and.w	r3, r3, #16
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d027      	beq.n	800d2e0 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800d294:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d296:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800d298:	f107 0310 	add.w	r3, r7, #16
 800d29c:	2100      	movs	r1, #0
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7fe f951 	bl	800b546 <dir_sdi>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800d2aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d116      	bne.n	800d2e0 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800d2b2:	f107 0310 	add.w	r3, r7, #16
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fb0a 	bl	800b8d2 <dir_read>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800d2c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d102      	bne.n	800d2d2 <f_unlink+0xec>
 800d2cc:	2307      	movs	r3, #7
 800d2ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d2d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	d102      	bne.n	800d2e0 <f_unlink+0xfa>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800d2e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d123      	bne.n	800d330 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d2e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe fbd4 	bl	800ba9a <dir_remove>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d2f8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10c      	bne.n	800d31a <f_unlink+0x134>
 800d300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d302:	2b00      	cmp	r3, #0
 800d304:	d009      	beq.n	800d31a <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d306:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d30a:	2200      	movs	r2, #0
 800d30c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fd ffe8 	bl	800b2e4 <remove_chain>
 800d314:	4603      	mov	r3, r0
 800d316:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d31a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <f_unlink+0x14a>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	4618      	mov	r0, r3
 800d326:	f7fd fdbf 	bl	800aea8 <sync_fs>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d330:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800d334:	4618      	mov	r0, r3
 800d336:	3778      	adds	r7, #120	@ 0x78
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b0a5      	sub	sp, #148	@ 0x94
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800d346:	463b      	mov	r3, r7
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe fcca 	bl	800bce2 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800d34e:	f107 0120 	add.w	r1, r7, #32
 800d352:	1d3b      	adds	r3, r7, #4
 800d354:	2202      	movs	r2, #2
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe fd5e 	bl	800be18 <find_volume>
 800d35c:	4603      	mov	r3, r0
 800d35e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800d362:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 80db 	bne.w	800d522 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d376:	4611      	mov	r1, r2
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fe fc41 	bl	800bc00 <follow_path>
 800d37e:	4603      	mov	r3, r0
 800d380:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800d384:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d108      	bne.n	800d39e <f_rename+0x62>
 800d38c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d390:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <f_rename+0x62>
 800d398:	2306      	movs	r3, #6
 800d39a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800d39e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d108      	bne.n	800d3b8 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800d3a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d3aa:	2102      	movs	r1, #2
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fd fb9d 	bl	800aaec <chk_lock>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800d3b8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f040 80b0 	bne.w	800d522 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800d3c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3c4:	f103 010b 	add.w	r1, r3, #11
 800d3c8:	f107 0308 	add.w	r3, r7, #8
 800d3cc:	2215      	movs	r2, #21
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fd fb0e 	bl	800a9f0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800d3d4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800d3d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3dc:	2230      	movs	r2, #48	@ 0x30
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fd fb06 	bl	800a9f0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800d3e4:	683a      	ldr	r2, [r7, #0]
 800d3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fc07 	bl	800bc00 <follow_path>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800d3f8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10c      	bne.n	800d41a <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800d400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d404:	429a      	cmp	r2, r3
 800d406:	d105      	bne.n	800d414 <f_rename+0xd8>
 800d408:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d40a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d101      	bne.n	800d414 <f_rename+0xd8>
 800d410:	2304      	movs	r3, #4
 800d412:	e000      	b.n	800d416 <f_rename+0xda>
 800d414:	2308      	movs	r3, #8
 800d416:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800d41a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d41e:	2b04      	cmp	r3, #4
 800d420:	d168      	bne.n	800d4f4 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800d422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fb05 	bl	800ba36 <dir_register>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800d432:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d436:	2b00      	cmp	r3, #0
 800d438:	d15c      	bne.n	800d4f4 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800d43a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d43c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800d440:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d444:	f103 000d 	add.w	r0, r3, #13
 800d448:	f107 0308 	add.w	r3, r7, #8
 800d44c:	3302      	adds	r3, #2
 800d44e:	2213      	movs	r2, #19
 800d450:	4619      	mov	r1, r3
 800d452:	f7fd facd 	bl	800a9f0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800d456:	7a3a      	ldrb	r2, [r7, #8]
 800d458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d45c:	330b      	adds	r3, #11
 800d45e:	f042 0220 	orr.w	r2, r2, #32
 800d462:	b2d2      	uxtb	r2, r2
 800d464:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	2201      	movs	r2, #1
 800d46a:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800d46c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d470:	330b      	adds	r3, #11
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	f003 0310 	and.w	r3, r3, #16
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d03b      	beq.n	800d4f4 <f_rename+0x1b8>
 800d47c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d480:	429a      	cmp	r2, r3
 800d482:	d037      	beq.n	800d4f4 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800d484:	6a3c      	ldr	r4, [r7, #32]
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7fe f9e1 	bl	800b854 <ld_clust>
 800d492:	4603      	mov	r3, r0
 800d494:	4619      	mov	r1, r3
 800d496:	4620      	mov	r0, r4
 800d498:	f7fd fd74 	bl	800af84 <clust2sect>
 800d49c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800d4a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d103      	bne.n	800d4b0 <f_rename+0x174>
								res = FR_INT_ERR;
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800d4ae:	e021      	b.n	800d4f4 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800d4b0:	6a3b      	ldr	r3, [r7, #32]
 800d4b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fd fcc8 	bl	800ae4c <move_window>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	3330      	adds	r3, #48	@ 0x30
 800d4c6:	3320      	adds	r3, #32
 800d4c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800d4cc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d10f      	bne.n	800d4f4 <f_rename+0x1b8>
 800d4d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d4d8:	3301      	adds	r3, #1
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4de:	d109      	bne.n	800d4f4 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4e4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fe f9d2 	bl	800b892 <st_clust>
									fs->wflag = 1;
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800d4f4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d112      	bne.n	800d522 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800d4fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe faca 	bl	800ba9a <dir_remove>
 800d506:	4603      	mov	r3, r0
 800d508:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800d50c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d510:	2b00      	cmp	r3, #0
 800d512:	d106      	bne.n	800d522 <f_rename+0x1e6>
					res = sync_fs(fs);
 800d514:	6a3b      	ldr	r3, [r7, #32]
 800d516:	4618      	mov	r0, r3
 800d518:	f7fd fcc6 	bl	800aea8 <sync_fs>
 800d51c:	4603      	mov	r3, r0
 800d51e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d522:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800d526:	4618      	mov	r0, r3
 800d528:	3794      	adds	r7, #148	@ 0x94
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd90      	pop	{r4, r7, pc}
	...

0800d530 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d530:	b480      	push	{r7}
 800d532:	b087      	sub	sp, #28
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	4613      	mov	r3, r2
 800d53c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d53e:	2301      	movs	r3, #1
 800d540:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d542:	2300      	movs	r3, #0
 800d544:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d546:	4b1f      	ldr	r3, [pc, #124]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d548:	7a5b      	ldrb	r3, [r3, #9]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d131      	bne.n	800d5b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d550:	4b1c      	ldr	r3, [pc, #112]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d552:	7a5b      	ldrb	r3, [r3, #9]
 800d554:	b2db      	uxtb	r3, r3
 800d556:	461a      	mov	r2, r3
 800d558:	4b1a      	ldr	r3, [pc, #104]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d55a:	2100      	movs	r1, #0
 800d55c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d55e:	4b19      	ldr	r3, [pc, #100]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d560:	7a5b      	ldrb	r3, [r3, #9]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	4a17      	ldr	r2, [pc, #92]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4413      	add	r3, r2
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d56e:	4b15      	ldr	r3, [pc, #84]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d570:	7a5b      	ldrb	r3, [r3, #9]
 800d572:	b2db      	uxtb	r3, r3
 800d574:	461a      	mov	r2, r3
 800d576:	4b13      	ldr	r3, [pc, #76]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d578:	4413      	add	r3, r2
 800d57a:	79fa      	ldrb	r2, [r7, #7]
 800d57c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d57e:	4b11      	ldr	r3, [pc, #68]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d580:	7a5b      	ldrb	r3, [r3, #9]
 800d582:	b2db      	uxtb	r3, r3
 800d584:	1c5a      	adds	r2, r3, #1
 800d586:	b2d1      	uxtb	r1, r2
 800d588:	4a0e      	ldr	r2, [pc, #56]	@ (800d5c4 <FATFS_LinkDriverEx+0x94>)
 800d58a:	7251      	strb	r1, [r2, #9]
 800d58c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d58e:	7dbb      	ldrb	r3, [r7, #22]
 800d590:	3330      	adds	r3, #48	@ 0x30
 800d592:	b2da      	uxtb	r2, r3
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3301      	adds	r3, #1
 800d59c:	223a      	movs	r2, #58	@ 0x3a
 800d59e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	3302      	adds	r3, #2
 800d5a4:	222f      	movs	r2, #47	@ 0x2f
 800d5a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	3303      	adds	r3, #3
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	371c      	adds	r7, #28
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	200005d0 	.word	0x200005d0

0800d5c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7ff ffaa 	bl	800d530 <FATFS_LinkDriverEx>
 800d5dc:	4603      	mov	r3, r0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
	...

0800d5e8 <malloc>:
 800d5e8:	4b02      	ldr	r3, [pc, #8]	@ (800d5f4 <malloc+0xc>)
 800d5ea:	4601      	mov	r1, r0
 800d5ec:	6818      	ldr	r0, [r3, #0]
 800d5ee:	f000 b82d 	b.w	800d64c <_malloc_r>
 800d5f2:	bf00      	nop
 800d5f4:	20000018 	.word	0x20000018

0800d5f8 <free>:
 800d5f8:	4b02      	ldr	r3, [pc, #8]	@ (800d604 <free+0xc>)
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	6818      	ldr	r0, [r3, #0]
 800d5fe:	f000 b949 	b.w	800d894 <_free_r>
 800d602:	bf00      	nop
 800d604:	20000018 	.word	0x20000018

0800d608 <sbrk_aligned>:
 800d608:	b570      	push	{r4, r5, r6, lr}
 800d60a:	4e0f      	ldr	r6, [pc, #60]	@ (800d648 <sbrk_aligned+0x40>)
 800d60c:	460c      	mov	r4, r1
 800d60e:	6831      	ldr	r1, [r6, #0]
 800d610:	4605      	mov	r5, r0
 800d612:	b911      	cbnz	r1, 800d61a <sbrk_aligned+0x12>
 800d614:	f000 f8f4 	bl	800d800 <_sbrk_r>
 800d618:	6030      	str	r0, [r6, #0]
 800d61a:	4621      	mov	r1, r4
 800d61c:	4628      	mov	r0, r5
 800d61e:	f000 f8ef 	bl	800d800 <_sbrk_r>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	d103      	bne.n	800d62e <sbrk_aligned+0x26>
 800d626:	f04f 34ff 	mov.w	r4, #4294967295
 800d62a:	4620      	mov	r0, r4
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	1cc4      	adds	r4, r0, #3
 800d630:	f024 0403 	bic.w	r4, r4, #3
 800d634:	42a0      	cmp	r0, r4
 800d636:	d0f8      	beq.n	800d62a <sbrk_aligned+0x22>
 800d638:	1a21      	subs	r1, r4, r0
 800d63a:	4628      	mov	r0, r5
 800d63c:	f000 f8e0 	bl	800d800 <_sbrk_r>
 800d640:	3001      	adds	r0, #1
 800d642:	d1f2      	bne.n	800d62a <sbrk_aligned+0x22>
 800d644:	e7ef      	b.n	800d626 <sbrk_aligned+0x1e>
 800d646:	bf00      	nop
 800d648:	200005dc 	.word	0x200005dc

0800d64c <_malloc_r>:
 800d64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d650:	1ccd      	adds	r5, r1, #3
 800d652:	f025 0503 	bic.w	r5, r5, #3
 800d656:	3508      	adds	r5, #8
 800d658:	2d0c      	cmp	r5, #12
 800d65a:	bf38      	it	cc
 800d65c:	250c      	movcc	r5, #12
 800d65e:	2d00      	cmp	r5, #0
 800d660:	4606      	mov	r6, r0
 800d662:	db01      	blt.n	800d668 <_malloc_r+0x1c>
 800d664:	42a9      	cmp	r1, r5
 800d666:	d904      	bls.n	800d672 <_malloc_r+0x26>
 800d668:	230c      	movs	r3, #12
 800d66a:	6033      	str	r3, [r6, #0]
 800d66c:	2000      	movs	r0, #0
 800d66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d748 <_malloc_r+0xfc>
 800d676:	f000 f869 	bl	800d74c <__malloc_lock>
 800d67a:	f8d8 3000 	ldr.w	r3, [r8]
 800d67e:	461c      	mov	r4, r3
 800d680:	bb44      	cbnz	r4, 800d6d4 <_malloc_r+0x88>
 800d682:	4629      	mov	r1, r5
 800d684:	4630      	mov	r0, r6
 800d686:	f7ff ffbf 	bl	800d608 <sbrk_aligned>
 800d68a:	1c43      	adds	r3, r0, #1
 800d68c:	4604      	mov	r4, r0
 800d68e:	d158      	bne.n	800d742 <_malloc_r+0xf6>
 800d690:	f8d8 4000 	ldr.w	r4, [r8]
 800d694:	4627      	mov	r7, r4
 800d696:	2f00      	cmp	r7, #0
 800d698:	d143      	bne.n	800d722 <_malloc_r+0xd6>
 800d69a:	2c00      	cmp	r4, #0
 800d69c:	d04b      	beq.n	800d736 <_malloc_r+0xea>
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	4639      	mov	r1, r7
 800d6a2:	4630      	mov	r0, r6
 800d6a4:	eb04 0903 	add.w	r9, r4, r3
 800d6a8:	f000 f8aa 	bl	800d800 <_sbrk_r>
 800d6ac:	4581      	cmp	r9, r0
 800d6ae:	d142      	bne.n	800d736 <_malloc_r+0xea>
 800d6b0:	6821      	ldr	r1, [r4, #0]
 800d6b2:	1a6d      	subs	r5, r5, r1
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	f7ff ffa6 	bl	800d608 <sbrk_aligned>
 800d6bc:	3001      	adds	r0, #1
 800d6be:	d03a      	beq.n	800d736 <_malloc_r+0xea>
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	442b      	add	r3, r5
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	bb62      	cbnz	r2, 800d728 <_malloc_r+0xdc>
 800d6ce:	f8c8 7000 	str.w	r7, [r8]
 800d6d2:	e00f      	b.n	800d6f4 <_malloc_r+0xa8>
 800d6d4:	6822      	ldr	r2, [r4, #0]
 800d6d6:	1b52      	subs	r2, r2, r5
 800d6d8:	d420      	bmi.n	800d71c <_malloc_r+0xd0>
 800d6da:	2a0b      	cmp	r2, #11
 800d6dc:	d917      	bls.n	800d70e <_malloc_r+0xc2>
 800d6de:	1961      	adds	r1, r4, r5
 800d6e0:	42a3      	cmp	r3, r4
 800d6e2:	6025      	str	r5, [r4, #0]
 800d6e4:	bf18      	it	ne
 800d6e6:	6059      	strne	r1, [r3, #4]
 800d6e8:	6863      	ldr	r3, [r4, #4]
 800d6ea:	bf08      	it	eq
 800d6ec:	f8c8 1000 	streq.w	r1, [r8]
 800d6f0:	5162      	str	r2, [r4, r5]
 800d6f2:	604b      	str	r3, [r1, #4]
 800d6f4:	4630      	mov	r0, r6
 800d6f6:	f000 f82f 	bl	800d758 <__malloc_unlock>
 800d6fa:	f104 000b 	add.w	r0, r4, #11
 800d6fe:	1d23      	adds	r3, r4, #4
 800d700:	f020 0007 	bic.w	r0, r0, #7
 800d704:	1ac2      	subs	r2, r0, r3
 800d706:	bf1c      	itt	ne
 800d708:	1a1b      	subne	r3, r3, r0
 800d70a:	50a3      	strne	r3, [r4, r2]
 800d70c:	e7af      	b.n	800d66e <_malloc_r+0x22>
 800d70e:	6862      	ldr	r2, [r4, #4]
 800d710:	42a3      	cmp	r3, r4
 800d712:	bf0c      	ite	eq
 800d714:	f8c8 2000 	streq.w	r2, [r8]
 800d718:	605a      	strne	r2, [r3, #4]
 800d71a:	e7eb      	b.n	800d6f4 <_malloc_r+0xa8>
 800d71c:	4623      	mov	r3, r4
 800d71e:	6864      	ldr	r4, [r4, #4]
 800d720:	e7ae      	b.n	800d680 <_malloc_r+0x34>
 800d722:	463c      	mov	r4, r7
 800d724:	687f      	ldr	r7, [r7, #4]
 800d726:	e7b6      	b.n	800d696 <_malloc_r+0x4a>
 800d728:	461a      	mov	r2, r3
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	42a3      	cmp	r3, r4
 800d72e:	d1fb      	bne.n	800d728 <_malloc_r+0xdc>
 800d730:	2300      	movs	r3, #0
 800d732:	6053      	str	r3, [r2, #4]
 800d734:	e7de      	b.n	800d6f4 <_malloc_r+0xa8>
 800d736:	230c      	movs	r3, #12
 800d738:	6033      	str	r3, [r6, #0]
 800d73a:	4630      	mov	r0, r6
 800d73c:	f000 f80c 	bl	800d758 <__malloc_unlock>
 800d740:	e794      	b.n	800d66c <_malloc_r+0x20>
 800d742:	6005      	str	r5, [r0, #0]
 800d744:	e7d6      	b.n	800d6f4 <_malloc_r+0xa8>
 800d746:	bf00      	nop
 800d748:	200005e0 	.word	0x200005e0

0800d74c <__malloc_lock>:
 800d74c:	4801      	ldr	r0, [pc, #4]	@ (800d754 <__malloc_lock+0x8>)
 800d74e:	f000 b891 	b.w	800d874 <__retarget_lock_acquire_recursive>
 800d752:	bf00      	nop
 800d754:	20000720 	.word	0x20000720

0800d758 <__malloc_unlock>:
 800d758:	4801      	ldr	r0, [pc, #4]	@ (800d760 <__malloc_unlock+0x8>)
 800d75a:	f000 b88c 	b.w	800d876 <__retarget_lock_release_recursive>
 800d75e:	bf00      	nop
 800d760:	20000720 	.word	0x20000720

0800d764 <realloc>:
 800d764:	4b02      	ldr	r3, [pc, #8]	@ (800d770 <realloc+0xc>)
 800d766:	460a      	mov	r2, r1
 800d768:	4601      	mov	r1, r0
 800d76a:	6818      	ldr	r0, [r3, #0]
 800d76c:	f000 b802 	b.w	800d774 <_realloc_r>
 800d770:	20000018 	.word	0x20000018

0800d774 <_realloc_r>:
 800d774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d778:	4680      	mov	r8, r0
 800d77a:	4615      	mov	r5, r2
 800d77c:	460c      	mov	r4, r1
 800d77e:	b921      	cbnz	r1, 800d78a <_realloc_r+0x16>
 800d780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d784:	4611      	mov	r1, r2
 800d786:	f7ff bf61 	b.w	800d64c <_malloc_r>
 800d78a:	b92a      	cbnz	r2, 800d798 <_realloc_r+0x24>
 800d78c:	f000 f882 	bl	800d894 <_free_r>
 800d790:	2400      	movs	r4, #0
 800d792:	4620      	mov	r0, r4
 800d794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d798:	f000 f8c6 	bl	800d928 <_malloc_usable_size_r>
 800d79c:	4285      	cmp	r5, r0
 800d79e:	4606      	mov	r6, r0
 800d7a0:	d802      	bhi.n	800d7a8 <_realloc_r+0x34>
 800d7a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d7a6:	d8f4      	bhi.n	800d792 <_realloc_r+0x1e>
 800d7a8:	4629      	mov	r1, r5
 800d7aa:	4640      	mov	r0, r8
 800d7ac:	f7ff ff4e 	bl	800d64c <_malloc_r>
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d0ec      	beq.n	800d790 <_realloc_r+0x1c>
 800d7b6:	42b5      	cmp	r5, r6
 800d7b8:	462a      	mov	r2, r5
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	bf28      	it	cs
 800d7be:	4632      	movcs	r2, r6
 800d7c0:	f000 f85a 	bl	800d878 <memcpy>
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	4640      	mov	r0, r8
 800d7c8:	f000 f864 	bl	800d894 <_free_r>
 800d7cc:	463c      	mov	r4, r7
 800d7ce:	e7e0      	b.n	800d792 <_realloc_r+0x1e>

0800d7d0 <memset>:
 800d7d0:	4402      	add	r2, r0
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d100      	bne.n	800d7da <memset+0xa>
 800d7d8:	4770      	bx	lr
 800d7da:	f803 1b01 	strb.w	r1, [r3], #1
 800d7de:	e7f9      	b.n	800d7d4 <memset+0x4>

0800d7e0 <strcat>:
 800d7e0:	b510      	push	{r4, lr}
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	7814      	ldrb	r4, [r2, #0]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	3201      	adds	r2, #1
 800d7ea:	2c00      	cmp	r4, #0
 800d7ec:	d1fa      	bne.n	800d7e4 <strcat+0x4>
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7f8:	2a00      	cmp	r2, #0
 800d7fa:	d1f9      	bne.n	800d7f0 <strcat+0x10>
 800d7fc:	bd10      	pop	{r4, pc}
	...

0800d800 <_sbrk_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4d06      	ldr	r5, [pc, #24]	@ (800d81c <_sbrk_r+0x1c>)
 800d804:	2300      	movs	r3, #0
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	602b      	str	r3, [r5, #0]
 800d80c:	f7f6 fee4 	bl	80045d8 <_sbrk>
 800d810:	1c43      	adds	r3, r0, #1
 800d812:	d102      	bne.n	800d81a <_sbrk_r+0x1a>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	b103      	cbz	r3, 800d81a <_sbrk_r+0x1a>
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	2000071c 	.word	0x2000071c

0800d820 <__errno>:
 800d820:	4b01      	ldr	r3, [pc, #4]	@ (800d828 <__errno+0x8>)
 800d822:	6818      	ldr	r0, [r3, #0]
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop
 800d828:	20000018 	.word	0x20000018

0800d82c <__libc_init_array>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	4d0d      	ldr	r5, [pc, #52]	@ (800d864 <__libc_init_array+0x38>)
 800d830:	4c0d      	ldr	r4, [pc, #52]	@ (800d868 <__libc_init_array+0x3c>)
 800d832:	1b64      	subs	r4, r4, r5
 800d834:	10a4      	asrs	r4, r4, #2
 800d836:	2600      	movs	r6, #0
 800d838:	42a6      	cmp	r6, r4
 800d83a:	d109      	bne.n	800d850 <__libc_init_array+0x24>
 800d83c:	4d0b      	ldr	r5, [pc, #44]	@ (800d86c <__libc_init_array+0x40>)
 800d83e:	4c0c      	ldr	r4, [pc, #48]	@ (800d870 <__libc_init_array+0x44>)
 800d840:	f000 f87a 	bl	800d938 <_init>
 800d844:	1b64      	subs	r4, r4, r5
 800d846:	10a4      	asrs	r4, r4, #2
 800d848:	2600      	movs	r6, #0
 800d84a:	42a6      	cmp	r6, r4
 800d84c:	d105      	bne.n	800d85a <__libc_init_array+0x2e>
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	f855 3b04 	ldr.w	r3, [r5], #4
 800d854:	4798      	blx	r3
 800d856:	3601      	adds	r6, #1
 800d858:	e7ee      	b.n	800d838 <__libc_init_array+0xc>
 800d85a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d85e:	4798      	blx	r3
 800d860:	3601      	adds	r6, #1
 800d862:	e7f2      	b.n	800d84a <__libc_init_array+0x1e>
 800d864:	0800e8c4 	.word	0x0800e8c4
 800d868:	0800e8c4 	.word	0x0800e8c4
 800d86c:	0800e8c4 	.word	0x0800e8c4
 800d870:	0800e8c8 	.word	0x0800e8c8

0800d874 <__retarget_lock_acquire_recursive>:
 800d874:	4770      	bx	lr

0800d876 <__retarget_lock_release_recursive>:
 800d876:	4770      	bx	lr

0800d878 <memcpy>:
 800d878:	440a      	add	r2, r1
 800d87a:	4291      	cmp	r1, r2
 800d87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d880:	d100      	bne.n	800d884 <memcpy+0xc>
 800d882:	4770      	bx	lr
 800d884:	b510      	push	{r4, lr}
 800d886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d88e:	4291      	cmp	r1, r2
 800d890:	d1f9      	bne.n	800d886 <memcpy+0xe>
 800d892:	bd10      	pop	{r4, pc}

0800d894 <_free_r>:
 800d894:	b538      	push	{r3, r4, r5, lr}
 800d896:	4605      	mov	r5, r0
 800d898:	2900      	cmp	r1, #0
 800d89a:	d041      	beq.n	800d920 <_free_r+0x8c>
 800d89c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a0:	1f0c      	subs	r4, r1, #4
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bfb8      	it	lt
 800d8a6:	18e4      	addlt	r4, r4, r3
 800d8a8:	f7ff ff50 	bl	800d74c <__malloc_lock>
 800d8ac:	4a1d      	ldr	r2, [pc, #116]	@ (800d924 <_free_r+0x90>)
 800d8ae:	6813      	ldr	r3, [r2, #0]
 800d8b0:	b933      	cbnz	r3, 800d8c0 <_free_r+0x2c>
 800d8b2:	6063      	str	r3, [r4, #4]
 800d8b4:	6014      	str	r4, [r2, #0]
 800d8b6:	4628      	mov	r0, r5
 800d8b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8bc:	f7ff bf4c 	b.w	800d758 <__malloc_unlock>
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	d908      	bls.n	800d8d6 <_free_r+0x42>
 800d8c4:	6820      	ldr	r0, [r4, #0]
 800d8c6:	1821      	adds	r1, r4, r0
 800d8c8:	428b      	cmp	r3, r1
 800d8ca:	bf01      	itttt	eq
 800d8cc:	6819      	ldreq	r1, [r3, #0]
 800d8ce:	685b      	ldreq	r3, [r3, #4]
 800d8d0:	1809      	addeq	r1, r1, r0
 800d8d2:	6021      	streq	r1, [r4, #0]
 800d8d4:	e7ed      	b.n	800d8b2 <_free_r+0x1e>
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	b10b      	cbz	r3, 800d8e0 <_free_r+0x4c>
 800d8dc:	42a3      	cmp	r3, r4
 800d8de:	d9fa      	bls.n	800d8d6 <_free_r+0x42>
 800d8e0:	6811      	ldr	r1, [r2, #0]
 800d8e2:	1850      	adds	r0, r2, r1
 800d8e4:	42a0      	cmp	r0, r4
 800d8e6:	d10b      	bne.n	800d900 <_free_r+0x6c>
 800d8e8:	6820      	ldr	r0, [r4, #0]
 800d8ea:	4401      	add	r1, r0
 800d8ec:	1850      	adds	r0, r2, r1
 800d8ee:	4283      	cmp	r3, r0
 800d8f0:	6011      	str	r1, [r2, #0]
 800d8f2:	d1e0      	bne.n	800d8b6 <_free_r+0x22>
 800d8f4:	6818      	ldr	r0, [r3, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	6053      	str	r3, [r2, #4]
 800d8fa:	4408      	add	r0, r1
 800d8fc:	6010      	str	r0, [r2, #0]
 800d8fe:	e7da      	b.n	800d8b6 <_free_r+0x22>
 800d900:	d902      	bls.n	800d908 <_free_r+0x74>
 800d902:	230c      	movs	r3, #12
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	e7d6      	b.n	800d8b6 <_free_r+0x22>
 800d908:	6820      	ldr	r0, [r4, #0]
 800d90a:	1821      	adds	r1, r4, r0
 800d90c:	428b      	cmp	r3, r1
 800d90e:	bf04      	itt	eq
 800d910:	6819      	ldreq	r1, [r3, #0]
 800d912:	685b      	ldreq	r3, [r3, #4]
 800d914:	6063      	str	r3, [r4, #4]
 800d916:	bf04      	itt	eq
 800d918:	1809      	addeq	r1, r1, r0
 800d91a:	6021      	streq	r1, [r4, #0]
 800d91c:	6054      	str	r4, [r2, #4]
 800d91e:	e7ca      	b.n	800d8b6 <_free_r+0x22>
 800d920:	bd38      	pop	{r3, r4, r5, pc}
 800d922:	bf00      	nop
 800d924:	200005e0 	.word	0x200005e0

0800d928 <_malloc_usable_size_r>:
 800d928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d92c:	1f18      	subs	r0, r3, #4
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bfbc      	itt	lt
 800d932:	580b      	ldrlt	r3, [r1, r0]
 800d934:	18c0      	addlt	r0, r0, r3
 800d936:	4770      	bx	lr

0800d938 <_init>:
 800d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93a:	bf00      	nop
 800d93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d93e:	bc08      	pop	{r3}
 800d940:	469e      	mov	lr, r3
 800d942:	4770      	bx	lr

0800d944 <_fini>:
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	bf00      	nop
 800d948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94a:	bc08      	pop	{r3}
 800d94c:	469e      	mov	lr, r3
 800d94e:	4770      	bx	lr
