
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  0800c660  0800c660  0000d660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5b8  0800d5b8  0000f068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5b8  0800d5b8  0000e5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5c0  0800d5c0  0000f068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5c0  0800d5c0  0000e5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5c4  0800d5c4  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800d5c8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f068  2**0
                  CONTENTS
 10 .bss          000006b4  20000068  20000068  0000f068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  0000f068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3bd  00000000  00000000  0000f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d92  00000000  00000000  00029455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0002d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001270  00000000  00000000  0002e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b3b  00000000  00000000  0002fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f71b  00000000  00000000  00055763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6adc  00000000  00000000  00074e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b95a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006808  00000000  00000000  0014b9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001521a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c648 	.word	0x0800c648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800c648 	.word	0x0800c648

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <play_audio_file>:

static uint32_t *buffer; /*Buffer pentru redare audio folosit static in fisier*/


void play_audio_file(char *path)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d4:	f00b ff10 	bl	800c2f8 <malloc>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <play_audio_file+0x98>)
 80004de:	601a      	str	r2, [r3, #0]

	if(buffer == NULL)
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <play_audio_file+0x98>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d036      	beq.n	8000556 <play_audio_file+0x8e>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <play_audio_file+0x98>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f002 f89e 	bl	8002630 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <play_audio_file+0x98>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000500:	2100      	movs	r1, #0
 8000502:	4818      	ldr	r0, [pc, #96]	@ (8000564 <play_audio_file+0x9c>)
 8000504:	f003 fb98 	bl	8003c38 <HAL_DAC_Start_DMA>

	while(1)
	{
		read_audio_file(path, buffer+1024);
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <play_audio_file+0x98>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000510:	4619      	mov	r1, r3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f002 f88c 	bl	8002630 <read_audio_file>
		while(flagDmaDAC == 0);
 8000518:	bf00      	nop
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <play_audio_file+0xa0>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f7      	bne.n	800051a <play_audio_file+0x52>
		flagDmaDAC = 0;
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <play_audio_file+0xa0>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer);
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <play_audio_file+0x98>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f002 f87a 	bl	8002630 <read_audio_file>
		while(flagDmaDAC == 0);
 800053c:	bf00      	nop
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <play_audio_file+0xa0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f7      	bne.n	800053e <play_audio_file+0x76>
		flagDmaDAC = 0;
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <play_audio_file+0xa0>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer+1024);
 8000554:	e7d8      	b.n	8000508 <play_audio_file+0x40>
		return;
 8000556:	bf00      	nop

	}

	free(buffer);

}
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000084 	.word	0x20000084
 8000564:	20000088 	.word	0x20000088
 8000568:	2000032a 	.word	0x2000032a

0800056c <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	0adb      	lsrs	r3, r3, #11
 800057c:	b29b      	uxth	r3, r3
 800057e:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	115b      	asrs	r3, r3, #5
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800058a:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 031f 	and.w	r3, r3, #31
 8000594:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8000596:	7bfa      	ldrb	r2, [r7, #15]
 8000598:	4613      	mov	r3, r2
 800059a:	019b      	lsls	r3, r3, #6
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <convert_color_16_to_18+0x8c>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	441a      	add	r2, r3
 80005a6:	1112      	asrs	r2, r2, #4
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 80005b8:	7b7a      	ldrb	r2, [r7, #13]
 80005ba:	4613      	mov	r3, r2
 80005bc:	019b      	lsls	r3, r3, #6
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <convert_color_16_to_18+0x8c>)
 80005c2:	fb82 1203 	smull	r1, r2, r2, r3
 80005c6:	441a      	add	r2, r3
 80005c8:	1112      	asrs	r2, r2, #4
 80005ca:	17db      	asrs	r3, r3, #31
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	7bba      	ldrb	r2, [r7, #14]
 80005e0:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	3302      	adds	r3, #2
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	701a      	strb	r2, [r3, #0]

}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	84210843 	.word	0x84210843

080005fc <write_color>:


void write_color(uint16_t color)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000606:	f107 020c 	add.w	r2, r7, #12
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	4611      	mov	r1, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffac 	bl	800056c <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000614:	f107 010c 	add.w	r1, r7, #12
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2203      	movs	r2, #3
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <write_color+0x30>)
 8000620:	f005 ff35 	bl	800648e <HAL_SPI_Transmit>


}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000180 	.word	0x20000180

08000630 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af02      	add	r7, sp, #8
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	460b      	mov	r3, r1
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	88b9      	ldrh	r1, [r7, #4]
 8000648:	88f8      	ldrh	r0, [r7, #6]
 800064a:	2477      	movs	r4, #119	@ 0x77
 800064c:	9400      	str	r4, [sp, #0]
 800064e:	f000 ffef 	bl	8001630 <set_adress_window>

	DC_DATA();
 8000652:	2201      	movs	r2, #1
 8000654:	2108      	movs	r1, #8
 8000656:	480a      	ldr	r0, [pc, #40]	@ (8000680 <draw_pixel+0x50>)
 8000658:	f004 fa46 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4807      	ldr	r0, [pc, #28]	@ (8000680 <draw_pixel+0x50>)
 8000662:	f004 fa41 	bl	8004ae8 <HAL_GPIO_WritePin>

	write_color(color);
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffc7 	bl	80005fc <write_color>

	CS_D();
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4803      	ldr	r0, [pc, #12]	@ (8000680 <draw_pixel+0x50>)
 8000674:	f004 fa38 	bl	8004ae8 <HAL_GPIO_WritePin>

}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	40020c00 	.word	0x40020c00

08000684 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff68 	bl	800056c <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 800069c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 80006a0:	f00b fe2a 	bl	800c2f8 <malloc>
 80006a4:	4603      	mov	r3, r0
 80006a6:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80006a8:	2377      	movs	r3, #119	@ 0x77
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	f240 13df 	movw	r3, #479	@ 0x1df
 80006b0:	f240 123f 	movw	r2, #319	@ 0x13f
 80006b4:	2100      	movs	r1, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 ffba 	bl	8001630 <set_adress_window>

	DC_DATA();
 80006bc:	2201      	movs	r2, #1
 80006be:	2108      	movs	r1, #8
 80006c0:	481e      	ldr	r0, [pc, #120]	@ (800073c <fill_screen1+0xb8>)
 80006c2:	f004 fa11 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	481c      	ldr	r0, [pc, #112]	@ (800073c <fill_screen1+0xb8>)
 80006cc:	f004 fa0c 	bl	8004ae8 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	82fb      	strh	r3, [r7, #22]
 80006d4:	e00f      	b.n	80006f6 <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 80006d6:	8afa      	ldrh	r2, [r7, #22]
 80006d8:	4613      	mov	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4413      	add	r3, r2
 80006e2:	461a      	mov	r2, r3
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	8819      	ldrh	r1, [r3, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	8011      	strh	r1, [r2, #0]
 80006ee:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006f0:	8afb      	ldrh	r3, [r7, #22]
 80006f2:	3301      	adds	r3, #1
 80006f4:	82fb      	strh	r3, [r7, #22]
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006fc:	d3eb      	bcc.n	80006d6 <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80006fe:	2300      	movs	r3, #0
 8000700:	82bb      	strh	r3, [r7, #20]
 8000702:	e00a      	b.n	800071a <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800070c:	6939      	ldr	r1, [r7, #16]
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <fill_screen1+0xbc>)
 8000710:	f005 febd 	bl	800648e <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8000714:	8abb      	ldrh	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	82bb      	strh	r3, [r7, #20]
 800071a:	8abb      	ldrh	r3, [r7, #20]
 800071c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000720:	d3f0      	bcc.n	8000704 <fill_screen1+0x80>

	}

	free(line);
 8000722:	6938      	ldr	r0, [r7, #16]
 8000724:	f00b fdf0 	bl	800c308 <free>

	CS_D();
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	4803      	ldr	r0, [pc, #12]	@ (800073c <fill_screen1+0xb8>)
 800072e:	f004 f9db 	bl	8004ae8 <HAL_GPIO_WritePin>

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40020c00 	.word	0x40020c00
 8000740:	20000180 	.word	0x20000180

08000744 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8000744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000748:	b08f      	sub	sp, #60	@ 0x3c
 800074a:	af02      	add	r7, sp, #8
 800074c:	4603      	mov	r3, r0
 800074e:	80fb      	strh	r3, [r7, #6]
 8000750:	466b      	mov	r3, sp
 8000752:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000754:	2377      	movs	r3, #119	@ 0x77
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f240 13df 	movw	r3, #479	@ 0x1df
 800075c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f000 ff64 	bl	8001630 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000768:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 800076e:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000772:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	0adb      	lsrs	r3, r3, #11
 8000778:	b29b      	uxth	r3, r3
 800077a:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	115b      	asrs	r3, r3, #5
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000786:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000792:	7ffa      	ldrb	r2, [r7, #31]
 8000794:	4613      	mov	r3, r2
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	4a4f      	ldr	r2, [pc, #316]	@ (80008d8 <fill_screen2+0x194>)
 800079c:	fb82 1203 	smull	r1, r2, r2, r3
 80007a0:	441a      	add	r2, r3
 80007a2:	1112      	asrs	r2, r2, #4
 80007a4:	17db      	asrs	r3, r3, #31
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 80007aa:	7fba      	ldrb	r2, [r7, #30]
 80007ac:	4613      	mov	r3, r2
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	4a4a      	ldr	r2, [pc, #296]	@ (80008dc <fill_screen2+0x198>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	441a      	add	r2, r3
 80007ba:	1152      	asrs	r2, r2, #5
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 80007c2:	7f7a      	ldrb	r2, [r7, #29]
 80007c4:	4613      	mov	r3, r2
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	4a43      	ldr	r2, [pc, #268]	@ (80008d8 <fill_screen2+0x194>)
 80007cc:	fb82 1203 	smull	r1, r2, r2, r3
 80007d0:	441a      	add	r2, r3
 80007d2:	1112      	asrs	r2, r2, #4
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4840      	ldr	r0, [pc, #256]	@ (80008e0 <fill_screen2+0x19c>)
 80007e0:	f004 f982 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	483d      	ldr	r0, [pc, #244]	@ (80008e0 <fill_screen2+0x19c>)
 80007ea:	f004 f97d 	bl	8004ae8 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007f0:	460b      	mov	r3, r1
 80007f2:	3b01      	subs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	2300      	movs	r3, #0
 80007f8:	4688      	mov	r8, r1
 80007fa:	4699      	mov	r9, r3
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800080c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000810:	2300      	movs	r3, #0
 8000812:	460c      	mov	r4, r1
 8000814:	461d      	mov	r5, r3
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	00eb      	lsls	r3, r5, #3
 8000820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000824:	00e2      	lsls	r2, r4, #3
 8000826:	1dcb      	adds	r3, r1, #7
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	ebad 0d03 	sub.w	sp, sp, r3
 8000830:	ab02      	add	r3, sp, #8
 8000832:	3300      	adds	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800083a:	e011      	b.n	8000860 <fill_screen2+0x11c>
	{
		frame[j] = r;
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000840:	4413      	add	r3, r2
 8000842:	7ffa      	ldrb	r2, [r7, #31]
 8000844:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 8000846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000848:	3301      	adds	r3, #1
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	7fb9      	ldrb	r1, [r7, #30]
 800084e:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000852:	3302      	adds	r3, #2
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	7f79      	ldrb	r1, [r7, #29]
 8000858:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800085a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800085c:	3303      	adds	r3, #3
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000864:	429a      	cmp	r2, r3
 8000866:	d3e9      	bcc.n	800083c <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000868:	6a3a      	ldr	r2, [r7, #32]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <fill_screen2+0x1a0>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000886:	e012      	b.n	80008ae <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000888:	bf00      	nop
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <fill_screen2+0x1a0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0fa      	beq.n	800088a <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <fill_screen2+0x1a0>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	6979      	ldr	r1, [r7, #20]
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <fill_screen2+0x1a4>)
 80008a4:	f006 f9fa 	bl	8006c9c <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 80008a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008aa:	3301      	adds	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d3e8      	bcc.n	8000888 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 80008b6:	bf00      	nop
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <fill_screen2+0x1a0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0fa      	beq.n	80008b8 <fill_screen2+0x174>
	CS_D();
 80008c2:	2201      	movs	r2, #1
 80008c4:	2110      	movs	r1, #16
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <fill_screen2+0x19c>)
 80008c8:	f004 f90e 	bl	8004ae8 <HAL_GPIO_WritePin>
 80008cc:	46b5      	mov	sp, r6
}
 80008ce:	bf00      	nop
 80008d0:	3734      	adds	r7, #52	@ 0x34
 80008d2:	46bd      	mov	sp, r7
 80008d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008d8:	84210843 	.word	0x84210843
 80008dc:	82082083 	.word	0x82082083
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	20000328 	.word	0x20000328
 80008e8:	20000180 	.word	0x20000180

080008ec <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	4604      	mov	r4, r0
 80008f4:	4608      	mov	r0, r1
 80008f6:	4611      	mov	r1, r2
 80008f8:	461a      	mov	r2, r3
 80008fa:	4623      	mov	r3, r4
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	4603      	mov	r3, r0
 8000900:	80bb      	strh	r3, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
 8000906:	4613      	mov	r3, r2
 8000908:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 800090a:	4b3a      	ldr	r3, [pc, #232]	@ (80009f4 <print_character+0x108>)
 800090c:	889a      	ldrh	r2, [r3, #4]
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b29c      	uxth	r4, r3
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <print_character+0x108>)
 800091a:	88da      	ldrh	r2, [r3, #6]
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	88b9      	ldrh	r1, [r7, #4]
 8000928:	88f8      	ldrh	r0, [r7, #6]
 800092a:	2277      	movs	r2, #119	@ 0x77
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	4622      	mov	r2, r4
 8000930:	f000 fe7e 	bl	8001630 <set_adress_window>

	uint16_t mask = 0x8000;
 8000934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000938:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 800093e:	f107 020c 	add.w	r2, r7, #12
 8000942:	883b      	ldrh	r3, [r7, #0]
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe10 	bl	800056c <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 800094c:	f107 0208 	add.w	r2, r7, #8
 8000950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe09 	bl	800056c <convert_color_16_to_18>


	DC_DATA();
 800095a:	2201      	movs	r2, #1
 800095c:	2108      	movs	r1, #8
 800095e:	4826      	ldr	r0, [pc, #152]	@ (80009f8 <print_character+0x10c>)
 8000960:	f004 f8c2 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	4823      	ldr	r0, [pc, #140]	@ (80009f8 <print_character+0x10c>)
 800096a:	f004 f8bd 	bl	8004ae8 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	75fb      	strb	r3, [r7, #23]
 8000972:	e030      	b.n	80009d6 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <print_character+0x108>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	3b20      	subs	r3, #32
 800097c:	491d      	ldr	r1, [pc, #116]	@ (80009f4 <print_character+0x108>)
 800097e:	88c9      	ldrh	r1, [r1, #6]
 8000980:	fb03 f101 	mul.w	r1, r3, r1
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	440b      	add	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000990:	2300      	movs	r3, #0
 8000992:	75bb      	strb	r3, [r7, #22]
 8000994:	e016      	b.n	80009c4 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000996:	8a7a      	ldrh	r2, [r7, #18]
 8000998:	7dbb      	ldrb	r3, [r7, #22]
 800099a:	409a      	lsls	r2, r3
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	4013      	ands	r3, r2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2103      	movs	r1, #3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fca8 	bl	8001300 <LCD_send_data_multi>
 80009b0:	e005      	b.n	80009be <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fca1 	bl	8001300 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 80009be:	7dbb      	ldrb	r3, [r7, #22]
 80009c0:	3301      	adds	r3, #1
 80009c2:	75bb      	strb	r3, [r7, #22]
 80009c4:	7dbb      	ldrb	r3, [r7, #22]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <print_character+0x108>)
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3e2      	bcc.n	8000996 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	3301      	adds	r3, #1
 80009d4:	75fb      	strb	r3, [r7, #23]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <print_character+0x108>)
 80009dc:	88db      	ldrh	r3, [r3, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3c8      	bcc.n	8000974 <print_character+0x88>
			}
		}
	}

	CS_D();
 80009e2:	2201      	movs	r2, #1
 80009e4:	2110      	movs	r1, #16
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <print_character+0x10c>)
 80009e8:	f004 f87e 	bl	8004ae8 <HAL_GPIO_WritePin>

}
 80009ec:	bf00      	nop
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	40020c00 	.word	0x40020c00

080009fc <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b089      	sub	sp, #36	@ 0x24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	60ba      	str	r2, [r7, #8]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	81fb      	strh	r3, [r7, #14]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	81bb      	strh	r3, [r7, #12]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000a16:	e027      	b.n	8000a68 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000a18:	89fb      	ldrh	r3, [r7, #14]
 8000a1a:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <print_string+0x84>)
 8000a1c:	8892      	ldrh	r2, [r2, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a24:	dd07      	ble.n	8000a36 <print_string+0x3a>
		{
			x = font.width;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <print_string+0x84>)
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <print_string+0x84>)
 8000a2e:	88da      	ldrh	r2, [r3, #6]
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <print_string+0x84>)
 8000a3a:	88d2      	ldrh	r2, [r2, #6]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a42:	dc18      	bgt.n	8000a76 <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a4a:	89b9      	ldrh	r1, [r7, #12]
 8000a4c:	89f8      	ldrh	r0, [r7, #14]
 8000a4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4623      	mov	r3, r4
 8000a54:	f7ff ff4a 	bl	80008ec <print_character>
		string++;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <print_string+0x84>)
 8000a60:	889a      	ldrh	r2, [r3, #4]
 8000a62:	89fb      	ldrh	r3, [r7, #14]
 8000a64:	4413      	add	r3, r2
 8000a66:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3d1      	bcc.n	8000a18 <print_string+0x1c>
 8000a74:	e000      	b.n	8000a78 <print_string+0x7c>
			return;
 8000a76:	bf00      	nop
	}

}
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000000 	.word	0x20000000

08000a84 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	88b9      	ldrh	r1, [r7, #4]
 8000ab4:	88f8      	ldrh	r0, [r7, #6]
 8000ab6:	2477      	movs	r4, #119	@ 0x77
 8000ab8:	9400      	str	r4, [sp, #0]
 8000aba:	f000 fdb9 	bl	8001630 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000abe:	f107 0208 	add.w	r2, r7, #8
 8000ac2:	883b      	ldrh	r3, [r7, #0]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fd50 	bl	800056c <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
 8000ad0:	e008      	b.n	8000ae4 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fc11 	bl	8001300 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	81fb      	strh	r3, [r7, #14]
 8000ae4:	89fa      	ldrh	r2, [r7, #14]
 8000ae6:	8879      	ldrh	r1, [r7, #2]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <draw_horizontal_line+0x4e>
	}


}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}

08000afa <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000afa:	b590      	push	{r4, r7, lr}
 8000afc:	b087      	sub	sp, #28
 8000afe:	af02      	add	r7, sp, #8
 8000b00:	4604      	mov	r4, r0
 8000b02:	4608      	mov	r0, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	4623      	mov	r3, r4
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	80bb      	strh	r3, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000b18:	88ba      	ldrh	r2, [r7, #4]
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	88b9      	ldrh	r1, [r7, #4]
 8000b2a:	88f8      	ldrh	r0, [r7, #6]
 8000b2c:	2477      	movs	r4, #119	@ 0x77
 8000b2e:	9400      	str	r4, [sp, #0]
 8000b30:	f000 fd7e 	bl	8001630 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	883b      	ldrh	r3, [r7, #0]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd15 	bl	800056c <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	81fb      	strh	r3, [r7, #14]
 8000b46:	e008      	b.n	8000b5a <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fbd6 	bl	8001300 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	3301      	adds	r3, #1
 8000b58:	81fb      	strh	r3, [r7, #14]
 8000b5a:	89fa      	ldrh	r2, [r7, #14]
 8000b5c:	8879      	ldrh	r1, [r7, #2]
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	1acb      	subs	r3, r1, r3
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbf0      	blt.n	8000b48 <draw_vertical_line+0x4e>
	}


}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	fb12 f303 	smulbb	r3, r2, r3
 8000b96:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000b98:	f107 020c 	add.w	r2, r7, #12
 8000b9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fce3 	bl	800056c <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000ba6:	8aba      	ldrh	r2, [r7, #20]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00b fba2 	bl	800c2f8 <malloc>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	82fb      	strh	r3, [r7, #22]
 8000bbc:	e00f      	b.n	8000bde <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000bbe:	8afa      	ldrh	r2, [r7, #22]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4413      	add	r3, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	8819      	ldrh	r1, [r3, #0]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	8011      	strh	r1, [r2, #0]
 8000bd6:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	82fb      	strh	r3, [r7, #22]
 8000bde:	8afa      	ldrh	r2, [r7, #22]
 8000be0:	8abb      	ldrh	r3, [r7, #20]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d3eb      	bcc.n	8000bbe <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b29c      	uxth	r4, r3
 8000bf2:	88ba      	ldrh	r2, [r7, #4]
 8000bf4:	883b      	ldrh	r3, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	88b9      	ldrh	r1, [r7, #4]
 8000c00:	88f8      	ldrh	r0, [r7, #6]
 8000c02:	2277      	movs	r2, #119	@ 0x77
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	4622      	mov	r2, r4
 8000c08:	f000 fd12 	bl	8001630 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000c0c:	8aba      	ldrh	r2, [r7, #20]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	6938      	ldr	r0, [r7, #16]
 8000c18:	f000 fb72 	bl	8001300 <LCD_send_data_multi>

	free(data);
 8000c1c:	6938      	ldr	r0, [r7, #16]
 8000c1e:	f00b fb73 	bl	800c308 <free>

}
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <draw_entity+0x1c>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d163      	bne.n	8000d10 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	fb12 f303 	smulbb	r3, r2, r3
 8000c5c:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	899b      	ldrh	r3, [r3, #12]
 8000c62:	f107 020c 	add.w	r2, r7, #12
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc7f 	bl	800056c <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000c6e:	8aba      	ldrh	r2, [r7, #20]
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00b fb3e 	bl	800c2f8 <malloc>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000c80:	2300      	movs	r3, #0
 8000c82:	82fb      	strh	r3, [r7, #22]
 8000c84:	e00f      	b.n	8000ca6 <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c86:	8afa      	ldrh	r2, [r7, #22]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4413      	add	r3, r2
 8000c92:	461a      	mov	r2, r3
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	8819      	ldrh	r1, [r3, #0]
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	8011      	strh	r1, [r2, #0]
 8000c9e:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	82fb      	strh	r3, [r7, #22]
 8000ca6:	8afa      	ldrh	r2, [r7, #22]
 8000ca8:	8abb      	ldrh	r3, [r7, #20]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3eb      	bcc.n	8000c86 <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29c      	uxth	r4, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2277      	movs	r2, #119	@ 0x77
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	f000 fc9c 	bl	8001630 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000cf8:	8aba      	ldrh	r2, [r7, #20]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	6938      	ldr	r0, [r7, #16]
 8000d04:	f000 fafc 	bl	8001300 <LCD_send_data_multi>

		free(data);
 8000d08:	6938      	ldr	r0, [r7, #16]
 8000d0a:	f00b fafd 	bl	800c308 <free>
	{
 8000d0e:	e084      	b.n	8000e1a <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000d10:	2300      	movs	r3, #0
 8000d12:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000d14:	f107 030f 	add.w	r3, r7, #15
 8000d18:	f107 020a 	add.w	r2, r7, #10
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f001 fdb2 	bl	8002888 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d2a:	b298      	uxth	r0, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d32:	b299      	uxth	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b29c      	uxth	r4, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	3b01      	subs	r3, #1
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2277      	movs	r2, #119	@ 0x77
 8000d66:	9200      	str	r2, [sp, #0]
 8000d68:	4622      	mov	r2, r4
 8000d6a:	f000 fc61 	bl	8001630 <set_adress_window>

		DC_DATA();
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2108      	movs	r1, #8
 8000d72:	482b      	ldr	r0, [pc, #172]	@ (8000e20 <draw_entity+0x1f4>)
 8000d74:	f003 feb8 	bl	8004ae8 <HAL_GPIO_WritePin>
		CS_A();
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4828      	ldr	r0, [pc, #160]	@ (8000e20 <draw_entity+0x1f4>)
 8000d7e:	f003 feb3 	bl	8004ae8 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d88:	d20c      	bcs.n	8000da4 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	897a      	ldrh	r2, [r7, #10]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fab4 	bl	8001300 <LCD_send_data_multi>
			free(entity->data);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00b fab3 	bl	800c308 <free>
 8000da2:	e03a      	b.n	8000e1a <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <draw_entity+0x1f8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	897a      	ldrh	r2, [r7, #10]
 8000db0:	4619      	mov	r1, r3
 8000db2:	481d      	ldr	r0, [pc, #116]	@ (8000e28 <draw_entity+0x1fc>)
 8000db4:	f005 ff72 	bl	8006c9c <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d11c      	bne.n	8000df8 <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000dbe:	f107 030f 	add.w	r3, r7, #15
 8000dc2:	f107 020a 	add.w	r2, r7, #10
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f001 fd5d 	bl	8002888 <read_image_file>

				while(flagDmaSpiTx == 0);
 8000dce:	bf00      	nop
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <draw_entity+0x1f8>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0fa      	beq.n	8000dd0 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <draw_entity+0x1f8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	897a      	ldrh	r2, [r7, #10]
 8000de6:	4619      	mov	r1, r3
 8000de8:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <draw_entity+0x1fc>)
 8000dea:	f005 ff57 	bl	8006c9c <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000dee:	897b      	ldrh	r3, [r7, #10]
 8000df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000df4:	d2e0      	bcs.n	8000db8 <draw_entity+0x18c>
 8000df6:	e000      	b.n	8000dfa <draw_entity+0x1ce>
					break;
 8000df8:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000dfa:	bf00      	nop
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <draw_entity+0x1f8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0fa      	beq.n	8000dfc <draw_entity+0x1d0>
		free(entity->data);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00b fa7c 	bl	800c308 <free>
		CS_D();
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <draw_entity+0x1f4>)
 8000e16:	f003 fe67 	bl	8004ae8 <HAL_GPIO_WritePin>

	}


}
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	20000328 	.word	0x20000328
 8000e28:	20000180 	.word	0x20000180

08000e2c <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b08b      	sub	sp, #44	@ 0x2c
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	817b      	strh	r3, [r7, #10]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	813b      	strh	r3, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000e46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f2c0 80e4 	blt.w	8001018 <translation_entity+0x1ec>
 8000e50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e54:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e58:	f300 80de 	bgt.w	8001018 <translation_entity+0x1ec>
 8000e5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f2c0 80d9 	blt.w	8001018 <translation_entity+0x1ec>
 8000e66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e6a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e6e:	f300 80d3 	bgt.w	8001018 <translation_entity+0x1ec>

		return;
	}


	ENTITY temp = *entity;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f107 0410 	add.w	r4, r7, #16
 8000e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	entity->x0 = x;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	897a      	ldrh	r2, [r7, #10]
 8000e82:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	893a      	ldrh	r2, [r7, #8]
 8000e88:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000e8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d157      	bne.n	8000f46 <translation_entity+0x11a>
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d054      	beq.n	8000f46 <translation_entity+0x11a>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000e9c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eaa:	440b      	add	r3, r1
 8000eac:	429a      	cmp	r2, r3
 8000eae:	da1d      	bge.n	8000eec <translation_entity+0xc0>
 8000eb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000eb4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	dd17      	ble.n	8000eec <translation_entity+0xc0>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff feb4 	bl	8000c2c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8000ec4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ec8:	b298      	uxth	r0, r3
 8000eca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	897a      	ldrh	r2, [r7, #10]
 8000ed2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000ee6:	9400      	str	r4, [sp, #0]
 8000ee8:	f7ff fe42 	bl	8000b70 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000eec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ef0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f280 8091 	bge.w	800101c <translation_entity+0x1f0>
 8000efa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000efe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f02:	4413      	add	r3, r2
 8000f04:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f340 8087 	ble.w	800101c <translation_entity+0x1f0>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff fe8b 	bl	8000c2c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8000f16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	897b      	ldrh	r3, [r7, #10]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b298      	uxth	r0, r3
 8000f22:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f26:	b299      	uxth	r1, r3
 8000f28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000f3e:	9400      	str	r4, [sp, #0]
 8000f40:	f7ff fe16 	bl	8000b70 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f44:	e06a      	b.n	800101c <translation_entity+0x1f0>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000f46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f4a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d157      	bne.n	8001002 <translation_entity+0x1d6>
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d054      	beq.n	8001002 <translation_entity+0x1d6>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8000f58:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f66:	440b      	add	r3, r1
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	da1e      	bge.n	8000faa <translation_entity+0x17e>
 8000f6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dd18      	ble.n	8000faa <translation_entity+0x17e>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff fe56 	bl	8000c2c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8000f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f84:	b298      	uxth	r0, r3
 8000f86:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f90:	b29c      	uxth	r4, r3
 8000f92:	893a      	ldrh	r2, [r7, #8]
 8000f94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa2:	9200      	str	r2, [sp, #0]
 8000fa4:	4622      	mov	r2, r4
 8000fa6:	f7ff fde3 	bl	8000b70 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000faa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	da34      	bge.n	8001020 <translation_entity+0x1f4>
 8000fb6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	dd2b      	ble.n	8001020 <translation_entity+0x1f4>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fe2e 	bl	8000c2c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8000fd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fd4:	b298      	uxth	r0, r3
 8000fd6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	893b      	ldrh	r3, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe6:	b29c      	uxth	r4, r3
 8000fe8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	893b      	ldrh	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff8:	9200      	str	r2, [sp, #0]
 8000ffa:	4622      	mov	r2, r4
 8000ffc:	f7ff fdb8 	bl	8000b70 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001000:	e00e      	b.n	8001020 <translation_entity+0x1f4>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 8001002:	2100      	movs	r1, #0
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff fe11 	bl	8000c2c <draw_entity>
			draw_entity(&temp, NULL);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe0b 	bl	8000c2c <draw_entity>
 8001016:	e004      	b.n	8001022 <translation_entity+0x1f6>
		return;
 8001018:	bf00      	nop
 800101a:	e002      	b.n	8001022 <translation_entity+0x1f6>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800101c:	bf00      	nop
 800101e:	e000      	b.n	8001022 <translation_entity+0x1f6>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001020:	bf00      	nop
		}


}
 8001022:	3724      	adds	r7, #36	@ 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}

08001028 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor, char *filePathName, char *fileName)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b093      	sub	sp, #76	@ 0x4c
 800102c:	af02      	add	r7, sp, #8
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	ed87 0a02 	vstr	s0, [r7, #8]
 8001034:	6079      	str	r1, [r7, #4]
 8001036:	603a      	str	r2, [r7, #0]
	 * de scalat
	 */

	char *scalFilePath;

	scalFilePath = assign_filePath("graphic/scalare/");
 8001038:	489d      	ldr	r0, [pc, #628]	@ (80012b0 <scaling_entity+0x288>)
 800103a:	f001 fad5 	bl	80025e8 <assign_filePath>
 800103e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 8001040:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001042:	f7ff f8c1 	bl	80001c8 <strlen>
 8001046:	4604      	mov	r4, r0
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f7ff f8bd 	bl	80001c8 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	4423      	add	r3, r4
 8001052:	3301      	adds	r3, #1
 8001054:	4619      	mov	r1, r3
 8001056:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001058:	f00b fa0c 	bl	800c474 <realloc>
 800105c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	strcat(scalFilePath, fileName);
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001062:	f00b fa45 	bl	800c4f0 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8001066:	2300      	movs	r3, #0
 8001068:	833b      	strh	r3, [r7, #24]
	bool flagTerm = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	75fb      	strb	r3, [r7, #23]

	int i = 0; /*indexi de referinta in M2*/
 800106e:	2300      	movs	r3, #0
 8001070:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
	int jk = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24

	bool flagPixel = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8001084:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001088:	f00b f936 	bl	800c2f8 <malloc>
 800108c:	4603      	mov	r3, r0
 800108e:	623b      	str	r3, [r7, #32]
	int16_t x1 = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	83fb      	strh	r3, [r7, #30]
	int16_t y1 = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	83bb      	strh	r3, [r7, #28]
	int16_t index = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	837b      	strh	r3, [r7, #26]

	x1 = (int16_t)((entity->x1)*factor);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b6:	ee17 3a90 	vmov	r3, s15
 80010ba:	83fb      	strh	r3, [r7, #30]
	y1 = (int16_t)((entity->y1)*factor);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d6:	ee17 3a90 	vmov	r3, s15
 80010da:	83bb      	strh	r3, [r7, #28]



	while(!flagTerm)
 80010dc:	e0d1      	b.n	8001282 <scaling_entity+0x25a>
	{
		read_image_file_scaling(filePathName, entity, factor, &x, &flagTerm);
 80010de:	f107 0317 	add.w	r3, r7, #23
 80010e2:	f107 0218 	add.w	r2, r7, #24
 80010e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f001 fe25 	bl	8002d3c <read_image_file_scaling>

		i = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
		jk = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	@ 0x30
 8001106:	e07d      	b.n	8001204 <scaling_entity+0x1dc>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 8001108:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	441a      	add	r2, r3
 8001112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001114:	fb93 f1f2 	sdiv	r1, r3, r2
 8001118:	fb01 f202 	mul.w	r2, r1, r2
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d107      	bne.n	8001132 <scaling_entity+0x10a>
 8001122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <scaling_entity+0x10a>
			{
				/*
				 * new line
				 */

				i++;
 8001128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800112a:	3301      	adds	r3, #1
 800112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 8001132:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001134:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <scaling_entity+0x28c>)
 8001136:	fb83 3201 	smull	r3, r2, r3, r1
 800113a:	17cb      	asrs	r3, r1, #31
 800113c:	1ad2      	subs	r2, r2, r3
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	1aca      	subs	r2, r1, r3
 8001146:	2a00      	cmp	r2, #0
 8001148:	d102      	bne.n	8001150 <scaling_entity+0x128>
			{
				flagPixel = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 8001150:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001154:	2b00      	cmp	r3, #0
 8001156:	d052      	beq.n	80011fe <scaling_entity+0x1d6>
			{
				ik = (int)i/factor;
 8001158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001162:	ed97 7a02 	vldr	s14, [r7, #8]
 8001166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116e:	ee17 3a90 	vmov	r3, s15
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
				jk = (int)j/factor;
 8001174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800117e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118a:	ee17 3a90 	vmov	r3, s15
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001196:	461a      	mov	r2, r3
 8001198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800119a:	fb03 f202 	mul.w	r2, r3, r2
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	0052      	lsls	r2, r2, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	837b      	strh	r3, [r7, #26]

				data[k] = entity->data[index];
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011b6:	441a      	add	r2, r3
 80011b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011ba:	6a39      	ldr	r1, [r7, #32]
 80011bc:	440b      	add	r3, r1
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->data[index + 1];
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011ca:	3301      	adds	r3, #1
 80011cc:	441a      	add	r2, r3
 80011ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d0:	3301      	adds	r3, #1
 80011d2:	6a39      	ldr	r1, [r7, #32]
 80011d4:	440b      	add	r3, r1
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->data[index + 2];
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80011e2:	3302      	adds	r3, #2
 80011e4:	441a      	add	r2, r3
 80011e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011e8:	3302      	adds	r3, #2
 80011ea:	6a39      	ldr	r1, [r7, #32]
 80011ec:	440b      	add	r3, r1
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	701a      	strb	r2, [r3, #0]

				j++;
 80011f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011f4:	3301      	adds	r3, #1
 80011f6:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80011fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001200:	3301      	adds	r3, #1
 8001202:	633b      	str	r3, [r7, #48]	@ 0x30
 8001204:	8b3b      	ldrh	r3, [r7, #24]
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001226:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001232:	ee17 2a90 	vmov	r2, s15
 8001236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001238:	4293      	cmp	r3, r2
 800123a:	f6ff af65 	blt.w	8001108 <scaling_entity+0xe0>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(scalFilePath, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 800123e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124a:	edd7 7a02 	vldr	s15, [r7, #8]
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001256:	ee17 2a90 	vmov	r2, s15
 800125a:	8b3b      	ldrh	r3, [r7, #24]
 800125c:	fb03 f202 	mul.w	r2, r3, r2
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	4619      	mov	r1, r3
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4613      	mov	r3, r2
 8001278:	460a      	mov	r2, r1
 800127a:	6a39      	ldr	r1, [r7, #32]
 800127c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800127e:	f001 ff5b 	bl	8003138 <write_image_file>
	while(!flagTerm)
 8001282:	7dfb      	ldrb	r3, [r7, #23]
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	f47f af27 	bne.w	80010de <scaling_entity+0xb6>

	}


	entity->x1=x1;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8bfa      	ldrh	r2, [r7, #30]
 8001294:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8bba      	ldrh	r2, [r7, #28]
 800129a:	811a      	strh	r2, [r3, #8]
	entity->filePathName = scalFilePath;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012a0:	60da      	str	r2, [r3, #12]

	free(data);
 80012a2:	6a38      	ldr	r0, [r7, #32]
 80012a4:	f00b f830 	bl	800c308 <free>
	//free(entity->data);

}
 80012a8:	bf00      	nop
 80012aa:	3744      	adds	r7, #68	@ 0x44
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	0800c660 	.word	0x0800c660
 80012b4:	55555556 	.word	0x55555556

080012b8 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 80012c2:	2200      	movs	r2, #0
 80012c4:	2108      	movs	r1, #8
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LCD_send_command+0x40>)
 80012c8:	f003 fc0e 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 80012cc:	2200      	movs	r2, #0
 80012ce:	2110      	movs	r1, #16
 80012d0:	4809      	ldr	r0, [pc, #36]	@ (80012f8 <LCD_send_command+0x40>)
 80012d2:	f003 fc09 	bl	8004ae8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 80012d6:	1df9      	adds	r1, r7, #7
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	2201      	movs	r2, #1
 80012de:	4807      	ldr	r0, [pc, #28]	@ (80012fc <LCD_send_command+0x44>)
 80012e0:	f005 f8d5 	bl	800648e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 80012e4:	2201      	movs	r2, #1
 80012e6:	2110      	movs	r1, #16
 80012e8:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <LCD_send_command+0x40>)
 80012ea:	f003 fbfd 	bl	8004ae8 <HAL_GPIO_WritePin>


}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	20000180 	.word	0x20000180

08001300 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <LCD_send_data_multi+0xdc>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8001310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001314:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	fbb3 f2f2 	udiv	r2, r3, r2
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	fb01 f202 	mul.w	r2, r1, r2
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8001332:	2201      	movs	r2, #1
 8001334:	2108      	movs	r1, #8
 8001336:	482a      	ldr	r0, [pc, #168]	@ (80013e0 <LCD_send_data_multi+0xe0>)
 8001338:	f003 fbd6 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();
 800133c:	2200      	movs	r2, #0
 800133e:	2110      	movs	r1, #16
 8001340:	4827      	ldr	r0, [pc, #156]	@ (80013e0 <LCD_send_data_multi+0xe0>)
 8001342:	f003 fbd1 	bl	8004ae8 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	429a      	cmp	r2, r3
 800134c:	d821      	bhi.n	8001392 <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 800134e:	4b23      	ldr	r3, [pc, #140]	@ (80013dc <LCD_send_data_multi+0xdc>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4821      	ldr	r0, [pc, #132]	@ (80013e4 <LCD_send_data_multi+0xe4>)
 800135e:	f005 fc9d 	bl	8006c9c <HAL_SPI_Transmit_DMA>
 8001362:	e02c      	b.n	80013be <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8001364:	bf00      	nop
 8001366:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <LCD_send_data_multi+0xdc>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0fa      	beq.n	8001366 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <LCD_send_data_multi+0xdc>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	b29b      	uxth	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <LCD_send_data_multi+0xe4>)
 8001380:	f005 fc8c 	bl	8006c9c <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4413      	add	r3, r2
 800138a:	607b      	str	r3, [r7, #4]
			nrFrames--;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3b01      	subs	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e5      	bne.n	8001364 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00f      	beq.n	80013be <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 800139e:	bf00      	nop
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <LCD_send_data_multi+0xdc>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0fa      	beq.n	80013a0 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <LCD_send_data_multi+0xdc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <LCD_send_data_multi+0xe4>)
 80013ba:	f005 fc6f 	bl	8006c9c <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 80013be:	bf00      	nop
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <LCD_send_data_multi+0xdc>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0fa      	beq.n	80013c0 <LCD_send_data_multi+0xc0>
	CS_D();
 80013ca:	2201      	movs	r2, #1
 80013cc:	2110      	movs	r1, #16
 80013ce:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <LCD_send_data_multi+0xe0>)
 80013d0:	f003 fb8a 	bl	8004ae8 <HAL_GPIO_WritePin>

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000328 	.word	0x20000328
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	20000180 	.word	0x20000180

080013e8 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 80013f2:	2201      	movs	r2, #1
 80013f4:	2108      	movs	r1, #8
 80013f6:	480c      	ldr	r0, [pc, #48]	@ (8001428 <LCD_send_data+0x40>)
 80013f8:	f003 fb76 	bl	8004ae8 <HAL_GPIO_WritePin>
	CS_A();
 80013fc:	2200      	movs	r2, #0
 80013fe:	2110      	movs	r1, #16
 8001400:	4809      	ldr	r0, [pc, #36]	@ (8001428 <LCD_send_data+0x40>)
 8001402:	f003 fb71 	bl	8004ae8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8001406:	1df9      	adds	r1, r7, #7
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	2201      	movs	r2, #1
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <LCD_send_data+0x44>)
 8001410:	f005 f83d 	bl	800648e <HAL_SPI_Transmit>

	CS_D();
 8001414:	2201      	movs	r2, #1
 8001416:	2110      	movs	r1, #16
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <LCD_send_data+0x40>)
 800141a:	f003 fb65 	bl	8004ae8 <HAL_GPIO_WritePin>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40020c00 	.word	0x40020c00
 800142c:	20000180 	.word	0x20000180

08001430 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8001434:	2200      	movs	r2, #0
 8001436:	2140      	movs	r1, #64	@ 0x40
 8001438:	487c      	ldr	r0, [pc, #496]	@ (800162c <ILI9488_driver_init+0x1fc>)
 800143a:	f003 fb55 	bl	8004ae8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800143e:	200a      	movs	r0, #10
 8001440:	f002 faa2 	bl	8003988 <HAL_Delay>
	RST_D();
 8001444:	2201      	movs	r2, #1
 8001446:	2140      	movs	r1, #64	@ 0x40
 8001448:	4878      	ldr	r0, [pc, #480]	@ (800162c <ILI9488_driver_init+0x1fc>)
 800144a:	f003 fb4d 	bl	8004ae8 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff ff32 	bl	80012b8 <LCD_send_command>
	HAL_Delay(150);
 8001454:	2096      	movs	r0, #150	@ 0x96
 8001456:	f002 fa97 	bl	8003988 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 800145a:	2011      	movs	r0, #17
 800145c:	f7ff ff2c 	bl	80012b8 <LCD_send_command>
	HAL_Delay(255);
 8001460:	20ff      	movs	r0, #255	@ 0xff
 8001462:	f002 fa91 	bl	8003988 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8001466:	20e0      	movs	r0, #224	@ 0xe0
 8001468:	f7ff ff26 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ffbb 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0C);
 8001472:	200c      	movs	r0, #12
 8001474:	f7ff ffb8 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x05);
 8001478:	2005      	movs	r0, #5
 800147a:	f7ff ffb5 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x04);
 800147e:	2004      	movs	r0, #4
 8001480:	f7ff ffb2 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0F);
 8001484:	200f      	movs	r0, #15
 8001486:	f7ff ffaf 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x06);
 800148a:	2006      	movs	r0, #6
 800148c:	f7ff ffac 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x3A);
 8001490:	203a      	movs	r0, #58	@ 0x3a
 8001492:	f7ff ffa9 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x56);
 8001496:	2056      	movs	r0, #86	@ 0x56
 8001498:	f7ff ffa6 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x4D);
 800149c:	204d      	movs	r0, #77	@ 0x4d
 800149e:	f7ff ffa3 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x03);
 80014a2:	2003      	movs	r0, #3
 80014a4:	f7ff ffa0 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0A);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f7ff ff9d 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x06);
 80014ae:	2006      	movs	r0, #6
 80014b0:	f7ff ff9a 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x30);
 80014b4:	2030      	movs	r0, #48	@ 0x30
 80014b6:	f7ff ff97 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x3E);
 80014ba:	203e      	movs	r0, #62	@ 0x3e
 80014bc:	f7ff ff94 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0F);
 80014c0:	200f      	movs	r0, #15
 80014c2:	f7ff ff91 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 80014c6:	20e1      	movs	r0, #225	@ 0xe1
 80014c8:	f7ff fef6 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ff8b 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x13);
 80014d2:	2013      	movs	r0, #19
 80014d4:	f7ff ff88 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x18);
 80014d8:	2018      	movs	r0, #24
 80014da:	f7ff ff85 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x01);
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff ff82 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x11);
 80014e4:	2011      	movs	r0, #17
 80014e6:	f7ff ff7f 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x06);
 80014ea:	2006      	movs	r0, #6
 80014ec:	f7ff ff7c 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x38);
 80014f0:	2038      	movs	r0, #56	@ 0x38
 80014f2:	f7ff ff79 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x34);
 80014f6:	2034      	movs	r0, #52	@ 0x34
 80014f8:	f7ff ff76 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x4D);
 80014fc:	204d      	movs	r0, #77	@ 0x4d
 80014fe:	f7ff ff73 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x06);
 8001502:	2006      	movs	r0, #6
 8001504:	f7ff ff70 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0D);
 8001508:	200d      	movs	r0, #13
 800150a:	f7ff ff6d 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0B);
 800150e:	200b      	movs	r0, #11
 8001510:	f7ff ff6a 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x31);
 8001514:	2031      	movs	r0, #49	@ 0x31
 8001516:	f7ff ff67 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x37);
 800151a:	2037      	movs	r0, #55	@ 0x37
 800151c:	f7ff ff64 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0F);
 8001520:	200f      	movs	r0, #15
 8001522:	f7ff ff61 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8001526:	20c0      	movs	r0, #192	@ 0xc0
 8001528:	f7ff fec6 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x18);
 800152c:	2018      	movs	r0, #24
 800152e:	f7ff ff5b 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x16);
 8001532:	2016      	movs	r0, #22
 8001534:	f7ff ff58 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8001538:	20c1      	movs	r0, #193	@ 0xc1
 800153a:	f7ff febd 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x45);
 800153e:	2045      	movs	r0, #69	@ 0x45
 8001540:	f7ff ff52 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8001544:	20c2      	movs	r0, #194	@ 0xc2
 8001546:	f7ff feb7 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x33);
 800154a:	2033      	movs	r0, #51	@ 0x33
 800154c:	f7ff ff4c 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8001550:	20c3      	movs	r0, #195	@ 0xc3
 8001552:	f7ff feb1 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x33);
 8001556:	2033      	movs	r0, #51	@ 0x33
 8001558:	f7ff ff46 	bl	80013e8 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 800155c:	2036      	movs	r0, #54	@ 0x36
 800155e:	f7ff feab 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8001562:	205c      	movs	r0, #92	@ 0x5c
 8001564:	f7ff ff40 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8001568:	203a      	movs	r0, #58	@ 0x3a
 800156a:	f7ff fea5 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 800156e:	2006      	movs	r0, #6
 8001570:	f7ff ff3a 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fe9f 	bl	80012b8 <LCD_send_command>
	LCD_send_command(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff fe9c 	bl	80012b8 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8001580:	20b0      	movs	r0, #176	@ 0xb0
 8001582:	f7ff fe99 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff ff2e 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 800158c:	20b1      	movs	r0, #177	@ 0xb1
 800158e:	f7ff fe93 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8001592:	20a0      	movs	r0, #160	@ 0xa0
 8001594:	f7ff ff28 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001598:	2011      	movs	r0, #17
 800159a:	f7ff ff25 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 800159e:	20b4      	movs	r0, #180	@ 0xb4
 80015a0:	f7ff fe8a 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff ff1f 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 80015aa:	20b5      	movs	r0, #181	@ 0xb5
 80015ac:	f7ff fe84 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x02);
 80015b0:	2002      	movs	r0, #2
 80015b2:	f7ff ff19 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x02);
 80015b6:	2002      	movs	r0, #2
 80015b8:	f7ff ff16 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x0A);
 80015bc:	200a      	movs	r0, #10
 80015be:	f7ff ff13 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x04);
 80015c2:	2004      	movs	r0, #4
 80015c4:	f7ff ff10 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 80015c8:	20b6      	movs	r0, #182	@ 0xb6
 80015ca:	f7ff fe75 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x02);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ff0a 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x02);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff ff07 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x3B);
 80015da:	203b      	movs	r0, #59	@ 0x3b
 80015dc:	f7ff ff04 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 80015e0:	20e9      	movs	r0, #233	@ 0xe9
 80015e2:	f7ff fe69 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fefe 	bl	80013e8 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 80015ec:	20f7      	movs	r0, #247	@ 0xf7
 80015ee:	f7ff fe63 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0xA9);
 80015f2:	20a9      	movs	r0, #169	@ 0xa9
 80015f4:	f7ff fef8 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x51);
 80015f8:	2051      	movs	r0, #81	@ 0x51
 80015fa:	f7ff fef5 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x2C);
 80015fe:	202c      	movs	r0, #44	@ 0x2c
 8001600:	f7ff fef2 	bl	80013e8 <LCD_send_data>
	LCD_send_data(0x82);
 8001604:	2082      	movs	r0, #130	@ 0x82
 8001606:	f7ff feef 	bl	80013e8 <LCD_send_data>


	LCD_send_command(0x11);
 800160a:	2011      	movs	r0, #17
 800160c:	f7ff fe54 	bl	80012b8 <LCD_send_command>
	HAL_Delay(255);
 8001610:	20ff      	movs	r0, #255	@ 0xff
 8001612:	f002 f9b9 	bl	8003988 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8001616:	2051      	movs	r0, #81	@ 0x51
 8001618:	f7ff fe4e 	bl	80012b8 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 800161c:	20ff      	movs	r0, #255	@ 0xff
 800161e:	f7ff fee3 	bl	80013e8 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8001622:	2029      	movs	r0, #41	@ 0x29
 8001624:	f7ff fe48 	bl	80012b8 <LCD_send_command>


}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020c00 	.word	0x40020c00

08001630 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	80fb      	strh	r3, [r7, #6]
 8001642:	4603      	mov	r3, r0
 8001644:	80bb      	strh	r3, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	807b      	strh	r3, [r7, #2]
 800164a:	4613      	mov	r3, r2
 800164c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 800164e:	202a      	movs	r0, #42	@ 0x2a
 8001650:	f7ff fe32 	bl	80012b8 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	733b      	strb	r3, [r7, #12]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	0a1b      	lsrs	r3, r3, #8
 8001668:	b29b      	uxth	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	73bb      	strb	r3, [r7, #14]
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2104      	movs	r1, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe40 	bl	8001300 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8001680:	202b      	movs	r0, #43	@ 0x2b
 8001682:	f7ff fe19 	bl	80012b8 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	733b      	strb	r3, [r7, #12]
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8001696:	883b      	ldrh	r3, [r7, #0]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	73bb      	strb	r3, [r7, #14]
 80016a0:	883b      	ldrh	r3, [r7, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2104      	movs	r1, #4
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe27 	bl	8001300 <LCD_send_data_multi>

	if(x == 'w')
 80016b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016b6:	2b77      	cmp	r3, #119	@ 0x77
 80016b8:	d102      	bne.n	80016c0 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 80016ba:	202c      	movs	r0, #44	@ 0x2c
 80016bc:	f7ff fdfc 	bl	80012b8 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 80016c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c4:	2b72      	cmp	r3, #114	@ 0x72
 80016c6:	d102      	bne.n	80016ce <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 80016c8:	202e      	movs	r0, #46	@ 0x2e
 80016ca:	f7ff fdf5 	bl	80012b8 <LCD_send_command>
	}


}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}
	...

080016d8 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4604      	mov	r4, r0
 80016e0:	4608      	mov	r0, r1
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4623      	mov	r3, r4
 80016e8:	80fb      	strh	r3, [r7, #6]
 80016ea:	4603      	mov	r3, r0
 80016ec:	80bb      	strh	r3, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	807b      	strh	r3, [r7, #2]
 80016f2:	4613      	mov	r3, r2
 80016f4:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 80016f6:	4b7d      	ldr	r3, [pc, #500]	@ (80018ec <read_pixel_frame+0x214>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b7b      	ldr	r3, [pc, #492]	@ (80018ec <read_pixel_frame+0x214>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001704:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8001706:	4b79      	ldr	r3, [pc, #484]	@ (80018ec <read_pixel_frame+0x214>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b77      	ldr	r3, [pc, #476]	@ (80018ec <read_pixel_frame+0x214>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001714:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8001716:	4b75      	ldr	r3, [pc, #468]	@ (80018ec <read_pixel_frame+0x214>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <read_pixel_frame+0x214>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001726:	4b71      	ldr	r3, [pc, #452]	@ (80018ec <read_pixel_frame+0x214>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <read_pixel_frame+0x214>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001734:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8001736:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <read_pixel_frame+0x218>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8001740:	887a      	ldrh	r2, [r7, #2]
 8001742:	88fb      	ldrh	r3, [r7, #6]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	bfb8      	it	lt
 800174a:	425b      	neglt	r3, r3
 800174c:	b29a      	uxth	r2, r3
 800174e:	8839      	ldrh	r1, [r7, #0]
 8001750:	88bb      	ldrh	r3, [r7, #4]
 8001752:	1acb      	subs	r3, r1, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	bfb8      	it	lt
 8001758:	425b      	neglt	r3, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	fb12 f303 	smulbb	r3, r2, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	0052      	lsls	r2, r2, #1
 8001766:	4413      	add	r3, r2
 8001768:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	753b      	strb	r3, [r7, #20]

    free(data);
 800176e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001770:	f00a fdca 	bl	800c308 <free>
    data = malloc(byteNr);
 8001774:	8afb      	ldrh	r3, [r7, #22]
 8001776:	4618      	mov	r0, r3
 8001778:	f00a fdbe 	bl	800c2f8 <malloc>
 800177c:	4603      	mov	r3, r0
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	3b01      	subs	r3, #1
 8001784:	807b      	strh	r3, [r7, #2]
    y--;
 8001786:	883b      	ldrh	r3, [r7, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	b29b      	uxth	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	743b      	strb	r3, [r7, #16]
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	747b      	strb	r3, [r7, #17]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	74bb      	strb	r3, [r7, #18]
 80017a6:	887b      	ldrh	r3, [r7, #2]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 80017ac:	88bb      	ldrh	r3, [r7, #4]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	733b      	strb	r3, [r7, #12]
 80017b6:	88bb      	ldrh	r3, [r7, #4]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	883b      	ldrh	r3, [r7, #0]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	73bb      	strb	r3, [r7, #14]
 80017c6:	883b      	ldrh	r3, [r7, #0]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]

    CS_A();
 80017cc:	2200      	movs	r2, #0
 80017ce:	2110      	movs	r1, #16
 80017d0:	4848      	ldr	r0, [pc, #288]	@ (80018f4 <read_pixel_frame+0x21c>)
 80017d2:	f003 f989 	bl	8004ae8 <HAL_GPIO_WritePin>

    DC_COMMAND();
 80017d6:	2200      	movs	r2, #0
 80017d8:	2108      	movs	r1, #8
 80017da:	4846      	ldr	r0, [pc, #280]	@ (80018f4 <read_pixel_frame+0x21c>)
 80017dc:	f003 f984 	bl	8004ae8 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 80017e0:	232a      	movs	r3, #42	@ 0x2a
 80017e2:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 80017e4:	f107 010b 	add.w	r1, r7, #11
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	2201      	movs	r2, #1
 80017ee:	483f      	ldr	r0, [pc, #252]	@ (80018ec <read_pixel_frame+0x214>)
 80017f0:	f004 fe4d 	bl	800648e <HAL_SPI_Transmit>
    DC_DATA();
 80017f4:	2201      	movs	r2, #1
 80017f6:	2108      	movs	r1, #8
 80017f8:	483e      	ldr	r0, [pc, #248]	@ (80018f4 <read_pixel_frame+0x21c>)
 80017fa:	f003 f975 	bl	8004ae8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 80017fe:	f107 0110 	add.w	r1, r7, #16
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	2204      	movs	r2, #4
 8001808:	4838      	ldr	r0, [pc, #224]	@ (80018ec <read_pixel_frame+0x214>)
 800180a:	f004 fe40 	bl	800648e <HAL_SPI_Transmit>

    DC_COMMAND();
 800180e:	2200      	movs	r2, #0
 8001810:	2108      	movs	r1, #8
 8001812:	4838      	ldr	r0, [pc, #224]	@ (80018f4 <read_pixel_frame+0x21c>)
 8001814:	f003 f968 	bl	8004ae8 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001818:	232b      	movs	r3, #43	@ 0x2b
 800181a:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 800181c:	f107 010a 	add.w	r1, r7, #10
 8001820:	f04f 33ff 	mov.w	r3, #4294967295
 8001824:	2201      	movs	r2, #1
 8001826:	4831      	ldr	r0, [pc, #196]	@ (80018ec <read_pixel_frame+0x214>)
 8001828:	f004 fe31 	bl	800648e <HAL_SPI_Transmit>
    DC_DATA();
 800182c:	2201      	movs	r2, #1
 800182e:	2108      	movs	r1, #8
 8001830:	4830      	ldr	r0, [pc, #192]	@ (80018f4 <read_pixel_frame+0x21c>)
 8001832:	f003 f959 	bl	8004ae8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001836:	f107 010c 	add.w	r1, r7, #12
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	2204      	movs	r2, #4
 8001840:	482a      	ldr	r0, [pc, #168]	@ (80018ec <read_pixel_frame+0x214>)
 8001842:	f004 fe24 	bl	800648e <HAL_SPI_Transmit>

    DC_COMMAND();
 8001846:	2200      	movs	r2, #0
 8001848:	2108      	movs	r1, #8
 800184a:	482a      	ldr	r0, [pc, #168]	@ (80018f4 <read_pixel_frame+0x21c>)
 800184c:	f003 f94c 	bl	8004ae8 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001850:	232e      	movs	r3, #46	@ 0x2e
 8001852:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001854:	f107 0109 	add.w	r1, r7, #9
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
 800185c:	2201      	movs	r2, #1
 800185e:	4823      	ldr	r0, [pc, #140]	@ (80018ec <read_pixel_frame+0x214>)
 8001860:	f004 fe15 	bl	800648e <HAL_SPI_Transmit>
    DC_DATA();
 8001864:	2201      	movs	r2, #1
 8001866:	2108      	movs	r1, #8
 8001868:	4822      	ldr	r0, [pc, #136]	@ (80018f4 <read_pixel_frame+0x21c>)
 800186a:	f003 f93d 	bl	8004ae8 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 800186e:	f107 0114 	add.w	r1, r7, #20
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	2201      	movs	r2, #1
 8001878:	481c      	ldr	r0, [pc, #112]	@ (80018ec <read_pixel_frame+0x214>)
 800187a:	f004 ff4c 	bl	8006716 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 800187e:	8afb      	ldrh	r3, [r7, #22]
 8001880:	461a      	mov	r2, r3
 8001882:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001884:	4819      	ldr	r0, [pc, #100]	@ (80018ec <read_pixel_frame+0x214>)
 8001886:	f005 fabb 	bl	8006e00 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 800188a:	bf00      	nop
 800188c:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <read_pixel_frame+0x218>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0fa      	beq.n	800188c <read_pixel_frame+0x1b4>
    CS_D();
 8001896:	2201      	movs	r2, #1
 8001898:	2110      	movs	r1, #16
 800189a:	4816      	ldr	r0, [pc, #88]	@ (80018f4 <read_pixel_frame+0x21c>)
 800189c:	f003 f924 	bl	8004ae8 <HAL_GPIO_WritePin>

    free(data);
 80018a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018a2:	f00a fd31 	bl	800c308 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <read_pixel_frame+0x214>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <read_pixel_frame+0x214>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018b4:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80018b6:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <read_pixel_frame+0x214>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <read_pixel_frame+0x214>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80018c4:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <read_pixel_frame+0x214>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <read_pixel_frame+0x214>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <read_pixel_frame+0x214>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <read_pixel_frame+0x214>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018e0:	601a      	str	r2, [r3, #0]

}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000180 	.word	0x20000180
 80018f0:	20000329 	.word	0x20000329
 80018f4:	40020c00 	.word	0x40020c00

080018f8 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <HAL_SPI_TxCpltCallback+0x1c>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]

  }
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000328 	.word	0x20000328

08001918 <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 8001920:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <HAL_SPI_RxCpltCallback+0x1c>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]

  }
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000329 	.word	0x20000329

08001938 <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]

  }
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2000032a 	.word	0x2000032a

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800195e:	b082      	sub	sp, #8
 8001960:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001962:	f001 ff9f 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 fba7 	bl	80020b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f000 fd43 	bl	80023f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f000 fd03 	bl	8002378 <MX_DMA_Init>
  MX_SPI1_Init();
 8001972:	f000 fc55 	bl	8002220 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001976:	f000 fcd5 	bl	8002324 <MX_USART1_UART_Init>
  MX_DAC_Init();
 800197a:	f000 fc07 	bl	800218c <MX_DAC_Init>
  MX_TIM2_Init();
 800197e:	f000 fc85 	bl	800228c <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8001982:	f000 fc2d 	bl	80021e0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001986:	f007 fe3b 	bl	8009600 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 800198a:	f000 fd97 	bl	80024bc <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 800198e:	f7ff fd4f 	bl	8001430 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8001992:	48e1      	ldr	r0, [pc, #900]	@ (8001d18 <main+0x3c0>)
 8001994:	f005 fef2 	bl	800777c <HAL_TIM_Base_Start>



  fill_screen1(0xF100);
 8001998:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800199c:	f7fe fe72 	bl	8000684 <fill_screen1>
  HAL_Delay(1000);
 80019a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a4:	f001 fff0 	bl	8003988 <HAL_Delay>
  fill_screen2(0xF00F);
 80019a8:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 80019ac:	f7fe feca 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b4:	f001 ffe8 	bl	8003988 <HAL_Delay>
  fill_screen2(0xFFFF);
 80019b8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80019bc:	f7fe fec2 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 80019c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019c4:	f001 ffe0 	bl	8003988 <HAL_Delay>

  unsigned int startTick = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80019ce:	f102 0218 	add.w	r2, r2, #24
 80019d2:	6013      	str	r3, [r2, #0]
  unsigned int endTick = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80019da:	f102 0214 	add.w	r2, r2, #20
 80019de:	6013      	str	r3, [r2, #0]
  unsigned int getTime = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80019e6:	f102 0210 	add.w	r2, r2, #16
 80019ea:	6013      	str	r3, [r2, #0]
  ENTITY entity;


  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 80019ec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80019f0:	f7fe fea8 	bl	8000744 <fill_screen2>

  entity.x0 = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80019fa:	f102 021a 	add.w	r2, r2, #26
 80019fe:	8013      	strh	r3, [r2, #0]
  entity.y0 = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a06:	f102 021c 	add.w	r2, r2, #28
 8001a0a:	8013      	strh	r3, [r2, #0]
  entity.id = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a12:	f102 0218 	add.w	r2, r2, #24
 8001a16:	7013      	strb	r3, [r2, #0]
  draw_entity(&entity, "graphic/img8.bin");
 8001a18:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a1c:	f103 0318 	add.w	r3, r3, #24
 8001a20:	49be      	ldr	r1, [pc, #760]	@ (8001d1c <main+0x3c4>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f902 	bl	8000c2c <draw_entity>
  HAL_Delay(1000);
 8001a28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a2c:	f001 ffac 	bl	8003988 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001a30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a34:	f7fe fe86 	bl	8000744 <fill_screen2>
  scaling_entity(&entity, 0.5, "graphic/img8.bin", "img8.bin");
 8001a38:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a3c:	f103 0318 	add.w	r3, r3, #24
 8001a40:	4ab7      	ldr	r2, [pc, #732]	@ (8001d20 <main+0x3c8>)
 8001a42:	49b6      	ldr	r1, [pc, #728]	@ (8001d1c <main+0x3c4>)
 8001a44:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff faed 	bl	8001028 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001a4e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a52:	f103 0304 	add.w	r3, r3, #4
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a5c:	f103 0318 	add.w	r3, r3, #24
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f8e2 	bl	8000c2c <draw_entity>

  HAL_Delay(1000);
 8001a68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a6c:	f001 ff8c 	bl	8003988 <HAL_Delay>

  fill_screen2(0xFFFF);
 8001a70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a74:	f7fe fe66 	bl	8000744 <fill_screen2>
  draw_entity(&entity, "graphic/multi2.bin");
 8001a78:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a7c:	f103 0318 	add.w	r3, r3, #24
 8001a80:	49a8      	ldr	r1, [pc, #672]	@ (8001d24 <main+0x3cc>)
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f8d2 	bl	8000c2c <draw_entity>
  HAL_Delay(1000);
 8001a88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a8c:	f001 ff7c 	bl	8003988 <HAL_Delay>
  scaling_entity(&entity, 100, "graphic/multi2.bin", "multi2.bin");
 8001a90:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a94:	f103 0318 	add.w	r3, r3, #24
 8001a98:	4aa3      	ldr	r2, [pc, #652]	@ (8001d28 <main+0x3d0>)
 8001a9a:	49a2      	ldr	r1, [pc, #648]	@ (8001d24 <main+0x3cc>)
 8001a9c:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8001d2c <main+0x3d4>
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fac1 	bl	8001028 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001aa6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001aaa:	f103 0304 	add.w	r3, r3, #4
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ab4:	f103 0318 	add.w	r3, r3, #24
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f8b6 	bl	8000c2c <draw_entity>
  HAL_Delay(1000);
 8001ac0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ac4:	f001 ff60 	bl	8003988 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001ace:	f102 020a 	add.w	r2, r2, #10
 8001ad2:	8013      	strh	r3, [r2, #0]
  ent.y0 = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001ada:	f102 020c 	add.w	r2, r2, #12
 8001ade:	8013      	strh	r3, [r2, #0]
  ent.id = 0x00;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001ae6:	f102 0208 	add.w	r2, r2, #8
 8001aea:	7013      	strb	r3, [r2, #0]
  draw_entity(&ent, "graphic/img5.bin");
 8001aec:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001af0:	f103 0308 	add.w	r3, r3, #8
 8001af4:	498e      	ldr	r1, [pc, #568]	@ (8001d30 <main+0x3d8>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f898 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001afc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b00:	f001 ff42 	bl	8003988 <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8001b04:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b08:	f103 0308 	add.w	r3, r3, #8
 8001b0c:	4989      	ldr	r1, [pc, #548]	@ (8001d34 <main+0x3dc>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f88c 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b18:	f001 ff36 	bl	8003988 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 8001b1c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b20:	f103 0308 	add.w	r3, r3, #8
 8001b24:	497d      	ldr	r1, [pc, #500]	@ (8001d1c <main+0x3c4>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f880 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b30:	f001 ff2a 	bl	8003988 <HAL_Delay>
  draw_entity(&ent, "graphic/img9.bin");
 8001b34:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b38:	f103 0308 	add.w	r3, r3, #8
 8001b3c:	497e      	ldr	r1, [pc, #504]	@ (8001d38 <main+0x3e0>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f874 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b48:	f001 ff1e 	bl	8003988 <HAL_Delay>
  startTick = HAL_GetTick();
 8001b4c:	f001 ff10 	bl	8003970 <HAL_GetTick>
 8001b50:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b54:	f103 0318 	add.w	r3, r3, #24
 8001b58:	6018      	str	r0, [r3, #0]
  draw_entity(&ent, "graphic/img92.bin");
 8001b5a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b5e:	f103 0308 	add.w	r3, r3, #8
 8001b62:	4976      	ldr	r1, [pc, #472]	@ (8001d3c <main+0x3e4>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff f861 	bl	8000c2c <draw_entity>
  endTick = HAL_GetTick();
 8001b6a:	f001 ff01 	bl	8003970 <HAL_GetTick>
 8001b6e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b72:	f103 0314 	add.w	r3, r3, #20
 8001b76:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001b78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b7c:	f103 0314 	add.w	r3, r3, #20
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001b86:	f103 0318 	add.w	r3, r3, #24
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001b92:	f102 0210 	add.w	r2, r2, #16
 8001b96:	6013      	str	r3, [r2, #0]

  fill_screen2(0x0000);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7fe fdd3 	bl	8000744 <fill_screen2>
  draw_entity(&ent, "graphic/pixel1.bin");
 8001b9e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ba2:	f103 0308 	add.w	r3, r3, #8
 8001ba6:	4966      	ldr	r1, [pc, #408]	@ (8001d40 <main+0x3e8>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f83f 	bl	8000c2c <draw_entity>
  HAL_Delay(3000);
 8001bae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001bb2:	f001 fee9 	bl	8003988 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  entity.x0 = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001bbc:	f102 021a 	add.w	r2, r2, #26
 8001bc0:	8013      	strh	r3, [r2, #0]
  entity.y0 = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001bc8:	f102 021c 	add.w	r2, r2, #28
 8001bcc:	8013      	strh	r3, [r2, #0]
  entity.x1 = 64;
 8001bce:	2340      	movs	r3, #64	@ 0x40
 8001bd0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001bd4:	f102 021e 	add.w	r2, r2, #30
 8001bd8:	8013      	strh	r3, [r2, #0]
  entity.y1 = 64;
 8001bda:	2340      	movs	r3, #64	@ 0x40
 8001bdc:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001be0:	8013      	strh	r3, [r2, #0]
  entity.color = 0xF100;
 8001be2:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001be6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001bea:	f102 0204 	add.w	r2, r2, #4
 8001bee:	8013      	strh	r3, [r2, #0]

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 8001bf0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bf4:	f001 fec8 	bl	8003988 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 8001bf8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001bfc:	f103 031a 	add.w	r3, r3, #26
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3364      	adds	r3, #100	@ 0x64
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b219      	sxth	r1, r3
 8001c0c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c10:	f103 031c 	add.w	r3, r3, #28
 8001c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3364      	adds	r3, #100	@ 0x64
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001c24:	f100 0018 	add.w	r0, r0, #24
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f7ff f8ff 	bl	8000e2c <translation_entity>
  HAL_Delay(2000);
 8001c2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c32:	f001 fea9 	bl	8003988 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8001c36:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c3a:	f103 031a 	add.w	r3, r3, #26
 8001c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3320      	adds	r3, #32
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b219      	sxth	r1, r3
 8001c4a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c4e:	f103 031c 	add.w	r3, r3, #28
 8001c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3320      	adds	r3, #32
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001c62:	f100 0018 	add.w	r0, r0, #24
 8001c66:	2301      	movs	r3, #1
 8001c68:	f7ff f8e0 	bl	8000e2c <translation_entity>
  HAL_Delay(500);
 8001c6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c70:	f001 fe8a 	bl	8003988 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8001c74:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c78:	f103 031a 	add.w	r3, r3, #26
 8001c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	330c      	adds	r3, #12
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b219      	sxth	r1, r3
 8001c88:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c8c:	f103 031c 	add.w	r3, r3, #28
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3320      	adds	r3, #32
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001ca0:	f100 0018 	add.w	r0, r0, #24
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f7ff f8c1 	bl	8000e2c <translation_entity>
  HAL_Delay(500);
 8001caa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cae:	f001 fe6b 	bl	8003988 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8001cb2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001cb6:	f103 031a 	add.w	r3, r3, #26
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b219      	sxth	r1, r3
 8001cc6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001cca:	f103 031c 	add.w	r3, r3, #28
 8001cce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cd2:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001cd6:	f100 0018 	add.w	r0, r0, #24
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f7ff f8a6 	bl	8000e2c <translation_entity>
  HAL_Delay(500);
 8001ce0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ce4:	f001 fe50 	bl	8003988 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8001ce8:	4816      	ldr	r0, [pc, #88]	@ (8001d44 <main+0x3ec>)
 8001cea:	f7fe fbed 	bl	80004c8 <play_audio_file>

  char *fileData = NULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001cf4:	f102 020c 	add.w	r2, r2, #12
 8001cf8:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 8001cfa:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cfe:	f103 030c 	add.w	r3, r3, #12
 8001d02:	6819      	ldr	r1, [r3, #0]
 8001d04:	4810      	ldr	r0, [pc, #64]	@ (8001d48 <main+0x3f0>)
 8001d06:	f000 fbe7 	bl	80024d8 <read_file>
  HAL_Delay(1000);
 8001d0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d0e:	f001 fe3b 	bl	8003988 <HAL_Delay>

  uint32_t sampleData[1024]; /*23 de ms pentru redare DMA dintre care 7 ms pentru citire din fisier*/
  	  	  	  	  	  	  	 /*Vor ramane aproximativ 16 ms pentru prelucrarea frame-ului (pentru 1024 de esantioane)*/

  startTick = HAL_GetTick();
 8001d12:	f001 fe2d 	bl	8003970 <HAL_GetTick>
 8001d16:	e019      	b.n	8001d4c <main+0x3f4>
 8001d18:	20000298 	.word	0x20000298
 8001d1c:	0800c674 	.word	0x0800c674
 8001d20:	0800c688 	.word	0x0800c688
 8001d24:	0800c694 	.word	0x0800c694
 8001d28:	0800c6a8 	.word	0x0800c6a8
 8001d2c:	42c80000 	.word	0x42c80000
 8001d30:	0800c6b4 	.word	0x0800c6b4
 8001d34:	0800c6c8 	.word	0x0800c6c8
 8001d38:	0800c6dc 	.word	0x0800c6dc
 8001d3c:	0800c6f0 	.word	0x0800c6f0
 8001d40:	0800c704 	.word	0x0800c704
 8001d44:	0800c718 	.word	0x0800c718
 8001d48:	0800c728 	.word	0x0800c728
 8001d4c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d50:	f103 0318 	add.w	r3, r3, #24
 8001d54:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	3b18      	subs	r3, #24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	48d0      	ldr	r0, [pc, #832]	@ (80020a0 <main+0x748>)
 8001d60:	f000 fc66 	bl	8002630 <read_audio_file>
  endTick = HAL_GetTick();
 8001d64:	f001 fe04 	bl	8003970 <HAL_GetTick>
 8001d68:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d6c:	f103 0314 	add.w	r3, r3, #20
 8001d70:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001d72:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d76:	f103 0314 	add.w	r3, r3, #20
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d80:	f103 0318 	add.w	r3, r3, #24
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d8c:	f102 0210 	add.w	r2, r2, #16
 8001d90:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001d92:	2064      	movs	r0, #100	@ 0x64
 8001d94:	f001 fdf8 	bl	8003988 <HAL_Delay>

  startTick = HAL_GetTick();
 8001d98:	f001 fdea 	bl	8003970 <HAL_GetTick>
 8001d9c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001da0:	f103 0318 	add.w	r3, r3, #24
 8001da4:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	3b18      	subs	r3, #24
 8001dac:	4619      	mov	r1, r3
 8001dae:	48bc      	ldr	r0, [pc, #752]	@ (80020a0 <main+0x748>)
 8001db0:	f000 fc3e 	bl	8002630 <read_audio_file>
  endTick = HAL_GetTick();
 8001db4:	f001 fddc 	bl	8003970 <HAL_GetTick>
 8001db8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001dbc:	f103 0314 	add.w	r3, r3, #20
 8001dc0:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001dc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001dc6:	f103 0314 	add.w	r3, r3, #20
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001dd0:	f103 0318 	add.w	r3, r3, #24
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001ddc:	f102 0210 	add.w	r2, r2, #16
 8001de0:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001de2:	2064      	movs	r0, #100	@ 0x64
 8001de4:	f001 fdd0 	bl	8003988 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	3b18      	subs	r3, #24
 8001dee:	4619      	mov	r1, r3
 8001df0:	48ac      	ldr	r0, [pc, #688]	@ (80020a4 <main+0x74c>)
 8001df2:	f000 fc1d 	bl	8002630 <read_audio_file>
  HAL_Delay(100);
 8001df6:	2064      	movs	r0, #100	@ 0x64
 8001df8:	f001 fdc6 	bl	8003988 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001dfc:	f107 0320 	add.w	r3, r7, #32
 8001e00:	3b18      	subs	r3, #24
 8001e02:	4619      	mov	r1, r3
 8001e04:	48a7      	ldr	r0, [pc, #668]	@ (80020a4 <main+0x74c>)
 8001e06:	f000 fc13 	bl	8002630 <read_audio_file>
  HAL_Delay(100);
 8001e0a:	2064      	movs	r0, #100	@ 0x64
 8001e0c:	f001 fdbc 	bl	8003988 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	3b18      	subs	r3, #24
 8001e16:	4619      	mov	r1, r3
 8001e18:	48a2      	ldr	r0, [pc, #648]	@ (80020a4 <main+0x74c>)
 8001e1a:	f000 fc09 	bl	8002630 <read_audio_file>
  HAL_Delay(100);
 8001e1e:	2064      	movs	r0, #100	@ 0x64
 8001e20:	f001 fdb2 	bl	8003988 <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001e2a:	f102 021f 	add.w	r2, r2, #31
 8001e2e:	7013      	strb	r3, [r2, #0]
 8001e30:	e09c      	b.n	8001f6c <main+0x614>
  {
	  for(uint8_t j=0; j<100;j++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001e38:	f102 021e 	add.w	r2, r2, #30
 8001e3c:	7013      	strb	r3, [r2, #0]
 8001e3e:	e082      	b.n	8001f46 <main+0x5ee>
	  {

		  if(i==j)
 8001e40:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e44:	f103 031f 	add.w	r3, r3, #31
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e4e:	f103 031e 	add.w	r3, r3, #30
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d111      	bne.n	8001e7c <main+0x524>
		  {
			  draw_pixel(i,j,0xF100);
 8001e58:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e5c:	f103 031f 	add.w	r3, r3, #31
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001e68:	f102 021e 	add.w	r2, r2, #30
 8001e6c:	7812      	ldrb	r2, [r2, #0]
 8001e6e:	b291      	uxth	r1, r2
 8001e70:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fbdb 	bl	8000630 <draw_pixel>
			  continue;
 8001e7a:	e059      	b.n	8001f30 <main+0x5d8>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001e7c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e80:	f103 031f 	add.w	r3, r3, #31
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b50      	cmp	r3, #80	@ 0x50
 8001e88:	d106      	bne.n	8001e98 <main+0x540>
 8001e8a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e8e:	f103 031e 	add.w	r3, r3, #30
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b14      	cmp	r3, #20
 8001e96:	d029      	beq.n	8001eec <main+0x594>
 8001e98:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001e9c:	f103 031f 	add.w	r3, r3, #31
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b50      	cmp	r3, #80	@ 0x50
 8001ea4:	d106      	bne.n	8001eb4 <main+0x55c>
 8001ea6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001eaa:	f103 031e 	add.w	r3, r3, #30
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b13      	cmp	r3, #19
 8001eb2:	d01b      	beq.n	8001eec <main+0x594>
 8001eb4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001eb8:	f103 031f 	add.w	r3, r3, #31
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b51      	cmp	r3, #81	@ 0x51
 8001ec0:	d106      	bne.n	8001ed0 <main+0x578>
 8001ec2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ec6:	f103 031e 	add.w	r3, r3, #30
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b14      	cmp	r3, #20
 8001ece:	d00d      	beq.n	8001eec <main+0x594>
 8001ed0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ed4:	f103 031f 	add.w	r3, r3, #31
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b51      	cmp	r3, #81	@ 0x51
 8001edc:	d117      	bne.n	8001f0e <main+0x5b6>
 8001ede:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ee2:	f103 031e 	add.w	r3, r3, #30
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b13      	cmp	r3, #19
 8001eea:	d110      	bne.n	8001f0e <main+0x5b6>
		  {
			  draw_pixel(i,j,0x001F);
 8001eec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ef0:	f103 031f 	add.w	r3, r3, #31
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001efc:	f102 021e 	add.w	r2, r2, #30
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	b291      	uxth	r1, r2
 8001f04:	221f      	movs	r2, #31
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb92 	bl	8000630 <draw_pixel>
			  continue;
 8001f0c:	e010      	b.n	8001f30 <main+0x5d8>
		  }


		  draw_pixel(i,j,0xFFFF);
 8001f0e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f12:	f103 031f 	add.w	r3, r3, #31
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001f1e:	f102 021e 	add.w	r2, r2, #30
 8001f22:	7812      	ldrb	r2, [r2, #0]
 8001f24:	b291      	uxth	r1, r2
 8001f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fb80 	bl	8000630 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8001f30:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f34:	f103 031e 	add.w	r3, r3, #30
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001f40:	f102 021e 	add.w	r2, r2, #30
 8001f44:	7013      	strb	r3, [r2, #0]
 8001f46:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f4a:	f103 031e 	add.w	r3, r3, #30
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b63      	cmp	r3, #99	@ 0x63
 8001f52:	f67f af75 	bls.w	8001e40 <main+0x4e8>
  for(uint8_t i=0;i<100;i++)
 8001f56:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f5a:	f103 031f 	add.w	r3, r3, #31
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001f66:	f102 021f 	add.w	r2, r2, #31
 8001f6a:	7013      	strb	r3, [r2, #0]
 8001f6c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001f70:	f103 031f 	add.w	r3, r3, #31
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b63      	cmp	r3, #99	@ 0x63
 8001f78:	f67f af5b 	bls.w	8001e32 <main+0x4da>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8001f7c:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001f80:	f7fe fbe0 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001f84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f88:	f001 fcfe 	bl	8003988 <HAL_Delay>
  fill_screen2(0xF150);
 8001f8c:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001f90:	f7fe fbd8 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001f94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f98:	f001 fcf6 	bl	8003988 <HAL_Delay>
  fill_screen2(0xF111);
 8001f9c:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001fa0:	f7fe fbd0 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fa4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa8:	f001 fcee 	bl	8003988 <HAL_Delay>
  fill_screen2(0xF10F);
 8001fac:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001fb0:	f7fe fbc8 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb8:	f001 fce6 	bl	8003988 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001fbc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fc0:	f7fe fbc0 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc8:	f001 fcde 	bl	8003988 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001fcc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fd0:	f7fe fbb8 	bl	8000744 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	230c      	movs	r3, #12
 8001fe0:	4a31      	ldr	r2, [pc, #196]	@ (80020a8 <main+0x750>)
 8001fe2:	21c8      	movs	r1, #200	@ 0xc8
 8001fe4:	2024      	movs	r0, #36	@ 0x24
 8001fe6:	f7fe fd09 	bl	80009fc <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8001fea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <main+0x754>)
 8001ff2:	f842 3c3c 	str.w	r3, [r2, #-60]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	3b1c      	subs	r3, #28
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	482b      	ldr	r0, [pc, #172]	@ (80020b0 <main+0x758>)
 8002002:	f004 fe4b 	bl	8006c9c <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8002006:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800200a:	2250      	movs	r2, #80	@ 0x50
 800200c:	2114      	movs	r1, #20
 800200e:	2014      	movs	r0, #20
 8002010:	f7fe fd38 	bl	8000a84 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8002014:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002018:	2250      	movs	r2, #80	@ 0x50
 800201a:	2114      	movs	r1, #20
 800201c:	2014      	movs	r0, #20
 800201e:	f7fe fd6c 	bl	8000afa <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <main+0x75c>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002028:	221f      	movs	r2, #31
 800202a:	2100      	movs	r1, #0
 800202c:	2000      	movs	r0, #0
 800202e:	f7fe faff 	bl	8000630 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002032:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002036:	2100      	movs	r1, #0
 8002038:	2001      	movs	r0, #1
 800203a:	f7fe faf9 	bl	8000630 <draw_pixel>
  draw_pixel(0,1,0x001F);
 800203e:	221f      	movs	r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	2000      	movs	r0, #0
 8002044:	f7fe faf4 	bl	8000630 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002048:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800204c:	2101      	movs	r1, #1
 800204e:	2001      	movs	r0, #1
 8002050:	f7fe faee 	bl	8000630 <draw_pixel>

  HAL_Delay(50);
 8002054:	2032      	movs	r0, #50	@ 0x32
 8002056:	f001 fc97 	bl	8003988 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 800205a:	2001      	movs	r0, #1
 800205c:	f00a f94c 	bl	800c2f8 <malloc>
 8002060:	4603      	mov	r3, r0
 8002062:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8002066:	f102 0208 	add.w	r2, r2, #8
 800206a:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 800206c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002070:	f103 0308 	add.w	r3, r3, #8
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2302      	movs	r3, #2
 800207a:	2202      	movs	r2, #2
 800207c:	2100      	movs	r1, #0
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fb2a 	bl	80016d8 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8002084:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002088:	f103 0308 	add.w	r3, r3, #8
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	f00a f93b 	bl	800c308 <free>

  HAL_Delay(3000);
 8002092:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002096:	f001 fc77 	bl	8003988 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800209a:	bf00      	nop
 800209c:	e7fd      	b.n	800209a <main+0x742>
 800209e:	bf00      	nop
 80020a0:	0800c738 	.word	0x0800c738
 80020a4:	0800c728 	.word	0x0800c728
 80020a8:	0800c74c 	.word	0x0800c74c
 80020ac:	04030201 	.word	0x04030201
 80020b0:	20000180 	.word	0x20000180
 80020b4:	20000328 	.word	0x20000328

080020b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b094      	sub	sp, #80	@ 0x50
 80020bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020be:	f107 0320 	add.w	r3, r7, #32
 80020c2:	2230      	movs	r2, #48	@ 0x30
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00a fa0a 	bl	800c4e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	4b28      	ldr	r3, [pc, #160]	@ (8002184 <SystemClock_Config+0xcc>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	4a27      	ldr	r2, [pc, #156]	@ (8002184 <SystemClock_Config+0xcc>)
 80020e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ec:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <SystemClock_Config+0xcc>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <SystemClock_Config+0xd0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a21      	ldr	r2, [pc, #132]	@ (8002188 <SystemClock_Config+0xd0>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <SystemClock_Config+0xd0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002114:	2301      	movs	r3, #1
 8002116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002118:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211e:	2302      	movs	r3, #2
 8002120:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002122:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002128:	2304      	movs	r3, #4
 800212a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800212c:	23a8      	movs	r3, #168	@ 0xa8
 800212e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002130:	2302      	movs	r3, #2
 8002132:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002134:	2307      	movs	r3, #7
 8002136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002138:	f107 0320 	add.w	r3, r7, #32
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fced 	bl	8004b1c <HAL_RCC_OscConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002148:	f000 f9b2 	bl	80024b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800214c:	230f      	movs	r3, #15
 800214e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002150:	2302      	movs	r3, #2
 8002152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002158:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800215c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800215e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002162:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	2105      	movs	r1, #5
 800216a:	4618      	mov	r0, r3
 800216c:	f002 ff4e 	bl	800500c <HAL_RCC_ClockConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002176:	f000 f99b 	bl	80024b0 <Error_Handler>
  }
}
 800217a:	bf00      	nop
 800217c:	3750      	adds	r7, #80	@ 0x50
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40007000 	.word	0x40007000

0800218c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002192:	463b      	mov	r3, r7
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800219a:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <MX_DAC_Init+0x4c>)
 800219c:	4a0f      	ldr	r2, [pc, #60]	@ (80021dc <MX_DAC_Init+0x50>)
 800219e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021a0:	480d      	ldr	r0, [pc, #52]	@ (80021d8 <MX_DAC_Init+0x4c>)
 80021a2:	f001 fd26 	bl	8003bf2 <HAL_DAC_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80021ac:	f000 f980 	bl	80024b0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80021b0:	2324      	movs	r3, #36	@ 0x24
 80021b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <MX_DAC_Init+0x4c>)
 80021c0:	f001 fe10 	bl	8003de4 <HAL_DAC_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80021ca:	f000 f971 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000088 	.word	0x20000088
 80021dc:	40007400 	.word	0x40007400

080021e0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <MX_SDIO_SD_Init+0x3c>)
 80021e8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <MX_SDIO_SD_Init+0x38>)
 800220a:	2208      	movs	r2, #8
 800220c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	200000fc 	.word	0x200000fc
 800221c:	40012c00 	.word	0x40012c00

08002220 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002226:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <MX_SPI1_Init+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <MX_SPI1_Init+0x64>)
 800222c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002230:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <MX_SPI1_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002246:	2200      	movs	r2, #0
 8002248:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MX_SPI1_Init+0x64>)
 800224c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002250:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <MX_SPI1_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_SPI1_Init+0x64>)
 800226c:	220a      	movs	r2, #10
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_SPI1_Init+0x64>)
 8002272:	f004 f883 	bl	800637c <HAL_SPI_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800227c:	f000 f918 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000180 	.word	0x20000180
 8002288:	40013000 	.word	0x40013000

0800228c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	463b      	mov	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022b2:	2253      	movs	r2, #83	@ 0x53
 80022b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022be:	2217      	movs	r2, #23
 80022c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ce:	4814      	ldr	r0, [pc, #80]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022d0:	f005 fa04 	bl	80076dc <HAL_TIM_Base_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80022da:	f000 f8e9 	bl	80024b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4619      	mov	r1, r3
 80022ea:	480d      	ldr	r0, [pc, #52]	@ (8002320 <MX_TIM2_Init+0x94>)
 80022ec:	f005 faae 	bl	800784c <HAL_TIM_ConfigClockSource>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80022f6:	f000 f8db 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022fa:	2320      	movs	r3, #32
 80022fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002302:	463b      	mov	r3, r7
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <MX_TIM2_Init+0x94>)
 8002308:	f005 fcae 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002312:	f000 f8cd 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000298 	.word	0x20000298

08002324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <MX_USART1_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 8002330:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_USART1_UART_Init+0x4c>)
 800235c:	f005 fd00 	bl	8007d60 <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f000 f8a3 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200002e0 	.word	0x200002e0
 8002374:	40011000 	.word	0x40011000

08002378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <MX_DMA_Init+0x78>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	4a1a      	ldr	r2, [pc, #104]	@ (80023f0 <MX_DMA_Init+0x78>)
 8002388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800238c:	6313      	str	r3, [r2, #48]	@ 0x30
 800238e:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <MX_DMA_Init+0x78>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <MX_DMA_Init+0x78>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <MX_DMA_Init+0x78>)
 80023a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <MX_DMA_Init+0x78>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2010      	movs	r0, #16
 80023bc:	f001 fbe3 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023c0:	2010      	movs	r0, #16
 80023c2:	f001 fbfc 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2038      	movs	r0, #56	@ 0x38
 80023cc:	f001 fbdb 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023d0:	2038      	movs	r0, #56	@ 0x38
 80023d2:	f001 fbf4 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	203b      	movs	r0, #59	@ 0x3b
 80023dc:	f001 fbd3 	bl	8003b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80023e0:	203b      	movs	r0, #59	@ 0x3b
 80023e2:	f001 fbec 	bl	8003bbe <HAL_NVIC_EnableIRQ>

}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800

080023f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	@ 0x28
 80023f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a25      	ldr	r2, [pc, #148]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244a:	4a17      	ldr	r2, [pc, #92]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	6313      	str	r3, [r2, #48]	@ 0x30
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a10      	ldr	r2, [pc, #64]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002468:	f043 0308 	orr.w	r3, r3, #8
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <MX_GPIO_Init+0xb4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2158      	movs	r1, #88	@ 0x58
 800247e:	480b      	ldr	r0, [pc, #44]	@ (80024ac <MX_GPIO_Init+0xb8>)
 8002480:	f002 fb32 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8002484:	2358      	movs	r3, #88	@ 0x58
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4804      	ldr	r0, [pc, #16]	@ (80024ac <MX_GPIO_Init+0xb8>)
 800249c:	f002 f988 	bl	80047b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024a0:	bf00      	nop
 80024a2:	3728      	adds	r7, #40	@ 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <Error_Handler+0x8>

080024bc <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	4903      	ldr	r1, [pc, #12]	@ (80024d0 <init_cardSD+0x14>)
 80024c4:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <init_cardSD+0x18>)
 80024c6:	f008 ff55 	bl	800b374 <f_mount>

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	0800c75c 	.word	0x0800c75c
 80024d4:	2000032c 	.word	0x2000032c

080024d8 <read_file>:



void read_file(char *filePathName, char*fileData)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80024de:	af00      	add	r7, sp, #0
 80024e0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80024e4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80024e8:	6018      	str	r0, [r3, #0]
 80024ea:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80024ee:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80024f2:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 80024f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80024f8:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 80024fc:	2080      	movs	r0, #128	@ 0x80
 80024fe:	f009 fefb 	bl	800c2f8 <malloc>
 8002502:	4603      	mov	r3, r0
 8002504:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 8002506:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800250a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800250e:	f107 000c 	add.w	r0, r7, #12
 8002512:	2201      	movs	r2, #1
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	f008 ff73 	bl	800b400 <f_open>
 800251a:	4603      	mov	r3, r0
 800251c:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 8002520:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002524:	2b00      	cmp	r3, #0
 8002526:	d131      	bne.n	800258c <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 8002528:	f107 0308 	add.w	r3, r7, #8
 800252c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002530:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8002534:	f107 000c 	add.w	r0, r7, #12
 8002538:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800253c:	6809      	ldr	r1, [r1, #0]
 800253e:	f009 f919 	bl	800b774 <f_read>
	fileData[byteRead] = '\0';
 8002542:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002546:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002550:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4413      	add	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 800255c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002560:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800256a:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 800256e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002572:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002576:	4611      	mov	r1, r2
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	f009 ff7b 	bl	800c474 <realloc>
 800257e:	6020      	str	r0, [r4, #0]

	f_close(&file);
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4618      	mov	r0, r3
 8002586:	f009 fc27 	bl	800bdd8 <f_close>
 800258a:	e000      	b.n	800258e <read_file+0xb6>
		return;
 800258c:	bf00      	nop


}
 800258e:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <string_to_int>:
}



static uint16_t string_to_int(char *string)
{
 8002596:	b480      	push	{r7}
 8002598:	b085      	sub	sp, #20
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80025a2:	e015      	b.n	80025d0 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80025aa:	d90e      	bls.n	80025ca <string_to_int+0x34>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b39      	cmp	r3, #57	@ 0x39
 80025b2:	d80a      	bhi.n	80025ca <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	3b30      	subs	r3, #48	@ 0x30
 80025c8:	60fb      	str	r3, [r7, #12]
		}

		string++;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3301      	adds	r3, #1
 80025ce:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b0a      	cmp	r3, #10
 80025d6:	d1e5      	bne.n	80025a4 <string_to_int+0xe>
	}

	return number;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	b29b      	uxth	r3, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 80025f4:	e002      	b.n	80025fc <assign_filePath+0x14>
	{
		i++;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3301      	adds	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f6      	bne.n	80025f6 <assign_filePath+0xe>
	}

	i++;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	3301      	adds	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	4618      	mov	r0, r3
 8002612:	f009 fe71 	bl	800c2f8 <malloc>
 8002616:	4603      	mov	r3, r0
 8002618:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	461a      	mov	r2, r3
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68b8      	ldr	r0, [r7, #8]
 8002622:	f009 ffb1 	bl	800c588 <memcpy>

	return string;
 8002626:	68bb      	ldr	r3, [r7, #8]


}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <read_audio_file>:




void read_audio_file(char *filePathName, uint32_t *buffer)
{
 8002630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002634:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8002638:	af00      	add	r7, sp, #0
 800263a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800263e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002642:	6018      	str	r0, [r3, #0]
 8002644:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002648:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800264c:	6019      	str	r1, [r3, #0]
 800264e:	466b      	mov	r3, sp
 8002650:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002652:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002656:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800265a:	f107 0018 	add.w	r0, r7, #24
 800265e:	2201      	movs	r2, #1
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	f008 fecd 	bl	800b400 <f_open>
 8002666:	4603      	mov	r3, r0
 8002668:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 800266c:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 80fa 	bne.w	800286a <read_audio_file+0x23a>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002676:	4b80      	ldr	r3, [pc, #512]	@ (8002878 <read_audio_file+0x248>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f107 0318 	add.w	r3, r7, #24
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f009 fbd3 	bl	800be2c <f_lseek>


	if(flagNewAudioFile == 1)
 8002686:	4b7d      	ldr	r3, [pc, #500]	@ (800287c <read_audio_file+0x24c>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d017      	beq.n	80026be <read_audio_file+0x8e>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 800268e:	4b7b      	ldr	r3, [pc, #492]	@ (800287c <read_audio_file+0x24c>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002694:	4b7a      	ldr	r3, [pc, #488]	@ (8002880 <read_audio_file+0x250>)
 8002696:	2200      	movs	r2, #0
 8002698:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 800269a:	4b77      	ldr	r3, [pc, #476]	@ (8002878 <read_audio_file+0x248>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 80026a0:	4b75      	ldr	r3, [pc, #468]	@ (8002878 <read_audio_file+0x248>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f009 fbbe 	bl	800be2c <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 80026b0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80026b4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4a72      	ldr	r2, [pc, #456]	@ (8002884 <read_audio_file+0x254>)
 80026bc:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 80026be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026c2:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	unsigned int nrFrames = fileSize / n;
 80026c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002884 <read_audio_file+0x254>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

	if(fileSize%n != 0)
 80026d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002884 <read_audio_file+0x254>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80026de:	fbb3 f1f2 	udiv	r1, r3, r2
 80026e2:	fb01 f202 	mul.w	r2, r1, r2
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <read_audio_file+0xc6>
	{
		nrFrames++;
 80026ec:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80026f0:	3301      	adds	r3, #1
 80026f2:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	}

	uint8_t index = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	char tempBuffer[n];
 80026fc:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002700:	3b01      	subs	r3, #1
 8002702:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8002706:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800270a:	2200      	movs	r2, #0
 800270c:	4698      	mov	r8, r3
 800270e:	4691      	mov	r9, r2
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800271c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002720:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002724:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002728:	2200      	movs	r2, #0
 800272a:	461c      	mov	r4, r3
 800272c:	4615      	mov	r5, r2
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	00eb      	lsls	r3, r5, #3
 8002738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800273c:	00e2      	lsls	r2, r4, #3
 800273e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002742:	3307      	adds	r3, #7
 8002744:	08db      	lsrs	r3, r3, #3
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	ebad 0d03 	sub.w	sp, sp, r3
 800274c:	466b      	mov	r3, sp
 800274e:	3300      	adds	r3, #0
 8002750:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8002754:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	f107 0018 	add.w	r0, r7, #24
 8002762:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8002766:	f009 f805 	bl	800b774 <f_read>
	tempBuffer[byteRead] = '\n';
 800276a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800276e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002778:	210a      	movs	r1, #10
 800277a:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8002782:	e040      	b.n	8002806 <read_audio_file+0x1d6>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8002784:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8002788:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800278c:	5cd3      	ldrb	r3, [r2, r3]
 800278e:	2b0a      	cmp	r3, #10
 8002790:	d011      	beq.n	80027b6 <read_audio_file+0x186>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8002792:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8002796:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 800279a:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800279e:	5c89      	ldrb	r1, [r1, r2]
 80027a0:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80027a4:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80027a8:	54d1      	strb	r1, [r2, r3]
			index++;
 80027aa:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80027ae:	3301      	adds	r3, #1
 80027b0:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 80027b4:	e022      	b.n	80027fc <read_audio_file+0x1cc>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 80027b6:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80027ba:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80027be:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80027c2:	210a      	movs	r1, #10
 80027c4:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff fee3 	bl	8002596 <string_to_int>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80027d8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	601a      	str	r2, [r3, #0]
			buffer++;
 80027e0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80027e4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027e8:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80027ec:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	3204      	adds	r2, #4
 80027f4:	601a      	str	r2, [r3, #0]

			index = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	for(uint16_t i=0; i< byteRead; i++)
 80027fc:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8002800:	3301      	adds	r3, #1
 8002802:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8002806:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 800280a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800280e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d3b5      	bcc.n	8002784 <read_audio_file+0x154>


	}


	if(currentFrame == nrFrames)
 8002818:	4b19      	ldr	r3, [pc, #100]	@ (8002880 <read_audio_file+0x250>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <read_audio_file+0x208>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <read_audio_file+0x24c>)
 8002828:	2201      	movs	r2, #1
 800282a:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 800282c:	f107 0318 	add.w	r3, r7, #24
 8002830:	4618      	mov	r0, r3
 8002832:	f009 fad1 	bl	800bdd8 <f_close>
		return;
 8002836:	e018      	b.n	800286a <read_audio_file+0x23a>
	}

	currentFrame++;
 8002838:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <read_audio_file+0x250>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <read_audio_file+0x250>)
 8002842:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8002844:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002848:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <read_audio_file+0x248>)
 8002850:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <read_audio_file+0x248>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	4a07      	ldr	r2, [pc, #28]	@ (8002878 <read_audio_file+0x248>)
 800285a:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	4618      	mov	r0, r3
 8002862:	f009 fab9 	bl	800bdd8 <f_close>
 8002866:	46b5      	mov	sp, r6
 8002868:	e000      	b.n	800286c <read_audio_file+0x23c>
		return;
 800286a:	46b5      	mov	sp, r6


}
 800286c:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002876:	bf00      	nop
 8002878:	2000055c 	.word	0x2000055c
 800287c:	20000008 	.word	0x20000008
 8002880:	20000560 	.word	0x20000560
 8002884:	20000564 	.word	0x20000564

08002888 <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 8002888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800288c:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002890:	af00      	add	r7, sp, #0
 8002892:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 8002896:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 800289a:	6030      	str	r0, [r6, #0]
 800289c:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80028a0:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 80028a4:	6001      	str	r1, [r0, #0]
 80028a6:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80028aa:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 80028ae:	600a      	str	r2, [r1, #0]
 80028b0:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80028b4:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	466b      	mov	r3, sp
 80028bc:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80028be:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028c2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80028c6:	f107 001c 	add.w	r0, r7, #28
 80028ca:	2201      	movs	r2, #1
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	f008 fd97 	bl	800b400 <f_open>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80028d8:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 81b0 	bne.w	8002c42 <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80028e2:	4ba9      	ldr	r3, [pc, #676]	@ (8002b88 <read_image_file+0x300>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 80d6 	beq.w	8002a98 <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80028ec:	4ba7      	ldr	r3, [pc, #668]	@ (8002b8c <read_image_file+0x304>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80028f2:	4ba6      	ldr	r3, [pc, #664]	@ (8002b8c <read_image_file+0x304>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f009 fa95 	bl	800be2c <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002902:	f107 0318 	add.w	r3, r7, #24
 8002906:	f107 0114 	add.w	r1, r7, #20
 800290a:	f107 001c 	add.w	r0, r7, #28
 800290e:	2204      	movs	r2, #4
 8002910:	f008 ff30 	bl	800b774 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002914:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002918:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002922:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002926:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002930:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002934:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800293e:	461a      	mov	r2, r3
 8002940:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002944:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002948:	785b      	ldrb	r3, [r3, #1]
 800294a:	4313      	orrs	r3, r2
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	b21a      	sxth	r2, r3
 8002950:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002954:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800295e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002962:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b21b      	sxth	r3, r3
 800296a:	430b      	orrs	r3, r1
 800296c:	b21b      	sxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b21a      	sxth	r2, r3
 8002972:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002976:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800297e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002982:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800298c:	461a      	mov	r2, r3
 800298e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002992:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	4313      	orrs	r3, r2
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	b21a      	sxth	r2, r3
 800299e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029a2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80029ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029b0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	430b      	orrs	r3, r1
 80029ba:	b21b      	sxth	r3, r3
 80029bc:	4313      	orrs	r3, r2
 80029be:	b21a      	sxth	r2, r3
 80029c0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029c4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80029cc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029d0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029da:	461a      	mov	r2, r3
 80029dc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029e0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f2:	da1f      	bge.n	8002a34 <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80029f4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029f8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a08:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a12:	fb03 f202 	mul.w	r2, r3, r2
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f009 fc6b 	bl	800c2f8 <malloc>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a2a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	e00b      	b.n	8002a4c <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 8002a34:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002a38:	f009 fc5e 	bl	800c2f8 <malloc>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a44:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8002a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8002b88 <read_image_file+0x300>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002a52:	4b4f      	ldr	r3, [pc, #316]	@ (8002b90 <read_image_file+0x308>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8002a58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a5c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4a      	ldr	r2, [pc, #296]	@ (8002b8c <read_image_file+0x304>)
 8002a64:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002a66:	4b49      	ldr	r3, [pc, #292]	@ (8002b8c <read_image_file+0x304>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f009 f9db 	bl	800be2c <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8002a76:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a7a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	3b04      	subs	r3, #4
 8002a82:	4a44      	ldr	r2, [pc, #272]	@ (8002b94 <read_image_file+0x30c>)
 8002a84:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8002a86:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <read_image_file+0x30c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a43      	ldr	r2, [pc, #268]	@ (8002b98 <read_image_file+0x310>)
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a92:	4a42      	ldr	r2, [pc, #264]	@ (8002b9c <read_image_file+0x314>)
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	e007      	b.n	8002aa8 <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002a98:	4b3c      	ldr	r3, [pc, #240]	@ (8002b8c <read_image_file+0x304>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f009 f9c2 	bl	800be2c <f_lseek>
	}



	if(fileSize == n)
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8002b94 <read_image_file+0x30c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <read_image_file+0x310>)
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d104      	bne.n	8002abe <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8002ab4:	4b39      	ldr	r3, [pc, #228]	@ (8002b9c <read_image_file+0x314>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	4a38      	ldr	r2, [pc, #224]	@ (8002b9c <read_image_file+0x314>)
 8002abc:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8002abe:	4b35      	ldr	r3, [pc, #212]	@ (8002b94 <read_image_file+0x30c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a35      	ldr	r2, [pc, #212]	@ (8002b98 <read_image_file+0x310>)
 8002ac4:	6812      	ldr	r2, [r2, #0]
 8002ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8002aca:	fb01 f202 	mul.w	r2, r1, r2
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <read_image_file+0x25e>
 8002ad4:	4b31      	ldr	r3, [pc, #196]	@ (8002b9c <read_image_file+0x314>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d004      	beq.n	8002ae6 <read_image_file+0x25e>
	{
		nrFrames++;
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <read_image_file+0x314>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8002b9c <read_image_file+0x314>)
 8002ae4:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8002ae6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002aea:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8002af4:	4b28      	ldr	r3, [pc, #160]	@ (8002b98 <read_image_file+0x310>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002afe:	4b26      	ldr	r3, [pc, #152]	@ (8002b98 <read_image_file+0x310>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	2300      	movs	r3, #0
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <read_image_file+0x310>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461a      	mov	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	4614      	mov	r4, r2
 8002b28:	461d      	mov	r5, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	00eb      	lsls	r3, r5, #3
 8002b34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b38:	00e2      	lsls	r2, r4, #3
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <read_image_file+0x310>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3307      	adds	r3, #7
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	ebad 0d03 	sub.w	sp, sp, r3
 8002b48:	466b      	mov	r3, sp
 8002b4a:	3300      	adds	r3, #0
 8002b4c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <read_image_file+0x310>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	f107 001c 	add.w	r0, r7, #28
 8002b5e:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002b62:	f008 fe07 	bl	800b774 <f_read>
	(*indexFlag) = byteRead;
 8002b66:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b6a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b76:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002b84:	e020      	b.n	8002bc8 <read_image_file+0x340>
 8002b86:	bf00      	nop
 8002b88:	20000009 	.word	0x20000009
 8002b8c:	20000568 	.word	0x20000568
 8002b90:	2000056c 	.word	0x2000056c
 8002b94:	20000570 	.word	0x20000570
 8002b98:	0800d500 	.word	0x0800d500
 8002b9c:	20000574 	.word	0x20000574
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 8002ba0:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002ba4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ba8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68d9      	ldr	r1, [r3, #12]
 8002bb0:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002bba:	5c8a      	ldrb	r2, [r1, r2]
 8002bbc:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002bbe:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002bc8:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002bcc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002bd0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d3e2      	bcc.n	8002ba0 <read_image_file+0x318>

	}


	currentFrame++;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <read_image_file+0x3c8>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <read_image_file+0x3c8>)
 8002be4:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <read_image_file+0x3c8>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <read_image_file+0x3cc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d208      	bcs.n	8002c06 <read_image_file+0x37e>
 8002bf4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002bf8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c04:	d20f      	bcs.n	8002c26 <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8002c06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c0a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8002c14:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <read_image_file+0x3d0>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f009 f8da 	bl	800bdd8 <f_close>
		return;
 8002c24:	e00d      	b.n	8002c42 <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 8002c26:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c2a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <read_image_file+0x3d4>)
 8002c32:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f009 f8cd 	bl	800bdd8 <f_close>
 8002c3e:	46b5      	mov	sp, r6
 8002c40:	e000      	b.n	8002c44 <read_image_file+0x3bc>
		return;
 8002c42:	46b5      	mov	sp, r6


}
 8002c44:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000056c 	.word	0x2000056c
 8002c54:	20000574 	.word	0x20000574
 8002c58:	20000009 	.word	0x20000009
 8002c5c:	20000568 	.word	0x20000568

08002c60 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	ed87 0a00 	vstr	s0, [r7]

	uint8_t x = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]

	if(factor > 1)
 8002c70:	edd7 7a00 	vldr	s15, [r7]
 8002c74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c80:	dd33      	ble.n	8002cea <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002c82:	e00b      	b.n	8002c9c <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <frame_number_x+0x36>
			{
				return x;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	e049      	b.n	8002d2a <frame_number_x+0xca>
			}

			x++;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002caa:	edd7 7a00 	vldr	s15, [r7]
 8002cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb2:	edd7 7a00 	vldr	s15, [r7]
 8002cb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002d38 <frame_number_x+0xd8>
 8002ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d9d6      	bls.n	8002c84 <frame_number_x+0x24>
		}


		if(x==1)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <frame_number_x+0x80>
		{
			return 1;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e024      	b.n	8002d2a <frame_number_x+0xca>
		}

		else
		{
			return (x-1);
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	e01f      	b.n	8002d2a <frame_number_x+0xca>
	}


	else
	{
		while((((int)(entity->x1)*x) <= (32*32)))
 8002cea:	e00b      	b.n	8002d04 <frame_number_x+0xa4>
		{
			if(x == entity->y1)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d102      	bne.n	8002cfe <frame_number_x+0x9e>
			{
				return x;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	e015      	b.n	8002d2a <frame_number_x+0xca>
			}

			x++;
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	3301      	adds	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
		while((((int)(entity->x1)*x) <= (32*32)))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d16:	dde9      	ble.n	8002cec <frame_number_x+0x8c>
		}


		if(x==1)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <frame_number_x+0xc2>
		{
			return 1;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e003      	b.n	8002d2a <frame_number_x+0xca>
		}

		else
		{
			return (x-1);
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29b      	uxth	r3, r3
		}

	}


}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	44800000 	.word	0x44800000

08002d3c <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8002d48:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8002d4c:	6020      	str	r0, [r4, #0]
 8002d4e:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002d52:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8002d56:	6001      	str	r1, [r0, #0]
 8002d58:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002d5c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8002d60:	ed81 0a00 	vstr	s0, [r1]
 8002d64:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002d68:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8002d6c:	600a      	str	r2, [r1, #0]
 8002d6e:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002d72:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002d76:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002d78:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d7c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002d80:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d84:	2201      	movs	r2, #1
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	f008 fb3a 	bl	800b400 <f_open>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8002d92:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 81be 	bne.w	8003118 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8002d9c:	4ba9      	ldr	r3, [pc, #676]	@ (8003044 <read_image_file_scaling+0x308>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8112 	beq.w	8002fca <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002da6:	4ba8      	ldr	r3, [pc, #672]	@ (8003048 <read_image_file_scaling+0x30c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002dac:	4ba6      	ldr	r3, [pc, #664]	@ (8003048 <read_image_file_scaling+0x30c>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f009 f838 	bl	800be2c <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002dbc:	f107 0320 	add.w	r3, r7, #32
 8002dc0:	f107 011c 	add.w	r1, r7, #28
 8002dc4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002dc8:	2204      	movs	r2, #4
 8002dca:	f008 fcd3 	bl	800b774 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002dce:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002dd2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002ddc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002de0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2200      	movs	r2, #0
 8002de8:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002dea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002dee:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002dfe:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e02:	785b      	ldrb	r3, [r3, #1]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e0e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002e18:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e1c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	430b      	orrs	r3, r1
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b21a      	sxth	r2, r3
 8002e2c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e30:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002e38:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e3c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e4c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e50:	78db      	ldrb	r3, [r3, #3]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	b21a      	sxth	r2, r3
 8002e58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e5c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002e66:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e6a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e6e:	789b      	ldrb	r3, [r3, #2]
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	430b      	orrs	r3, r1
 8002e74:	b21b      	sxth	r3, r3
 8002e76:	4313      	orrs	r3, r2
 8002e78:	b21a      	sxth	r2, r3
 8002e7a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e7e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8002e86:	4b6f      	ldr	r3, [pc, #444]	@ (8003044 <read_image_file_scaling+0x308>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800304c <read_image_file_scaling+0x310>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8002e92:	4b6f      	ldr	r3, [pc, #444]	@ (8003050 <read_image_file_scaling+0x314>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8002e98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e9c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a69      	ldr	r2, [pc, #420]	@ (8003048 <read_image_file_scaling+0x30c>)
 8002ea4:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002ea6:	4b68      	ldr	r3, [pc, #416]	@ (8003048 <read_image_file_scaling+0x30c>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f008 ffbb 	bl	800be2c <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8002eb6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002eba:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8002ebe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ec2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ec6:	ed92 0a00 	vldr	s0, [r2]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	f7ff fec8 	bl	8002c60 <frame_number_x>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b5f      	ldr	r3, [pc, #380]	@ (8003054 <read_image_file_scaling+0x318>)
 8002ed6:	801a      	strh	r2, [r3, #0]
		*px = x;
 8002ed8:	4b5e      	ldr	r3, [pc, #376]	@ (8003054 <read_image_file_scaling+0x318>)
 8002eda:	881a      	ldrh	r2, [r3, #0]
 8002edc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ee0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8002ee8:	4b5a      	ldr	r3, [pc, #360]	@ (8003054 <read_image_file_scaling+0x318>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ef2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d125      	bne.n	8002f4c <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8002f00:	4b53      	ldr	r3, [pc, #332]	@ (8003050 <read_image_file_scaling+0x314>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8002f06:	4b54      	ldr	r3, [pc, #336]	@ (8003058 <read_image_file_scaling+0x31c>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002f0c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f10:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f20:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f2a:	fb03 f202 	mul.w	r2, r3, r2
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	4618      	mov	r0, r3
 8002f36:	f009 f9df 	bl	800c2f8 <malloc>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f42:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	e046      	b.n	8002fda <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->data = malloc(3*sizeof(char)*(entity->x1)*x);
 8002f4c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f50:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8003054 <read_image_file_scaling+0x318>)
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	fb03 f202 	mul.w	r2, r3, r2
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f009 f9c4 	bl	800c2f8 <malloc>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f78:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8002f80:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f84:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b30      	ldr	r3, [pc, #192]	@ (8003054 <read_image_file_scaling+0x318>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003058 <read_image_file_scaling+0x31c>)
 8002f9c:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8002f9e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fa2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fac:	4a29      	ldr	r2, [pc, #164]	@ (8003054 <read_image_file_scaling+0x318>)
 8002fae:	8812      	ldrh	r2, [r2, #0]
 8002fb0:	fb93 f1f2 	sdiv	r1, r3, r2
 8002fb4:	fb01 f202 	mul.w	r2, r1, r2
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	@ (8003058 <read_image_file_scaling+0x31c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a24      	ldr	r2, [pc, #144]	@ (8003058 <read_image_file_scaling+0x31c>)
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e007      	b.n	8002fda <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002fca:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <read_image_file_scaling+0x30c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f008 ff29 	bl	800be2c <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8002fda:	4b1d      	ldr	r3, [pc, #116]	@ (8003050 <read_image_file_scaling+0x314>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d03c      	beq.n	800305c <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8002fe2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fe6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ff2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003002:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800300c:	fb03 f202 	mul.w	r2, r3, r2
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	441a      	add	r2, r3
 8003016:	f107 0320 	add.w	r3, r7, #32
 800301a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800301e:	f008 fba9 	bl	800b774 <f_read>

		*flagTerm = 1;
 8003022:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003026:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <read_image_file_scaling+0x308>)
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303a:	4618      	mov	r0, r3
 800303c:	f008 fecc 	bl	800bdd8 <f_close>
		return;
 8003040:	e06b      	b.n	800311a <read_image_file_scaling+0x3de>
 8003042:	bf00      	nop
 8003044:	2000000a 	.word	0x2000000a
 8003048:	20000578 	.word	0x20000578
 800304c:	2000057c 	.word	0x2000057c
 8003050:	2000057e 	.word	0x2000057e
 8003054:	20000580 	.word	0x20000580
 8003058:	20000584 	.word	0x20000584

	}

	else
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 800305c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003060:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800306c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003076:	461a      	mov	r2, r3
 8003078:	4b2a      	ldr	r3, [pc, #168]	@ (8003124 <read_image_file_scaling+0x3e8>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	fb03 f202 	mul.w	r2, r3, r2
 8003080:	4613      	mov	r3, r2
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	441a      	add	r2, r3
 8003086:	f107 0320 	add.w	r3, r7, #32
 800308a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800308e:	f008 fb71 	bl	800b774 <f_read>

		currentFrame++;
 8003092:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <read_image_file_scaling+0x3ec>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <read_image_file_scaling+0x3ec>)
 800309c:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 800309e:	4b22      	ldr	r3, [pc, #136]	@ (8003128 <read_image_file_scaling+0x3ec>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b21      	ldr	r3, [pc, #132]	@ (800312c <read_image_file_scaling+0x3f0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d328      	bcc.n	80030fe <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 80030ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030b0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <read_image_file_scaling+0x3f0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b299      	uxth	r1, r3
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <read_image_file_scaling+0x3e8>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	fb11 f303 	smulbb	r3, r1, r3
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030d6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 80030de:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030e2:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 80030ec:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <read_image_file_scaling+0x3f4>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 80030f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030f6:	4618      	mov	r0, r3
 80030f8:	f008 fe6e 	bl	800bdd8 <f_close>
			return;
 80030fc:	e00d      	b.n	800311a <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 80030fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003102:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a0a      	ldr	r2, [pc, #40]	@ (8003134 <read_image_file_scaling+0x3f8>)
 800310a:	6013      	str	r3, [r2, #0]
		f_close(&file);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4618      	mov	r0, r3
 8003112:	f008 fe61 	bl	800bdd8 <f_close>
 8003116:	e000      	b.n	800311a <read_image_file_scaling+0x3de>
		return;
 8003118:	bf00      	nop

	}



}
 800311a:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}
 8003122:	bf00      	nop
 8003124:	20000580 	.word	0x20000580
 8003128:	2000057c 	.word	0x2000057c
 800312c:	20000584 	.word	0x20000584
 8003130:	2000000a 	.word	0x2000000a
 8003134:	20000578 	.word	0x20000578

08003138 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 800313e:	af00      	add	r7, sp, #0
 8003140:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003144:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003148:	6020      	str	r0, [r4, #0]
 800314a:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800314e:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003152:	6001      	str	r1, [r0, #0]
 8003154:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003158:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800315c:	600a      	str	r2, [r1, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003164:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003168:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 800316a:	4b4b      	ldr	r3, [pc, #300]	@ (8003298 <write_image_file+0x160>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	f083 0301 	eor.w	r3, r3, #1
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d04b      	beq.n	8003210 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003178:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800317c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003180:	f107 001c 	add.w	r0, r7, #28
 8003184:	220a      	movs	r2, #10
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	f008 f93a 	bl	800b400 <f_open>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 8003192:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003196:	2b00      	cmp	r3, #0
 8003198:	d177      	bne.n	800328a <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 800319a:	4b40      	ldr	r3, [pc, #256]	@ (800329c <write_image_file+0x164>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 80031a0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031a4:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031b0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031b4:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 80031b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031ba:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80031be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c2:	121b      	asrs	r3, r3, #8
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031cc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031d0:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 80031d2:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031dc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031e0:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 80031e2:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 80031e6:	121b      	asrs	r3, r3, #8
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031f0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031f4:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 80031f6:	f107 0318 	add.w	r3, r7, #24
 80031fa:	f107 0114 	add.w	r1, r7, #20
 80031fe:	f107 001c 	add.w	r0, r7, #28
 8003202:	2204      	movs	r2, #4
 8003204:	f008 fbf5 	bl	800b9f2 <f_write>

		flagStart = 1;
 8003208:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <write_image_file+0x160>)
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e018      	b.n	8003242 <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003210:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003214:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003218:	f107 001c 	add.w	r0, r7, #28
 800321c:	2212      	movs	r2, #18
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	f008 f8ee 	bl	800b400 <f_open>
 8003224:	4603      	mov	r3, r0
 8003226:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 800322a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800322e:	2b00      	cmp	r3, #0
 8003230:	d12d      	bne.n	800328e <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003232:	4b1a      	ldr	r3, [pc, #104]	@ (800329c <write_image_file+0x164>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f107 031c 	add.w	r3, r7, #28
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f008 fdf5 	bl	800be2c <f_lseek>

	}


	if(flagTerm == 1)
 8003242:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <write_image_file+0x118>
	{
		flagStart = 0;
 800324a:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <write_image_file+0x160>)
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003250:	f107 0318 	add.w	r3, r7, #24
 8003254:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8003258:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800325c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003260:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8003264:	f107 001c 	add.w	r0, r7, #28
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	f008 fbc1 	bl	800b9f2 <f_write>
	currentPosition = f_tell(&file);
 8003270:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003274:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	4a08      	ldr	r2, [pc, #32]	@ (800329c <write_image_file+0x164>)
 800327c:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800327e:	f107 031c 	add.w	r3, r7, #28
 8003282:	4618      	mov	r0, r3
 8003284:	f008 fda8 	bl	800bdd8 <f_close>
 8003288:	e002      	b.n	8003290 <write_image_file+0x158>
		    return;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <write_image_file+0x158>
		    return;
 800328e:	bf00      	nop

}
 8003290:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	20000588 	.word	0x20000588
 800329c:	2000058c 	.word	0x2000058c

080032a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <HAL_MspInit+0x4c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	4a0f      	ldr	r2, [pc, #60]	@ (80032ec <HAL_MspInit+0x4c>)
 80032b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <HAL_MspInit+0x4c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	4a08      	ldr	r2, [pc, #32]	@ (80032ec <HAL_MspInit+0x4c>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800

080032f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	@ (80033d0 <HAL_DAC_MspInit+0xe0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d159      	bne.n	80033c6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b2f      	ldr	r3, [pc, #188]	@ (80033d4 <HAL_DAC_MspInit+0xe4>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	4a2e      	ldr	r2, [pc, #184]	@ (80033d4 <HAL_DAC_MspInit+0xe4>)
 800331c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003320:	6413      	str	r3, [r2, #64]	@ 0x40
 8003322:	4b2c      	ldr	r3, [pc, #176]	@ (80033d4 <HAL_DAC_MspInit+0xe4>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <HAL_DAC_MspInit+0xe4>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a27      	ldr	r2, [pc, #156]	@ (80033d4 <HAL_DAC_MspInit+0xe4>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <HAL_DAC_MspInit+0xe4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800334a:	2310      	movs	r3, #16
 800334c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800334e:	2303      	movs	r3, #3
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	481e      	ldr	r0, [pc, #120]	@ (80033d8 <HAL_DAC_MspInit+0xe8>)
 800335e:	f001 fa27 	bl	80047b0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_DAC_MspInit+0xf0>)
 8003366:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 800336a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800336e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003370:	4b1a      	ldr	r3, [pc, #104]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 8003372:	2240      	movs	r2, #64	@ 0x40
 8003374:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003376:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 8003378:	2200      	movs	r2, #0
 800337a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800337c:	4b17      	ldr	r3, [pc, #92]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 800337e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003382:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003384:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 8003386:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800338a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800338c:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 800338e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003392:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003394:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 8003396:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800339a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800339c:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 800339e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033a2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033a4:	4b0d      	ldr	r3, [pc, #52]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80033aa:	480c      	ldr	r0, [pc, #48]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 80033ac:	f000 fdfe 	bl	8003fac <HAL_DMA_Init>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80033b6:	f7ff f87b 	bl	80024b0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a07      	ldr	r2, [pc, #28]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	4a06      	ldr	r2, [pc, #24]	@ (80033dc <HAL_DAC_MspInit+0xec>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033c6:	bf00      	nop
 80033c8:	3728      	adds	r7, #40	@ 0x28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40007400 	.word	0x40007400
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	2000009c 	.word	0x2000009c
 80033e0:	40026088 	.word	0x40026088

080033e4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08a      	sub	sp, #40	@ 0x28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	f107 0314 	add.w	r3, r7, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a31      	ldr	r2, [pc, #196]	@ (80034c8 <HAL_SD_MspInit+0xe4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d15b      	bne.n	80034be <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	4a2f      	ldr	r2, [pc, #188]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003410:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003414:	6453      	str	r3, [r2, #68]	@ 0x44
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b29      	ldr	r3, [pc, #164]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a28      	ldr	r2, [pc, #160]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b26      	ldr	r3, [pc, #152]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4a21      	ldr	r2, [pc, #132]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003448:	f043 0308 	orr.w	r3, r3, #8
 800344c:	6313      	str	r3, [r2, #48]	@ 0x30
 800344e:	4b1f      	ldr	r3, [pc, #124]	@ (80034cc <HAL_SD_MspInit+0xe8>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800345a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800345e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003464:	2301      	movs	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003468:	2303      	movs	r3, #3
 800346a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800346c:	230c      	movs	r3, #12
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	4619      	mov	r1, r3
 8003476:	4816      	ldr	r0, [pc, #88]	@ (80034d0 <HAL_SD_MspInit+0xec>)
 8003478:	f001 f99a 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800347c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348a:	2303      	movs	r3, #3
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800348e:	230c      	movs	r3, #12
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	480d      	ldr	r0, [pc, #52]	@ (80034d0 <HAL_SD_MspInit+0xec>)
 800349a:	f001 f989 	bl	80047b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800349e:	2304      	movs	r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a6:	2301      	movs	r3, #1
 80034a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	2303      	movs	r3, #3
 80034ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034ae:	230c      	movs	r3, #12
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	4806      	ldr	r0, [pc, #24]	@ (80034d4 <HAL_SD_MspInit+0xf0>)
 80034ba:	f001 f979 	bl	80047b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80034be:	bf00      	nop
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020800 	.word	0x40020800
 80034d4:	40020c00 	.word	0x40020c00

080034d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a47      	ldr	r2, [pc, #284]	@ (8003614 <HAL_SPI_MspInit+0x13c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f040 8088 	bne.w	800360c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	4b45      	ldr	r3, [pc, #276]	@ (8003618 <HAL_SPI_MspInit+0x140>)
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	4a44      	ldr	r2, [pc, #272]	@ (8003618 <HAL_SPI_MspInit+0x140>)
 8003506:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800350a:	6453      	str	r3, [r2, #68]	@ 0x44
 800350c:	4b42      	ldr	r3, [pc, #264]	@ (8003618 <HAL_SPI_MspInit+0x140>)
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	4b3e      	ldr	r3, [pc, #248]	@ (8003618 <HAL_SPI_MspInit+0x140>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	4a3d      	ldr	r2, [pc, #244]	@ (8003618 <HAL_SPI_MspInit+0x140>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6313      	str	r3, [r2, #48]	@ 0x30
 8003528:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <HAL_SPI_MspInit+0x140>)
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003534:	23e0      	movs	r3, #224	@ 0xe0
 8003536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003540:	2303      	movs	r3, #3
 8003542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003544:	2305      	movs	r3, #5
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	4833      	ldr	r0, [pc, #204]	@ (800361c <HAL_SPI_MspInit+0x144>)
 8003550:	f001 f92e 	bl	80047b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003554:	4b32      	ldr	r3, [pc, #200]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003556:	4a33      	ldr	r2, [pc, #204]	@ (8003624 <HAL_SPI_MspInit+0x14c>)
 8003558:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800355a:	4b31      	ldr	r3, [pc, #196]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 800355c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003560:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003562:	4b2f      	ldr	r3, [pc, #188]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003564:	2240      	movs	r2, #64	@ 0x40
 8003566:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003568:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800356e:	4b2c      	ldr	r3, [pc, #176]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003574:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003576:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003578:	2200      	movs	r2, #0
 800357a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800357c:	4b28      	ldr	r3, [pc, #160]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 800357e:	2200      	movs	r2, #0
 8003580:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003582:	4b27      	ldr	r3, [pc, #156]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003584:	2200      	movs	r2, #0
 8003586:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003588:	4b25      	ldr	r3, [pc, #148]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 800358a:	2200      	movs	r2, #0
 800358c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800358e:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003590:	2200      	movs	r2, #0
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003594:	4822      	ldr	r0, [pc, #136]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 8003596:	f000 fd09 	bl	8003fac <HAL_DMA_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80035a0:	f7fe ff86 	bl	80024b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 80035a8:	649a      	str	r2, [r3, #72]	@ 0x48
 80035aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_SPI_MspInit+0x148>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035b2:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <HAL_SPI_MspInit+0x154>)
 80035b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035b8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035be:	4b1a      	ldr	r3, [pc, #104]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c4:	4b18      	ldr	r3, [pc, #96]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ca:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d2:	4b15      	ldr	r3, [pc, #84]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035d8:	4b13      	ldr	r3, [pc, #76]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80035f0:	480d      	ldr	r0, [pc, #52]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 80035f2:	f000 fcdb 	bl	8003fac <HAL_DMA_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80035fc:	f7fe ff58 	bl	80024b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a09      	ldr	r2, [pc, #36]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 8003604:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003606:	4a08      	ldr	r2, [pc, #32]	@ (8003628 <HAL_SPI_MspInit+0x150>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800360c:	bf00      	nop
 800360e:	3728      	adds	r7, #40	@ 0x28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40013000 	.word	0x40013000
 8003618:	40023800 	.word	0x40023800
 800361c:	40020000 	.word	0x40020000
 8003620:	200001d8 	.word	0x200001d8
 8003624:	40026458 	.word	0x40026458
 8003628:	20000238 	.word	0x20000238
 800362c:	40026410 	.word	0x40026410

08003630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003640:	d10d      	bne.n	800365e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b09      	ldr	r3, [pc, #36]	@ (800366c <HAL_TIM_Base_MspInit+0x3c>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <HAL_TIM_Base_MspInit+0x3c>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6413      	str	r3, [r2, #64]	@ 0x40
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_TIM_Base_MspInit+0x3c>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800

08003670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	@ 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_UART_MspInit+0x94>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d134      	bne.n	80036fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <HAL_UART_MspInit+0x98>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_UART_MspInit+0x98>)
 800369c:	f043 0310 	orr.w	r3, r3, #16
 80036a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a2:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_UART_MspInit+0x98>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_UART_MspInit+0x98>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_UART_MspInit+0x98>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <HAL_UART_MspInit+0x98>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036dc:	2307      	movs	r3, #7
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4619      	mov	r1, r3
 80036e6:	4809      	ldr	r0, [pc, #36]	@ (800370c <HAL_UART_MspInit+0x9c>)
 80036e8:	f001 f862 	bl	80047b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036ec:	2200      	movs	r2, #0
 80036ee:	2100      	movs	r1, #0
 80036f0:	2025      	movs	r0, #37	@ 0x25
 80036f2:	f000 fa48 	bl	8003b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036f6:	2025      	movs	r0, #37	@ 0x25
 80036f8:	f000 fa61 	bl	8003bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80036fc:	bf00      	nop
 80036fe:	3728      	adds	r7, #40	@ 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40011000 	.word	0x40011000
 8003708:	40023800 	.word	0x40023800
 800370c:	40020000 	.word	0x40020000

08003710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <NMI_Handler+0x4>

08003718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <HardFault_Handler+0x4>

08003720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <MemManage_Handler+0x4>

08003728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <BusFault_Handler+0x4>

08003730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <UsageFault_Handler+0x4>

08003738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003766:	f000 f8ef 	bl	8003948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003774:	4802      	ldr	r0, [pc, #8]	@ (8003780 <DMA1_Stream5_IRQHandler+0x10>)
 8003776:	f000 fdb1 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2000009c 	.word	0x2000009c

08003784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003788:	4802      	ldr	r0, [pc, #8]	@ (8003794 <USART1_IRQHandler+0x10>)
 800378a:	f004 fb39 	bl	8007e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200002e0 	.word	0x200002e0

08003798 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800379c:	4802      	ldr	r0, [pc, #8]	@ (80037a8 <DMA2_Stream0_IRQHandler+0x10>)
 800379e:	f000 fd9d 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000238 	.word	0x20000238

080037ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037b0:	4802      	ldr	r0, [pc, #8]	@ (80037bc <DMA2_Stream3_IRQHandler+0x10>)
 80037b2:	f000 fd93 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200001d8 	.word	0x200001d8

080037c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c8:	4a14      	ldr	r2, [pc, #80]	@ (800381c <_sbrk+0x5c>)
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <_sbrk+0x60>)
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d4:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <_sbrk+0x64>)
 80037de:	4a12      	ldr	r2, [pc, #72]	@ (8003828 <_sbrk+0x68>)
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037e2:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <_sbrk+0x64>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d207      	bcs.n	8003800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037f0:	f008 fe9e 	bl	800c530 <__errno>
 80037f4:	4603      	mov	r3, r0
 80037f6:	220c      	movs	r2, #12
 80037f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	e009      	b.n	8003814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003800:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <_sbrk+0x64>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003806:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <_sbrk+0x64>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	4a05      	ldr	r2, [pc, #20]	@ (8003824 <_sbrk+0x64>)
 8003810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20020000 	.word	0x20020000
 8003820:	00000400 	.word	0x00000400
 8003824:	20000590 	.word	0x20000590
 8003828:	20000720 	.word	0x20000720

0800382c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <SystemInit+0x20>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003836:	4a05      	ldr	r2, [pc, #20]	@ (800384c <SystemInit+0x20>)
 8003838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800383c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003888 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003854:	f7ff ffea 	bl	800382c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003858:	480c      	ldr	r0, [pc, #48]	@ (800388c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800385a:	490d      	ldr	r1, [pc, #52]	@ (8003890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800385c:	4a0d      	ldr	r2, [pc, #52]	@ (8003894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003860:	e002      	b.n	8003868 <LoopCopyDataInit>

08003862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003866:	3304      	adds	r3, #4

08003868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800386a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800386c:	d3f9      	bcc.n	8003862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003870:	4c0a      	ldr	r4, [pc, #40]	@ (800389c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003874:	e001      	b.n	800387a <LoopFillZerobss>

08003876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003878:	3204      	adds	r2, #4

0800387a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800387a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800387c:	d3fb      	bcc.n	8003876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800387e:	f008 fe5d 	bl	800c53c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003882:	f7fe f869 	bl	8001958 <main>
  bx  lr    
 8003886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800388c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003890:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003894:	0800d5c8 	.word	0x0800d5c8
  ldr r2, =_sbss
 8003898:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800389c:	2000071c 	.word	0x2000071c

080038a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC_IRQHandler>
	...

080038a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a8:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <HAL_Init+0x40>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <HAL_Init+0x40>)
 80038ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <HAL_Init+0x40>)
 80038ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a07      	ldr	r2, [pc, #28]	@ (80038e4 <HAL_Init+0x40>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038cc:	2003      	movs	r0, #3
 80038ce:	f000 f94f 	bl	8003b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d2:	200f      	movs	r0, #15
 80038d4:	f000 f808 	bl	80038e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d8:	f7ff fce2 	bl	80032a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f0:	4b12      	ldr	r3, [pc, #72]	@ (800393c <HAL_InitTick+0x54>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_InitTick+0x58>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f967 	bl	8003bda <HAL_SYSTICK_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e00e      	b.n	8003934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d80a      	bhi.n	8003932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391c:	2200      	movs	r2, #0
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f000 f92f 	bl	8003b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003928:	4a06      	ldr	r2, [pc, #24]	@ (8003944 <HAL_InitTick+0x5c>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000000c 	.word	0x2000000c
 8003940:	20000014 	.word	0x20000014
 8003944:	20000010 	.word	0x20000010

08003948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_IncTick+0x20>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_IncTick+0x24>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4413      	add	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	@ (800396c <HAL_IncTick+0x24>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000014 	.word	0x20000014
 800396c:	20000594 	.word	0x20000594

08003970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <HAL_GetTick+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000594 	.word	0x20000594

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff ffee 	bl	8003970 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ae:	bf00      	nop
 80039b0:	f7ff ffde 	bl	8003970 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000014 	.word	0x20000014

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	db0b      	blt.n	8003a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 021f 	and.w	r2, r3, #31
 8003a4c:	4907      	ldr	r1, [pc, #28]	@ (8003a6c <__NVIC_EnableIRQ+0x38>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2001      	movs	r0, #1
 8003a56:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000e100 	.word	0xe000e100

08003a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	6039      	str	r1, [r7, #0]
 8003a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db0a      	blt.n	8003a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	490c      	ldr	r1, [pc, #48]	@ (8003abc <__NVIC_SetPriority+0x4c>)
 8003a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8e:	0112      	lsls	r2, r2, #4
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	440b      	add	r3, r1
 8003a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a98:	e00a      	b.n	8003ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4908      	ldr	r1, [pc, #32]	@ (8003ac0 <__NVIC_SetPriority+0x50>)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	3b04      	subs	r3, #4
 8003aa8:	0112      	lsls	r2, r2, #4
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	440b      	add	r3, r1
 8003aae:	761a      	strb	r2, [r3, #24]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	e000e100 	.word	0xe000e100
 8003ac0:	e000ed00 	.word	0xe000ed00

08003ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	bf28      	it	cs
 8003ae2:	2304      	movcs	r3, #4
 8003ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d902      	bls.n	8003af4 <NVIC_EncodePriority+0x30>
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3b03      	subs	r3, #3
 8003af2:	e000      	b.n	8003af6 <NVIC_EncodePriority+0x32>
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43da      	mvns	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	401a      	ands	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43d9      	mvns	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b1c:	4313      	orrs	r3, r2
         );
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	@ 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b3c:	d301      	bcc.n	8003b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e00f      	b.n	8003b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b42:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <SysTick_Config+0x40>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	f7ff ff8e 	bl	8003a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <SysTick_Config+0x40>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5a:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <SysTick_Config+0x40>)
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff29 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b086      	sub	sp, #24
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b98:	f7ff ff3e 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68b9      	ldr	r1, [r7, #8]
 8003ba2:	6978      	ldr	r0, [r7, #20]
 8003ba4:	f7ff ff8e 	bl	8003ac4 <NVIC_EncodePriority>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bae:	4611      	mov	r1, r2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff5d 	bl	8003a70 <__NVIC_SetPriority>
}
 8003bb6:	bf00      	nop
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ff31 	bl	8003a34 <__NVIC_EnableIRQ>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff ffa2 	bl	8003b2c <SysTick_Config>
 8003be8:	4603      	mov	r3, r0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e014      	b.n	8003c2e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	791b      	ldrb	r3, [r3, #4]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fb6b 	bl	80032f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0a2      	b.n	8003d9a <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	795b      	ldrb	r3, [r3, #5]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_DAC_Start_DMA+0x28>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e09c      	b.n	8003d9a <HAL_DAC_Start_DMA+0x162>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d129      	bne.n	8003cc6 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4a4b      	ldr	r2, [pc, #300]	@ (8003da4 <HAL_DAC_Start_DMA+0x16c>)
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8003da8 <HAL_DAC_Start_DMA+0x170>)
 8003c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4a49      	ldr	r2, [pc, #292]	@ (8003dac <HAL_DAC_Start_DMA+0x174>)
 8003c88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c98:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DAC_Start_DMA+0x70>
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d005      	beq.n	8003cb2 <HAL_DAC_Start_DMA+0x7a>
 8003ca6:	e009      	b.n	8003cbc <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	613b      	str	r3, [r7, #16]
        break;
 8003cb0:	e033      	b.n	8003d1a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	330c      	adds	r3, #12
 8003cb8:	613b      	str	r3, [r7, #16]
        break;
 8003cba:	e02e      	b.n	8003d1a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3310      	adds	r3, #16
 8003cc2:	613b      	str	r3, [r7, #16]
        break;
 8003cc4:	e029      	b.n	8003d1a <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	4a39      	ldr	r2, [pc, #228]	@ (8003db0 <HAL_DAC_Start_DMA+0x178>)
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4a38      	ldr	r2, [pc, #224]	@ (8003db4 <HAL_DAC_Start_DMA+0x17c>)
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4a37      	ldr	r2, [pc, #220]	@ (8003db8 <HAL_DAC_Start_DMA+0x180>)
 8003cdc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_DAC_Start_DMA+0xc4>
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d005      	beq.n	8003d06 <HAL_DAC_Start_DMA+0xce>
 8003cfa:	e009      	b.n	8003d10 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3314      	adds	r3, #20
 8003d02:	613b      	str	r3, [r7, #16]
        break;
 8003d04:	e009      	b.n	8003d1a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3318      	adds	r3, #24
 8003d0c:	613b      	str	r3, [r7, #16]
        break;
 8003d0e:	e004      	b.n	8003d1a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	331c      	adds	r3, #28
 8003d16:	613b      	str	r3, [r7, #16]
        break;
 8003d18:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d111      	bne.n	8003d44 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6898      	ldr	r0, [r3, #8]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	f000 f9e5 	bl	8004108 <HAL_DMA_Start_IT>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]
 8003d42:	e010      	b.n	8003d66 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003d52:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68d8      	ldr	r0, [r3, #12]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	f000 f9d3 	bl	8004108 <HAL_DMA_Start_IT>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6819      	ldr	r1, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2201      	movs	r2, #1
 8003d80:	409a      	lsls	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e005      	b.n	8003d98 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f043 0204 	orr.w	r2, r3, #4
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08003e97 	.word	0x08003e97
 8003da8:	08003eb9 	.word	0x08003eb9
 8003dac:	08003ed5 	.word	0x08003ed5
 8003db0:	08003f3f 	.word	0x08003f3f
 8003db4:	08003f61 	.word	0x08003f61
 8003db8:	08003f7d 	.word	0x08003f7d

08003dbc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <HAL_DAC_ConfigChannel+0x1c>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e042      	b.n	8003e8a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	795b      	ldrb	r3, [r3, #5]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_DAC_ConfigChannel+0x2c>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e03c      	b.n	8003e8a <HAL_DAC_ConfigChannel+0xa6>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0310 	and.w	r3, r3, #16
 8003e2a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	22c0      	movs	r2, #192	@ 0xc0
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	400a      	ands	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	@ 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff ff89 	bl	8003dbc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2201      	movs	r2, #1
 8003eae:	711a      	strb	r2, [r3, #4]
}
 8003eb0:	bf00      	nop
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7fd fd36 	bl	8001938 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f043 0204 	orr.w	r2, r3, #4
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff ff6e 	bl	8003dd0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	711a      	strb	r2, [r3, #4]
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ffd8 	bl	8003f02 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	711a      	strb	r2, [r3, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff ffd1 	bl	8003f16 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f043 0204 	orr.w	r2, r3, #4
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ffc7 	bl	8003f2a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	711a      	strb	r2, [r3, #4]
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fb8:	f7ff fcda 	bl	8003970 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e099      	b.n	80040fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0201 	bic.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe8:	e00f      	b.n	800400a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fea:	f7ff fcc1 	bl	8003970 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b05      	cmp	r3, #5
 8003ff6:	d908      	bls.n	800400a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2203      	movs	r2, #3
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e078      	b.n	80040fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e8      	bne.n	8003fea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4b38      	ldr	r3, [pc, #224]	@ (8004104 <HAL_DMA_Init+0x158>)
 8004024:	4013      	ands	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	2b04      	cmp	r3, #4
 8004062:	d107      	bne.n	8004074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	4313      	orrs	r3, r2
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	2b04      	cmp	r3, #4
 800409c:	d117      	bne.n	80040ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fb01 	bl	80046b8 <DMA_CheckFifoParam>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2240      	movs	r2, #64	@ 0x40
 80040c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040ca:	2301      	movs	r3, #1
 80040cc:	e016      	b.n	80040fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fab8 	bl	800464c <DMA_CalcBaseAndBitshift>
 80040dc:	4603      	mov	r3, r0
 80040de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e4:	223f      	movs	r2, #63	@ 0x3f
 80040e6:	409a      	lsls	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	f010803f 	.word	0xf010803f

08004108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_DMA_Start_IT+0x26>
 800412a:	2302      	movs	r3, #2
 800412c:	e040      	b.n	80041b0 <HAL_DMA_Start_IT+0xa8>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d12f      	bne.n	80041a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fa4a 	bl	80045f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	223f      	movs	r2, #63	@ 0x3f
 8004162:	409a      	lsls	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0216 	orr.w	r2, r2, #22
 8004176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0208 	orr.w	r2, r2, #8
 800418e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e005      	b.n	80041ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
 80041ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041c6:	f7ff fbd3 	bl	8003970 <HAL_GetTick>
 80041ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d008      	beq.n	80041ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e052      	b.n	8004290 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0216 	bic.w	r2, r2, #22
 80041f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695a      	ldr	r2, [r3, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004208:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d103      	bne.n	800421a <HAL_DMA_Abort+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0208 	bic.w	r2, r2, #8
 8004228:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800423a:	e013      	b.n	8004264 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800423c:	f7ff fb98 	bl	8003970 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b05      	cmp	r3, #5
 8004248:	d90c      	bls.n	8004264 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2203      	movs	r2, #3
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e015      	b.n	8004290 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e4      	bne.n	800423c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004276:	223f      	movs	r2, #63	@ 0x3f
 8004278:	409a      	lsls	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d004      	beq.n	80042b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00c      	b.n	80042d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2205      	movs	r2, #5
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004524 <HAL_DMA_IRQHandler+0x248>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a8e      	ldr	r2, [pc, #568]	@ (8004528 <HAL_DMA_IRQHandler+0x24c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004306:	2208      	movs	r2, #8
 8004308:	409a      	lsls	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01a      	beq.n	8004348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004334:	2208      	movs	r2, #8
 8004336:	409a      	lsls	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	2201      	movs	r2, #1
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004382:	2204      	movs	r2, #4
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a0:	2204      	movs	r2, #4
 80043a2:	409a      	lsls	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ac:	f043 0204 	orr.w	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043b8:	2210      	movs	r2, #16
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d043      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d03c      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d6:	2210      	movs	r2, #16
 80043d8:	409a      	lsls	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d024      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e01f      	b.n	800444c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e016      	b.n	800444c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0208 	bic.w	r2, r2, #8
 800443a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	2220      	movs	r2, #32
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 808f 	beq.w	800457c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8087 	beq.w	800457c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	2220      	movs	r2, #32
 8004474:	409a      	lsls	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b05      	cmp	r3, #5
 8004484:	d136      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0216 	bic.w	r2, r2, #22
 8004494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <HAL_DMA_IRQHandler+0x1da>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0208 	bic.w	r2, r2, #8
 80044c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ca:	223f      	movs	r2, #63	@ 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d07e      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
        }
        return;
 80044f2:	e079      	b.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01d      	beq.n	800453e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004514:	2b00      	cmp	r3, #0
 8004516:	d031      	beq.n	800457c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e02c      	b.n	800457c <HAL_DMA_IRQHandler+0x2a0>
 8004522:	bf00      	nop
 8004524:	2000000c 	.word	0x2000000c
 8004528:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	e01e      	b.n	800457c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10f      	bne.n	800456c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0210 	bic.w	r2, r2, #16
 800455a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	d032      	beq.n	80045ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d022      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2205      	movs	r2, #5
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3301      	adds	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d307      	bcc.n	80045c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f2      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x2cc>
 80045c2:	e000      	b.n	80045c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d005      	beq.n	80045ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	4798      	blx	r3
 80045e6:	e000      	b.n	80045ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80045e8:	bf00      	nop
    }
  }
}
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800460c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b40      	cmp	r3, #64	@ 0x40
 800461c:	d108      	bne.n	8004630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800462e:	e007      	b.n	8004640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	3b10      	subs	r3, #16
 800465c:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <DMA_CalcBaseAndBitshift+0x64>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004666:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d909      	bls.n	800468e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	1d1a      	adds	r2, r3, #4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	659a      	str	r2, [r3, #88]	@ 0x58
 800468c:	e007      	b.n	800469e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	aaaaaaab 	.word	0xaaaaaaab
 80046b4:	0800d51c 	.word	0x0800d51c

080046b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11f      	bne.n	8004712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d856      	bhi.n	8004786 <DMA_CheckFifoParam+0xce>
 80046d8:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <DMA_CheckFifoParam+0x28>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	08004703 	.word	0x08004703
 80046e8:	080046f1 	.word	0x080046f1
 80046ec:	08004787 	.word	0x08004787
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d046      	beq.n	800478a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e043      	b.n	800478a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004706:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800470a:	d140      	bne.n	800478e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004710:	e03d      	b.n	800478e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800471a:	d121      	bne.n	8004760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d837      	bhi.n	8004792 <DMA_CheckFifoParam+0xda>
 8004722:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <DMA_CheckFifoParam+0x70>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	08004739 	.word	0x08004739
 800472c:	0800473f 	.word	0x0800473f
 8004730:	08004739 	.word	0x08004739
 8004734:	08004751 	.word	0x08004751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e030      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d025      	beq.n	8004796 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e022      	b.n	8004796 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004758:	d11f      	bne.n	800479a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800475e:	e01c      	b.n	800479a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d903      	bls.n	800476e <DMA_CheckFifoParam+0xb6>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d003      	beq.n	8004774 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800476c:	e018      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
      break;
 8004772:	e015      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004778:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e00b      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 8004786:	bf00      	nop
 8004788:	e00a      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 800478a:	bf00      	nop
 800478c:	e008      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 800478e:	bf00      	nop
 8004790:	e006      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004792:	bf00      	nop
 8004794:	e004      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <DMA_CheckFifoParam+0xe8>
      break;
 800479e:	bf00      	nop
    }
  } 
  
  return status; 
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop

080047b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	@ 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e16b      	b.n	8004aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047cc:	2201      	movs	r2, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	f040 815a 	bne.w	8004a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d005      	beq.n	8004802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d130      	bne.n	8004864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2203      	movs	r2, #3
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4013      	ands	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	fa02 f303 	lsl.w	r3, r2, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004838:	2201      	movs	r2, #1
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 0201 	and.w	r2, r3, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b03      	cmp	r3, #3
 800486e:	d017      	beq.n	80048a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4013      	ands	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d123      	bne.n	80048f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	220f      	movs	r2, #15
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3208      	adds	r2, #8
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80b4 	beq.w	8004a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b60      	ldr	r3, [pc, #384]	@ (8004abc <HAL_GPIO_Init+0x30c>)
 800493c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493e:	4a5f      	ldr	r2, [pc, #380]	@ (8004abc <HAL_GPIO_Init+0x30c>)
 8004940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004944:	6453      	str	r3, [r2, #68]	@ 0x44
 8004946:	4b5d      	ldr	r3, [pc, #372]	@ (8004abc <HAL_GPIO_Init+0x30c>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004952:	4a5b      	ldr	r2, [pc, #364]	@ (8004ac0 <HAL_GPIO_Init+0x310>)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	089b      	lsrs	r3, r3, #2
 8004958:	3302      	adds	r3, #2
 800495a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a52      	ldr	r2, [pc, #328]	@ (8004ac4 <HAL_GPIO_Init+0x314>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02b      	beq.n	80049d6 <HAL_GPIO_Init+0x226>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a51      	ldr	r2, [pc, #324]	@ (8004ac8 <HAL_GPIO_Init+0x318>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d025      	beq.n	80049d2 <HAL_GPIO_Init+0x222>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a50      	ldr	r2, [pc, #320]	@ (8004acc <HAL_GPIO_Init+0x31c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d01f      	beq.n	80049ce <HAL_GPIO_Init+0x21e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4f      	ldr	r2, [pc, #316]	@ (8004ad0 <HAL_GPIO_Init+0x320>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d019      	beq.n	80049ca <HAL_GPIO_Init+0x21a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4e      	ldr	r2, [pc, #312]	@ (8004ad4 <HAL_GPIO_Init+0x324>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <HAL_GPIO_Init+0x216>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4d      	ldr	r2, [pc, #308]	@ (8004ad8 <HAL_GPIO_Init+0x328>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00d      	beq.n	80049c2 <HAL_GPIO_Init+0x212>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4c      	ldr	r2, [pc, #304]	@ (8004adc <HAL_GPIO_Init+0x32c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <HAL_GPIO_Init+0x20e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae0 <HAL_GPIO_Init+0x330>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_GPIO_Init+0x20a>
 80049b6:	2307      	movs	r3, #7
 80049b8:	e00e      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ba:	2308      	movs	r3, #8
 80049bc:	e00c      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049be:	2306      	movs	r3, #6
 80049c0:	e00a      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049c2:	2305      	movs	r3, #5
 80049c4:	e008      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e006      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e004      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e002      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_GPIO_Init+0x228>
 80049d6:	2300      	movs	r3, #0
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	f002 0203 	and.w	r2, r2, #3
 80049de:	0092      	lsls	r2, r2, #2
 80049e0:	4093      	lsls	r3, r2
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049e8:	4935      	ldr	r1, [pc, #212]	@ (8004ac0 <HAL_GPIO_Init+0x310>)
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	3302      	adds	r3, #2
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049f6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a20:	4b30      	ldr	r3, [pc, #192]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a44:	4a27      	ldr	r2, [pc, #156]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a4a:	4b26      	ldr	r3, [pc, #152]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a98:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <HAL_GPIO_Init+0x334>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	f67f ae90 	bls.w	80047cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	3724      	adds	r7, #36	@ 0x24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	40020000 	.word	0x40020000
 8004ac8:	40020400 	.word	0x40020400
 8004acc:	40020800 	.word	0x40020800
 8004ad0:	40020c00 	.word	0x40020c00
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	40021400 	.word	0x40021400
 8004adc:	40021800 	.word	0x40021800
 8004ae0:	40021c00 	.word	0x40021c00
 8004ae4:	40013c00 	.word	0x40013c00

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004af8:	787b      	ldrb	r3, [r7, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b04:	e003      	b.n	8004b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b06:	887b      	ldrh	r3, [r7, #2]
 8004b08:	041a      	lsls	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	619a      	str	r2, [r3, #24]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e267      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d075      	beq.n	8004c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b3a:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00c      	beq.n	8004b60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b46:	4b85      	ldr	r3, [pc, #532]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d112      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b52:	4b82      	ldr	r3, [pc, #520]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b5e:	d10b      	bne.n	8004b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	4b7e      	ldr	r3, [pc, #504]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d05b      	beq.n	8004c24 <HAL_RCC_OscConfig+0x108>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d157      	bne.n	8004c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e242      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x74>
 8004b82:	4b76      	ldr	r3, [pc, #472]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a75      	ldr	r2, [pc, #468]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e01d      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x98>
 8004b9a:	4b70      	ldr	r3, [pc, #448]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a6c      	ldr	r2, [pc, #432]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCC_OscConfig+0xb0>
 8004bb4:	4b69      	ldr	r3, [pc, #420]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a68      	ldr	r2, [pc, #416]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b66      	ldr	r3, [pc, #408]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a65      	ldr	r2, [pc, #404]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd4:	f7fe fecc 	bl	8003970 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fec8 	bl	8003970 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	@ 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e207      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	4b5b      	ldr	r3, [pc, #364]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0xc0>
 8004bfa:	e014      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe feb8 	bl	8003970 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe feb4 	bl	8003970 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	@ 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e1f3      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c16:	4b51      	ldr	r3, [pc, #324]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0xe8>
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d063      	beq.n	8004cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c32:	4b4a      	ldr	r3, [pc, #296]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 030c 	and.w	r3, r3, #12
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c3e:	4b47      	ldr	r3, [pc, #284]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d11c      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c4a:	4b44      	ldr	r3, [pc, #272]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d116      	bne.n	8004c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	4b41      	ldr	r3, [pc, #260]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d001      	beq.n	8004c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e1c7      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	4937      	ldr	r1, [pc, #220]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c82:	e03a      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d020      	beq.n	8004cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	4b34      	ldr	r3, [pc, #208]	@ (8004d60 <HAL_RCC_OscConfig+0x244>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c92:	f7fe fe6d 	bl	8003970 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9a:	f7fe fe69 	bl	8003970 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e1a8      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cac:	4b2b      	ldr	r3, [pc, #172]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4925      	ldr	r1, [pc, #148]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	e015      	b.n	8004cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cce:	4b24      	ldr	r3, [pc, #144]	@ (8004d60 <HAL_RCC_OscConfig+0x244>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fe4c 	bl	8003970 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fe48 	bl	8003970 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e187      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cee:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f0      	bne.n	8004cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d036      	beq.n	8004d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d016      	beq.n	8004d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d0e:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <HAL_RCC_OscConfig+0x248>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fe fe2c 	bl	8003970 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fe fe28 	bl	8003970 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e167      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_RCC_OscConfig+0x240>)
 8004d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0x200>
 8004d3a:	e01b      	b.n	8004d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <HAL_RCC_OscConfig+0x248>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d42:	f7fe fe15 	bl	8003970 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d48:	e00e      	b.n	8004d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7fe fe11 	bl	8003970 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d907      	bls.n	8004d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e150      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	42470000 	.word	0x42470000
 8004d64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d68:	4b88      	ldr	r3, [pc, #544]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1ea      	bne.n	8004d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8097 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d86:	4b81      	ldr	r3, [pc, #516]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b7d      	ldr	r3, [pc, #500]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004da2:	4b7a      	ldr	r3, [pc, #488]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	4b77      	ldr	r3, [pc, #476]	@ (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d118      	bne.n	8004df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dbe:	4b74      	ldr	r3, [pc, #464]	@ (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a73      	ldr	r2, [pc, #460]	@ (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dca:	f7fe fdd1 	bl	8003970 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fe fdcd 	bl	8003970 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e10c      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f90 <HAL_RCC_OscConfig+0x474>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d106      	bne.n	8004e06 <HAL_RCC_OscConfig+0x2ea>
 8004df8:	4b64      	ldr	r3, [pc, #400]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfc:	4a63      	ldr	r2, [pc, #396]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e04:	e01c      	b.n	8004e40 <HAL_RCC_OscConfig+0x324>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCC_OscConfig+0x30c>
 8004e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	4a5e      	ldr	r2, [pc, #376]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e14:	f043 0304 	orr.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e26:	e00b      	b.n	8004e40 <HAL_RCC_OscConfig+0x324>
 8004e28:	4b58      	ldr	r3, [pc, #352]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	4a57      	ldr	r2, [pc, #348]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e34:	4b55      	ldr	r3, [pc, #340]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	4a54      	ldr	r2, [pc, #336]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e3a:	f023 0304 	bic.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fe fd92 	bl	8003970 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	e00a      	b.n	8004e66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e50:	f7fe fd8e 	bl	8003970 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e0cb      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e66:	4b49      	ldr	r3, [pc, #292]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ee      	beq.n	8004e50 <HAL_RCC_OscConfig+0x334>
 8004e72:	e014      	b.n	8004e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fe fd7c 	bl	8003970 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7c:	f7fe fd78 	bl	8003970 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0b5      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e92:	4b3e      	ldr	r3, [pc, #248]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1ee      	bne.n	8004e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea4:	4b39      	ldr	r3, [pc, #228]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	4a38      	ldr	r2, [pc, #224]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 80a1 	beq.w	8004ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eba:	4b34      	ldr	r3, [pc, #208]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d05c      	beq.n	8004f80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d141      	bne.n	8004f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ece:	4b31      	ldr	r3, [pc, #196]	@ (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fd4c 	bl	8003970 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004edc:	f7fe fd48 	bl	8003970 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e087      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	4b27      	ldr	r3, [pc, #156]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	019b      	lsls	r3, r3, #6
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	491b      	ldr	r1, [pc, #108]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f24:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fe fd21 	bl	8003970 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fe fd1d 	bl	8003970 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e05c      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f44:	4b11      	ldr	r3, [pc, #68]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x416>
 8004f50:	e054      	b.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f52:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <HAL_RCC_OscConfig+0x478>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fe fd0a 	bl	8003970 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f60:	f7fe fd06 	bl	8003970 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e045      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCC_OscConfig+0x470>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <HAL_RCC_OscConfig+0x444>
 8004f7e:	e03d      	b.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d107      	bne.n	8004f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e038      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40007000 	.word	0x40007000
 8004f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f98:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <HAL_RCC_OscConfig+0x4ec>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d121      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d11a      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004fc8:	4013      	ands	r3, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d111      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fde:	085b      	lsrs	r3, r3, #1
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800

0800500c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0cc      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	4b68      	ldr	r3, [pc, #416]	@ (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d90c      	bls.n	8005048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b65      	ldr	r3, [pc, #404]	@ (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b63      	ldr	r3, [pc, #396]	@ (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b8      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005060:	4b59      	ldr	r3, [pc, #356]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a58      	ldr	r2, [pc, #352]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800506a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005078:	4b53      	ldr	r3, [pc, #332]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4a52      	ldr	r2, [pc, #328]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005084:	4b50      	ldr	r3, [pc, #320]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	494d      	ldr	r1, [pc, #308]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d044      	beq.n	800512c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b47      	ldr	r3, [pc, #284]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d119      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e07f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b3f      	ldr	r3, [pc, #252]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e06f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050da:	4b3b      	ldr	r3, [pc, #236]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e067      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ea:	4b37      	ldr	r3, [pc, #220]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 0203 	bic.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	4934      	ldr	r1, [pc, #208]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050fc:	f7fe fc38 	bl	8003970 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fe fc34 	bl	8003970 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e04f      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 020c 	and.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	429a      	cmp	r2, r3
 800512a:	d1eb      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800512c:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d20c      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b22      	ldr	r3, [pc, #136]	@ (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b20      	ldr	r3, [pc, #128]	@ (80051c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e032      	b.n	80051ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005160:	4b19      	ldr	r3, [pc, #100]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4916      	ldr	r1, [pc, #88]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517e:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	490e      	ldr	r1, [pc, #56]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800518e:	4313      	orrs	r3, r2
 8005190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005192:	f000 f821 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005196:	4602      	mov	r2, r0
 8005198:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	490a      	ldr	r1, [pc, #40]	@ (80051cc <HAL_RCC_ClockConfig+0x1c0>)
 80051a4:	5ccb      	ldrb	r3, [r1, r3]
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	4a09      	ldr	r2, [pc, #36]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c4>)
 80051ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051ae:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fb98 	bl	80038e8 <HAL_InitTick>

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40023c00 	.word	0x40023c00
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0800d504 	.word	0x0800d504
 80051d0:	2000000c 	.word	0x2000000c
 80051d4:	20000010 	.word	0x20000010

080051d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b094      	sub	sp, #80	@ 0x50
 80051de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f0:	4b79      	ldr	r3, [pc, #484]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d00d      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x40>
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	f200 80e1 	bhi.w	80053c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 8005206:	2b04      	cmp	r3, #4
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0x3a>
 800520a:	e0db      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4b73      	ldr	r3, [pc, #460]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x204>)
 800520e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005210:	e0db      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005212:	4b73      	ldr	r3, [pc, #460]	@ (80053e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005214:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005216:	e0d8      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005218:	4b6f      	ldr	r3, [pc, #444]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005220:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005222:	4b6d      	ldr	r3, [pc, #436]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d063      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522e:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	099b      	lsrs	r3, r3, #6
 8005234:	2200      	movs	r2, #0
 8005236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005238:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005240:	633b      	str	r3, [r7, #48]	@ 0x30
 8005242:	2300      	movs	r3, #0
 8005244:	637b      	str	r3, [r7, #52]	@ 0x34
 8005246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	f04f 0000 	mov.w	r0, #0
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	0159      	lsls	r1, r3, #5
 8005258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800525c:	0150      	lsls	r0, r2, #5
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4621      	mov	r1, r4
 8005264:	1a51      	subs	r1, r2, r1
 8005266:	6139      	str	r1, [r7, #16]
 8005268:	4629      	mov	r1, r5
 800526a:	eb63 0301 	sbc.w	r3, r3, r1
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800527c:	4659      	mov	r1, fp
 800527e:	018b      	lsls	r3, r1, #6
 8005280:	4651      	mov	r1, sl
 8005282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005286:	4651      	mov	r1, sl
 8005288:	018a      	lsls	r2, r1, #6
 800528a:	4651      	mov	r1, sl
 800528c:	ebb2 0801 	subs.w	r8, r2, r1
 8005290:	4659      	mov	r1, fp
 8005292:	eb63 0901 	sbc.w	r9, r3, r1
 8005296:	f04f 0200 	mov.w	r2, #0
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052aa:	4690      	mov	r8, r2
 80052ac:	4699      	mov	r9, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	eb18 0303 	adds.w	r3, r8, r3
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	462b      	mov	r3, r5
 80052b8:	eb49 0303 	adc.w	r3, r9, r3
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052ca:	4629      	mov	r1, r5
 80052cc:	024b      	lsls	r3, r1, #9
 80052ce:	4621      	mov	r1, r4
 80052d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052d4:	4621      	mov	r1, r4
 80052d6:	024a      	lsls	r2, r1, #9
 80052d8:	4610      	mov	r0, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052de:	2200      	movs	r2, #0
 80052e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052e8:	f7fa ff76 	bl	80001d8 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4613      	mov	r3, r2
 80052f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f4:	e058      	b.n	80053a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f6:	4b38      	ldr	r3, [pc, #224]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	099b      	lsrs	r3, r3, #6
 80052fc:	2200      	movs	r2, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	4611      	mov	r1, r2
 8005302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	2300      	movs	r3, #0
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
 800530c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	f04f 0000 	mov.w	r0, #0
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	0159      	lsls	r1, r3, #5
 800531e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005322:	0150      	lsls	r0, r2, #5
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4641      	mov	r1, r8
 800532a:	ebb2 0a01 	subs.w	sl, r2, r1
 800532e:	4649      	mov	r1, r9
 8005330:	eb63 0b01 	sbc.w	fp, r3, r1
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005348:	ebb2 040a 	subs.w	r4, r2, sl
 800534c:	eb63 050b 	sbc.w	r5, r3, fp
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	00eb      	lsls	r3, r5, #3
 800535a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535e:	00e2      	lsls	r2, r4, #3
 8005360:	4614      	mov	r4, r2
 8005362:	461d      	mov	r5, r3
 8005364:	4643      	mov	r3, r8
 8005366:	18e3      	adds	r3, r4, r3
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	464b      	mov	r3, r9
 800536c:	eb45 0303 	adc.w	r3, r5, r3
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800537e:	4629      	mov	r1, r5
 8005380:	028b      	lsls	r3, r1, #10
 8005382:	4621      	mov	r1, r4
 8005384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005388:	4621      	mov	r1, r4
 800538a:	028a      	lsls	r2, r1, #10
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005392:	2200      	movs	r2, #0
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	61fa      	str	r2, [r7, #28]
 8005398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800539c:	f7fa ff1c 	bl	80001d8 <__aeabi_uldivmod>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4613      	mov	r3, r2
 80053a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0c1b      	lsrs	r3, r3, #16
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	3301      	adds	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053c2:	e002      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053c4:	4b05      	ldr	r3, [pc, #20]	@ (80053dc <HAL_RCC_GetSysClockFreq+0x204>)
 80053c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3750      	adds	r7, #80	@ 0x50
 80053d0:	46bd      	mov	sp, r7
 80053d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	007a1200 	.word	0x007a1200

080053e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ea:	681b      	ldr	r3, [r3, #0]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000000c 	.word	0x2000000c

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005400:	f7ff fff0 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	0a9b      	lsrs	r3, r3, #10
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4903      	ldr	r1, [pc, #12]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40023800 	.word	0x40023800
 8005420:	0800d514 	.word	0x0800d514

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005428:	f7ff ffdc 	bl	80053e4 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4903      	ldr	r1, [pc, #12]	@ (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023800 	.word	0x40023800
 8005448:	0800d514 	.word	0x0800d514

0800544c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e022      	b.n	80054a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d105      	bne.n	8005476 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fd ffb7 	bl	80033e4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2203      	movs	r2, #3
 800547a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f814 	bl	80054ac <HAL_SD_InitCard>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e00a      	b.n	80054a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054ac:	b5b0      	push	{r4, r5, r7, lr}
 80054ae:	b08e      	sub	sp, #56	@ 0x38
 80054b0:	af04      	add	r7, sp, #16
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80054c8:	2376      	movs	r3, #118	@ 0x76
 80054ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681d      	ldr	r5, [r3, #0]
 80054d0:	466c      	mov	r4, sp
 80054d2:	f107 0314 	add.w	r3, r7, #20
 80054d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054de:	f107 0308 	add.w	r3, r7, #8
 80054e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054e4:	4628      	mov	r0, r5
 80054e6:	f003 fb59 	bl	8008b9c <SDIO_Init>
 80054ea:	4603      	mov	r3, r0
 80054ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80054f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e04f      	b.n	800559c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80054fc:	4b29      	ldr	r3, [pc, #164]	@ (80055a4 <HAL_SD_InitCard+0xf8>)
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f003 fb91 	bl	8008c2e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <HAL_SD_InitCard+0xf8>)
 800550e:	2201      	movs	r2, #1
 8005510:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005512:	2002      	movs	r0, #2
 8005514:	f7fe fa38 	bl	8003988 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fe79 	bl	8006210 <SD_PowerON>
 800551e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e02e      	b.n	800559c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fd98 	bl	8006074 <SD_InitCard>
 8005544:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e01b      	b.n	800559c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800556c:	4618      	mov	r0, r3
 800556e:	f003 fbf0 	bl	8008d52 <SDMMC_CmdBlockLength>
 8005572:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0a      	ldr	r2, [pc, #40]	@ (80055a8 <HAL_SD_InitCard+0xfc>)
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3728      	adds	r7, #40	@ 0x28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bdb0      	pop	{r4, r5, r7, pc}
 80055a4:	422580a0 	.word	0x422580a0
 80055a8:	004005ff 	.word	0x004005ff

080055ac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b092      	sub	sp, #72	@ 0x48
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055ba:	f7fe f9d9 	bl	8003970 <HAL_GetTick>
 80055be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d107      	bne.n	80055de <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c5      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f040 81b8 	bne.w	800595c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d907      	bls.n	8005610 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e1ac      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2203      	movs	r2, #3
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2200      	movs	r2, #0
 800561e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005624:	2b01      	cmp	r3, #1
 8005626:	d002      	beq.n	800562e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	025b      	lsls	r3, r3, #9
 800562c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	025b      	lsls	r3, r3, #9
 8005638:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800563a:	2390      	movs	r3, #144	@ 0x90
 800563c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800563e:	2302      	movs	r3, #2
 8005640:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005642:	2300      	movs	r3, #0
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005646:	2301      	movs	r3, #1
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f107 0214 	add.w	r2, r7, #20
 8005652:	4611      	mov	r1, r2
 8005654:	4618      	mov	r0, r3
 8005656:	f003 fb50 	bl	8008cfa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d90a      	bls.n	8005676 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2202      	movs	r2, #2
 8005664:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800566c:	4618      	mov	r0, r3
 800566e:	f003 fbb4 	bl	8008dda <SDMMC_CmdReadMultiBlock>
 8005672:	6478      	str	r0, [r7, #68]	@ 0x44
 8005674:	e009      	b.n	800568a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005682:	4618      	mov	r0, r3
 8005684:	f003 fb87 	bl	8008d96 <SDMMC_CmdReadSingleBlock>
 8005688:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800568a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800568c:	2b00      	cmp	r3, #0
 800568e:	d012      	beq.n	80056b6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a7e      	ldr	r2, [pc, #504]	@ (8005890 <HAL_SD_ReadBlocks+0x2e4>)
 8005696:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800569e:	431a      	orrs	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e159      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80056ba:	e061      	b.n	8005780 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d03c      	beq.n	8005744 <HAL_SD_ReadBlocks+0x198>
 80056ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d039      	beq.n	8005744 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80056d0:	2300      	movs	r3, #0
 80056d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d4:	e033      	b.n	800573e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f003 fa89 	bl	8008bf2 <SDIO_ReadFIFO>
 80056e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80056ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ec:	3301      	adds	r3, #1
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80056f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f2:	3b01      	subs	r3, #1
 80056f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80056f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005702:	3301      	adds	r3, #1
 8005704:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005708:	3b01      	subs	r3, #1
 800570a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b2da      	uxtb	r2, r3
 8005712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005714:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	3301      	adds	r3, #1
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800571c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571e:	3b01      	subs	r3, #1
 8005720:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	0e1b      	lsrs	r3, r3, #24
 8005726:	b2da      	uxtb	r2, r3
 8005728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	3301      	adds	r3, #1
 8005730:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005734:	3b01      	subs	r3, #1
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800573a:	3301      	adds	r3, #1
 800573c:	643b      	str	r3, [r7, #64]	@ 0x40
 800573e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005740:	2b07      	cmp	r3, #7
 8005742:	d9c8      	bls.n	80056d6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005744:	f7fe f914 	bl	8003970 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005750:	429a      	cmp	r2, r3
 8005752:	d902      	bls.n	800575a <HAL_SD_ReadBlocks+0x1ae>
 8005754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005756:	2b00      	cmp	r3, #0
 8005758:	d112      	bne.n	8005780 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a4c      	ldr	r2, [pc, #304]	@ (8005890 <HAL_SD_ReadBlocks+0x2e4>)
 8005760:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005766:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e0f4      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005786:	f240 332a 	movw	r3, #810	@ 0x32a
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d095      	beq.n	80056bc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d022      	beq.n	80057e4 <HAL_SD_ReadBlocks+0x238>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d91f      	bls.n	80057e4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d01b      	beq.n	80057e4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f003 fb79 	bl	8008ea8 <SDMMC_CmdStopTransfer>
 80057b6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d012      	beq.n	80057e4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a33      	ldr	r2, [pc, #204]	@ (8005890 <HAL_SD_ReadBlocks+0x2e4>)
 80057c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0c2      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <HAL_SD_ReadBlocks+0x254>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d012      	beq.n	8005826 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a22      	ldr	r2, [pc, #136]	@ (8005890 <HAL_SD_ReadBlocks+0x2e4>)
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	f043 0208 	orr.w	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0a1      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <HAL_SD_ReadBlocks+0x2e4>)
 800583a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	f043 0202 	orr.w	r2, r3, #2
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e087      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d064      	beq.n	8005932 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a08      	ldr	r2, [pc, #32]	@ (8005890 <HAL_SD_ReadBlocks+0x2e4>)
 800586e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e06d      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
 800588e:	bf00      	nop
 8005890:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f003 f9aa 	bl	8008bf2 <SDIO_ReadFIFO>
 800589e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058aa:	3301      	adds	r3, #1
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058b0:	3b01      	subs	r3, #1
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c0:	3301      	adds	r3, #1
 80058c2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c6:	3b01      	subs	r3, #1
 80058c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80058ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d6:	3301      	adds	r3, #1
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058dc:	3b01      	subs	r3, #1
 80058de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	0e1b      	lsrs	r3, r3, #24
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ec:	3301      	adds	r3, #1
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f2:	3b01      	subs	r3, #1
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80058f6:	f7fe f83b 	bl	8003970 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005902:	429a      	cmp	r2, r3
 8005904:	d902      	bls.n	800590c <HAL_SD_ReadBlocks+0x360>
 8005906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005908:	2b00      	cmp	r3, #0
 800590a:	d112      	bne.n	8005932 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a18      	ldr	r2, [pc, #96]	@ (8005974 <HAL_SD_ReadBlocks+0x3c8>)
 8005912:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e01b      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SD_ReadBlocks+0x39a>
 8005940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1a6      	bne.n	8005894 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e006      	b.n	800596a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3748      	adds	r7, #72	@ 0x48
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	004005ff 	.word	0x004005ff

08005978 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b092      	sub	sp, #72	@ 0x48
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005986:	f7fd fff3 	bl	8003970 <HAL_GetTick>
 800598a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d107      	bne.n	80059aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e16d      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	f040 8160 	bne.w	8005c78 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80059be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d907      	bls.n	80059dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e154      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2203      	movs	r2, #3
 80059e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	025b      	lsls	r3, r3, #9
 80059f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	025b      	lsls	r3, r3, #9
 8005a04:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005a06:	2390      	movs	r3, #144	@ 0x90
 8005a08:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f107 0218 	add.w	r2, r7, #24
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f003 f96a 	bl	8008cfa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d90a      	bls.n	8005a42 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 fa12 	bl	8008e62 <SDMMC_CmdWriteMultiBlock>
 8005a3e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005a40:	e009      	b.n	8005a56 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2210      	movs	r2, #16
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f003 f9e5 	bl	8008e1e <SDMMC_CmdWriteSingleBlock>
 8005a54:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d012      	beq.n	8005a82 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a8b      	ldr	r2, [pc, #556]	@ (8005c90 <HAL_SD_WriteBlocks+0x318>)
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e101      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a86:	e065      	b.n	8005b54 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d040      	beq.n	8005b18 <HAL_SD_WriteBlocks+0x1a0>
 8005a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d03d      	beq.n	8005b18 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa0:	e037      	b.n	8005b12 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aaa:	3301      	adds	r3, #1
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	021a      	lsls	r2, r3, #8
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	041a      	lsls	r2, r3, #16
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ada:	3301      	adds	r3, #1
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	3301      	adds	r3, #1
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af8:	3b01      	subs	r3, #1
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f107 0214 	add.w	r2, r7, #20
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f003 f880 	bl	8008c0c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0e:	3301      	adds	r3, #1
 8005b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b14:	2b07      	cmp	r3, #7
 8005b16:	d9c4      	bls.n	8005aa2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b18:	f7fd ff2a 	bl	8003970 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d902      	bls.n	8005b2e <HAL_SD_WriteBlocks+0x1b6>
 8005b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d112      	bne.n	8005b54 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a57      	ldr	r2, [pc, #348]	@ (8005c90 <HAL_SD_WriteBlocks+0x318>)
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e098      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b5a:	f240 331a 	movw	r3, #794	@ 0x31a
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d091      	beq.n	8005a88 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d022      	beq.n	8005bb8 <HAL_SD_WriteBlocks+0x240>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d91f      	bls.n	8005bb8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d01b      	beq.n	8005bb8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f003 f98f 	bl	8008ea8 <SDMMC_CmdStopTransfer>
 8005b8a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d012      	beq.n	8005bb8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a3e      	ldr	r2, [pc, #248]	@ (8005c90 <HAL_SD_WriteBlocks+0x318>)
 8005b98:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e066      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_SD_WriteBlocks+0x25c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d012      	beq.n	8005bfa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c90 <HAL_SD_WriteBlocks+0x318>)
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	f043 0208 	orr.w	r2, r3, #8
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e045      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d012      	beq.n	8005c2e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a20      	ldr	r2, [pc, #128]	@ (8005c90 <HAL_SD_WriteBlocks+0x318>)
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c14:	f043 0202 	orr.w	r2, r3, #2
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e02b      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a13      	ldr	r2, [pc, #76]	@ (8005c90 <HAL_SD_WriteBlocks+0x318>)
 8005c42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e011      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005c6a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e006      	b.n	8005c86 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3748      	adds	r7, #72	@ 0x48
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	004005ff 	.word	0x004005ff

08005c94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca2:	0f9b      	lsrs	r3, r3, #30
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cae:	0e9b      	lsrs	r3, r3, #26
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc0:	0e1b      	lsrs	r3, r3, #24
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0303 	and.w	r3, r3, #3
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd2:	0c1b      	lsrs	r3, r3, #16
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005cf4:	0d1b      	lsrs	r3, r3, #20
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d00:	0c1b      	lsrs	r3, r3, #16
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 030f 	and.w	r3, r3, #15
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d12:	0bdb      	lsrs	r3, r3, #15
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d24:	0b9b      	lsrs	r3, r3, #14
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d36:	0b5b      	lsrs	r3, r3, #13
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d48:	0b1b      	lsrs	r3, r3, #12
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d163      	bne.n	8005e2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d68:	009a      	lsls	r2, r3, #2
 8005d6a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d6e:	4013      	ands	r3, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005d74:	0f92      	lsrs	r2, r2, #30
 8005d76:	431a      	orrs	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d80:	0edb      	lsrs	r3, r3, #27
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d92:	0e1b      	lsrs	r3, r3, #24
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da4:	0d5b      	lsrs	r3, r3, #21
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db6:	0c9b      	lsrs	r3, r3, #18
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc8:	0bdb      	lsrs	r3, r3, #15
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	7e1b      	ldrb	r3, [r3, #24]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	3302      	adds	r3, #2
 8005dec:	2201      	movs	r2, #1
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005df6:	fb03 f202 	mul.w	r2, r3, r2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	7a1b      	ldrb	r3, [r3, #8]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	2201      	movs	r2, #1
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005e18:	0a52      	lsrs	r2, r2, #9
 8005e1a:	fb03 f202 	mul.w	r2, r3, r2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e28:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e2a:	e031      	b.n	8005e90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d11d      	bne.n	8005e70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e42:	0c1b      	lsrs	r3, r3, #16
 8005e44:	431a      	orrs	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	029a      	lsls	r2, r3, #10
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e64:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e6e:	e00f      	b.n	8005e90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a58      	ldr	r2, [pc, #352]	@ (8005fd8 <HAL_SD_GetCardCSD+0x344>)
 8005e76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e09d      	b.n	8005fcc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e94:	0b9b      	lsrs	r3, r3, #14
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec8:	0fdb      	lsrs	r3, r3, #31
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	0f5b      	lsrs	r3, r3, #29
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee6:	0e9b      	lsrs	r3, r3, #26
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef8:	0d9b      	lsrs	r3, r3, #22
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	0d5b      	lsrs	r3, r3, #21
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	0bdb      	lsrs	r3, r3, #15
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	0b9b      	lsrs	r3, r3, #14
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f62:	0b5b      	lsrs	r3, r3, #13
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f76:	0b1b      	lsrs	r3, r3, #12
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	0a9b      	lsrs	r3, r3, #10
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	004005ff 	.word	0x004005ff

08005fdc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f970 	bl	800632c <SD_SendStatus>
 800604c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	0a5b      	lsrs	r3, r3, #9
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800606a:	693b      	ldr	r3, [r7, #16]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	b094      	sub	sp, #80	@ 0x50
 8006078:	af04      	add	r7, sp, #16
 800607a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800607c:	2301      	movs	r3, #1
 800607e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f002 fde0 	bl	8008c4a <SDIO_GetPowerState>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d102      	bne.n	8006096 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006090:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006094:	e0b8      	b.n	8006208 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	2b03      	cmp	r3, #3
 800609c:	d02f      	beq.n	80060fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 ffc7 	bl	8009036 <SDMMC_CmdSendCID>
 80060a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80060b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b2:	e0a9      	b.n	8006208 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f002 fe0a 	bl	8008cd4 <SDIO_GetResponse>
 80060c0:	4602      	mov	r2, r0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2104      	movs	r1, #4
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 fe01 	bl	8008cd4 <SDIO_GetResponse>
 80060d2:	4602      	mov	r2, r0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2108      	movs	r1, #8
 80060de:	4618      	mov	r0, r3
 80060e0:	f002 fdf8 	bl	8008cd4 <SDIO_GetResponse>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	210c      	movs	r1, #12
 80060f0:	4618      	mov	r0, r3
 80060f2:	f002 fdef 	bl	8008cd4 <SDIO_GetResponse>
 80060f6:	4602      	mov	r2, r0
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006102:	2b03      	cmp	r3, #3
 8006104:	d00d      	beq.n	8006122 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f107 020e 	add.w	r2, r7, #14
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f002 ffcd 	bl	80090b0 <SDMMC_CmdSetRelAdd>
 8006116:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <SD_InitCard+0xae>
    {
      return errorstate;
 800611e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006120:	e072      	b.n	8006208 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	2b03      	cmp	r3, #3
 8006128:	d036      	beq.n	8006198 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800612a:	89fb      	ldrh	r3, [r7, #14]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f002 ff97 	bl	8009072 <SDMMC_CmdSendCSD>
 8006144:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <SD_InitCard+0xdc>
    {
      return errorstate;
 800614c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614e:	e05b      	b.n	8006208 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2100      	movs	r1, #0
 8006156:	4618      	mov	r0, r3
 8006158:	f002 fdbc 	bl	8008cd4 <SDIO_GetResponse>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2104      	movs	r1, #4
 8006168:	4618      	mov	r0, r3
 800616a:	f002 fdb3 	bl	8008cd4 <SDIO_GetResponse>
 800616e:	4602      	mov	r2, r0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2108      	movs	r1, #8
 800617a:	4618      	mov	r0, r3
 800617c:	f002 fdaa 	bl	8008cd4 <SDIO_GetResponse>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	210c      	movs	r1, #12
 800618c:	4618      	mov	r0, r3
 800618e:	f002 fda1 	bl	8008cd4 <SDIO_GetResponse>
 8006192:	4602      	mov	r2, r0
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2104      	movs	r1, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f002 fd98 	bl	8008cd4 <SDIO_GetResponse>
 80061a4:	4603      	mov	r3, r0
 80061a6:	0d1a      	lsrs	r2, r3, #20
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fd6e 	bl	8005c94 <HAL_SD_GetCardCSD>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061be:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80061c2:	e021      	b.n	8006208 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6819      	ldr	r1, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	2200      	movs	r2, #0
 80061d0:	461c      	mov	r4, r3
 80061d2:	4615      	mov	r5, r2
 80061d4:	4622      	mov	r2, r4
 80061d6:	462b      	mov	r3, r5
 80061d8:	4608      	mov	r0, r1
 80061da:	f002 fe87 	bl	8008eec <SDMMC_CmdSelDesel>
 80061de:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80061e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <SD_InitCard+0x176>
  {
    return errorstate;
 80061e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e8:	e00e      	b.n	8006208 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681d      	ldr	r5, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	466c      	mov	r4, sp
 80061f2:	f103 0210 	add.w	r2, r3, #16
 80061f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80061f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061fc:	3304      	adds	r3, #4
 80061fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006200:	4628      	mov	r0, r5
 8006202:	f002 fccb 	bl	8008b9c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3740      	adds	r7, #64	@ 0x40
 800620c:	46bd      	mov	sp, r7
 800620e:	bdb0      	pop	{r4, r5, r7, pc}

08006210 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f002 fe82 	bl	8008f32 <SDMMC_CmdGoIdleState>
 800622e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	e072      	b.n	8006320 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f002 fe95 	bl	8008f6e <SDMMC_CmdOperCond>
 8006244:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00d      	beq.n	8006268 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f002 fe6b 	bl	8008f32 <SDMMC_CmdGoIdleState>
 800625c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e05b      	b.n	8006320 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006272:	2b01      	cmp	r3, #1
 8006274:	d137      	bne.n	80062e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f002 fe95 	bl	8008fac <SDMMC_CmdAppCommand>
 8006282:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02d      	beq.n	80062e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800628a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800628e:	e047      	b.n	8006320 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f002 fe88 	bl	8008fac <SDMMC_CmdAppCommand>
 800629c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	e03b      	b.n	8006320 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	491e      	ldr	r1, [pc, #120]	@ (8006328 <SD_PowerON+0x118>)
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 fe9e 	bl	8008ff0 <SDMMC_CmdAppOperCommand>
 80062b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062bc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80062c0:	e02e      	b.n	8006320 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f002 fd03 	bl	8008cd4 <SDIO_GetResponse>
 80062ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	0fdb      	lsrs	r3, r3, #31
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <SD_PowerON+0xcc>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <SD_PowerON+0xce>
 80062dc:	2300      	movs	r3, #0
 80062de:	613b      	str	r3, [r7, #16]

    count++;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d802      	bhi.n	80062f6 <SD_PowerON+0xe6>
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0cc      	beq.n	8006290 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d902      	bls.n	8006306 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006300:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006304:	e00c      	b.n	8006320 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44
 8006316:	e002      	b.n	800631e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	c1100000 	.word	0xc1100000

0800632c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800633c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006340:	e018      	b.n	8006374 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634a:	041b      	lsls	r3, r3, #16
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f002 fecf 	bl	80090f2 <SDMMC_CmdSendStatus>
 8006354:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <SD_SendStatus+0x34>
  {
    return errorstate;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	e009      	b.n	8006374 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f002 fcb4 	bl	8008cd4 <SDIO_GetResponse>
 800636c:	4602      	mov	r2, r0
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e07b      	b.n	8006486 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	d108      	bne.n	80063a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800639e:	d009      	beq.n	80063b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	61da      	str	r2, [r3, #28]
 80063a6:	e005      	b.n	80063b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fd f882 	bl	80034d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69db      	ldr	r3, [r3, #28]
 800642a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006438:	ea42 0103 	orr.w	r1, r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	0c1b      	lsrs	r3, r3, #16
 8006452:	f003 0104 	and.w	r1, r3, #4
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	f003 0210 	and.w	r2, r3, #16
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006474:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b088      	sub	sp, #32
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	4613      	mov	r3, r2
 800649c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800649e:	f7fd fa67 	bl	8003970 <HAL_GetTick>
 80064a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d001      	beq.n	80064b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
 80064b6:	e12a      	b.n	800670e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_SPI_Transmit+0x36>
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e122      	b.n	800670e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d101      	bne.n	80064d6 <HAL_SPI_Transmit+0x48>
 80064d2:	2302      	movs	r3, #2
 80064d4:	e11b      	b.n	800670e <HAL_SPI_Transmit+0x280>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2203      	movs	r2, #3
 80064e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006524:	d10f      	bne.n	8006546 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006534:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006550:	2b40      	cmp	r3, #64	@ 0x40
 8006552:	d007      	beq.n	8006564 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800656c:	d152      	bne.n	8006614 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_SPI_Transmit+0xee>
 8006576:	8b7b      	ldrh	r3, [r7, #26]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d145      	bne.n	8006608 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006580:	881a      	ldrh	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658c:	1c9a      	adds	r2, r3, #2
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065a0:	e032      	b.n	8006608 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d112      	bne.n	80065d6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b4:	881a      	ldrh	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065d4:	e018      	b.n	8006608 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d6:	f7fd f9cb 	bl	8003970 <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d803      	bhi.n	80065ee <HAL_SPI_Transmit+0x160>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d102      	bne.n	80065f4 <HAL_SPI_Transmit+0x166>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e082      	b.n	800670e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1c7      	bne.n	80065a2 <HAL_SPI_Transmit+0x114>
 8006612:	e053      	b.n	80066bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_SPI_Transmit+0x194>
 800661c:	8b7b      	ldrh	r3, [r7, #26]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d147      	bne.n	80066b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006648:	e033      	b.n	80066b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d113      	bne.n	8006680 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	7812      	ldrb	r2, [r2, #0]
 8006664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800667e:	e018      	b.n	80066b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006680:	f7fd f976 	bl	8003970 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d803      	bhi.n	8006698 <HAL_SPI_Transmit+0x20a>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d102      	bne.n	800669e <HAL_SPI_Transmit+0x210>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e02d      	b.n	800670e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1c6      	bne.n	800664a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 ffb7 	bl	8007634 <SPI_EndRxTxTransaction>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800670c:	2300      	movs	r3, #0
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3720      	adds	r7, #32
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b088      	sub	sp, #32
 800671a:	af02      	add	r7, sp, #8
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	d001      	beq.n	8006736 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006732:	2302      	movs	r3, #2
 8006734:	e104      	b.n	8006940 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800673e:	d112      	bne.n	8006766 <HAL_SPI_Receive+0x50>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10e      	bne.n	8006766 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2204      	movs	r2, #4
 800674c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006750:	88fa      	ldrh	r2, [r7, #6]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f8f3 	bl	8006948 <HAL_SPI_TransmitReceive>
 8006762:	4603      	mov	r3, r0
 8006764:	e0ec      	b.n	8006940 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006766:	f7fd f903 	bl	8003970 <HAL_GetTick>
 800676a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <HAL_SPI_Receive+0x62>
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0e1      	b.n	8006940 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_SPI_Receive+0x74>
 8006786:	2302      	movs	r3, #2
 8006788:	e0da      	b.n	8006940 <HAL_SPI_Receive+0x22a>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2204      	movs	r2, #4
 8006796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	88fa      	ldrh	r2, [r7, #6]
 80067aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067d8:	d10f      	bne.n	80067fa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006804:	2b40      	cmp	r3, #64	@ 0x40
 8006806:	d007      	beq.n	8006818 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006816:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d170      	bne.n	8006902 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006820:	e035      	b.n	800688e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d115      	bne.n	800685c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f103 020c 	add.w	r2, r3, #12
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800685a:	e018      	b.n	800688e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685c:	f7fd f888 	bl	8003970 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d803      	bhi.n	8006874 <HAL_SPI_Receive+0x15e>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d102      	bne.n	800687a <HAL_SPI_Receive+0x164>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e058      	b.n	8006940 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1c4      	bne.n	8006822 <HAL_SPI_Receive+0x10c>
 8006898:	e038      	b.n	800690c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d113      	bne.n	80068d0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	b292      	uxth	r2, r2
 80068b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ba:	1c9a      	adds	r2, r3, #2
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068ce:	e018      	b.n	8006902 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d0:	f7fd f84e 	bl	8003970 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d803      	bhi.n	80068e8 <HAL_SPI_Receive+0x1d2>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d102      	bne.n	80068ee <HAL_SPI_Receive+0x1d8>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e01e      	b.n	8006940 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1c6      	bne.n	800689a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fe29 	bl	8007568 <SPI_EndRxTransaction>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2220      	movs	r2, #32
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800693e:	2300      	movs	r3, #0
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	@ 0x28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006956:	2301      	movs	r3, #1
 8006958:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800695a:	f7fd f809 	bl	8003970 <HAL_GetTick>
 800695e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006966:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800696e:	887b      	ldrh	r3, [r7, #2]
 8006970:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006972:	7ffb      	ldrb	r3, [r7, #31]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d00c      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x4a>
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800697e:	d106      	bne.n	800698e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <HAL_SPI_TransmitReceive+0x46>
 8006988:	7ffb      	ldrb	r3, [r7, #31]
 800698a:	2b04      	cmp	r3, #4
 800698c:	d001      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
 8006990:	e17f      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x5c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_SPI_TransmitReceive+0x5c>
 800699e:	887b      	ldrh	r3, [r7, #2]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e174      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <HAL_SPI_TransmitReceive+0x6e>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e16d      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d003      	beq.n	80069d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2205      	movs	r2, #5
 80069ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	887a      	ldrh	r2, [r7, #2]
 80069e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	887a      	ldrh	r2, [r7, #2]
 80069e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d007      	beq.n	8006a26 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a2e:	d17e      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <HAL_SPI_TransmitReceive+0xf6>
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d16c      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	881a      	ldrh	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	1c9a      	adds	r2, r3, #2
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a62:	e059      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d11b      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x162>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d016      	beq.n	8006aaa <HAL_SPI_TransmitReceive+0x162>
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d113      	bne.n	8006aaa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	881a      	ldrh	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d119      	bne.n	8006aec <HAL_SPI_TransmitReceive+0x1a4>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d014      	beq.n	8006aec <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006acc:	b292      	uxth	r2, r2
 8006ace:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	1c9a      	adds	r2, r3, #2
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006aec:	f7fc ff40 	bl	8003970 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d80d      	bhi.n	8006b18 <HAL_SPI_TransmitReceive+0x1d0>
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d009      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e0bc      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1a0      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x11c>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d19b      	bne.n	8006a64 <HAL_SPI_TransmitReceive+0x11c>
 8006b2c:	e082      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_SPI_TransmitReceive+0x1f4>
 8006b36:	8afb      	ldrh	r3, [r7, #22]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d171      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	7812      	ldrb	r2, [r2, #0]
 8006b48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b62:	e05d      	b.n	8006c20 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d11c      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x264>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d017      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x264>
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d114      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	330c      	adds	r3, #12
 8006b8c:	7812      	ldrb	r2, [r2, #0]
 8006b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d119      	bne.n	8006bee <HAL_SPI_TransmitReceive+0x2a6>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d014      	beq.n	8006bee <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bea:	2301      	movs	r3, #1
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bee:	f7fc febf 	bl	8003970 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d803      	bhi.n	8006c06 <HAL_SPI_TransmitReceive+0x2be>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c04:	d102      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x2c4>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e038      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d19c      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x21c>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d197      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c34:	6a3a      	ldr	r2, [r7, #32]
 8006c36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fcfb 	bl	8007634 <SPI_EndRxTxTransaction>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d008      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e01d      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d001      	beq.n	8006c90 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
  }
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3728      	adds	r7, #40	@ 0x28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d001      	beq.n	8006cba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e097      	b.n	8006dea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_SPI_Transmit_DMA+0x2a>
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e08f      	b.n	8006dea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_SPI_Transmit_DMA+0x3c>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e088      	b.n	8006dea <HAL_SPI_Transmit_DMA+0x14e>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d26:	d10f      	bne.n	8006d48 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d4c:	4a29      	ldr	r2, [pc, #164]	@ (8006df4 <HAL_SPI_Transmit_DMA+0x158>)
 8006d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d54:	4a28      	ldr	r2, [pc, #160]	@ (8006df8 <HAL_SPI_Transmit_DMA+0x15c>)
 8006d56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d5c:	4a27      	ldr	r2, [pc, #156]	@ (8006dfc <HAL_SPI_Transmit_DMA+0x160>)
 8006d5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d64:	2200      	movs	r2, #0
 8006d66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d70:	4619      	mov	r1, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006d80:	f7fd f9c2 	bl	8004108 <HAL_DMA_Start_IT>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d8e:	f043 0210 	orr.w	r2, r3, #16
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e023      	b.n	8006dea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dac:	2b40      	cmp	r3, #64	@ 0x40
 8006dae:	d007      	beq.n	8006dc0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006dbe:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0220 	orr.w	r2, r2, #32
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0202 	orr.w	r2, r2, #2
 8006de6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	080073c5 	.word	0x080073c5
 8006df8:	080071e5 	.word	0x080071e5
 8006dfc:	08007419 	.word	0x08007419

08006e00 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d001      	beq.n	8006e1e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e0a9      	b.n	8006f72 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d110      	bne.n	8006e48 <HAL_SPI_Receive_DMA+0x48>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e2e:	d10b      	bne.n	8006e48 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2204      	movs	r2, #4
 8006e34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f8a2 	bl	8006f88 <HAL_SPI_TransmitReceive_DMA>
 8006e44:	4603      	mov	r3, r0
 8006e46:	e094      	b.n	8006f72 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_SPI_Receive_DMA+0x54>
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e08c      	b.n	8006f72 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_SPI_Receive_DMA+0x66>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e085      	b.n	8006f72 <HAL_SPI_Receive_DMA+0x172>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2204      	movs	r2, #4
 8006e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eae:	d10f      	bne.n	8006ed0 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ebe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ece:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ed4:	4a29      	ldr	r2, [pc, #164]	@ (8006f7c <HAL_SPI_Receive_DMA+0x17c>)
 8006ed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006edc:	4a28      	ldr	r2, [pc, #160]	@ (8006f80 <HAL_SPI_Receive_DMA+0x180>)
 8006ede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ee4:	4a27      	ldr	r2, [pc, #156]	@ (8006f84 <HAL_SPI_Receive_DMA+0x184>)
 8006ee6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006eec:	2200      	movs	r2, #0
 8006eee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	4619      	mov	r1, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f06:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f08:	f7fd f8fe 	bl	8004108 <HAL_DMA_Start_IT>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f16:	f043 0210 	orr.w	r2, r3, #16
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e023      	b.n	8006f72 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	2b40      	cmp	r3, #64	@ 0x40
 8006f36:	d007      	beq.n	8006f48 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f46:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0220 	orr.w	r2, r2, #32
 8006f5e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	080073e1 	.word	0x080073e1
 8006f80:	0800728d 	.word	0x0800728d
 8006f84:	08007419 	.word	0x08007419

08006f88 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f9c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d00c      	beq.n	8006fc4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fb0:	d106      	bne.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006fba:	7dfb      	ldrb	r3, [r7, #23]
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d001      	beq.n	8006fc4 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e0cf      	b.n	8007164 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8006fd0:	887b      	ldrh	r3, [r7, #2]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0c4      	b.n	8007164 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_SPI_TransmitReceive_DMA+0x60>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e0bd      	b.n	8007164 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d003      	beq.n	8007004 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2205      	movs	r2, #5
 8007000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	887a      	ldrh	r2, [r7, #2]
 8007014:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	887a      	ldrh	r2, [r7, #2]
 800701a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	887a      	ldrh	r2, [r7, #2]
 8007026:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	887a      	ldrh	r2, [r7, #2]
 800702c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b04      	cmp	r3, #4
 8007044:	d108      	bne.n	8007058 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704a:	4a48      	ldr	r2, [pc, #288]	@ (800716c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800704c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	4a47      	ldr	r2, [pc, #284]	@ (8007170 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007054:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007056:	e007      	b.n	8007068 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800705c:	4a45      	ldr	r2, [pc, #276]	@ (8007174 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800705e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007064:	4a44      	ldr	r2, [pc, #272]	@ (8007178 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007066:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706c:	4a43      	ldr	r2, [pc, #268]	@ (800717c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800706e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007074:	2200      	movs	r2, #0
 8007076:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	4619      	mov	r1, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800708e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007090:	f7fd f83a 	bl	8004108 <HAL_DMA_Start_IT>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00b      	beq.n	80070b2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800709e:	f043 0210 	orr.w	r2, r3, #16
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e058      	b.n	8007164 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0201 	orr.w	r2, r2, #1
 80070c0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c6:	2200      	movs	r2, #0
 80070c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ce:	2200      	movs	r2, #0
 80070d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070d6:	2200      	movs	r2, #0
 80070d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070de:	2200      	movs	r2, #0
 80070e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ea:	4619      	mov	r1, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	330c      	adds	r3, #12
 80070f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80070fa:	f7fd f805 	bl	8004108 <HAL_DMA_Start_IT>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007108:	f043 0210 	orr.w	r2, r3, #16
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e023      	b.n	8007164 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007126:	2b40      	cmp	r3, #64	@ 0x40
 8007128:	d007      	beq.n	800713a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007138:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0220 	orr.w	r2, r2, #32
 8007150:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0202 	orr.w	r2, r2, #2
 8007160:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	080073e1 	.word	0x080073e1
 8007170:	0800728d 	.word	0x0800728d
 8007174:	080073fd 	.word	0x080073fd
 8007178:	08007335 	.word	0x08007335
 800717c:	08007419 	.word	0x08007419

08007180 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f2:	f7fc fbbd 	bl	8003970 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007206:	d03b      	beq.n	8007280 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0220 	bic.w	r2, r2, #32
 8007216:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0202 	bic.w	r2, r2, #2
 8007226:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	2164      	movs	r1, #100	@ 0x64
 800722c:	6978      	ldr	r0, [r7, #20]
 800722e:	f000 fa01 	bl	8007634 <SPI_EndRxTxTransaction>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	f043 0220 	orr.w	r2, r3, #32
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007278:	6978      	ldr	r0, [r7, #20]
 800727a:	f7ff ffa9 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800727e:	e002      	b.n	8007286 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007280:	6978      	ldr	r0, [r7, #20]
 8007282:	f7fa fb39 	bl	80018f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800729a:	f7fc fb69 	bl	8003970 <HAL_GetTick>
 800729e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ae:	d03b      	beq.n	8007328 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0220 	bic.w	r2, r2, #32
 80072be:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10d      	bne.n	80072e4 <SPI_DMAReceiveCplt+0x58>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072d0:	d108      	bne.n	80072e4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0203 	bic.w	r2, r2, #3
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	e007      	b.n	80072f4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	2164      	movs	r1, #100	@ 0x64
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f935 	bl	8007568 <SPI_EndRxTransaction>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff ff55 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007326:	e002      	b.n	800732e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7fa faf5 	bl	8001918 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007340:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007342:	f7fc fb15 	bl	8003970 <HAL_GetTick>
 8007346:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007356:	d02f      	beq.n	80073b8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0220 	bic.w	r2, r2, #32
 8007366:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	2164      	movs	r1, #100	@ 0x64
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f961 	bl	8007634 <SPI_EndRxTxTransaction>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737c:	f043 0220 	orr.w	r2, r3, #32
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0203 	bic.w	r2, r2, #3
 8007392:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff ff0d 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80073b6:	e002      	b.n	80073be <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f7ff fee1 	bl	8007180 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff fede 	bl	8007194 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff feda 	bl	80071a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fed6 	bl	80071bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f022 0203 	bic.w	r2, r2, #3
 8007434:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800743a:	f043 0210 	orr.w	r2, r3, #16
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fec0 	bl	80071d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	4613      	mov	r3, r2
 8007466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007468:	f7fc fa82 	bl	8003970 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	4413      	add	r3, r2
 8007476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007478:	f7fc fa7a 	bl	8003970 <HAL_GetTick>
 800747c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800747e:	4b39      	ldr	r3, [pc, #228]	@ (8007564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	015b      	lsls	r3, r3, #5
 8007484:	0d1b      	lsrs	r3, r3, #20
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	fb02 f303 	mul.w	r3, r2, r3
 800748c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800748e:	e054      	b.n	800753a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d050      	beq.n	800753a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007498:	f7fc fa6a 	bl	8003970 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d902      	bls.n	80074ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d13d      	bne.n	800752a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80074bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074c6:	d111      	bne.n	80074ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074d0:	d004      	beq.n	80074dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074da:	d107      	bne.n	80074ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f4:	d10f      	bne.n	8007516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e017      	b.n	800755a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	3b01      	subs	r3, #1
 8007538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4013      	ands	r3, r2
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	bf0c      	ite	eq
 800754a:	2301      	moveq	r3, #1
 800754c:	2300      	movne	r3, #0
 800754e:	b2db      	uxtb	r3, r3
 8007550:	461a      	mov	r2, r3
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	429a      	cmp	r2, r3
 8007556:	d19b      	bne.n	8007490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3720      	adds	r7, #32
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	2000000c 	.word	0x2000000c

08007568 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800757c:	d111      	bne.n	80075a2 <SPI_EndRxTransaction+0x3a>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007586:	d004      	beq.n	8007592 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007590:	d107      	bne.n	80075a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075aa:	d12a      	bne.n	8007602 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b4:	d012      	beq.n	80075dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2200      	movs	r2, #0
 80075be:	2180      	movs	r1, #128	@ 0x80
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff ff49 	bl	8007458 <SPI_WaitFlagStateUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d02d      	beq.n	8007628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d0:	f043 0220 	orr.w	r2, r3, #32
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e026      	b.n	800762a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	2101      	movs	r1, #1
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff ff36 	bl	8007458 <SPI_WaitFlagStateUntilTimeout>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01a      	beq.n	8007628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f6:	f043 0220 	orr.w	r2, r3, #32
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e013      	b.n	800762a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2200      	movs	r2, #0
 800760a:	2101      	movs	r1, #1
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff ff23 	bl	8007458 <SPI_WaitFlagStateUntilTimeout>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761c:	f043 0220 	orr.w	r2, r3, #32
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e000      	b.n	800762a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2201      	movs	r2, #1
 8007648:	2102      	movs	r1, #2
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7ff ff04 	bl	8007458 <SPI_WaitFlagStateUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765a:	f043 0220 	orr.w	r2, r3, #32
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e032      	b.n	80076cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007666:	4b1b      	ldr	r3, [pc, #108]	@ (80076d4 <SPI_EndRxTxTransaction+0xa0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1b      	ldr	r2, [pc, #108]	@ (80076d8 <SPI_EndRxTxTransaction+0xa4>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	0d5b      	lsrs	r3, r3, #21
 8007672:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007684:	d112      	bne.n	80076ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	2180      	movs	r1, #128	@ 0x80
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff fee1 	bl	8007458 <SPI_WaitFlagStateUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d016      	beq.n	80076ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e00f      	b.n	80076cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c2:	2b80      	cmp	r3, #128	@ 0x80
 80076c4:	d0f2      	beq.n	80076ac <SPI_EndRxTxTransaction+0x78>
 80076c6:	e000      	b.n	80076ca <SPI_EndRxTxTransaction+0x96>
        break;
 80076c8:	bf00      	nop
  }

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	2000000c 	.word	0x2000000c
 80076d8:	165e9f81 	.word	0x165e9f81

080076dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e041      	b.n	8007772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7fb ff94 	bl	8003630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3304      	adds	r3, #4
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f000 f95e 	bl	80079dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d001      	beq.n	8007794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e046      	b.n	8007822 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a23      	ldr	r2, [pc, #140]	@ (8007830 <HAL_TIM_Base_Start+0xb4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d022      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ae:	d01d      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1f      	ldr	r2, [pc, #124]	@ (8007834 <HAL_TIM_Base_Start+0xb8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d018      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1e      	ldr	r2, [pc, #120]	@ (8007838 <HAL_TIM_Base_Start+0xbc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d013      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1c      	ldr	r2, [pc, #112]	@ (800783c <HAL_TIM_Base_Start+0xc0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00e      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007840 <HAL_TIM_Base_Start+0xc4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d009      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a19      	ldr	r2, [pc, #100]	@ (8007844 <HAL_TIM_Base_Start+0xc8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_TIM_Base_Start+0x70>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a18      	ldr	r2, [pc, #96]	@ (8007848 <HAL_TIM_Base_Start+0xcc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d111      	bne.n	8007810 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d010      	beq.n	8007820 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800780e:	e007      	b.n	8007820 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40010000 	.word	0x40010000
 8007834:	40000400 	.word	0x40000400
 8007838:	40000800 	.word	0x40000800
 800783c:	40000c00 	.word	0x40000c00
 8007840:	40010400 	.word	0x40010400
 8007844:	40014000 	.word	0x40014000
 8007848:	40001800 	.word	0x40001800

0800784c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_TIM_ConfigClockSource+0x1c>
 8007864:	2302      	movs	r3, #2
 8007866:	e0b4      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x186>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800788e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a0:	d03e      	beq.n	8007920 <HAL_TIM_ConfigClockSource+0xd4>
 80078a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a6:	f200 8087 	bhi.w	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ae:	f000 8086 	beq.w	80079be <HAL_TIM_ConfigClockSource+0x172>
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078b6:	d87f      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b70      	cmp	r3, #112	@ 0x70
 80078ba:	d01a      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0xa6>
 80078bc:	2b70      	cmp	r3, #112	@ 0x70
 80078be:	d87b      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078c0:	2b60      	cmp	r3, #96	@ 0x60
 80078c2:	d050      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0x11a>
 80078c4:	2b60      	cmp	r3, #96	@ 0x60
 80078c6:	d877      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078c8:	2b50      	cmp	r3, #80	@ 0x50
 80078ca:	d03c      	beq.n	8007946 <HAL_TIM_ConfigClockSource+0xfa>
 80078cc:	2b50      	cmp	r3, #80	@ 0x50
 80078ce:	d873      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078d0:	2b40      	cmp	r3, #64	@ 0x40
 80078d2:	d058      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x13a>
 80078d4:	2b40      	cmp	r3, #64	@ 0x40
 80078d6:	d86f      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078d8:	2b30      	cmp	r3, #48	@ 0x30
 80078da:	d064      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078dc:	2b30      	cmp	r3, #48	@ 0x30
 80078de:	d86b      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d060      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	d867      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d05c      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d05a      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078f0:	e062      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007902:	f000 f991 	bl	8007c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	609a      	str	r2, [r3, #8]
      break;
 800791e:	e04f      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007930:	f000 f97a 	bl	8007c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007942:	609a      	str	r2, [r3, #8]
      break;
 8007944:	e03c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007952:	461a      	mov	r2, r3
 8007954:	f000 f8ee 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2150      	movs	r1, #80	@ 0x50
 800795e:	4618      	mov	r0, r3
 8007960:	f000 f947 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 8007964:	e02c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007972:	461a      	mov	r2, r3
 8007974:	f000 f90d 	bl	8007b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2160      	movs	r1, #96	@ 0x60
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f937 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 8007984:	e01c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	461a      	mov	r2, r3
 8007994:	f000 f8ce 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2140      	movs	r1, #64	@ 0x40
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f927 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079a4:	e00c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f000 f91e 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079b6:	e003      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	73fb      	strb	r3, [r7, #15]
      break;
 80079bc:	e000      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a46      	ldr	r2, [pc, #280]	@ (8007b08 <TIM_Base_SetConfig+0x12c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d013      	beq.n	8007a1c <TIM_Base_SetConfig+0x40>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079fa:	d00f      	beq.n	8007a1c <TIM_Base_SetConfig+0x40>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a43      	ldr	r2, [pc, #268]	@ (8007b0c <TIM_Base_SetConfig+0x130>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00b      	beq.n	8007a1c <TIM_Base_SetConfig+0x40>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a42      	ldr	r2, [pc, #264]	@ (8007b10 <TIM_Base_SetConfig+0x134>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d007      	beq.n	8007a1c <TIM_Base_SetConfig+0x40>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a41      	ldr	r2, [pc, #260]	@ (8007b14 <TIM_Base_SetConfig+0x138>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d003      	beq.n	8007a1c <TIM_Base_SetConfig+0x40>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a40      	ldr	r2, [pc, #256]	@ (8007b18 <TIM_Base_SetConfig+0x13c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d108      	bne.n	8007a2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a35      	ldr	r2, [pc, #212]	@ (8007b08 <TIM_Base_SetConfig+0x12c>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d02b      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3c:	d027      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a32      	ldr	r2, [pc, #200]	@ (8007b0c <TIM_Base_SetConfig+0x130>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d023      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a31      	ldr	r2, [pc, #196]	@ (8007b10 <TIM_Base_SetConfig+0x134>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01f      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a30      	ldr	r2, [pc, #192]	@ (8007b14 <TIM_Base_SetConfig+0x138>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d01b      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2f      	ldr	r2, [pc, #188]	@ (8007b18 <TIM_Base_SetConfig+0x13c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d017      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2e      	ldr	r2, [pc, #184]	@ (8007b1c <TIM_Base_SetConfig+0x140>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d013      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2d      	ldr	r2, [pc, #180]	@ (8007b20 <TIM_Base_SetConfig+0x144>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00f      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a2c      	ldr	r2, [pc, #176]	@ (8007b24 <TIM_Base_SetConfig+0x148>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00b      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2b      	ldr	r2, [pc, #172]	@ (8007b28 <TIM_Base_SetConfig+0x14c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d007      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2a      	ldr	r2, [pc, #168]	@ (8007b2c <TIM_Base_SetConfig+0x150>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a29      	ldr	r2, [pc, #164]	@ (8007b30 <TIM_Base_SetConfig+0x154>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d108      	bne.n	8007aa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a10      	ldr	r2, [pc, #64]	@ (8007b08 <TIM_Base_SetConfig+0x12c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_Base_SetConfig+0xf8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a12      	ldr	r2, [pc, #72]	@ (8007b18 <TIM_Base_SetConfig+0x13c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d103      	bne.n	8007adc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d105      	bne.n	8007afa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f023 0201 	bic.w	r2, r3, #1
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	611a      	str	r2, [r3, #16]
  }
}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00
 8007b18:	40010400 	.word	0x40010400
 8007b1c:	40014000 	.word	0x40014000
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800
 8007b28:	40001800 	.word	0x40001800
 8007b2c:	40001c00 	.word	0x40001c00
 8007b30:	40002000 	.word	0x40002000

08007b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 030a 	bic.w	r3, r3, #10
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b087      	sub	sp, #28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f023 0210 	bic.w	r2, r3, #16
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f043 0307 	orr.w	r3, r3, #7
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	021a      	lsls	r2, r3, #8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	609a      	str	r2, [r3, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e05a      	b.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a21      	ldr	r2, [pc, #132]	@ (8007d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d022      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ccc:	d01d      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d018      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00e      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a18      	ldr	r2, [pc, #96]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d009      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d004      	beq.n	8007d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a15      	ldr	r2, [pc, #84]	@ (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d10c      	bne.n	8007d24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40010000 	.word	0x40010000
 8007d48:	40000400 	.word	0x40000400
 8007d4c:	40000800 	.word	0x40000800
 8007d50:	40000c00 	.word	0x40000c00
 8007d54:	40010400 	.word	0x40010400
 8007d58:	40014000 	.word	0x40014000
 8007d5c:	40001800 	.word	0x40001800

08007d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e042      	b.n	8007df8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fb fc72 	bl	8003670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2224      	movs	r2, #36	@ 0x24
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fc85 	bl	80086b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2220      	movs	r2, #32
 8007de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b0ba      	sub	sp, #232	@ 0xe8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10f      	bne.n	8007e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d009      	beq.n	8007e66 <HAL_UART_IRQHandler+0x66>
 8007e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fb69 	bl	8008536 <UART_Receive_IT>
      return;
 8007e64:	e25b      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 80de 	beq.w	800802c <HAL_UART_IRQHandler+0x22c>
 8007e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80d1 	beq.w	800802c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <HAL_UART_IRQHandler+0xae>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d005      	beq.n	8007eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	f043 0201 	orr.w	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00b      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xd2>
 8007eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	f043 0202 	orr.w	r2, r3, #2
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00b      	beq.n	8007ef6 <HAL_UART_IRQHandler+0xf6>
 8007ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d005      	beq.n	8007ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eee:	f043 0204 	orr.w	r2, r3, #4
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <HAL_UART_IRQHandler+0x126>
 8007f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d005      	beq.n	8007f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1e:	f043 0208 	orr.w	r2, r3, #8
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 81f2 	beq.w	8008314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f34:	f003 0320 	and.w	r3, r3, #32
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d008      	beq.n	8007f4e <HAL_UART_IRQHandler+0x14e>
 8007f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 faf4 	bl	8008536 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f58:	2b40      	cmp	r3, #64	@ 0x40
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d103      	bne.n	8007f7a <HAL_UART_IRQHandler+0x17a>
 8007f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d04f      	beq.n	800801a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9fc 	bl	8008378 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8a:	2b40      	cmp	r3, #64	@ 0x40
 8007f8c:	d141      	bne.n	8008012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3314      	adds	r3, #20
 8007f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f9c:	e853 3f00 	ldrex	r3, [r3]
 8007fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1d9      	bne.n	8007f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d013      	beq.n	800800a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80081e0 <HAL_UART_IRQHandler+0x3e0>)
 8007fe8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fc f952 	bl	8004298 <HAL_DMA_Abort_IT>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d016      	beq.n	8008028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008008:	e00e      	b.n	8008028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f99e 	bl	800834c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	e00a      	b.n	8008028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f99a 	bl	800834c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008018:	e006      	b.n	8008028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f996 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008026:	e175      	b.n	8008314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	bf00      	nop
    return;
 800802a:	e173      	b.n	8008314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008030:	2b01      	cmp	r3, #1
 8008032:	f040 814f 	bne.w	80082d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803a:	f003 0310 	and.w	r3, r3, #16
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8148 	beq.w	80082d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 8141 	beq.w	80082d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60bb      	str	r3, [r7, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	60bb      	str	r3, [r7, #8]
 8008066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008072:	2b40      	cmp	r3, #64	@ 0x40
 8008074:	f040 80b6 	bne.w	80081e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8145 	beq.w	8008318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008096:	429a      	cmp	r2, r3
 8008098:	f080 813e 	bcs.w	8008318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ae:	f000 8088 	beq.w	80081c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	330c      	adds	r3, #12
 80080da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80080de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1d9      	bne.n	80080b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3314      	adds	r3, #20
 8008104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800810e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3314      	adds	r3, #20
 800811e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800812a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800812e:	e841 2300 	strex	r3, r2, [r1]
 8008132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1e1      	bne.n	80080fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3314      	adds	r3, #20
 8008140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008144:	e853 3f00 	ldrex	r3, [r3]
 8008148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800814a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800814c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	3314      	adds	r3, #20
 800815a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800815e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800816c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e3      	bne.n	800813a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	330c      	adds	r3, #12
 8008186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008192:	f023 0310 	bic.w	r3, r3, #16
 8008196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	330c      	adds	r3, #12
 80081a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80081a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081ac:	e841 2300 	strex	r3, r2, [r1]
 80081b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e3      	bne.n	8008180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fb fffb 	bl	80041b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f8c1 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081de:	e09b      	b.n	8008318 <HAL_UART_IRQHandler+0x518>
 80081e0:	0800843f 	.word	0x0800843f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 808e 	beq.w	800831c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8089 	beq.w	800831c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	330c      	adds	r3, #12
 8008210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800822e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800823c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e3      	bne.n	800820a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3314      	adds	r3, #20
 8008248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3314      	adds	r3, #20
 8008262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008266:	633a      	str	r2, [r7, #48]	@ 0x30
 8008268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800826c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800826e:	e841 2300 	strex	r3, r2, [r1]
 8008272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1e3      	bne.n	8008242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60fb      	str	r3, [r7, #12]
   return(result);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	330c      	adds	r3, #12
 80082a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80082ac:	61fa      	str	r2, [r7, #28]
 80082ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	69b9      	ldr	r1, [r7, #24]
 80082b2:	69fa      	ldr	r2, [r7, #28]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	617b      	str	r3, [r7, #20]
   return(result);
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e3      	bne.n	8008288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f847 	bl	8008360 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80082d2:	e023      	b.n	800831c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d009      	beq.n	80082f4 <HAL_UART_IRQHandler+0x4f4>
 80082e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f8ba 	bl	8008466 <UART_Transmit_IT>
    return;
 80082f2:	e014      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00e      	beq.n	800831e <HAL_UART_IRQHandler+0x51e>
 8008300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008308:	2b00      	cmp	r3, #0
 800830a:	d008      	beq.n	800831e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f8fa 	bl	8008506 <UART_EndTransmit_IT>
    return;
 8008312:	e004      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
    return;
 8008314:	bf00      	nop
 8008316:	e002      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
      return;
 8008318:	bf00      	nop
 800831a:	e000      	b.n	800831e <HAL_UART_IRQHandler+0x51e>
      return;
 800831c:	bf00      	nop
  }
}
 800831e:	37e8      	adds	r7, #232	@ 0xe8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b095      	sub	sp, #84	@ 0x54
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	330c      	adds	r3, #12
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008392:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008396:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	330c      	adds	r3, #12
 800839e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80083a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e5      	bne.n	8008380 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3314      	adds	r3, #20
 80083ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3314      	adds	r3, #20
 80083d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083dc:	e841 2300 	strex	r3, r2, [r1]
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e5      	bne.n	80083b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d119      	bne.n	8008424 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	330c      	adds	r3, #12
 80083f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	f023 0310 	bic.w	r3, r3, #16
 8008406:	647b      	str	r3, [r7, #68]	@ 0x44
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	330c      	adds	r3, #12
 800840e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008410:	61ba      	str	r2, [r7, #24]
 8008412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6979      	ldr	r1, [r7, #20]
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	613b      	str	r3, [r7, #16]
   return(result);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e5      	bne.n	80083f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008432:	bf00      	nop
 8008434:	3754      	adds	r7, #84	@ 0x54
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7ff ff77 	bl	800834c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008466:	b480      	push	{r7}
 8008468:	b085      	sub	sp, #20
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b21      	cmp	r3, #33	@ 0x21
 8008478:	d13e      	bne.n	80084f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008482:	d114      	bne.n	80084ae <UART_Transmit_IT+0x48>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d110      	bne.n	80084ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	1c9a      	adds	r2, r3, #2
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	621a      	str	r2, [r3, #32]
 80084ac:	e008      	b.n	80084c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	1c59      	adds	r1, r3, #1
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6211      	str	r1, [r2, #32]
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	4619      	mov	r1, r3
 80084ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10f      	bne.n	80084f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	e000      	b.n	80084fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084f8:	2302      	movs	r3, #2
  }
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800851c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2220      	movs	r2, #32
 8008522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fefc 	bl	8008324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b08c      	sub	sp, #48	@ 0x30
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b22      	cmp	r3, #34	@ 0x22
 8008548:	f040 80ae 	bne.w	80086a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008554:	d117      	bne.n	8008586 <UART_Receive_IT+0x50>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d113      	bne.n	8008586 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	b29b      	uxth	r3, r3
 8008570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008574:	b29a      	uxth	r2, r3
 8008576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	1c9a      	adds	r2, r3, #2
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	629a      	str	r2, [r3, #40]	@ 0x28
 8008584:	e026      	b.n	80085d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800858c:	2300      	movs	r3, #0
 800858e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008598:	d007      	beq.n	80085aa <UART_Receive_IT+0x74>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <UART_Receive_IT+0x82>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	e008      	b.n	80085ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	3b01      	subs	r3, #1
 80085dc:	b29b      	uxth	r3, r3
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4619      	mov	r1, r3
 80085e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d15d      	bne.n	80086a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0220 	bic.w	r2, r2, #32
 80085f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008606:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695a      	ldr	r2, [r3, #20]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 0201 	bic.w	r2, r2, #1
 8008616:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800862a:	2b01      	cmp	r3, #1
 800862c:	d135      	bne.n	800869a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	613b      	str	r3, [r7, #16]
   return(result);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f023 0310 	bic.w	r3, r3, #16
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	330c      	adds	r3, #12
 8008652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008654:	623a      	str	r2, [r7, #32]
 8008656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	69f9      	ldr	r1, [r7, #28]
 800865a:	6a3a      	ldr	r2, [r7, #32]
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	61bb      	str	r3, [r7, #24]
   return(result);
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e5      	bne.n	8008634 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b10      	cmp	r3, #16
 8008674:	d10a      	bne.n	800868c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff fe64 	bl	8008360 <HAL_UARTEx_RxEventCallback>
 8008698:	e002      	b.n	80086a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff fe4c 	bl	8008338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	e002      	b.n	80086aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e000      	b.n	80086aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086a8:	2302      	movs	r3, #2
  }
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3730      	adds	r7, #48	@ 0x30
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b8:	b0c0      	sub	sp, #256	@ 0x100
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d0:	68d9      	ldr	r1, [r3, #12]
 80086d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	ea40 0301 	orr.w	r3, r0, r1
 80086dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e2:	689a      	ldr	r2, [r3, #8]
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	431a      	orrs	r2, r3
 80086f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800870c:	f021 010c 	bic.w	r1, r1, #12
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800871a:	430b      	orrs	r3, r1
 800871c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800871e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872e:	6999      	ldr	r1, [r3, #24]
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	ea40 0301 	orr.w	r3, r0, r1
 800873a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4b8f      	ldr	r3, [pc, #572]	@ (8008980 <UART_SetConfig+0x2cc>)
 8008744:	429a      	cmp	r2, r3
 8008746:	d005      	beq.n	8008754 <UART_SetConfig+0xa0>
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b8d      	ldr	r3, [pc, #564]	@ (8008984 <UART_SetConfig+0x2d0>)
 8008750:	429a      	cmp	r2, r3
 8008752:	d104      	bne.n	800875e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008754:	f7fc fe66 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8008758:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800875c:	e003      	b.n	8008766 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800875e:	f7fc fe4d 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8008762:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800876a:	69db      	ldr	r3, [r3, #28]
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008770:	f040 810c 	bne.w	800898c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008774:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008778:	2200      	movs	r2, #0
 800877a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800877e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008782:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008786:	4622      	mov	r2, r4
 8008788:	462b      	mov	r3, r5
 800878a:	1891      	adds	r1, r2, r2
 800878c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800878e:	415b      	adcs	r3, r3
 8008790:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008796:	4621      	mov	r1, r4
 8008798:	eb12 0801 	adds.w	r8, r2, r1
 800879c:	4629      	mov	r1, r5
 800879e:	eb43 0901 	adc.w	r9, r3, r1
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087b6:	4690      	mov	r8, r2
 80087b8:	4699      	mov	r9, r3
 80087ba:	4623      	mov	r3, r4
 80087bc:	eb18 0303 	adds.w	r3, r8, r3
 80087c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087c4:	462b      	mov	r3, r5
 80087c6:	eb49 0303 	adc.w	r3, r9, r3
 80087ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80087de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087e2:	460b      	mov	r3, r1
 80087e4:	18db      	adds	r3, r3, r3
 80087e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80087e8:	4613      	mov	r3, r2
 80087ea:	eb42 0303 	adc.w	r3, r2, r3
 80087ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80087f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80087f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80087f8:	f7f7 fcee 	bl	80001d8 <__aeabi_uldivmod>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4b61      	ldr	r3, [pc, #388]	@ (8008988 <UART_SetConfig+0x2d4>)
 8008802:	fba3 2302 	umull	r2, r3, r3, r2
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	011c      	lsls	r4, r3, #4
 800880a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800880e:	2200      	movs	r2, #0
 8008810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008814:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008818:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	1891      	adds	r1, r2, r2
 8008822:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008824:	415b      	adcs	r3, r3
 8008826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008828:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800882c:	4641      	mov	r1, r8
 800882e:	eb12 0a01 	adds.w	sl, r2, r1
 8008832:	4649      	mov	r1, r9
 8008834:	eb43 0b01 	adc.w	fp, r3, r1
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800884c:	4692      	mov	sl, r2
 800884e:	469b      	mov	fp, r3
 8008850:	4643      	mov	r3, r8
 8008852:	eb1a 0303 	adds.w	r3, sl, r3
 8008856:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800885a:	464b      	mov	r3, r9
 800885c:	eb4b 0303 	adc.w	r3, fp, r3
 8008860:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008870:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008874:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008878:	460b      	mov	r3, r1
 800887a:	18db      	adds	r3, r3, r3
 800887c:	643b      	str	r3, [r7, #64]	@ 0x40
 800887e:	4613      	mov	r3, r2
 8008880:	eb42 0303 	adc.w	r3, r2, r3
 8008884:	647b      	str	r3, [r7, #68]	@ 0x44
 8008886:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800888a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800888e:	f7f7 fca3 	bl	80001d8 <__aeabi_uldivmod>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4611      	mov	r1, r2
 8008898:	4b3b      	ldr	r3, [pc, #236]	@ (8008988 <UART_SetConfig+0x2d4>)
 800889a:	fba3 2301 	umull	r2, r3, r3, r1
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	2264      	movs	r2, #100	@ 0x64
 80088a2:	fb02 f303 	mul.w	r3, r2, r3
 80088a6:	1acb      	subs	r3, r1, r3
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088ae:	4b36      	ldr	r3, [pc, #216]	@ (8008988 <UART_SetConfig+0x2d4>)
 80088b0:	fba3 2302 	umull	r2, r3, r3, r2
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	005b      	lsls	r3, r3, #1
 80088b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80088bc:	441c      	add	r4, r3
 80088be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80088cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80088d0:	4642      	mov	r2, r8
 80088d2:	464b      	mov	r3, r9
 80088d4:	1891      	adds	r1, r2, r2
 80088d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80088d8:	415b      	adcs	r3, r3
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80088e0:	4641      	mov	r1, r8
 80088e2:	1851      	adds	r1, r2, r1
 80088e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80088e6:	4649      	mov	r1, r9
 80088e8:	414b      	adcs	r3, r1
 80088ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80088f8:	4659      	mov	r1, fp
 80088fa:	00cb      	lsls	r3, r1, #3
 80088fc:	4651      	mov	r1, sl
 80088fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008902:	4651      	mov	r1, sl
 8008904:	00ca      	lsls	r2, r1, #3
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	4603      	mov	r3, r0
 800890c:	4642      	mov	r2, r8
 800890e:	189b      	adds	r3, r3, r2
 8008910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008914:	464b      	mov	r3, r9
 8008916:	460a      	mov	r2, r1
 8008918:	eb42 0303 	adc.w	r3, r2, r3
 800891c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800892c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008930:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008934:	460b      	mov	r3, r1
 8008936:	18db      	adds	r3, r3, r3
 8008938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800893a:	4613      	mov	r3, r2
 800893c:	eb42 0303 	adc.w	r3, r2, r3
 8008940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008942:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008946:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800894a:	f7f7 fc45 	bl	80001d8 <__aeabi_uldivmod>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4b0d      	ldr	r3, [pc, #52]	@ (8008988 <UART_SetConfig+0x2d4>)
 8008954:	fba3 1302 	umull	r1, r3, r3, r2
 8008958:	095b      	lsrs	r3, r3, #5
 800895a:	2164      	movs	r1, #100	@ 0x64
 800895c:	fb01 f303 	mul.w	r3, r1, r3
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	3332      	adds	r3, #50	@ 0x32
 8008966:	4a08      	ldr	r2, [pc, #32]	@ (8008988 <UART_SetConfig+0x2d4>)
 8008968:	fba2 2303 	umull	r2, r3, r2, r3
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	f003 0207 	and.w	r2, r3, #7
 8008972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4422      	add	r2, r4
 800897a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800897c:	e106      	b.n	8008b8c <UART_SetConfig+0x4d8>
 800897e:	bf00      	nop
 8008980:	40011000 	.word	0x40011000
 8008984:	40011400 	.word	0x40011400
 8008988:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800898c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008990:	2200      	movs	r2, #0
 8008992:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008996:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800899a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800899e:	4642      	mov	r2, r8
 80089a0:	464b      	mov	r3, r9
 80089a2:	1891      	adds	r1, r2, r2
 80089a4:	6239      	str	r1, [r7, #32]
 80089a6:	415b      	adcs	r3, r3
 80089a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089ae:	4641      	mov	r1, r8
 80089b0:	1854      	adds	r4, r2, r1
 80089b2:	4649      	mov	r1, r9
 80089b4:	eb43 0501 	adc.w	r5, r3, r1
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	00eb      	lsls	r3, r5, #3
 80089c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089c6:	00e2      	lsls	r2, r4, #3
 80089c8:	4614      	mov	r4, r2
 80089ca:	461d      	mov	r5, r3
 80089cc:	4643      	mov	r3, r8
 80089ce:	18e3      	adds	r3, r4, r3
 80089d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089d4:	464b      	mov	r3, r9
 80089d6:	eb45 0303 	adc.w	r3, r5, r3
 80089da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089ee:	f04f 0200 	mov.w	r2, #0
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80089fa:	4629      	mov	r1, r5
 80089fc:	008b      	lsls	r3, r1, #2
 80089fe:	4621      	mov	r1, r4
 8008a00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a04:	4621      	mov	r1, r4
 8008a06:	008a      	lsls	r2, r1, #2
 8008a08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a0c:	f7f7 fbe4 	bl	80001d8 <__aeabi_uldivmod>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4b60      	ldr	r3, [pc, #384]	@ (8008b98 <UART_SetConfig+0x4e4>)
 8008a16:	fba3 2302 	umull	r2, r3, r3, r2
 8008a1a:	095b      	lsrs	r3, r3, #5
 8008a1c:	011c      	lsls	r4, r3, #4
 8008a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a22:	2200      	movs	r2, #0
 8008a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	1891      	adds	r1, r2, r2
 8008a36:	61b9      	str	r1, [r7, #24]
 8008a38:	415b      	adcs	r3, r3
 8008a3a:	61fb      	str	r3, [r7, #28]
 8008a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a40:	4641      	mov	r1, r8
 8008a42:	1851      	adds	r1, r2, r1
 8008a44:	6139      	str	r1, [r7, #16]
 8008a46:	4649      	mov	r1, r9
 8008a48:	414b      	adcs	r3, r1
 8008a4a:	617b      	str	r3, [r7, #20]
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a58:	4659      	mov	r1, fp
 8008a5a:	00cb      	lsls	r3, r1, #3
 8008a5c:	4651      	mov	r1, sl
 8008a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a62:	4651      	mov	r1, sl
 8008a64:	00ca      	lsls	r2, r1, #3
 8008a66:	4610      	mov	r0, r2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	189b      	adds	r3, r3, r2
 8008a70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a74:	464b      	mov	r3, r9
 8008a76:	460a      	mov	r2, r1
 8008a78:	eb42 0303 	adc.w	r3, r2, r3
 8008a7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a8c:	f04f 0200 	mov.w	r2, #0
 8008a90:	f04f 0300 	mov.w	r3, #0
 8008a94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a98:	4649      	mov	r1, r9
 8008a9a:	008b      	lsls	r3, r1, #2
 8008a9c:	4641      	mov	r1, r8
 8008a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aa2:	4641      	mov	r1, r8
 8008aa4:	008a      	lsls	r2, r1, #2
 8008aa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008aaa:	f7f7 fb95 	bl	80001d8 <__aeabi_uldivmod>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4b38      	ldr	r3, [pc, #224]	@ (8008b98 <UART_SetConfig+0x4e4>)
 8008ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8008aba:	095b      	lsrs	r3, r3, #5
 8008abc:	2264      	movs	r2, #100	@ 0x64
 8008abe:	fb02 f303 	mul.w	r3, r2, r3
 8008ac2:	1acb      	subs	r3, r1, r3
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	3332      	adds	r3, #50	@ 0x32
 8008ac8:	4a33      	ldr	r2, [pc, #204]	@ (8008b98 <UART_SetConfig+0x4e4>)
 8008aca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ace:	095b      	lsrs	r3, r3, #5
 8008ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ad4:	441c      	add	r4, r3
 8008ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ada:	2200      	movs	r2, #0
 8008adc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ade:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ae0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008ae4:	4642      	mov	r2, r8
 8008ae6:	464b      	mov	r3, r9
 8008ae8:	1891      	adds	r1, r2, r2
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	415b      	adcs	r3, r3
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008af4:	4641      	mov	r1, r8
 8008af6:	1851      	adds	r1, r2, r1
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	4649      	mov	r1, r9
 8008afc:	414b      	adcs	r3, r1
 8008afe:	607b      	str	r3, [r7, #4]
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b0c:	4659      	mov	r1, fp
 8008b0e:	00cb      	lsls	r3, r1, #3
 8008b10:	4651      	mov	r1, sl
 8008b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b16:	4651      	mov	r1, sl
 8008b18:	00ca      	lsls	r2, r1, #3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4642      	mov	r2, r8
 8008b22:	189b      	adds	r3, r3, r2
 8008b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b26:	464b      	mov	r3, r9
 8008b28:	460a      	mov	r2, r1
 8008b2a:	eb42 0303 	adc.w	r3, r2, r3
 8008b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	f04f 0300 	mov.w	r3, #0
 8008b44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b48:	4649      	mov	r1, r9
 8008b4a:	008b      	lsls	r3, r1, #2
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b52:	4641      	mov	r1, r8
 8008b54:	008a      	lsls	r2, r1, #2
 8008b56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b5a:	f7f7 fb3d 	bl	80001d8 <__aeabi_uldivmod>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4b0d      	ldr	r3, [pc, #52]	@ (8008b98 <UART_SetConfig+0x4e4>)
 8008b64:	fba3 1302 	umull	r1, r3, r3, r2
 8008b68:	095b      	lsrs	r3, r3, #5
 8008b6a:	2164      	movs	r1, #100	@ 0x64
 8008b6c:	fb01 f303 	mul.w	r3, r1, r3
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	3332      	adds	r3, #50	@ 0x32
 8008b76:	4a08      	ldr	r2, [pc, #32]	@ (8008b98 <UART_SetConfig+0x4e4>)
 8008b78:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4422      	add	r2, r4
 8008b8a:	609a      	str	r2, [r3, #8]
}
 8008b8c:	bf00      	nop
 8008b8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b92:	46bd      	mov	sp, r7
 8008b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b98:	51eb851f 	.word	0x51eb851f

08008b9c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	f107 001c 	add.w	r0, r7, #28
 8008baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008bb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bb6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008bba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008bbe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008bc2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008bc6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008bd6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	b004      	add	sp, #16
 8008bf0:	4770      	bx	lr

08008bf2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0303 	and.w	r3, r3, #3
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c84:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008c8a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008c90:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008ca0:	f023 030f 	bic.w	r3, r3, #15
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	b2db      	uxtb	r3, r3
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3314      	adds	r3, #20
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
}  
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d20:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d26:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d2c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0

}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr

08008d52 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b088      	sub	sp, #32
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d60:	2310      	movs	r3, #16
 8008d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d64:	2340      	movs	r3, #64	@ 0x40
 8008d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d72:	f107 0308 	add.w	r3, r7, #8
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ff74 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d82:	2110      	movs	r1, #16
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9d7 	bl	8009138 <SDMMC_GetCmdResp1>
 8008d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d8c:	69fb      	ldr	r3, [r7, #28]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b088      	sub	sp, #32
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008da4:	2311      	movs	r3, #17
 8008da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008db4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff52 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dc6:	2111      	movs	r1, #17
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9b5 	bl	8009138 <SDMMC_GetCmdResp1>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008de8:	2312      	movs	r3, #18
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dec:	2340      	movs	r3, #64	@ 0x40
 8008dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff ff30 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f993 	bl	8009138 <SDMMC_GetCmdResp1>
 8008e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e14:	69fb      	ldr	r3, [r7, #28]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b088      	sub	sp, #32
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e2c:	2318      	movs	r3, #24
 8008e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e30:	2340      	movs	r3, #64	@ 0x40
 8008e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff0e 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e4e:	2118      	movs	r1, #24
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f971 	bl	8009138 <SDMMC_GetCmdResp1>
 8008e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e58:	69fb      	ldr	r3, [r7, #28]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b088      	sub	sp, #32
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e70:	2319      	movs	r3, #25
 8008e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e74:	2340      	movs	r3, #64	@ 0x40
 8008e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff feec 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e92:	2119      	movs	r1, #25
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f94f 	bl	8009138 <SDMMC_GetCmdResp1>
 8008e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3720      	adds	r7, #32
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eb8:	2340      	movs	r3, #64	@ 0x40
 8008eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ec4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff feca 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008ed2:	4a05      	ldr	r2, [pc, #20]	@ (8008ee8 <SDMMC_CmdStopTransfer+0x40>)
 8008ed4:	210c      	movs	r1, #12
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f92e 	bl	8009138 <SDMMC_GetCmdResp1>
 8008edc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ede:	69fb      	ldr	r3, [r7, #28]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3720      	adds	r7, #32
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	05f5e100 	.word	0x05f5e100

08008eec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08a      	sub	sp, #40	@ 0x28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008efc:	2307      	movs	r3, #7
 8008efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f00:	2340      	movs	r3, #64	@ 0x40
 8008f02:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f0c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f0e:	f107 0310 	add.w	r3, r7, #16
 8008f12:	4619      	mov	r1, r3
 8008f14:	68f8      	ldr	r0, [r7, #12]
 8008f16:	f7ff fea6 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f1e:	2107      	movs	r1, #7
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f909 	bl	8009138 <SDMMC_GetCmdResp1>
 8008f26:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3728      	adds	r7, #40	@ 0x28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b088      	sub	sp, #32
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f50:	f107 0308 	add.w	r3, r7, #8
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fe85 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fb23 	bl	80095a8 <SDMMC_GetCmdError>
 8008f62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f64:	69fb      	ldr	r3, [r7, #28]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3720      	adds	r7, #32
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b088      	sub	sp, #32
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f76:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008f7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f7c:	2308      	movs	r3, #8
 8008f7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f80:	2340      	movs	r3, #64	@ 0x40
 8008f82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f8e:	f107 0308 	add.w	r3, r7, #8
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff fe66 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fab6 	bl	800950c <SDMMC_GetCmdResp7>
 8008fa0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa2:	69fb      	ldr	r3, [r7, #28]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fba:	2337      	movs	r3, #55	@ 0x37
 8008fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fbe:	2340      	movs	r3, #64	@ 0x40
 8008fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fe47 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fdc:	2137      	movs	r1, #55	@ 0x37
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f8aa 	bl	8009138 <SDMMC_GetCmdResp1>
 8008fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009006:	2329      	movs	r3, #41	@ 0x29
 8009008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800900a:	2340      	movs	r3, #64	@ 0x40
 800900c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009018:	f107 0308 	add.w	r3, r7, #8
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff fe21 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9bd 	bl	80093a4 <SDMMC_GetCmdResp3>
 800902a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800902c:	69fb      	ldr	r3, [r7, #28]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b088      	sub	sp, #32
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009042:	2302      	movs	r3, #2
 8009044:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009046:	23c0      	movs	r3, #192	@ 0xc0
 8009048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800904e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009052:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff fe03 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f957 	bl	8009314 <SDMMC_GetCmdResp2>
 8009066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009068:	69fb      	ldr	r3, [r7, #28]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b088      	sub	sp, #32
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009080:	2309      	movs	r3, #9
 8009082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009084:	23c0      	movs	r3, #192	@ 0xc0
 8009086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800908c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009090:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fde4 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f938 	bl	8009314 <SDMMC_GetCmdResp2>
 80090a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090a6:	69fb      	ldr	r3, [r7, #28]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80090be:	2303      	movs	r3, #3
 80090c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090c2:	2340      	movs	r3, #64	@ 0x40
 80090c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090d0:	f107 0308 	add.w	r3, r7, #8
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fdc5 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	2103      	movs	r1, #3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f99d 	bl	8009420 <SDMMC_GetCmdResp6>
 80090e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090e8:	69fb      	ldr	r3, [r7, #28]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3720      	adds	r7, #32
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b088      	sub	sp, #32
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009100:	230d      	movs	r3, #13
 8009102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009104:	2340      	movs	r3, #64	@ 0x40
 8009106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800910c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fda4 	bl	8008c66 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800911e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009122:	210d      	movs	r1, #13
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f807 	bl	8009138 <SDMMC_GetCmdResp1>
 800912a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800912c:	69fb      	ldr	r3, [r7, #28]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	460b      	mov	r3, r1
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009146:	4b70      	ldr	r3, [pc, #448]	@ (8009308 <SDMMC_GetCmdResp1+0x1d0>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a70      	ldr	r2, [pc, #448]	@ (800930c <SDMMC_GetCmdResp1+0x1d4>)
 800914c:	fba2 2303 	umull	r2, r3, r2, r3
 8009150:	0a5a      	lsrs	r2, r3, #9
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	fb02 f303 	mul.w	r3, r2, r3
 8009158:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	1e5a      	subs	r2, r3, #1
 800915e:	61fa      	str	r2, [r7, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009164:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009168:	e0c9      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0ef      	beq.n	800915a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1ea      	bne.n	800915a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2204      	movs	r2, #4
 8009194:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009196:	2304      	movs	r3, #4
 8009198:	e0b1      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e0a6      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	22c5      	movs	r2, #197	@ 0xc5
 80091b4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fd7f 	bl	8008cba <SDIO_GetCommandResponse>
 80091bc:	4603      	mov	r3, r0
 80091be:	461a      	mov	r2, r3
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d001      	beq.n	80091ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e099      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80091ca:	2100      	movs	r1, #0
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff fd81 	bl	8008cd4 <SDIO_GetResponse>
 80091d2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	4b4e      	ldr	r3, [pc, #312]	@ (8009310 <SDMMC_GetCmdResp1+0x1d8>)
 80091d8:	4013      	ands	r3, r2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80091de:	2300      	movs	r3, #0
 80091e0:	e08d      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	da02      	bge.n	80091ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80091e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80091ec:	e087      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80091f8:	2340      	movs	r3, #64	@ 0x40
 80091fa:	e080      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009206:	2380      	movs	r3, #128	@ 0x80
 8009208:	e079      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009218:	e071      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009228:	e069      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009238:	e061      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d002      	beq.n	800924a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009244:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009248:	e059      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009254:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009258:	e051      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009264:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009268:	e049      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009274:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009278:	e041      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009288:	e039      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009294:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009298:	e031      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80092a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80092a8:	e029      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80092b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092b8:	e021      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d002      	beq.n	80092ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80092c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80092c8:	e019      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80092d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80092d8:	e011      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80092e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80092e8:	e009      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f003 0308 	and.w	r3, r3, #8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80092f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80092f8:	e001      	b.n	80092fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3720      	adds	r7, #32
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	2000000c 	.word	0x2000000c
 800930c:	10624dd3 	.word	0x10624dd3
 8009310:	fdffe008 	.word	0xfdffe008

08009314 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800931c:	4b1f      	ldr	r3, [pc, #124]	@ (800939c <SDMMC_GetCmdResp2+0x88>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a1f      	ldr	r2, [pc, #124]	@ (80093a0 <SDMMC_GetCmdResp2+0x8c>)
 8009322:	fba2 2303 	umull	r2, r3, r2, r3
 8009326:	0a5b      	lsrs	r3, r3, #9
 8009328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1e5a      	subs	r2, r3, #1
 8009336:	60fa      	str	r2, [r7, #12]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d102      	bne.n	8009342 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800933c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009340:	e026      	b.n	8009390 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009346:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0ef      	beq.n	8009332 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1ea      	bne.n	8009332 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009360:	f003 0304 	and.w	r3, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2204      	movs	r2, #4
 800936c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800936e:	2304      	movs	r3, #4
 8009370:	e00e      	b.n	8009390 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d004      	beq.n	8009388 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009384:	2301      	movs	r3, #1
 8009386:	e003      	b.n	8009390 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	22c5      	movs	r2, #197	@ 0xc5
 800938c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	2000000c 	.word	0x2000000c
 80093a0:	10624dd3 	.word	0x10624dd3

080093a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009418 <SDMMC_GetCmdResp3+0x74>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a1a      	ldr	r2, [pc, #104]	@ (800941c <SDMMC_GetCmdResp3+0x78>)
 80093b2:	fba2 2303 	umull	r2, r3, r2, r3
 80093b6:	0a5b      	lsrs	r3, r3, #9
 80093b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093bc:	fb02 f303 	mul.w	r3, r2, r3
 80093c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	1e5a      	subs	r2, r3, #1
 80093c6:	60fa      	str	r2, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093d0:	e01b      	b.n	800940a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0ef      	beq.n	80093c2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1ea      	bne.n	80093c2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2204      	movs	r2, #4
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093fe:	2304      	movs	r3, #4
 8009400:	e003      	b.n	800940a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	22c5      	movs	r2, #197	@ 0xc5
 8009406:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	2000000c 	.word	0x2000000c
 800941c:	10624dd3 	.word	0x10624dd3

08009420 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	460b      	mov	r3, r1
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800942e:	4b35      	ldr	r3, [pc, #212]	@ (8009504 <SDMMC_GetCmdResp6+0xe4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a35      	ldr	r2, [pc, #212]	@ (8009508 <SDMMC_GetCmdResp6+0xe8>)
 8009434:	fba2 2303 	umull	r2, r3, r2, r3
 8009438:	0a5b      	lsrs	r3, r3, #9
 800943a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800943e:	fb02 f303 	mul.w	r3, r2, r3
 8009442:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	1e5a      	subs	r2, r3, #1
 8009448:	61fa      	str	r2, [r7, #28]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d102      	bne.n	8009454 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800944e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009452:	e052      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009458:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0ef      	beq.n	8009444 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1ea      	bne.n	8009444 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d004      	beq.n	8009484 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2204      	movs	r2, #4
 800947e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009480:	2304      	movs	r3, #4
 8009482:	e03a      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009496:	2301      	movs	r3, #1
 8009498:	e02f      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fc0d 	bl	8008cba <SDIO_GetCommandResponse>
 80094a0:	4603      	mov	r3, r0
 80094a2:	461a      	mov	r2, r3
 80094a4:	7afb      	ldrb	r3, [r7, #11]
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d001      	beq.n	80094ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e025      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	22c5      	movs	r2, #197	@ 0xc5
 80094b2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80094b4:	2100      	movs	r1, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fc0c 	bl	8008cd4 <SDIO_GetResponse>
 80094bc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d106      	bne.n	80094d6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	0c1b      	lsrs	r3, r3, #16
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	e011      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80094e4:	e009      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094f4:	e001      	b.n	80094fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	2000000c 	.word	0x2000000c
 8009508:	10624dd3 	.word	0x10624dd3

0800950c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009514:	4b22      	ldr	r3, [pc, #136]	@ (80095a0 <SDMMC_GetCmdResp7+0x94>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a22      	ldr	r2, [pc, #136]	@ (80095a4 <SDMMC_GetCmdResp7+0x98>)
 800951a:	fba2 2303 	umull	r2, r3, r2, r3
 800951e:	0a5b      	lsrs	r3, r3, #9
 8009520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	1e5a      	subs	r2, r3, #1
 800952e:	60fa      	str	r2, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d102      	bne.n	800953a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009534:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009538:	e02c      	b.n	8009594 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0ef      	beq.n	800952a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ea      	bne.n	800952a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2204      	movs	r2, #4
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009566:	2304      	movs	r3, #4
 8009568:	e014      	b.n	8009594 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957c:	2301      	movs	r3, #1
 800957e:	e009      	b.n	8009594 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2240      	movs	r2, #64	@ 0x40
 8009590:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009592:	2300      	movs	r3, #0
  
}
 8009594:	4618      	mov	r0, r3
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	2000000c 	.word	0x2000000c
 80095a4:	10624dd3 	.word	0x10624dd3

080095a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095b0:	4b11      	ldr	r3, [pc, #68]	@ (80095f8 <SDMMC_GetCmdError+0x50>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a11      	ldr	r2, [pc, #68]	@ (80095fc <SDMMC_GetCmdError+0x54>)
 80095b6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ba:	0a5b      	lsrs	r3, r3, #9
 80095bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095c0:	fb02 f303 	mul.w	r3, r2, r3
 80095c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	60fa      	str	r2, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095d4:	e009      	b.n	80095ea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0f1      	beq.n	80095c6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	22c5      	movs	r2, #197	@ 0xc5
 80095e6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	2000000c 	.word	0x2000000c
 80095fc:	10624dd3 	.word	0x10624dd3

08009600 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009604:	4904      	ldr	r1, [pc, #16]	@ (8009618 <MX_FATFS_Init+0x18>)
 8009606:	4805      	ldr	r0, [pc, #20]	@ (800961c <MX_FATFS_Init+0x1c>)
 8009608:	f002 fe66 	bl	800c2d8 <FATFS_LinkDriver>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	4b03      	ldr	r3, [pc, #12]	@ (8009620 <MX_FATFS_Init+0x20>)
 8009612:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009614:	bf00      	nop
 8009616:	bd80      	pop	{r7, pc}
 8009618:	2000059c 	.word	0x2000059c
 800961c:	0800d524 	.word	0x0800d524
 8009620:	20000598 	.word	0x20000598

08009624 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009624:	b480      	push	{r7}
 8009626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009628:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800962a:	4618      	mov	r0, r3
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800963e:	f000 f86b 	bl	8009718 <BSP_SD_IsDetected>
 8009642:	4603      	mov	r3, r0
 8009644:	2b01      	cmp	r3, #1
 8009646:	d001      	beq.n	800964c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e005      	b.n	8009658 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800964c:	4804      	ldr	r0, [pc, #16]	@ (8009660 <BSP_SD_Init+0x2c>)
 800964e:	f7fb fefd 	bl	800544c <HAL_SD_Init>
 8009652:	4603      	mov	r3, r0
 8009654:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009656:	79fb      	ldrb	r3, [r7, #7]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	200000fc 	.word	0x200000fc

08009664 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af02      	add	r7, sp, #8
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	4806      	ldr	r0, [pc, #24]	@ (800969c <BSP_SD_ReadBlocks+0x38>)
 8009682:	f7fb ff93 	bl	80055ac <HAL_SD_ReadBlocks>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200000fc 	.word	0x200000fc

080096a0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	4806      	ldr	r0, [pc, #24]	@ (80096d8 <BSP_SD_WriteBlocks+0x38>)
 80096be:	f7fc f95b 	bl	8005978 <HAL_SD_WriteBlocks>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	200000fc 	.word	0x200000fc

080096dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80096e0:	4805      	ldr	r0, [pc, #20]	@ (80096f8 <BSP_SD_GetCardState+0x1c>)
 80096e2:	f7fc fca7 	bl	8006034 <HAL_SD_GetCardState>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	bf14      	ite	ne
 80096ec:	2301      	movne	r3, #1
 80096ee:	2300      	moveq	r3, #0
 80096f0:	b2db      	uxtb	r3, r3
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	200000fc 	.word	0x200000fc

080096fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	4803      	ldr	r0, [pc, #12]	@ (8009714 <BSP_SD_GetCardInfo+0x18>)
 8009708:	f7fc fc68 	bl	8005fdc <HAL_SD_GetCardInfo>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	200000fc 	.word	0x200000fc

08009718 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800971e:	2301      	movs	r3, #1
 8009720:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	b2db      	uxtb	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800973e:	4b0b      	ldr	r3, [pc, #44]	@ (800976c <SD_CheckStatus+0x38>)
 8009740:	2201      	movs	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009744:	f7ff ffca 	bl	80096dc <BSP_SD_GetCardState>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d107      	bne.n	800975e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800974e:	4b07      	ldr	r3, [pc, #28]	@ (800976c <SD_CheckStatus+0x38>)
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	f023 0301 	bic.w	r3, r3, #1
 8009758:	b2da      	uxtb	r2, r3
 800975a:	4b04      	ldr	r3, [pc, #16]	@ (800976c <SD_CheckStatus+0x38>)
 800975c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800975e:	4b03      	ldr	r3, [pc, #12]	@ (800976c <SD_CheckStatus+0x38>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	b2db      	uxtb	r3, r3
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000015 	.word	0x20000015

08009770 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800977a:	4b0b      	ldr	r3, [pc, #44]	@ (80097a8 <SD_initialize+0x38>)
 800977c:	2201      	movs	r2, #1
 800977e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009780:	f7ff ff58 	bl	8009634 <BSP_SD_Init>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d107      	bne.n	800979a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	4618      	mov	r0, r3
 800978e:	f7ff ffd1 	bl	8009734 <SD_CheckStatus>
 8009792:	4603      	mov	r3, r0
 8009794:	461a      	mov	r2, r3
 8009796:	4b04      	ldr	r3, [pc, #16]	@ (80097a8 <SD_initialize+0x38>)
 8009798:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800979a:	4b03      	ldr	r3, [pc, #12]	@ (80097a8 <SD_initialize+0x38>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	b2db      	uxtb	r3, r3
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	20000015 	.word	0x20000015

080097ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097b6:	79fb      	ldrb	r3, [r7, #7]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ffbb 	bl	8009734 <SD_CheckStatus>
 80097be:	4603      	mov	r3, r0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80097dc:	f04f 33ff 	mov.w	r3, #4294967295
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	68b8      	ldr	r0, [r7, #8]
 80097e6:	f7ff ff3d 	bl	8009664 <BSP_SD_ReadBlocks>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d107      	bne.n	8009800 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80097f0:	bf00      	nop
 80097f2:	f7ff ff73 	bl	80096dc <BSP_SD_GetCardState>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1fa      	bne.n	80097f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b086      	sub	sp, #24
 800980e:	af00      	add	r7, sp, #0
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800981e:	f04f 33ff 	mov.w	r3, #4294967295
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	68b8      	ldr	r0, [r7, #8]
 8009828:	f7ff ff3a 	bl	80096a0 <BSP_SD_WriteBlocks>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009832:	bf00      	nop
 8009834:	f7ff ff52 	bl	80096dc <BSP_SD_GetCardState>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1fa      	bne.n	8009834 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08c      	sub	sp, #48	@ 0x30
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	603a      	str	r2, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
 8009858:	460b      	mov	r3, r1
 800985a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009862:	4b25      	ldr	r3, [pc, #148]	@ (80098f8 <SD_ioctl+0xac>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	b2db      	uxtb	r3, r3
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <SD_ioctl+0x28>
 8009870:	2303      	movs	r3, #3
 8009872:	e03c      	b.n	80098ee <SD_ioctl+0xa2>

  switch (cmd)
 8009874:	79bb      	ldrb	r3, [r7, #6]
 8009876:	2b03      	cmp	r3, #3
 8009878:	d834      	bhi.n	80098e4 <SD_ioctl+0x98>
 800987a:	a201      	add	r2, pc, #4	@ (adr r2, 8009880 <SD_ioctl+0x34>)
 800987c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009880:	08009891 	.word	0x08009891
 8009884:	08009899 	.word	0x08009899
 8009888:	080098b1 	.word	0x080098b1
 800988c:	080098cb 	.word	0x080098cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009896:	e028      	b.n	80098ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009898:	f107 030c 	add.w	r3, r7, #12
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff ff2d 	bl	80096fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098a8:	2300      	movs	r3, #0
 80098aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098ae:	e01c      	b.n	80098ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098b0:	f107 030c 	add.w	r3, r7, #12
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff21 	bl	80096fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098bc:	b29a      	uxth	r2, r3
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098c8:	e00f      	b.n	80098ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098ca:	f107 030c 	add.w	r3, r7, #12
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7ff ff14 	bl	80096fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80098d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d6:	0a5a      	lsrs	r2, r3, #9
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098e2:	e002      	b.n	80098ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80098e4:	2304      	movs	r3, #4
 80098e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80098ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3730      	adds	r7, #48	@ 0x30
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	20000015 	.word	0x20000015

080098fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	4603      	mov	r3, r0
 8009904:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	4a08      	ldr	r2, [pc, #32]	@ (800992c <disk_status+0x30>)
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	79fa      	ldrb	r2, [r7, #7]
 8009914:	4905      	ldr	r1, [pc, #20]	@ (800992c <disk_status+0x30>)
 8009916:	440a      	add	r2, r1
 8009918:	7a12      	ldrb	r2, [r2, #8]
 800991a:	4610      	mov	r0, r2
 800991c:	4798      	blx	r3
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	200005c8 	.word	0x200005c8

08009930 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800993e:	79fb      	ldrb	r3, [r7, #7]
 8009940:	4a0e      	ldr	r2, [pc, #56]	@ (800997c <disk_initialize+0x4c>)
 8009942:	5cd3      	ldrb	r3, [r2, r3]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d114      	bne.n	8009972 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	4a0c      	ldr	r2, [pc, #48]	@ (800997c <disk_initialize+0x4c>)
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	79fa      	ldrb	r2, [r7, #7]
 8009956:	4909      	ldr	r1, [pc, #36]	@ (800997c <disk_initialize+0x4c>)
 8009958:	440a      	add	r2, r1
 800995a:	7a12      	ldrb	r2, [r2, #8]
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	4603      	mov	r3, r0
 8009962:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d103      	bne.n	8009972 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	4a03      	ldr	r2, [pc, #12]	@ (800997c <disk_initialize+0x4c>)
 800996e:	2101      	movs	r1, #1
 8009970:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009972:	7bfb      	ldrb	r3, [r7, #15]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3710      	adds	r7, #16
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}
 800997c:	200005c8 	.word	0x200005c8

08009980 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009980:	b590      	push	{r4, r7, lr}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	4a0a      	ldr	r2, [pc, #40]	@ (80099bc <disk_read+0x3c>)
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	689c      	ldr	r4, [r3, #8]
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	4a07      	ldr	r2, [pc, #28]	@ (80099bc <disk_read+0x3c>)
 80099a0:	4413      	add	r3, r2
 80099a2:	7a18      	ldrb	r0, [r3, #8]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	68b9      	ldr	r1, [r7, #8]
 80099aa:	47a0      	blx	r4
 80099ac:	4603      	mov	r3, r0
 80099ae:	75fb      	strb	r3, [r7, #23]
  return res;
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd90      	pop	{r4, r7, pc}
 80099ba:	bf00      	nop
 80099bc:	200005c8 	.word	0x200005c8

080099c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80099c0:	b590      	push	{r4, r7, lr}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	607a      	str	r2, [r7, #4]
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	4a0a      	ldr	r2, [pc, #40]	@ (80099fc <disk_write+0x3c>)
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	68dc      	ldr	r4, [r3, #12]
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	4a07      	ldr	r2, [pc, #28]	@ (80099fc <disk_write+0x3c>)
 80099e0:	4413      	add	r3, r2
 80099e2:	7a18      	ldrb	r0, [r3, #8]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	47a0      	blx	r4
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]
  return res;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd90      	pop	{r4, r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200005c8 	.word	0x200005c8

08009a00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	603a      	str	r2, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	4a09      	ldr	r2, [pc, #36]	@ (8009a38 <disk_ioctl+0x38>)
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	4906      	ldr	r1, [pc, #24]	@ (8009a38 <disk_ioctl+0x38>)
 8009a20:	440a      	add	r2, r1
 8009a22:	7a10      	ldrb	r0, [r2, #8]
 8009a24:	79b9      	ldrb	r1, [r7, #6]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	4798      	blx	r3
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}
 8009a38:	200005c8 	.word	0x200005c8

08009a3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3301      	adds	r3, #1
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a4c:	89fb      	ldrh	r3, [r7, #14]
 8009a4e:	021b      	lsls	r3, r3, #8
 8009a50:	b21a      	sxth	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b21b      	sxth	r3, r3
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a5e:	89fb      	ldrh	r3, [r7, #14]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3714      	adds	r7, #20
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3303      	adds	r3, #3
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	3202      	adds	r2, #2
 8009a84:	7812      	ldrb	r2, [r2, #0]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	3201      	adds	r2, #1
 8009a92:	7812      	ldrb	r2, [r2, #0]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	021b      	lsls	r3, r3, #8
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	7812      	ldrb	r2, [r2, #0]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
	return rv;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	887a      	ldrh	r2, [r7, #2]
 8009ac6:	b2d2      	uxtb	r2, r2
 8009ac8:	701a      	strb	r2, [r3, #0]
 8009aca:	887b      	ldrh	r3, [r7, #2]
 8009acc:	0a1b      	lsrs	r3, r3, #8
 8009ace:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	607a      	str	r2, [r7, #4]
 8009ad6:	887a      	ldrh	r2, [r7, #2]
 8009ad8:	b2d2      	uxtb	r2, r2
 8009ada:	701a      	strb	r2, [r3, #0]
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	b2d2      	uxtb	r2, r2
 8009afc:	701a      	strb	r2, [r3, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	0a1b      	lsrs	r3, r3, #8
 8009b02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	b2d2      	uxtb	r2, r2
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	0a1b      	lsrs	r3, r3, #8
 8009b14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	0a1b      	lsrs	r3, r3, #8
 8009b26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	607a      	str	r2, [r7, #4]
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	b2d2      	uxtb	r2, r2
 8009b32:	701a      	strb	r2, [r3, #0]
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b40:	b480      	push	{r7}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00d      	beq.n	8009b76 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	1c53      	adds	r3, r2, #1
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	1c59      	adds	r1, r3, #1
 8009b64:	6179      	str	r1, [r7, #20]
 8009b66:	7812      	ldrb	r2, [r2, #0]
 8009b68:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f1      	bne.n	8009b5a <mem_cpy+0x1a>
	}
}
 8009b76:	bf00      	nop
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b82:	b480      	push	{r7}
 8009b84:	b087      	sub	sp, #28
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	60f8      	str	r0, [r7, #12]
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	617a      	str	r2, [r7, #20]
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	607b      	str	r3, [r7, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f3      	bne.n	8009b92 <mem_set+0x10>
}
 8009baa:	bf00      	nop
 8009bac:	bf00      	nop
 8009bae:	371c      	adds	r7, #28
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bb8:	b480      	push	{r7}
 8009bba:	b089      	sub	sp, #36	@ 0x24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	61fb      	str	r3, [r7, #28]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	61fa      	str	r2, [r7, #28]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	61ba      	str	r2, [r7, #24]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	1acb      	subs	r3, r1, r3
 8009be4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <mem_cmp+0x40>
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0eb      	beq.n	8009bd0 <mem_cmp+0x18>

	return r;
 8009bf8:	697b      	ldr	r3, [r7, #20]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3724      	adds	r7, #36	@ 0x24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c10:	e002      	b.n	8009c18 <chk_chr+0x12>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3301      	adds	r3, #1
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <chk_chr+0x26>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	461a      	mov	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d1f2      	bne.n	8009c12 <chk_chr+0xc>
	return *str;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c46:	2300      	movs	r3, #0
 8009c48:	60bb      	str	r3, [r7, #8]
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	60fb      	str	r3, [r7, #12]
 8009c4e:	e029      	b.n	8009ca4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c50:	4a27      	ldr	r2, [pc, #156]	@ (8009cf0 <chk_lock+0xb4>)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	011b      	lsls	r3, r3, #4
 8009c56:	4413      	add	r3, r2
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01d      	beq.n	8009c9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c5e:	4a24      	ldr	r2, [pc, #144]	@ (8009cf0 <chk_lock+0xb4>)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	4413      	add	r3, r2
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d116      	bne.n	8009c9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c70:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf0 <chk_lock+0xb4>)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	4413      	add	r3, r2
 8009c78:	3304      	adds	r3, #4
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d10c      	bne.n	8009c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c84:	4a1a      	ldr	r2, [pc, #104]	@ (8009cf0 <chk_lock+0xb4>)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	4413      	add	r3, r2
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d102      	bne.n	8009c9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c98:	e007      	b.n	8009caa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d9d2      	bls.n	8009c50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d109      	bne.n	8009cc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <chk_lock+0x80>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d101      	bne.n	8009cc0 <chk_lock+0x84>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e010      	b.n	8009ce2 <chk_lock+0xa6>
 8009cc0:	2312      	movs	r3, #18
 8009cc2:	e00e      	b.n	8009ce2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d108      	bne.n	8009cdc <chk_lock+0xa0>
 8009cca:	4a09      	ldr	r2, [pc, #36]	@ (8009cf0 <chk_lock+0xb4>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	4413      	add	r3, r2
 8009cd2:	330c      	adds	r3, #12
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cda:	d101      	bne.n	8009ce0 <chk_lock+0xa4>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	e000      	b.n	8009ce2 <chk_lock+0xa6>
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	200005a8 	.word	0x200005a8

08009cf4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	607b      	str	r3, [r7, #4]
 8009cfe:	e002      	b.n	8009d06 <enq_lock+0x12>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3301      	adds	r3, #1
 8009d04:	607b      	str	r3, [r7, #4]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d806      	bhi.n	8009d1a <enq_lock+0x26>
 8009d0c:	4a09      	ldr	r2, [pc, #36]	@ (8009d34 <enq_lock+0x40>)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	4413      	add	r3, r2
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1f2      	bne.n	8009d00 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	bf14      	ite	ne
 8009d20:	2301      	movne	r3, #1
 8009d22:	2300      	moveq	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	200005a8 	.word	0x200005a8

08009d38 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e01f      	b.n	8009d88 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d48:	4a41      	ldr	r2, [pc, #260]	@ (8009e50 <inc_lock+0x118>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	4413      	add	r3, r2
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d113      	bne.n	8009d82 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8009e50 <inc_lock+0x118>)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	4413      	add	r3, r2
 8009d62:	3304      	adds	r3, #4
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d109      	bne.n	8009d82 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d6e:	4a38      	ldr	r2, [pc, #224]	@ (8009e50 <inc_lock+0x118>)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	4413      	add	r3, r2
 8009d76:	3308      	adds	r3, #8
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d006      	beq.n	8009d90 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d9dc      	bls.n	8009d48 <inc_lock+0x10>
 8009d8e:	e000      	b.n	8009d92 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d90:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d132      	bne.n	8009dfe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	e002      	b.n	8009da4 <inc_lock+0x6c>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d806      	bhi.n	8009db8 <inc_lock+0x80>
 8009daa:	4a29      	ldr	r2, [pc, #164]	@ (8009e50 <inc_lock+0x118>)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	4413      	add	r3, r2
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f2      	bne.n	8009d9e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d101      	bne.n	8009dc2 <inc_lock+0x8a>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e040      	b.n	8009e44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4922      	ldr	r1, [pc, #136]	@ (8009e50 <inc_lock+0x118>)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	440b      	add	r3, r1
 8009dce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	491e      	ldr	r1, [pc, #120]	@ (8009e50 <inc_lock+0x118>)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	440b      	add	r3, r1
 8009ddc:	3304      	adds	r3, #4
 8009dde:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	695a      	ldr	r2, [r3, #20]
 8009de4:	491a      	ldr	r1, [pc, #104]	@ (8009e50 <inc_lock+0x118>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	440b      	add	r3, r1
 8009dec:	3308      	adds	r3, #8
 8009dee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009df0:	4a17      	ldr	r2, [pc, #92]	@ (8009e50 <inc_lock+0x118>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	330c      	adds	r3, #12
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d009      	beq.n	8009e18 <inc_lock+0xe0>
 8009e04:	4a12      	ldr	r2, [pc, #72]	@ (8009e50 <inc_lock+0x118>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	4413      	add	r3, r2
 8009e0c:	330c      	adds	r3, #12
 8009e0e:	881b      	ldrh	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <inc_lock+0xe0>
 8009e14:	2300      	movs	r3, #0
 8009e16:	e015      	b.n	8009e44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d108      	bne.n	8009e30 <inc_lock+0xf8>
 8009e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8009e50 <inc_lock+0x118>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	011b      	lsls	r3, r3, #4
 8009e24:	4413      	add	r3, r2
 8009e26:	330c      	adds	r3, #12
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	e001      	b.n	8009e34 <inc_lock+0xfc>
 8009e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e34:	4906      	ldr	r1, [pc, #24]	@ (8009e50 <inc_lock+0x118>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	440b      	add	r3, r1
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3301      	adds	r3, #1
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	200005a8 	.word	0x200005a8

08009e54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	607b      	str	r3, [r7, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d825      	bhi.n	8009eb4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e68:	4a17      	ldr	r2, [pc, #92]	@ (8009ec8 <dec_lock+0x74>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	4413      	add	r3, r2
 8009e70:	330c      	adds	r3, #12
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e76:	89fb      	ldrh	r3, [r7, #14]
 8009e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e7c:	d101      	bne.n	8009e82 <dec_lock+0x2e>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e82:	89fb      	ldrh	r3, [r7, #14]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <dec_lock+0x3a>
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009ec8 <dec_lock+0x74>)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	4413      	add	r3, r2
 8009e96:	330c      	adds	r3, #12
 8009e98:	89fa      	ldrh	r2, [r7, #14]
 8009e9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e9c:	89fb      	ldrh	r3, [r7, #14]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d105      	bne.n	8009eae <dec_lock+0x5a>
 8009ea2:	4a09      	ldr	r2, [pc, #36]	@ (8009ec8 <dec_lock+0x74>)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	4413      	add	r3, r2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	737b      	strb	r3, [r7, #13]
 8009eb2:	e001      	b.n	8009eb8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009eb8:	7b7b      	ldrb	r3, [r7, #13]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	200005a8 	.word	0x200005a8

08009ecc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	e010      	b.n	8009efc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009eda:	4a0d      	ldr	r2, [pc, #52]	@ (8009f10 <clear_lock+0x44>)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	4413      	add	r3, r2
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d105      	bne.n	8009ef6 <clear_lock+0x2a>
 8009eea:	4a09      	ldr	r2, [pc, #36]	@ (8009f10 <clear_lock+0x44>)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	4413      	add	r3, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d9eb      	bls.n	8009eda <clear_lock+0xe>
	}
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	200005a8 	.word	0x200005a8

08009f14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	78db      	ldrb	r3, [r3, #3]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d034      	beq.n	8009f92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7858      	ldrb	r0, [r3, #1]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f38:	2301      	movs	r3, #1
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	f7ff fd40 	bl	80099c0 <disk_write>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	73fb      	strb	r3, [r7, #15]
 8009f4a:	e022      	b.n	8009f92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	1ad2      	subs	r2, r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d217      	bcs.n	8009f92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	789b      	ldrb	r3, [r3, #2]
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	e010      	b.n	8009f8c <sync_window+0x78>
					wsect += fs->fsize;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	697a      	ldr	r2, [r7, #20]
 8009f70:	4413      	add	r3, r2
 8009f72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7858      	ldrb	r0, [r3, #1]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f7e:	2301      	movs	r3, #1
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	f7ff fd1d 	bl	80099c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d8eb      	bhi.n	8009f6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d01b      	beq.n	8009fec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff ffad 	bl	8009f14 <sync_window>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d113      	bne.n	8009fec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	7858      	ldrb	r0, [r3, #1]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fce:	2301      	movs	r3, #1
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	f7ff fcd5 	bl	8009980 <disk_read>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7ff ff87 	bl	8009f14 <sync_window>
 800a006:	4603      	mov	r3, r0
 800a008:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d158      	bne.n	800a0c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b03      	cmp	r3, #3
 800a016:	d148      	bne.n	800a0aa <sync_fs+0xb2>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	791b      	ldrb	r3, [r3, #4]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d144      	bne.n	800a0aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	3330      	adds	r3, #48	@ 0x30
 800a024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a028:	2100      	movs	r1, #0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff fda9 	bl	8009b82 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3330      	adds	r3, #48	@ 0x30
 800a034:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a038:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7ff fd38 	bl	8009ab2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3330      	adds	r3, #48	@ 0x30
 800a046:	4921      	ldr	r1, [pc, #132]	@ (800a0cc <sync_fs+0xd4>)
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff fd4d 	bl	8009ae8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	3330      	adds	r3, #48	@ 0x30
 800a052:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a056:	491e      	ldr	r1, [pc, #120]	@ (800a0d0 <sync_fs+0xd8>)
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fd45 	bl	8009ae8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3330      	adds	r3, #48	@ 0x30
 800a062:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7ff fd3b 	bl	8009ae8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3330      	adds	r3, #48	@ 0x30
 800a076:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7ff fd31 	bl	8009ae8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	1c5a      	adds	r2, r3, #1
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	7858      	ldrb	r0, [r3, #1]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f7ff fc8e 	bl	80099c0 <disk_write>
			fs->fsi_flag = 0;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff fca4 	bl	8009a00 <disk_ioctl>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <sync_fs+0xca>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	41615252 	.word	0x41615252
 800a0d0:	61417272 	.word	0x61417272

0800a0d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	3b02      	subs	r3, #2
 800a0e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	3b02      	subs	r3, #2
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d301      	bcc.n	800a0f4 <clust2sect+0x20>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	e008      	b.n	800a106 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	895b      	ldrh	r3, [r3, #10]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	fb03 f202 	mul.w	r2, r3, r2
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a104:	4413      	add	r3, r2
}
 800a106:	4618      	mov	r0, r3
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b086      	sub	sp, #24
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d904      	bls.n	800a132 <get_fat+0x20>
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d302      	bcc.n	800a138 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a132:	2301      	movs	r3, #1
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	e08e      	b.n	800a256 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a138:	f04f 33ff 	mov.w	r3, #4294967295
 800a13c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b03      	cmp	r3, #3
 800a144:	d061      	beq.n	800a20a <get_fat+0xf8>
 800a146:	2b03      	cmp	r3, #3
 800a148:	dc7b      	bgt.n	800a242 <get_fat+0x130>
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d002      	beq.n	800a154 <get_fat+0x42>
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d041      	beq.n	800a1d6 <get_fat+0xc4>
 800a152:	e076      	b.n	800a242 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	6a1a      	ldr	r2, [r3, #32]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	0a5b      	lsrs	r3, r3, #9
 800a16a:	4413      	add	r3, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	6938      	ldr	r0, [r7, #16]
 800a170:	f7ff ff14 	bl	8009f9c <move_window>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d166      	bne.n	800a248 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	60fa      	str	r2, [r7, #12]
 800a180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4413      	add	r3, r2
 800a188:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a18c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	6a1a      	ldr	r2, [r3, #32]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	0a5b      	lsrs	r3, r3, #9
 800a196:	4413      	add	r3, r2
 800a198:	4619      	mov	r1, r3
 800a19a:	6938      	ldr	r0, [r7, #16]
 800a19c:	f7ff fefe 	bl	8009f9c <move_window>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d152      	bne.n	800a24c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <get_fat+0xba>
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	091b      	lsrs	r3, r3, #4
 800a1ca:	e002      	b.n	800a1d2 <get_fat+0xc0>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1d2:	617b      	str	r3, [r7, #20]
			break;
 800a1d4:	e03f      	b.n	800a256 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	6a1a      	ldr	r2, [r3, #32]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	0a1b      	lsrs	r3, r3, #8
 800a1de:	4413      	add	r3, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6938      	ldr	r0, [r7, #16]
 800a1e4:	f7ff feda 	bl	8009f9c <move_window>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d130      	bne.n	800a250 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a1fc:	4413      	add	r3, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff fc1c 	bl	8009a3c <ld_word>
 800a204:	4603      	mov	r3, r0
 800a206:	617b      	str	r3, [r7, #20]
			break;
 800a208:	e025      	b.n	800a256 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	6a1a      	ldr	r2, [r3, #32]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	09db      	lsrs	r3, r3, #7
 800a212:	4413      	add	r3, r2
 800a214:	4619      	mov	r1, r3
 800a216:	6938      	ldr	r0, [r7, #16]
 800a218:	f7ff fec0 	bl	8009f9c <move_window>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d118      	bne.n	800a254 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a230:	4413      	add	r3, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fc1a 	bl	8009a6c <ld_dword>
 800a238:	4603      	mov	r3, r0
 800a23a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a23e:	617b      	str	r3, [r7, #20]
			break;
 800a240:	e009      	b.n	800a256 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a242:	2301      	movs	r3, #1
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e006      	b.n	800a256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a248:	bf00      	nop
 800a24a:	e004      	b.n	800a256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a24c:	bf00      	nop
 800a24e:	e002      	b.n	800a256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a250:	bf00      	nop
 800a252:	e000      	b.n	800a256 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a254:	bf00      	nop
		}
	}

	return val;
 800a256:	697b      	ldr	r3, [r7, #20]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a260:	b590      	push	{r4, r7, lr}
 800a262:	b089      	sub	sp, #36	@ 0x24
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a26c:	2302      	movs	r3, #2
 800a26e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b01      	cmp	r3, #1
 800a274:	f240 80d9 	bls.w	800a42a <put_fat+0x1ca>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	429a      	cmp	r2, r3
 800a280:	f080 80d3 	bcs.w	800a42a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	f000 8096 	beq.w	800a3ba <put_fat+0x15a>
 800a28e:	2b03      	cmp	r3, #3
 800a290:	f300 80cb 	bgt.w	800a42a <put_fat+0x1ca>
 800a294:	2b01      	cmp	r3, #1
 800a296:	d002      	beq.n	800a29e <put_fat+0x3e>
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d06e      	beq.n	800a37a <put_fat+0x11a>
 800a29c:	e0c5      	b.n	800a42a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	61bb      	str	r3, [r7, #24]
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	085b      	lsrs	r3, r3, #1
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6a1a      	ldr	r2, [r3, #32]
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	0a5b      	lsrs	r3, r3, #9
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff fe6f 	bl	8009f9c <move_window>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2c2:	7ffb      	ldrb	r3, [r7, #31]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f040 80a9 	bne.w	800a41c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	61b9      	str	r1, [r7, #24]
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	4413      	add	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	f003 0301 	and.w	r3, r3, #1
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00d      	beq.n	800a304 <put_fat+0xa4>
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	f003 030f 	and.w	r3, r3, #15
 800a2f2:	b25a      	sxtb	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b25b      	sxtb	r3, r3
 800a300:	b2db      	uxtb	r3, r3
 800a302:	e001      	b.n	800a308 <put_fat+0xa8>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2201      	movs	r2, #1
 800a310:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1a      	ldr	r2, [r3, #32]
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	0a5b      	lsrs	r3, r3, #9
 800a31a:	4413      	add	r3, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f7ff fe3c 	bl	8009f9c <move_window>
 800a324:	4603      	mov	r3, r0
 800a326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a328:	7ffb      	ldrb	r3, [r7, #31]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d178      	bne.n	800a420 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	4413      	add	r3, r2
 800a33c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d003      	beq.n	800a350 <put_fat+0xf0>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	091b      	lsrs	r3, r3, #4
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	e00e      	b.n	800a36e <put_fat+0x10e>
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	b25b      	sxtb	r3, r3
 800a356:	f023 030f 	bic.w	r3, r3, #15
 800a35a:	b25a      	sxtb	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b25b      	sxtb	r3, r3
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	b25b      	sxtb	r3, r3
 800a368:	4313      	orrs	r3, r2
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	70da      	strb	r2, [r3, #3]
			break;
 800a378:	e057      	b.n	800a42a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1a      	ldr	r2, [r3, #32]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	4413      	add	r3, r2
 800a384:	4619      	mov	r1, r3
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fe08 	bl	8009f9c <move_window>
 800a38c:	4603      	mov	r3, r0
 800a38e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a390:	7ffb      	ldrb	r3, [r7, #31]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d146      	bne.n	800a424 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a3a4:	4413      	add	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	b292      	uxth	r2, r2
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff fb80 	bl	8009ab2 <st_word>
			fs->wflag = 1;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	70da      	strb	r2, [r3, #3]
			break;
 800a3b8:	e037      	b.n	800a42a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	09db      	lsrs	r3, r3, #7
 800a3c2:	4413      	add	r3, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fde8 	bl	8009f9c <move_window>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3d0:	7ffb      	ldrb	r3, [r7, #31]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d128      	bne.n	800a428 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a3ea:	4413      	add	r3, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fb3d 	bl	8009a6c <ld_dword>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a3f8:	4323      	orrs	r3, r4
 800a3fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a40a:	4413      	add	r3, r2
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fb6a 	bl	8009ae8 <st_dword>
			fs->wflag = 1;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	70da      	strb	r2, [r3, #3]
			break;
 800a41a:	e006      	b.n	800a42a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a41c:	bf00      	nop
 800a41e:	e004      	b.n	800a42a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a420:	bf00      	nop
 800a422:	e002      	b.n	800a42a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a424:	bf00      	nop
 800a426:	e000      	b.n	800a42a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a428:	bf00      	nop
		}
	}
	return res;
 800a42a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3724      	adds	r7, #36	@ 0x24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd90      	pop	{r4, r7, pc}

0800a434 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b088      	sub	sp, #32
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a440:	2300      	movs	r3, #0
 800a442:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d904      	bls.n	800a45a <remove_chain+0x26>
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	695b      	ldr	r3, [r3, #20]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	429a      	cmp	r2, r3
 800a458:	d301      	bcc.n	800a45e <remove_chain+0x2a>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e04b      	b.n	800a4f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00c      	beq.n	800a47e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a464:	f04f 32ff 	mov.w	r2, #4294967295
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	69b8      	ldr	r0, [r7, #24]
 800a46c:	f7ff fef8 	bl	800a260 <put_fat>
 800a470:	4603      	mov	r3, r0
 800a472:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a474:	7ffb      	ldrb	r3, [r7, #31]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <remove_chain+0x4a>
 800a47a:	7ffb      	ldrb	r3, [r7, #31]
 800a47c:	e03b      	b.n	800a4f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff fe46 	bl	800a112 <get_fat>
 800a486:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d031      	beq.n	800a4f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <remove_chain+0x64>
 800a494:	2302      	movs	r3, #2
 800a496:	e02e      	b.n	800a4f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49e:	d101      	bne.n	800a4a4 <remove_chain+0x70>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e028      	b.n	800a4f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	69b8      	ldr	r0, [r7, #24]
 800a4aa:	f7ff fed9 	bl	800a260 <put_fat>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a4b2:	7ffb      	ldrb	r3, [r7, #31]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <remove_chain+0x88>
 800a4b8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ba:	e01c      	b.n	800a4f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	691a      	ldr	r2, [r3, #16]
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	3b02      	subs	r3, #2
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d20b      	bcs.n	800a4e2 <remove_chain+0xae>
			fs->free_clst++;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	791b      	ldrb	r3, [r3, #4]
 800a4d8:	f043 0301 	orr.w	r3, r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d3c6      	bcc.n	800a47e <remove_chain+0x4a>
 800a4f0:	e000      	b.n	800a4f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a4f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b088      	sub	sp, #32
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10d      	bne.n	800a530 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d004      	beq.n	800a52a <create_chain+0x2c>
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	695b      	ldr	r3, [r3, #20]
 800a524:	69ba      	ldr	r2, [r7, #24]
 800a526:	429a      	cmp	r2, r3
 800a528:	d31b      	bcc.n	800a562 <create_chain+0x64>
 800a52a:	2301      	movs	r3, #1
 800a52c:	61bb      	str	r3, [r7, #24]
 800a52e:	e018      	b.n	800a562 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a530:	6839      	ldr	r1, [r7, #0]
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7ff fded 	bl	800a112 <get_fat>
 800a538:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d801      	bhi.n	800a544 <create_chain+0x46>
 800a540:	2301      	movs	r3, #1
 800a542:	e070      	b.n	800a626 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54a:	d101      	bne.n	800a550 <create_chain+0x52>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e06a      	b.n	800a626 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	429a      	cmp	r2, r3
 800a558:	d201      	bcs.n	800a55e <create_chain+0x60>
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	e063      	b.n	800a626 <create_chain+0x128>
		scl = clst;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	3301      	adds	r3, #1
 800a56a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	429a      	cmp	r2, r3
 800a574:	d307      	bcc.n	800a586 <create_chain+0x88>
				ncl = 2;
 800a576:	2302      	movs	r3, #2
 800a578:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d901      	bls.n	800a586 <create_chain+0x88>
 800a582:	2300      	movs	r3, #0
 800a584:	e04f      	b.n	800a626 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a586:	69f9      	ldr	r1, [r7, #28]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fdc2 	bl	800a112 <get_fat>
 800a58e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00e      	beq.n	800a5b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d003      	beq.n	800a5a4 <create_chain+0xa6>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a2:	d101      	bne.n	800a5a8 <create_chain+0xaa>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	e03e      	b.n	800a626 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5a8:	69fa      	ldr	r2, [r7, #28]
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d1da      	bne.n	800a566 <create_chain+0x68>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e038      	b.n	800a626 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a5b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ba:	69f9      	ldr	r1, [r7, #28]
 800a5bc:	6938      	ldr	r0, [r7, #16]
 800a5be:	f7ff fe4f 	bl	800a260 <put_fat>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <create_chain+0xe2>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d006      	beq.n	800a5e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a5d2:	69fa      	ldr	r2, [r7, #28]
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6938      	ldr	r0, [r7, #16]
 800a5d8:	f7ff fe42 	bl	800a260 <put_fat>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d116      	bne.n	800a614 <create_chain+0x116>
		fs->last_clst = ncl;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	691a      	ldr	r2, [r3, #16]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	695b      	ldr	r3, [r3, #20]
 800a5f4:	3b02      	subs	r3, #2
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d804      	bhi.n	800a604 <create_chain+0x106>
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	1e5a      	subs	r2, r3, #1
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	791b      	ldrb	r3, [r3, #4]
 800a608:	f043 0301 	orr.w	r3, r3, #1
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	711a      	strb	r2, [r3, #4]
 800a612:	e007      	b.n	800a624 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d102      	bne.n	800a620 <create_chain+0x122>
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295
 800a61e:	e000      	b.n	800a622 <create_chain+0x124>
 800a620:	2301      	movs	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a624:	69fb      	ldr	r3, [r7, #28]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a62e:	b480      	push	{r7}
 800a630:	b087      	sub	sp, #28
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a642:	3304      	adds	r3, #4
 800a644:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	0a5b      	lsrs	r3, r3, #9
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	8952      	ldrh	r2, [r2, #10]
 800a64e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a652:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	1d1a      	adds	r2, r3, #4
 800a658:	613a      	str	r2, [r7, #16]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <clmt_clust+0x3a>
 800a664:	2300      	movs	r3, #0
 800a666:	e010      	b.n	800a68a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d307      	bcc.n	800a680 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	617b      	str	r3, [r7, #20]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	3304      	adds	r3, #4
 800a67c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a67e:	e7e9      	b.n	800a654 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a680:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	4413      	add	r3, r2
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b086      	sub	sp, #24
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6ac:	d204      	bcs.n	800a6b8 <dir_sdi+0x22>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	f003 031f 	and.w	r3, r3, #31
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e063      	b.n	800a784 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <dir_sdi+0x46>
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d902      	bls.n	800a6dc <dir_sdi+0x46>
		clst = fs->dirbase;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10c      	bne.n	800a6fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	095b      	lsrs	r3, r3, #5
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	8912      	ldrh	r2, [r2, #8]
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d301      	bcc.n	800a6f2 <dir_sdi+0x5c>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e048      	b.n	800a784 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	61da      	str	r2, [r3, #28]
 800a6fa:	e029      	b.n	800a750 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	895b      	ldrh	r3, [r3, #10]
 800a700:	025b      	lsls	r3, r3, #9
 800a702:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a704:	e019      	b.n	800a73a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6979      	ldr	r1, [r7, #20]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff fd01 	bl	800a112 <get_fat>
 800a710:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a718:	d101      	bne.n	800a71e <dir_sdi+0x88>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e032      	b.n	800a784 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d904      	bls.n	800a72e <dir_sdi+0x98>
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	695b      	ldr	r3, [r3, #20]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d301      	bcc.n	800a732 <dir_sdi+0x9c>
 800a72e:	2302      	movs	r3, #2
 800a730:	e028      	b.n	800a784 <dir_sdi+0xee>
			ofs -= csz;
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d2e1      	bcs.n	800a706 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a742:	6979      	ldr	r1, [r7, #20]
 800a744:	6938      	ldr	r0, [r7, #16]
 800a746:	f7ff fcc5 	bl	800a0d4 <clust2sect>
 800a74a:	4602      	mov	r2, r0
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	69db      	ldr	r3, [r3, #28]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <dir_sdi+0xcc>
 800a75e:	2302      	movs	r3, #2
 800a760:	e010      	b.n	800a784 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	69da      	ldr	r2, [r3, #28]
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	0a5b      	lsrs	r3, r3, #9
 800a76a:	441a      	add	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77c:	441a      	add	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3718      	adds	r7, #24
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	3320      	adds	r3, #32
 800a7a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <dir_next+0x28>
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7b2:	d301      	bcc.n	800a7b8 <dir_next+0x2c>
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	e0aa      	b.n	800a90e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f040 8098 	bne.w	800a8f4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	1c5a      	adds	r2, r3, #1
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	095b      	lsrs	r3, r3, #5
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	8912      	ldrh	r2, [r2, #8]
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	f0c0 8088 	bcc.w	800a8f4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	61da      	str	r2, [r3, #28]
 800a7ea:	2304      	movs	r3, #4
 800a7ec:	e08f      	b.n	800a90e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	0a5b      	lsrs	r3, r3, #9
 800a7f2:	68fa      	ldr	r2, [r7, #12]
 800a7f4:	8952      	ldrh	r2, [r2, #10]
 800a7f6:	3a01      	subs	r2, #1
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d17a      	bne.n	800a8f4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	4619      	mov	r1, r3
 800a806:	4610      	mov	r0, r2
 800a808:	f7ff fc83 	bl	800a112 <get_fat>
 800a80c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d801      	bhi.n	800a818 <dir_next+0x8c>
 800a814:	2302      	movs	r3, #2
 800a816:	e07a      	b.n	800a90e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81e:	d101      	bne.n	800a824 <dir_next+0x98>
 800a820:	2301      	movs	r3, #1
 800a822:	e074      	b.n	800a90e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	695b      	ldr	r3, [r3, #20]
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d358      	bcc.n	800a8e0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d104      	bne.n	800a83e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	61da      	str	r2, [r3, #28]
 800a83a:	2304      	movs	r3, #4
 800a83c:	e067      	b.n	800a90e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	4619      	mov	r1, r3
 800a846:	4610      	mov	r0, r2
 800a848:	f7ff fe59 	bl	800a4fe <create_chain>
 800a84c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <dir_next+0xcc>
 800a854:	2307      	movs	r3, #7
 800a856:	e05a      	b.n	800a90e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d101      	bne.n	800a862 <dir_next+0xd6>
 800a85e:	2302      	movs	r3, #2
 800a860:	e055      	b.n	800a90e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d101      	bne.n	800a86e <dir_next+0xe2>
 800a86a:	2301      	movs	r3, #1
 800a86c:	e04f      	b.n	800a90e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f7ff fb50 	bl	8009f14 <sync_window>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <dir_next+0xf2>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e047      	b.n	800a90e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3330      	adds	r3, #48	@ 0x30
 800a882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f7ff f97a 	bl	8009b82 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a88e:	2300      	movs	r3, #0
 800a890:	613b      	str	r3, [r7, #16]
 800a892:	6979      	ldr	r1, [r7, #20]
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fc1d 	bl	800a0d4 <clust2sect>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a8a0:	e012      	b.n	800a8c8 <dir_next+0x13c>
						fs->wflag = 1;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f7ff fb33 	bl	8009f14 <sync_window>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <dir_next+0x12c>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e02a      	b.n	800a90e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	895b      	ldrh	r3, [r3, #10]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d3e6      	bcc.n	800a8a2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a8e6:	6979      	ldr	r1, [r7, #20]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7ff fbf3 	bl	800a0d4 <clust2sect>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a906:	441a      	add	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b086      	sub	sp, #24
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a926:	2100      	movs	r1, #0
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff feb4 	bl	800a696 <dir_sdi>
 800a92e:	4603      	mov	r3, r0
 800a930:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d12b      	bne.n	800a990 <dir_alloc+0x7a>
		n = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	69db      	ldr	r3, [r3, #28]
 800a940:	4619      	mov	r1, r3
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f7ff fb2a 	bl	8009f9c <move_window>
 800a948:	4603      	mov	r3, r0
 800a94a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d11d      	bne.n	800a98e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6a1b      	ldr	r3, [r3, #32]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2be5      	cmp	r3, #229	@ 0xe5
 800a95a:	d004      	beq.n	800a966 <dir_alloc+0x50>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d107      	bne.n	800a976 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	3301      	adds	r3, #1
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	429a      	cmp	r2, r3
 800a972:	d102      	bne.n	800a97a <dir_alloc+0x64>
 800a974:	e00c      	b.n	800a990 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a976:	2300      	movs	r3, #0
 800a978:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a97a:	2101      	movs	r1, #1
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f7ff ff05 	bl	800a78c <dir_next>
 800a982:	4603      	mov	r3, r0
 800a984:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a986:	7dfb      	ldrb	r3, [r7, #23]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0d7      	beq.n	800a93c <dir_alloc+0x26>
 800a98c:	e000      	b.n	800a990 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a98e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	2b04      	cmp	r3, #4
 800a994:	d101      	bne.n	800a99a <dir_alloc+0x84>
 800a996:	2307      	movs	r3, #7
 800a998:	75fb      	strb	r3, [r7, #23]
	return res;
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3718      	adds	r7, #24
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	331a      	adds	r3, #26
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff f842 	bl	8009a3c <ld_word>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d109      	bne.n	800a9d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	3314      	adds	r3, #20
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff f837 	bl	8009a3c <ld_word>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	331a      	adds	r3, #26
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	b292      	uxth	r2, r2
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff f85a 	bl	8009ab2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d109      	bne.n	800aa1a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f103 0214 	add.w	r2, r3, #20
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	0c1b      	lsrs	r3, r3, #16
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7ff f84c 	bl	8009ab2 <st_word>
	}
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b086      	sub	sp, #24
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800aa30:	2100      	movs	r1, #0
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f7ff fe2f 	bl	800a696 <dir_sdi>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <dir_find+0x24>
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
 800aa44:	e03e      	b.n	800aac4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6938      	ldr	r0, [r7, #16]
 800aa4e:	f7ff faa5 	bl	8009f9c <move_window>
 800aa52:	4603      	mov	r3, r0
 800aa54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d12f      	bne.n	800aabc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d102      	bne.n	800aa70 <dir_find+0x4e>
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	75fb      	strb	r3, [r7, #23]
 800aa6e:	e028      	b.n	800aac2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	330b      	adds	r3, #11
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	330b      	adds	r3, #11
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f003 0308 	and.w	r3, r3, #8
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10a      	bne.n	800aaa8 <dir_find+0x86>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a18      	ldr	r0, [r3, #32]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3324      	adds	r3, #36	@ 0x24
 800aa9a:	220b      	movs	r2, #11
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	f7ff f88b 	bl	8009bb8 <mem_cmp>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7ff fe6e 	bl	800a78c <dir_next>
 800aab0:	4603      	mov	r3, r0
 800aab2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aab4:	7dfb      	ldrb	r3, [r7, #23]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0c5      	beq.n	800aa46 <dir_find+0x24>
 800aaba:	e002      	b.n	800aac2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800aabc:	bf00      	nop
 800aabe:	e000      	b.n	800aac2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800aac0:	bf00      	nop

	return res;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aada:	2101      	movs	r1, #1
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff ff1a 	bl	800a916 <dir_alloc>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d11c      	bne.n	800ab26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	68b8      	ldr	r0, [r7, #8]
 800aaf4:	f7ff fa52 	bl	8009f9c <move_window>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d111      	bne.n	800ab26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	2220      	movs	r2, #32
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff f839 	bl	8009b82 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a18      	ldr	r0, [r3, #32]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3324      	adds	r3, #36	@ 0x24
 800ab18:	220b      	movs	r2, #11
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	f7ff f810 	bl	8009b40 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	2201      	movs	r2, #1
 800ab24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60fb      	str	r3, [r7, #12]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3324      	adds	r3, #36	@ 0x24
 800ab44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab46:	220b      	movs	r2, #11
 800ab48:	2120      	movs	r1, #32
 800ab4a:	68b8      	ldr	r0, [r7, #8]
 800ab4c:	f7ff f819 	bl	8009b82 <mem_set>
	si = i = 0; ni = 8;
 800ab50:	2300      	movs	r3, #0
 800ab52:	613b      	str	r3, [r7, #16]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	61fb      	str	r3, [r7, #28]
 800ab58:	2308      	movs	r3, #8
 800ab5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	61fa      	str	r2, [r7, #28]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab6a:	7efb      	ldrb	r3, [r7, #27]
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d94e      	bls.n	800ac0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ab70:	7efb      	ldrb	r3, [r7, #27]
 800ab72:	2b2f      	cmp	r3, #47	@ 0x2f
 800ab74:	d006      	beq.n	800ab84 <create_name+0x54>
 800ab76:	7efb      	ldrb	r3, [r7, #27]
 800ab78:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab7a:	d110      	bne.n	800ab9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ab7c:	e002      	b.n	800ab84 <create_name+0x54>
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	3301      	adds	r3, #1
 800ab82:	61fb      	str	r3, [r7, #28]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ab8e:	d0f6      	beq.n	800ab7e <create_name+0x4e>
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	4413      	add	r3, r2
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b5c      	cmp	r3, #92	@ 0x5c
 800ab9a:	d0f0      	beq.n	800ab7e <create_name+0x4e>
			break;
 800ab9c:	e038      	b.n	800ac10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ab9e:	7efb      	ldrb	r3, [r7, #27]
 800aba0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aba2:	d003      	beq.n	800abac <create_name+0x7c>
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d30c      	bcc.n	800abc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2b0b      	cmp	r3, #11
 800abb0:	d002      	beq.n	800abb8 <create_name+0x88>
 800abb2:	7efb      	ldrb	r3, [r7, #27]
 800abb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800abb6:	d001      	beq.n	800abbc <create_name+0x8c>
 800abb8:	2306      	movs	r3, #6
 800abba:	e044      	b.n	800ac46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800abbc:	2308      	movs	r3, #8
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	230b      	movs	r3, #11
 800abc2:	617b      	str	r3, [r7, #20]
			continue;
 800abc4:	e022      	b.n	800ac0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800abc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	da04      	bge.n	800abd8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800abce:	7efb      	ldrb	r3, [r7, #27]
 800abd0:	3b80      	subs	r3, #128	@ 0x80
 800abd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ac50 <create_name+0x120>)
 800abd4:	5cd3      	ldrb	r3, [r2, r3]
 800abd6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800abd8:	7efb      	ldrb	r3, [r7, #27]
 800abda:	4619      	mov	r1, r3
 800abdc:	481d      	ldr	r0, [pc, #116]	@ (800ac54 <create_name+0x124>)
 800abde:	f7ff f812 	bl	8009c06 <chk_chr>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <create_name+0xbc>
 800abe8:	2306      	movs	r3, #6
 800abea:	e02c      	b.n	800ac46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800abec:	7efb      	ldrb	r3, [r7, #27]
 800abee:	2b60      	cmp	r3, #96	@ 0x60
 800abf0:	d905      	bls.n	800abfe <create_name+0xce>
 800abf2:	7efb      	ldrb	r3, [r7, #27]
 800abf4:	2b7a      	cmp	r3, #122	@ 0x7a
 800abf6:	d802      	bhi.n	800abfe <create_name+0xce>
 800abf8:	7efb      	ldrb	r3, [r7, #27]
 800abfa:	3b20      	subs	r3, #32
 800abfc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	613a      	str	r2, [r7, #16]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	4413      	add	r3, r2
 800ac08:	7efa      	ldrb	r2, [r7, #27]
 800ac0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ac0c:	e7a6      	b.n	800ab5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ac0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	441a      	add	r2, r3
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d101      	bne.n	800ac24 <create_name+0xf4>
 800ac20:	2306      	movs	r3, #6
 800ac22:	e010      	b.n	800ac46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2be5      	cmp	r3, #229	@ 0xe5
 800ac2a:	d102      	bne.n	800ac32 <create_name+0x102>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2205      	movs	r2, #5
 800ac30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ac32:	7efb      	ldrb	r3, [r7, #27]
 800ac34:	2b20      	cmp	r3, #32
 800ac36:	d801      	bhi.n	800ac3c <create_name+0x10c>
 800ac38:	2204      	movs	r2, #4
 800ac3a:	e000      	b.n	800ac3e <create_name+0x10e>
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	330b      	adds	r3, #11
 800ac42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3720      	adds	r7, #32
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800d538 	.word	0x0800d538
 800ac54:	0800c760 	.word	0x0800c760

0800ac58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac6c:	e002      	b.n	800ac74 <follow_path+0x1c>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	3301      	adds	r3, #1
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b2f      	cmp	r3, #47	@ 0x2f
 800ac7a:	d0f8      	beq.n	800ac6e <follow_path+0x16>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b5c      	cmp	r3, #92	@ 0x5c
 800ac82:	d0f4      	beq.n	800ac6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2200      	movs	r2, #0
 800ac88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b1f      	cmp	r3, #31
 800ac90:	d80a      	bhi.n	800aca8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2280      	movs	r2, #128	@ 0x80
 800ac96:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff fcfa 	bl	800a696 <dir_sdi>
 800aca2:	4603      	mov	r3, r0
 800aca4:	75fb      	strb	r3, [r7, #23]
 800aca6:	e043      	b.n	800ad30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aca8:	463b      	mov	r3, r7
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7ff ff3f 	bl	800ab30 <create_name>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d134      	bne.n	800ad26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7ff feb0 	bl	800aa22 <dir_find>
 800acc2:	4603      	mov	r3, r0
 800acc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800accc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	2b04      	cmp	r3, #4
 800acd8:	d127      	bne.n	800ad2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800acda:	7afb      	ldrb	r3, [r7, #11]
 800acdc:	f003 0304 	and.w	r3, r3, #4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d122      	bne.n	800ad2a <follow_path+0xd2>
 800ace4:	2305      	movs	r3, #5
 800ace6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ace8:	e01f      	b.n	800ad2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	f003 0304 	and.w	r3, r3, #4
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11c      	bne.n	800ad2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	799b      	ldrb	r3, [r3, #6]
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d102      	bne.n	800ad06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad00:	2305      	movs	r3, #5
 800ad02:	75fb      	strb	r3, [r7, #23]
 800ad04:	e014      	b.n	800ad30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad14:	4413      	add	r3, r2
 800ad16:	4619      	mov	r1, r3
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff fe43 	bl	800a9a4 <ld_clust>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad24:	e7c0      	b.n	800aca8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ad26:	bf00      	nop
 800ad28:	e002      	b.n	800ad30 <follow_path+0xd8>
				break;
 800ad2a:	bf00      	nop
 800ad2c:	e000      	b.n	800ad30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad2e:	bf00      	nop
			}
		}
	}

	return res;
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b087      	sub	sp, #28
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad42:	f04f 33ff 	mov.w	r3, #4294967295
 800ad46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d031      	beq.n	800adb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	e002      	b.n	800ad5e <get_ldnumber+0x24>
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	2b20      	cmp	r3, #32
 800ad64:	d903      	bls.n	800ad6e <get_ldnumber+0x34>
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ad6c:	d1f4      	bne.n	800ad58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	2b3a      	cmp	r3, #58	@ 0x3a
 800ad74:	d11c      	bne.n	800adb0 <get_ldnumber+0x76>
			tp = *path;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	1c5a      	adds	r2, r3, #1
 800ad80:	60fa      	str	r2, [r7, #12]
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	3b30      	subs	r3, #48	@ 0x30
 800ad86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b09      	cmp	r3, #9
 800ad8c:	d80e      	bhi.n	800adac <get_ldnumber+0x72>
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d10a      	bne.n	800adac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d107      	bne.n	800adac <get_ldnumber+0x72>
					vol = (int)i;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	3301      	adds	r3, #1
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	e002      	b.n	800adb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800adb0:	2300      	movs	r3, #0
 800adb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800adb4:	693b      	ldr	r3, [r7, #16]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	70da      	strb	r2, [r3, #3]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff f8dc 	bl	8009f9c <move_window>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <check_fs+0x2a>
 800adea:	2304      	movs	r3, #4
 800adec:	e038      	b.n	800ae60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	3330      	adds	r3, #48	@ 0x30
 800adf2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe fe20 	bl	8009a3c <ld_word>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d001      	beq.n	800ae0c <check_fs+0x48>
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e029      	b.n	800ae60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae12:	2be9      	cmp	r3, #233	@ 0xe9
 800ae14:	d009      	beq.n	800ae2a <check_fs+0x66>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae1c:	2beb      	cmp	r3, #235	@ 0xeb
 800ae1e:	d11e      	bne.n	800ae5e <check_fs+0x9a>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ae26:	2b90      	cmp	r3, #144	@ 0x90
 800ae28:	d119      	bne.n	800ae5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3330      	adds	r3, #48	@ 0x30
 800ae2e:	3336      	adds	r3, #54	@ 0x36
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fe fe1b 	bl	8009a6c <ld_dword>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae68 <check_fs+0xa4>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d101      	bne.n	800ae46 <check_fs+0x82>
 800ae42:	2300      	movs	r3, #0
 800ae44:	e00c      	b.n	800ae60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3330      	adds	r3, #48	@ 0x30
 800ae4a:	3352      	adds	r3, #82	@ 0x52
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe fe0d 	bl	8009a6c <ld_dword>
 800ae52:	4603      	mov	r3, r0
 800ae54:	4a05      	ldr	r2, [pc, #20]	@ (800ae6c <check_fs+0xa8>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d101      	bne.n	800ae5e <check_fs+0x9a>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e000      	b.n	800ae60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae5e:	2302      	movs	r3, #2
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	00544146 	.word	0x00544146
 800ae6c:	33544146 	.word	0x33544146

0800ae70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b096      	sub	sp, #88	@ 0x58
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7ff ff58 	bl	800ad3a <get_ldnumber>
 800ae8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	da01      	bge.n	800ae96 <find_volume+0x26>
 800ae92:	230b      	movs	r3, #11
 800ae94:	e22d      	b.n	800b2f2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ae96:	4aa1      	ldr	r2, [pc, #644]	@ (800b11c <find_volume+0x2ac>)
 800ae98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <find_volume+0x3a>
 800aea6:	230c      	movs	r3, #12
 800aea8:	e223      	b.n	800b2f2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aeae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	f023 0301 	bic.w	r3, r3, #1
 800aeb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d01a      	beq.n	800aef6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fe fd19 	bl	80098fc <disk_status>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aed0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10c      	bne.n	800aef6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800aedc:	79fb      	ldrb	r3, [r7, #7]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d007      	beq.n	800aef2 <find_volume+0x82>
 800aee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800aee6:	f003 0304 	and.w	r3, r3, #4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800aeee:	230a      	movs	r3, #10
 800aef0:	e1ff      	b.n	800b2f2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800aef2:	2300      	movs	r3, #0
 800aef4:	e1fd      	b.n	800b2f2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aefc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7fe fd11 	bl	8009930 <disk_initialize>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af20:	2303      	movs	r3, #3
 800af22:	e1e6      	b.n	800b2f2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af24:	79fb      	ldrb	r3, [r7, #7]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <find_volume+0xca>
 800af2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af2e:	f003 0304 	and.w	r3, r3, #4
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af36:	230a      	movs	r3, #10
 800af38:	e1db      	b.n	800b2f2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800af3a:	2300      	movs	r3, #0
 800af3c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800af3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800af40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af42:	f7ff ff3f 	bl	800adc4 <check_fs>
 800af46:	4603      	mov	r3, r0
 800af48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800af4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800af50:	2b02      	cmp	r3, #2
 800af52:	d149      	bne.n	800afe8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af54:	2300      	movs	r3, #0
 800af56:	643b      	str	r3, [r7, #64]	@ 0x40
 800af58:	e01e      	b.n	800af98 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800af5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800af60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800af68:	4413      	add	r3, r2
 800af6a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	3304      	adds	r3, #4
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d006      	beq.n	800af84 <find_volume+0x114>
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	3308      	adds	r3, #8
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fd76 	bl	8009a6c <ld_dword>
 800af80:	4602      	mov	r2, r0
 800af82:	e000      	b.n	800af86 <find_volume+0x116>
 800af84:	2200      	movs	r2, #0
 800af86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	3358      	adds	r3, #88	@ 0x58
 800af8c:	443b      	add	r3, r7
 800af8e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800af92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af94:	3301      	adds	r3, #1
 800af96:	643b      	str	r3, [r7, #64]	@ 0x40
 800af98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d9dd      	bls.n	800af5a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800af9e:	2300      	movs	r3, #0
 800afa0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800afa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <find_volume+0x13e>
 800afa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afaa:	3b01      	subs	r3, #1
 800afac:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800afae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	3358      	adds	r3, #88	@ 0x58
 800afb4:	443b      	add	r3, r7
 800afb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800afba:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800afbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <find_volume+0x15e>
 800afc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800afc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800afc6:	f7ff fefd 	bl	800adc4 <check_fs>
 800afca:	4603      	mov	r3, r0
 800afcc:	e000      	b.n	800afd0 <find_volume+0x160>
 800afce:	2303      	movs	r3, #3
 800afd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800afd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d905      	bls.n	800afe8 <find_volume+0x178>
 800afdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afde:	3301      	adds	r3, #1
 800afe0:	643b      	str	r3, [r7, #64]	@ 0x40
 800afe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d9e2      	bls.n	800afae <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afec:	2b04      	cmp	r3, #4
 800afee:	d101      	bne.n	800aff4 <find_volume+0x184>
 800aff0:	2301      	movs	r3, #1
 800aff2:	e17e      	b.n	800b2f2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800aff4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d901      	bls.n	800b000 <find_volume+0x190>
 800affc:	230d      	movs	r3, #13
 800affe:	e178      	b.n	800b2f2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b002:	3330      	adds	r3, #48	@ 0x30
 800b004:	330b      	adds	r3, #11
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fd18 	bl	8009a3c <ld_word>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b012:	d001      	beq.n	800b018 <find_volume+0x1a8>
 800b014:	230d      	movs	r3, #13
 800b016:	e16c      	b.n	800b2f2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01a:	3330      	adds	r3, #48	@ 0x30
 800b01c:	3316      	adds	r3, #22
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe fd0c 	bl	8009a3c <ld_word>
 800b024:	4603      	mov	r3, r0
 800b026:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <find_volume+0x1cc>
 800b02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b030:	3330      	adds	r3, #48	@ 0x30
 800b032:	3324      	adds	r3, #36	@ 0x24
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fd19 	bl	8009a6c <ld_dword>
 800b03a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b040:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b044:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04e:	789b      	ldrb	r3, [r3, #2]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d005      	beq.n	800b060 <find_volume+0x1f0>
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	789b      	ldrb	r3, [r3, #2]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d001      	beq.n	800b060 <find_volume+0x1f0>
 800b05c:	230d      	movs	r3, #13
 800b05e:	e148      	b.n	800b2f2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b062:	789b      	ldrb	r3, [r3, #2]
 800b064:	461a      	mov	r2, r3
 800b066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b068:	fb02 f303 	mul.w	r3, r2, r3
 800b06c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b074:	461a      	mov	r2, r3
 800b076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b078:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07c:	895b      	ldrh	r3, [r3, #10]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d008      	beq.n	800b094 <find_volume+0x224>
 800b082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b084:	895b      	ldrh	r3, [r3, #10]
 800b086:	461a      	mov	r2, r3
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	895b      	ldrh	r3, [r3, #10]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	4013      	ands	r3, r2
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <find_volume+0x228>
 800b094:	230d      	movs	r3, #13
 800b096:	e12c      	b.n	800b2f2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	3330      	adds	r3, #48	@ 0x30
 800b09c:	3311      	adds	r3, #17
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7fe fccc 	bl	8009a3c <ld_word>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ae:	891b      	ldrh	r3, [r3, #8]
 800b0b0:	f003 030f 	and.w	r3, r3, #15
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <find_volume+0x24e>
 800b0ba:	230d      	movs	r3, #13
 800b0bc:	e119      	b.n	800b2f2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	3330      	adds	r3, #48	@ 0x30
 800b0c2:	3313      	adds	r3, #19
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fe fcb9 	bl	8009a3c <ld_word>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b0ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <find_volume+0x272>
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d6:	3330      	adds	r3, #48	@ 0x30
 800b0d8:	3320      	adds	r3, #32
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fcc6 	bl	8009a6c <ld_dword>
 800b0e0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	3330      	adds	r3, #48	@ 0x30
 800b0e6:	330e      	adds	r3, #14
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7fe fca7 	bl	8009a3c <ld_word>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b0f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <find_volume+0x28c>
 800b0f8:	230d      	movs	r3, #13
 800b0fa:	e0fa      	b.n	800b2f2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b0fc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b100:	4413      	add	r3, r2
 800b102:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b104:	8912      	ldrh	r2, [r2, #8]
 800b106:	0912      	lsrs	r2, r2, #4
 800b108:	b292      	uxth	r2, r2
 800b10a:	4413      	add	r3, r2
 800b10c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b10e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b112:	429a      	cmp	r2, r3
 800b114:	d204      	bcs.n	800b120 <find_volume+0x2b0>
 800b116:	230d      	movs	r3, #13
 800b118:	e0eb      	b.n	800b2f2 <find_volume+0x482>
 800b11a:	bf00      	nop
 800b11c:	200005a0 	.word	0x200005a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b124:	1ad3      	subs	r3, r2, r3
 800b126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b128:	8952      	ldrh	r2, [r2, #10]
 800b12a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b12e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <find_volume+0x2ca>
 800b136:	230d      	movs	r3, #13
 800b138:	e0db      	b.n	800b2f2 <find_volume+0x482>
		fmt = FS_FAT32;
 800b13a:	2303      	movs	r3, #3
 800b13c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b142:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b146:	4293      	cmp	r3, r2
 800b148:	d802      	bhi.n	800b150 <find_volume+0x2e0>
 800b14a:	2302      	movs	r3, #2
 800b14c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b156:	4293      	cmp	r3, r2
 800b158:	d802      	bhi.n	800b160 <find_volume+0x2f0>
 800b15a:	2301      	movs	r3, #1
 800b15c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b162:	1c9a      	adds	r2, r3, #2
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b16c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b16e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b172:	441a      	add	r2, r3
 800b174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b176:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b178:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17c:	441a      	add	r2, r3
 800b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b180:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b182:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b186:	2b03      	cmp	r3, #3
 800b188:	d11e      	bne.n	800b1c8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	3330      	adds	r3, #48	@ 0x30
 800b18e:	332a      	adds	r3, #42	@ 0x2a
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe fc53 	bl	8009a3c <ld_word>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <find_volume+0x330>
 800b19c:	230d      	movs	r3, #13
 800b19e:	e0a8      	b.n	800b2f2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	891b      	ldrh	r3, [r3, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <find_volume+0x33c>
 800b1a8:	230d      	movs	r3, #13
 800b1aa:	e0a2      	b.n	800b2f2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ae:	3330      	adds	r3, #48	@ 0x30
 800b1b0:	332c      	adds	r3, #44	@ 0x2c
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fc5a 	bl	8009a6c <ld_dword>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1bc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1c6:	e01f      	b.n	800b208 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ca:	891b      	ldrh	r3, [r3, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <find_volume+0x364>
 800b1d0:	230d      	movs	r3, #13
 800b1d2:	e08e      	b.n	800b2f2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d6:	6a1a      	ldr	r2, [r3, #32]
 800b1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1da:	441a      	add	r2, r3
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1de:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b1e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d103      	bne.n	800b1f0 <find_volume+0x380>
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	e00a      	b.n	800b206 <find_volume+0x396>
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f2:	695a      	ldr	r2, [r3, #20]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	4413      	add	r3, r2
 800b1fa:	085a      	lsrs	r2, r3, #1
 800b1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b206:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b20e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b212:	0a5b      	lsrs	r3, r3, #9
 800b214:	429a      	cmp	r2, r3
 800b216:	d201      	bcs.n	800b21c <find_volume+0x3ac>
 800b218:	230d      	movs	r3, #13
 800b21a:	e06a      	b.n	800b2f2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21e:	f04f 32ff 	mov.w	r2, #4294967295
 800b222:	611a      	str	r2, [r3, #16]
 800b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b226:	691a      	ldr	r2, [r3, #16]
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	2280      	movs	r2, #128	@ 0x80
 800b230:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b232:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b236:	2b03      	cmp	r3, #3
 800b238:	d149      	bne.n	800b2ce <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	3330      	adds	r3, #48	@ 0x30
 800b23e:	3330      	adds	r3, #48	@ 0x30
 800b240:	4618      	mov	r0, r3
 800b242:	f7fe fbfb 	bl	8009a3c <ld_word>
 800b246:	4603      	mov	r3, r0
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d140      	bne.n	800b2ce <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b24c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b24e:	3301      	adds	r3, #1
 800b250:	4619      	mov	r1, r3
 800b252:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b254:	f7fe fea2 	bl	8009f9c <move_window>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d137      	bne.n	800b2ce <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	2200      	movs	r2, #0
 800b262:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b266:	3330      	adds	r3, #48	@ 0x30
 800b268:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fbe5 	bl	8009a3c <ld_word>
 800b272:	4603      	mov	r3, r0
 800b274:	461a      	mov	r2, r3
 800b276:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d127      	bne.n	800b2ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b280:	3330      	adds	r3, #48	@ 0x30
 800b282:	4618      	mov	r0, r3
 800b284:	f7fe fbf2 	bl	8009a6c <ld_dword>
 800b288:	4603      	mov	r3, r0
 800b28a:	4a1c      	ldr	r2, [pc, #112]	@ (800b2fc <find_volume+0x48c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d11e      	bne.n	800b2ce <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b292:	3330      	adds	r3, #48	@ 0x30
 800b294:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe fbe7 	bl	8009a6c <ld_dword>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4a17      	ldr	r2, [pc, #92]	@ (800b300 <find_volume+0x490>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d113      	bne.n	800b2ce <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a8:	3330      	adds	r3, #48	@ 0x30
 800b2aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fbdc 	bl	8009a6c <ld_dword>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	3330      	adds	r3, #48	@ 0x30
 800b2be:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fe fbd2 	bl	8009a6c <ld_dword>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2d0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b2d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b304 <find_volume+0x494>)
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	4b09      	ldr	r3, [pc, #36]	@ (800b304 <find_volume+0x494>)
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	4b08      	ldr	r3, [pc, #32]	@ (800b304 <find_volume+0x494>)
 800b2e4:	881a      	ldrh	r2, [r3, #0]
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b2ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2ec:	f7fe fdee 	bl	8009ecc <clear_lock>
#endif
	return FR_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3758      	adds	r7, #88	@ 0x58
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	41615252 	.word	0x41615252
 800b300:	61417272 	.word	0x61417272
 800b304:	200005a4 	.word	0x200005a4

0800b308 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b312:	2309      	movs	r3, #9
 800b314:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01c      	beq.n	800b356 <validate+0x4e>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d018      	beq.n	800b356 <validate+0x4e>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d013      	beq.n	800b356 <validate+0x4e>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	889a      	ldrh	r2, [r3, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	88db      	ldrh	r3, [r3, #6]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d10c      	bne.n	800b356 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	785b      	ldrb	r3, [r3, #1]
 800b342:	4618      	mov	r0, r3
 800b344:	f7fe fada 	bl	80098fc <disk_status>
 800b348:	4603      	mov	r3, r0
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <validate+0x4e>
			res = FR_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b356:	7bfb      	ldrb	r3, [r7, #15]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d102      	bne.n	800b362 <validate+0x5a>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	e000      	b.n	800b364 <validate+0x5c>
 800b362:	2300      	movs	r3, #0
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	6013      	str	r3, [r2, #0]
	return res;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	4613      	mov	r3, r2
 800b380:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b386:	f107 0310 	add.w	r3, r7, #16
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff fcd5 	bl	800ad3a <get_ldnumber>
 800b390:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	2b00      	cmp	r3, #0
 800b396:	da01      	bge.n	800b39c <f_mount+0x28>
 800b398:	230b      	movs	r3, #11
 800b39a:	e02b      	b.n	800b3f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b39c:	4a17      	ldr	r2, [pc, #92]	@ (800b3fc <f_mount+0x88>)
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b3a6:	69bb      	ldr	r3, [r7, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d005      	beq.n	800b3b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b3ac:	69b8      	ldr	r0, [r7, #24]
 800b3ae:	f7fe fd8d 	bl	8009ecc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	490d      	ldr	r1, [pc, #52]	@ (800b3fc <f_mount+0x88>)
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <f_mount+0x66>
 800b3d4:	79fb      	ldrb	r3, [r7, #7]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d001      	beq.n	800b3de <f_mount+0x6a>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e00a      	b.n	800b3f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b3de:	f107 010c 	add.w	r1, r7, #12
 800b3e2:	f107 0308 	add.w	r3, r7, #8
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7ff fd41 	bl	800ae70 <find_volume>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	200005a0 	.word	0x200005a0

0800b400 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b098      	sub	sp, #96	@ 0x60
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <f_open+0x18>
 800b414:	2309      	movs	r3, #9
 800b416:	e1a9      	b.n	800b76c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b418:	79fb      	ldrb	r3, [r7, #7]
 800b41a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b41e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b420:	79fa      	ldrb	r2, [r7, #7]
 800b422:	f107 0110 	add.w	r1, r7, #16
 800b426:	f107 0308 	add.w	r3, r7, #8
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff fd20 	bl	800ae70 <find_volume>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 818d 	bne.w	800b75a <f_open+0x35a>
		dj.obj.fs = fs;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	f107 0314 	add.w	r3, r7, #20
 800b44a:	4611      	mov	r1, r2
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7ff fc03 	bl	800ac58 <follow_path>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b458:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d118      	bne.n	800b492 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b460:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b464:	b25b      	sxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	da03      	bge.n	800b472 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b46a:	2306      	movs	r3, #6
 800b46c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b470:	e00f      	b.n	800b492 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	2b01      	cmp	r3, #1
 800b476:	bf8c      	ite	hi
 800b478:	2301      	movhi	r3, #1
 800b47a:	2300      	movls	r3, #0
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	461a      	mov	r2, r3
 800b480:	f107 0314 	add.w	r3, r7, #20
 800b484:	4611      	mov	r1, r2
 800b486:	4618      	mov	r0, r3
 800b488:	f7fe fbd8 	bl	8009c3c <chk_lock>
 800b48c:	4603      	mov	r3, r0
 800b48e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	f003 031c 	and.w	r3, r3, #28
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d07f      	beq.n	800b59c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b49c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d017      	beq.n	800b4d4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b4a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	d10e      	bne.n	800b4ca <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b4ac:	f7fe fc22 	bl	8009cf4 <enq_lock>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d006      	beq.n	800b4c4 <f_open+0xc4>
 800b4b6:	f107 0314 	add.w	r3, r7, #20
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff fb06 	bl	800aacc <dir_register>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	e000      	b.n	800b4c6 <f_open+0xc6>
 800b4c4:	2312      	movs	r3, #18
 800b4c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b4ca:	79fb      	ldrb	r3, [r7, #7]
 800b4cc:	f043 0308 	orr.w	r3, r3, #8
 800b4d0:	71fb      	strb	r3, [r7, #7]
 800b4d2:	e010      	b.n	800b4f6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b4d4:	7ebb      	ldrb	r3, [r7, #26]
 800b4d6:	f003 0311 	and.w	r3, r3, #17
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <f_open+0xe6>
					res = FR_DENIED;
 800b4de:	2307      	movs	r3, #7
 800b4e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b4e4:	e007      	b.n	800b4f6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b4e6:	79fb      	ldrb	r3, [r7, #7]
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <f_open+0xf6>
 800b4f0:	2308      	movs	r3, #8
 800b4f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b4f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d168      	bne.n	800b5d0 <f_open+0x1d0>
 800b4fe:	79fb      	ldrb	r3, [r7, #7]
 800b500:	f003 0308 	and.w	r3, r3, #8
 800b504:	2b00      	cmp	r3, #0
 800b506:	d063      	beq.n	800b5d0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b508:	f7fe f88c 	bl	8009624 <get_fattime>
 800b50c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b50e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b510:	330e      	adds	r3, #14
 800b512:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b514:	4618      	mov	r0, r3
 800b516:	f7fe fae7 	bl	8009ae8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51c:	3316      	adds	r3, #22
 800b51e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b520:	4618      	mov	r0, r3
 800b522:	f7fe fae1 	bl	8009ae8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b528:	330b      	adds	r3, #11
 800b52a:	2220      	movs	r2, #32
 800b52c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b532:	4611      	mov	r1, r2
 800b534:	4618      	mov	r0, r3
 800b536:	f7ff fa35 	bl	800a9a4 <ld_clust>
 800b53a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b540:	2200      	movs	r2, #0
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff fa4d 	bl	800a9e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54a:	331c      	adds	r3, #28
 800b54c:	2100      	movs	r1, #0
 800b54e:	4618      	mov	r0, r3
 800b550:	f7fe faca 	bl	8009ae8 <st_dword>
					fs->wflag = 1;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2201      	movs	r2, #1
 800b558:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b55a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d037      	beq.n	800b5d0 <f_open+0x1d0>
						dw = fs->winsect;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b564:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b566:	f107 0314 	add.w	r3, r7, #20
 800b56a:	2200      	movs	r2, #0
 800b56c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b56e:	4618      	mov	r0, r3
 800b570:	f7fe ff60 	bl	800a434 <remove_chain>
 800b574:	4603      	mov	r3, r0
 800b576:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b57a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d126      	bne.n	800b5d0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe fd08 	bl	8009f9c <move_window>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b596:	3a01      	subs	r2, #1
 800b598:	60da      	str	r2, [r3, #12]
 800b59a:	e019      	b.n	800b5d0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b59c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d115      	bne.n	800b5d0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b5a4:	7ebb      	ldrb	r3, [r7, #26]
 800b5a6:	f003 0310 	and.w	r3, r3, #16
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b5ae:	2304      	movs	r3, #4
 800b5b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b5b4:	e00c      	b.n	800b5d0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	f003 0302 	and.w	r3, r3, #2
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <f_open+0x1d0>
 800b5c0:	7ebb      	ldrb	r3, [r7, #26]
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d002      	beq.n	800b5d0 <f_open+0x1d0>
						res = FR_DENIED;
 800b5ca:	2307      	movs	r3, #7
 800b5cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b5d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d126      	bne.n	800b626 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	f003 0308 	and.w	r3, r3, #8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b5f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	bf8c      	ite	hi
 800b5fe:	2301      	movhi	r3, #1
 800b600:	2300      	movls	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	461a      	mov	r2, r3
 800b606:	f107 0314 	add.w	r3, r7, #20
 800b60a:	4611      	mov	r1, r2
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7fe fb93 	bl	8009d38 <inc_lock>
 800b612:	4602      	mov	r2, r0
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <f_open+0x226>
 800b620:	2302      	movs	r3, #2
 800b622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b626:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	f040 8095 	bne.w	800b75a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff f9b4 	bl	800a9a4 <ld_clust>
 800b63c:	4602      	mov	r2, r0
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b644:	331c      	adds	r3, #28
 800b646:	4618      	mov	r0, r3
 800b648:	f7fe fa10 	bl	8009a6c <ld_dword>
 800b64c:	4602      	mov	r2, r0
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2200      	movs	r2, #0
 800b656:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b658:	693a      	ldr	r2, [r7, #16]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	88da      	ldrh	r2, [r3, #6]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	79fa      	ldrb	r2, [r7, #7]
 800b66a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3330      	adds	r3, #48	@ 0x30
 800b682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b686:	2100      	movs	r1, #0
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fe fa7a 	bl	8009b82 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	f003 0320 	and.w	r3, r3, #32
 800b694:	2b00      	cmp	r3, #0
 800b696:	d060      	beq.n	800b75a <f_open+0x35a>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d05c      	beq.n	800b75a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68da      	ldr	r2, [r3, #12]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	895b      	ldrh	r3, [r3, #10]
 800b6ac:	025b      	lsls	r3, r3, #9
 800b6ae:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6bc:	e016      	b.n	800b6ec <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fd25 	bl	800a112 <get_fat>
 800b6c8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b6ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d802      	bhi.n	800b6d6 <f_open+0x2d6>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b6d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d102      	bne.n	800b6e4 <f_open+0x2e4>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b6e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d103      	bne.n	800b6fc <f_open+0x2fc>
 800b6f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d8e0      	bhi.n	800b6be <f_open+0x2be>
				}
				fp->clust = clst;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b700:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b702:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b706:	2b00      	cmp	r3, #0
 800b708:	d127      	bne.n	800b75a <f_open+0x35a>
 800b70a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b70c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b710:	2b00      	cmp	r3, #0
 800b712:	d022      	beq.n	800b75a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe fcdb 	bl	800a0d4 <clust2sect>
 800b71e:	6478      	str	r0, [r7, #68]	@ 0x44
 800b720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b722:	2b00      	cmp	r3, #0
 800b724:	d103      	bne.n	800b72e <f_open+0x32e>
						res = FR_INT_ERR;
 800b726:	2302      	movs	r3, #2
 800b728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b72c:	e015      	b.n	800b75a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b72e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b730:	0a5a      	lsrs	r2, r3, #9
 800b732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b734:	441a      	add	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	7858      	ldrb	r0, [r3, #1]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a1a      	ldr	r2, [r3, #32]
 800b748:	2301      	movs	r3, #1
 800b74a:	f7fe f919 	bl	8009980 <disk_read>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <f_open+0x35a>
 800b754:	2301      	movs	r3, #1
 800b756:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b75a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <f_open+0x368>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3760      	adds	r7, #96	@ 0x60
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08e      	sub	sp, #56	@ 0x38
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2200      	movs	r2, #0
 800b78a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f107 0214 	add.w	r2, r7, #20
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fdb7 	bl	800b308 <validate>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b7a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d107      	bne.n	800b7b8 <f_read+0x44>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	7d5b      	ldrb	r3, [r3, #21]
 800b7ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <f_read+0x4a>
 800b7b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b7bc:	e115      	b.n	800b9ea <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	7d1b      	ldrb	r3, [r3, #20]
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <f_read+0x5a>
 800b7ca:	2307      	movs	r3, #7
 800b7cc:	e10d      	b.n	800b9ea <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	68da      	ldr	r2, [r3, #12]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	699b      	ldr	r3, [r3, #24]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	f240 80fe 	bls.w	800b9e0 <f_read+0x26c>
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b7e8:	e0fa      	b.n	800b9e0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f040 80c6 	bne.w	800b984 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	0a5b      	lsrs	r3, r3, #9
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	8952      	ldrh	r2, [r2, #10]
 800b802:	3a01      	subs	r2, #1
 800b804:	4013      	ands	r3, r2
 800b806:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d12f      	bne.n	800b86e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b81c:	e013      	b.n	800b846 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d007      	beq.n	800b836 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	4619      	mov	r1, r3
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f7fe fefe 	bl	800a62e <clmt_clust>
 800b832:	6338      	str	r0, [r7, #48]	@ 0x30
 800b834:	e007      	b.n	800b846 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	69db      	ldr	r3, [r3, #28]
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fe fc67 	bl	800a112 <get_fat>
 800b844:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d804      	bhi.n	800b856 <f_read+0xe2>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2202      	movs	r2, #2
 800b850:	755a      	strb	r2, [r3, #21]
 800b852:	2302      	movs	r3, #2
 800b854:	e0c9      	b.n	800b9ea <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85c:	d104      	bne.n	800b868 <f_read+0xf4>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2201      	movs	r2, #1
 800b862:	755a      	strb	r2, [r3, #21]
 800b864:	2301      	movs	r3, #1
 800b866:	e0c0      	b.n	800b9ea <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b86c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	69db      	ldr	r3, [r3, #28]
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f7fe fc2c 	bl	800a0d4 <clust2sect>
 800b87c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d104      	bne.n	800b88e <f_read+0x11a>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2202      	movs	r2, #2
 800b888:	755a      	strb	r2, [r3, #21]
 800b88a:	2302      	movs	r3, #2
 800b88c:	e0ad      	b.n	800b9ea <f_read+0x276>
			sect += csect;
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	4413      	add	r3, r2
 800b894:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	0a5b      	lsrs	r3, r3, #9
 800b89a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d039      	beq.n	800b916 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b8a2:	69fa      	ldr	r2, [r7, #28]
 800b8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a6:	4413      	add	r3, r2
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	8952      	ldrh	r2, [r2, #10]
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d905      	bls.n	800b8bc <f_read+0x148>
					cc = fs->csize - csect;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	895b      	ldrh	r3, [r3, #10]
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	7858      	ldrb	r0, [r3, #1]
 800b8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c2:	69ba      	ldr	r2, [r7, #24]
 800b8c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8c6:	f7fe f85b 	bl	8009980 <disk_read>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d004      	beq.n	800b8da <f_read+0x166>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	755a      	strb	r2, [r3, #21]
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e087      	b.n	800b9ea <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	7d1b      	ldrb	r3, [r3, #20]
 800b8de:	b25b      	sxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da14      	bge.n	800b90e <f_read+0x19a>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a1a      	ldr	r2, [r3, #32]
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d90d      	bls.n	800b90e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6a1a      	ldr	r2, [r3, #32]
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	025b      	lsls	r3, r3, #9
 800b8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8fe:	18d0      	adds	r0, r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3330      	adds	r3, #48	@ 0x30
 800b904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b908:	4619      	mov	r1, r3
 800b90a:	f7fe f919 	bl	8009b40 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b910:	025b      	lsls	r3, r3, #9
 800b912:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800b914:	e050      	b.n	800b9b8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d02e      	beq.n	800b97e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	7d1b      	ldrb	r3, [r3, #20]
 800b924:	b25b      	sxtb	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	da18      	bge.n	800b95c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	7858      	ldrb	r0, [r3, #1]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6a1a      	ldr	r2, [r3, #32]
 800b938:	2301      	movs	r3, #1
 800b93a:	f7fe f841 	bl	80099c0 <disk_write>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d004      	beq.n	800b94e <f_read+0x1da>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2201      	movs	r2, #1
 800b948:	755a      	strb	r2, [r3, #21]
 800b94a:	2301      	movs	r3, #1
 800b94c:	e04d      	b.n	800b9ea <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	7d1b      	ldrb	r3, [r3, #20]
 800b952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b956:	b2da      	uxtb	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	7858      	ldrb	r0, [r3, #1]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b966:	2301      	movs	r3, #1
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	f7fe f809 	bl	8009980 <disk_read>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d004      	beq.n	800b97e <f_read+0x20a>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2201      	movs	r2, #1
 800b978:	755a      	strb	r2, [r3, #21]
 800b97a:	2301      	movs	r3, #1
 800b97c:	e035      	b.n	800b9ea <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b98c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b990:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d901      	bls.n	800b99e <f_read+0x22a>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ac:	4413      	add	r3, r2
 800b9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9b4:	f7fe f8c4 	bl	8009b40 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b9b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9bc:	4413      	add	r3, r2
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	699a      	ldr	r2, [r3, #24]
 800b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c6:	441a      	add	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	619a      	str	r2, [r3, #24]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d2:	441a      	add	r2, r3
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9dc:	1ad3      	subs	r3, r2, r3
 800b9de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f47f af01 	bne.w	800b7ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3738      	adds	r7, #56	@ 0x38
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b08c      	sub	sp, #48	@ 0x30
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	2200      	movs	r2, #0
 800ba08:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f107 0210 	add.w	r2, r7, #16
 800ba10:	4611      	mov	r1, r2
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff fc78 	bl	800b308 <validate>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ba1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d107      	bne.n	800ba36 <f_write+0x44>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	7d5b      	ldrb	r3, [r3, #21]
 800ba2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ba2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <f_write+0x4a>
 800ba36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba3a:	e14b      	b.n	800bcd4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	7d1b      	ldrb	r3, [r3, #20]
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <f_write+0x5a>
 800ba48:	2307      	movs	r3, #7
 800ba4a:	e143      	b.n	800bcd4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	699a      	ldr	r2, [r3, #24]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	441a      	add	r2, r3
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	f080 812d 	bcs.w	800bcb8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	43db      	mvns	r3, r3
 800ba64:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ba66:	e127      	b.n	800bcb8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f040 80e3 	bne.w	800bc3c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	0a5b      	lsrs	r3, r3, #9
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	8952      	ldrh	r2, [r2, #10]
 800ba80:	3a01      	subs	r2, #1
 800ba82:	4013      	ands	r3, r2
 800ba84:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d143      	bne.n	800bb14 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10c      	bne.n	800baae <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ba9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11a      	bne.n	800bad6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe fd2a 	bl	800a4fe <create_chain>
 800baaa:	62b8      	str	r0, [r7, #40]	@ 0x28
 800baac:	e013      	b.n	800bad6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d007      	beq.n	800bac6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	4619      	mov	r1, r3
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7fe fdb6 	bl	800a62e <clmt_clust>
 800bac2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bac4:	e007      	b.n	800bad6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	69db      	ldr	r3, [r3, #28]
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fd15 	bl	800a4fe <create_chain>
 800bad4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 80f2 	beq.w	800bcc2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d104      	bne.n	800baee <f_write+0xfc>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2202      	movs	r2, #2
 800bae8:	755a      	strb	r2, [r3, #21]
 800baea:	2302      	movs	r3, #2
 800baec:	e0f2      	b.n	800bcd4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800baee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf4:	d104      	bne.n	800bb00 <f_write+0x10e>
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	755a      	strb	r2, [r3, #21]
 800bafc:	2301      	movs	r3, #1
 800bafe:	e0e9      	b.n	800bcd4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <f_write+0x122>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	7d1b      	ldrb	r3, [r3, #20]
 800bb18:	b25b      	sxtb	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da18      	bge.n	800bb50 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	7858      	ldrb	r0, [r3, #1]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6a1a      	ldr	r2, [r3, #32]
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	f7fd ff47 	bl	80099c0 <disk_write>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d004      	beq.n	800bb42 <f_write+0x150>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	755a      	strb	r2, [r3, #21]
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e0c8      	b.n	800bcd4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	7d1b      	ldrb	r3, [r3, #20]
 800bb46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	4619      	mov	r1, r3
 800bb58:	4610      	mov	r0, r2
 800bb5a:	f7fe fabb 	bl	800a0d4 <clust2sect>
 800bb5e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d104      	bne.n	800bb70 <f_write+0x17e>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2202      	movs	r2, #2
 800bb6a:	755a      	strb	r2, [r3, #21]
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e0b1      	b.n	800bcd4 <f_write+0x2e2>
			sect += csect;
 800bb70:	697a      	ldr	r2, [r7, #20]
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	4413      	add	r3, r2
 800bb76:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	0a5b      	lsrs	r3, r3, #9
 800bb7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d03c      	beq.n	800bbfe <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	4413      	add	r3, r2
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	8952      	ldrh	r2, [r2, #10]
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d905      	bls.n	800bb9e <f_write+0x1ac>
					cc = fs->csize - csect;
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	895b      	ldrh	r3, [r3, #10]
 800bb96:	461a      	mov	r2, r3
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	7858      	ldrb	r0, [r3, #1]
 800bba2:	6a3b      	ldr	r3, [r7, #32]
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	69f9      	ldr	r1, [r7, #28]
 800bba8:	f7fd ff0a 	bl	80099c0 <disk_write>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d004      	beq.n	800bbbc <f_write+0x1ca>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	755a      	strb	r2, [r3, #21]
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e08b      	b.n	800bcd4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6a1a      	ldr	r2, [r3, #32]
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	1ad3      	subs	r3, r2, r3
 800bbc4:	6a3a      	ldr	r2, [r7, #32]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d915      	bls.n	800bbf6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a1a      	ldr	r2, [r3, #32]
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	025b      	lsls	r3, r3, #9
 800bbda:	69fa      	ldr	r2, [r7, #28]
 800bbdc:	4413      	add	r3, r2
 800bbde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	f7fd ffac 	bl	8009b40 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	7d1b      	ldrb	r3, [r3, #20]
 800bbec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bbf6:	6a3b      	ldr	r3, [r7, #32]
 800bbf8:	025b      	lsls	r3, r3, #9
 800bbfa:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bbfc:	e03f      	b.n	800bc7e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	697a      	ldr	r2, [r7, #20]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d016      	beq.n	800bc36 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	699a      	ldr	r2, [r3, #24]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d210      	bcs.n	800bc36 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	7858      	ldrb	r0, [r3, #1]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc1e:	2301      	movs	r3, #1
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	f7fd fead 	bl	8009980 <disk_read>
 800bc26:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d004      	beq.n	800bc36 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	755a      	strb	r2, [r3, #21]
 800bc32:	2301      	movs	r3, #1
 800bc34:	e04e      	b.n	800bcd4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc44:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bc48:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bc4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d901      	bls.n	800bc56 <f_write+0x264>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc64:	4413      	add	r3, r2
 800bc66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc68:	69f9      	ldr	r1, [r7, #28]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fd ff68 	bl	8009b40 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	7d1b      	ldrb	r3, [r3, #20]
 800bc74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bc7e:	69fa      	ldr	r2, [r7, #28]
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	4413      	add	r3, r2
 800bc84:	61fb      	str	r3, [r7, #28]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	699a      	ldr	r2, [r3, #24]
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8c:	441a      	add	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	619a      	str	r2, [r3, #24]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	68da      	ldr	r2, [r3, #12]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	bf38      	it	cc
 800bc9e:	461a      	movcc	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	60da      	str	r2, [r3, #12]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcaa:	441a      	add	r2, r3
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	601a      	str	r2, [r3, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f47f aed4 	bne.w	800ba68 <f_write+0x76>
 800bcc0:	e000      	b.n	800bcc4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcc2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	7d1b      	ldrb	r3, [r3, #20]
 800bcc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3730      	adds	r7, #48	@ 0x30
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f107 0208 	add.w	r2, r7, #8
 800bcea:	4611      	mov	r1, r2
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff fb0b 	bl	800b308 <validate>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d168      	bne.n	800bdce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7d1b      	ldrb	r3, [r3, #20]
 800bd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d062      	beq.n	800bdce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7d1b      	ldrb	r3, [r3, #20]
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da15      	bge.n	800bd3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	7858      	ldrb	r0, [r3, #1]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	6a1a      	ldr	r2, [r3, #32]
 800bd20:	2301      	movs	r3, #1
 800bd22:	f7fd fe4d 	bl	80099c0 <disk_write>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <f_sync+0x54>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e04f      	b.n	800bdd0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	7d1b      	ldrb	r3, [r3, #20]
 800bd34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bd3e:	f7fd fc71 	bl	8009624 <get_fattime>
 800bd42:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe f925 	bl	8009f9c <move_window>
 800bd52:	4603      	mov	r3, r0
 800bd54:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bd56:	7dfb      	ldrb	r3, [r7, #23]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d138      	bne.n	800bdce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd60:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	330b      	adds	r3, #11
 800bd66:	781a      	ldrb	r2, [r3, #0]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	330b      	adds	r3, #11
 800bd6c:	f042 0220 	orr.w	r2, r2, #32
 800bd70:	b2d2      	uxtb	r2, r2
 800bd72:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	f7fe fe2f 	bl	800a9e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f103 021c 	add.w	r2, r3, #28
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f7fd fea9 	bl	8009ae8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	3316      	adds	r3, #22
 800bd9a:	6939      	ldr	r1, [r7, #16]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7fd fea3 	bl	8009ae8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3312      	adds	r3, #18
 800bda6:	2100      	movs	r1, #0
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fd fe82 	bl	8009ab2 <st_word>
					fs->wflag = 1;
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fe f91e 	bl	8009ff8 <sync_fs>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	7d1b      	ldrb	r3, [r3, #20]
 800bdc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3718      	adds	r7, #24
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff ff7b 	bl	800bcdc <f_sync>
 800bde6:	4603      	mov	r3, r0
 800bde8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d118      	bne.n	800be22 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f107 0208 	add.w	r2, r7, #8
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fa85 	bl	800b308 <validate>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10c      	bne.n	800be22 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fe f821 	bl	8009e54 <dec_lock>
 800be12:	4603      	mov	r3, r0
 800be14:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800be22:	7bfb      	ldrb	r3, [r7, #15]
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b090      	sub	sp, #64	@ 0x40
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f107 0208 	add.w	r2, r7, #8
 800be3c:	4611      	mov	r1, r2
 800be3e:	4618      	mov	r0, r3
 800be40:	f7ff fa62 	bl	800b308 <validate>
 800be44:	4603      	mov	r3, r0
 800be46:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800be4a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <f_lseek+0x2e>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	7d5b      	ldrb	r3, [r3, #21]
 800be56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800be5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <f_lseek+0x3c>
 800be62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be66:	e1e6      	b.n	800c236 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 80d1 	beq.w	800c014 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be78:	d15a      	bne.n	800bf30 <f_lseek+0x104>
			tbl = fp->cltbl;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be7e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800be80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be82:	1d1a      	adds	r2, r3, #4
 800be84:	627a      	str	r2, [r7, #36]	@ 0x24
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	2302      	movs	r3, #2
 800be8c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800be94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be96:	2b00      	cmp	r3, #0
 800be98:	d03a      	beq.n	800bf10 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	613b      	str	r3, [r7, #16]
 800be9e:	2300      	movs	r3, #0
 800bea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bea4:	3302      	adds	r3, #2
 800bea6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	3301      	adds	r3, #1
 800beb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fe f92b 	bl	800a112 <get_fat>
 800bebc:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d804      	bhi.n	800bece <f_lseek+0xa2>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2202      	movs	r2, #2
 800bec8:	755a      	strb	r2, [r3, #21]
 800beca:	2302      	movs	r3, #2
 800becc:	e1b3      	b.n	800c236 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d104      	bne.n	800bee0 <f_lseek+0xb4>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	755a      	strb	r2, [r3, #21]
 800bedc:	2301      	movs	r3, #1
 800bede:	e1aa      	b.n	800c236 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3301      	adds	r3, #1
 800bee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d0de      	beq.n	800bea8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800beea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d809      	bhi.n	800bf06 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	1d1a      	adds	r2, r3, #4
 800bef6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	1d1a      	adds	r2, r3, #4
 800bf00:	627a      	str	r2, [r7, #36]	@ 0x24
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d3c4      	bcc.n	800be9a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf16:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bf18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d803      	bhi.n	800bf28 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf22:	2200      	movs	r2, #0
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	e184      	b.n	800c232 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bf28:	2311      	movs	r3, #17
 800bf2a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bf2e:	e180      	b.n	800c232 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	683a      	ldr	r2, [r7, #0]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d902      	bls.n	800bf40 <f_lseek+0x114>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 8172 	beq.w	800c232 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7fe fb6a 	bl	800a62e <clmt_clust>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	69db      	ldr	r3, [r3, #28]
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f7fe f8b3 	bl	800a0d4 <clust2sect>
 800bf6e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d104      	bne.n	800bf80 <f_lseek+0x154>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2202      	movs	r2, #2
 800bf7a:	755a      	strb	r2, [r3, #21]
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e15a      	b.n	800c236 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	3b01      	subs	r3, #1
 800bf84:	0a5b      	lsrs	r3, r3, #9
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	8952      	ldrh	r2, [r2, #10]
 800bf8a:	3a01      	subs	r2, #1
 800bf8c:	4013      	ands	r3, r2
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	4413      	add	r3, r2
 800bf92:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8148 	beq.w	800c232 <f_lseek+0x406>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	f000 8142 	beq.w	800c232 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	7d1b      	ldrb	r3, [r3, #20]
 800bfb2:	b25b      	sxtb	r3, r3
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	da18      	bge.n	800bfea <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	7858      	ldrb	r0, [r3, #1]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a1a      	ldr	r2, [r3, #32]
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	f7fd fcfa 	bl	80099c0 <disk_write>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d004      	beq.n	800bfdc <f_lseek+0x1b0>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	755a      	strb	r2, [r3, #21]
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e12c      	b.n	800c236 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	7d1b      	ldrb	r3, [r3, #20]
 800bfe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	7858      	ldrb	r0, [r3, #1]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bff4:	2301      	movs	r3, #1
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	f7fd fcc2 	bl	8009980 <disk_read>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <f_lseek+0x1e0>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	755a      	strb	r2, [r3, #21]
 800c008:	2301      	movs	r3, #1
 800c00a:	e114      	b.n	800c236 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	69ba      	ldr	r2, [r7, #24]
 800c010:	621a      	str	r2, [r3, #32]
 800c012:	e10e      	b.n	800c232 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d908      	bls.n	800c030 <f_lseek+0x204>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7d1b      	ldrb	r3, [r3, #20]
 800c022:	f003 0302 	and.w	r3, r3, #2
 800c026:	2b00      	cmp	r3, #0
 800c028:	d102      	bne.n	800c030 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	699b      	ldr	r3, [r3, #24]
 800c034:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	637b      	str	r3, [r7, #52]	@ 0x34
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c03e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	f000 80a7 	beq.w	800c196 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	895b      	ldrh	r3, [r3, #10]
 800c04c:	025b      	lsls	r3, r3, #9
 800c04e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d01b      	beq.n	800c08e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	1e59      	subs	r1, r3, #1
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d30f      	bcc.n	800c08e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c06e:	6a3b      	ldr	r3, [r7, #32]
 800c070:	1e5a      	subs	r2, r3, #1
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	425b      	negs	r3, r3
 800c076:	401a      	ands	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	699b      	ldr	r3, [r3, #24]
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c08c:	e022      	b.n	800c0d4 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c096:	2b00      	cmp	r3, #0
 800c098:	d119      	bne.n	800c0ce <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2100      	movs	r1, #0
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe fa2d 	bl	800a4fe <create_chain>
 800c0a4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d104      	bne.n	800c0b6 <f_lseek+0x28a>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	755a      	strb	r2, [r3, #21]
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	e0bf      	b.n	800c236 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0bc:	d104      	bne.n	800c0c8 <f_lseek+0x29c>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	755a      	strb	r2, [r3, #21]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e0b6      	b.n	800c236 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0cc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0d2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d05d      	beq.n	800c196 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c0da:	e03a      	b.n	800c152 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	603b      	str	r3, [r7, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	699a      	ldr	r2, [r3, #24]
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	441a      	add	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7d1b      	ldrb	r3, [r3, #20]
 800c0f4:	f003 0302 	and.w	r3, r3, #2
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00b      	beq.n	800c114 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe f9fc 	bl	800a4fe <create_chain>
 800c106:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d108      	bne.n	800c120 <f_lseek+0x2f4>
							ofs = 0; break;
 800c10e:	2300      	movs	r3, #0
 800c110:	603b      	str	r3, [r7, #0]
 800c112:	e022      	b.n	800c15a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c118:	4618      	mov	r0, r3
 800c11a:	f7fd fffa 	bl	800a112 <get_fat>
 800c11e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c126:	d104      	bne.n	800c132 <f_lseek+0x306>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	755a      	strb	r2, [r3, #21]
 800c12e:	2301      	movs	r3, #1
 800c130:	e081      	b.n	800c236 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c134:	2b01      	cmp	r3, #1
 800c136:	d904      	bls.n	800c142 <f_lseek+0x316>
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c13e:	429a      	cmp	r2, r3
 800c140:	d304      	bcc.n	800c14c <f_lseek+0x320>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2202      	movs	r2, #2
 800c146:	755a      	strb	r2, [r3, #21]
 800c148:	2302      	movs	r3, #2
 800c14a:	e074      	b.n	800c236 <f_lseek+0x40a>
					fp->clust = clst;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c150:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	429a      	cmp	r2, r3
 800c158:	d8c0      	bhi.n	800c0dc <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	699a      	ldr	r2, [r3, #24]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	441a      	add	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d012      	beq.n	800c196 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c174:	4618      	mov	r0, r3
 800c176:	f7fd ffad 	bl	800a0d4 <clust2sect>
 800c17a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d104      	bne.n	800c18c <f_lseek+0x360>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2202      	movs	r2, #2
 800c186:	755a      	strb	r2, [r3, #21]
 800c188:	2302      	movs	r3, #2
 800c18a:	e054      	b.n	800c236 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	0a5b      	lsrs	r3, r3, #9
 800c190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c192:	4413      	add	r3, r2
 800c194:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699a      	ldr	r2, [r3, #24]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d90a      	bls.n	800c1b8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	7d1b      	ldrb	r3, [r3, #20]
 800c1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d036      	beq.n	800c232 <f_lseek+0x406>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d031      	beq.n	800c232 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	7d1b      	ldrb	r3, [r3, #20]
 800c1d2:	b25b      	sxtb	r3, r3
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	da18      	bge.n	800c20a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	7858      	ldrb	r0, [r3, #1]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a1a      	ldr	r2, [r3, #32]
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	f7fd fbea 	bl	80099c0 <disk_write>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d004      	beq.n	800c1fc <f_lseek+0x3d0>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2201      	movs	r2, #1
 800c1f6:	755a      	strb	r2, [r3, #21]
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e01c      	b.n	800c236 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	7d1b      	ldrb	r3, [r3, #20]
 800c200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c204:	b2da      	uxtb	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	7858      	ldrb	r0, [r3, #1]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c214:	2301      	movs	r3, #1
 800c216:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c218:	f7fd fbb2 	bl	8009980 <disk_read>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d004      	beq.n	800c22c <f_lseek+0x400>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2201      	movs	r2, #1
 800c226:	755a      	strb	r2, [r3, #21]
 800c228:	2301      	movs	r3, #1
 800c22a:	e004      	b.n	800c236 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c230:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c232:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c236:	4618      	mov	r0, r3
 800c238:	3740      	adds	r7, #64	@ 0x40
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	4613      	mov	r3, r2
 800c24c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c24e:	2301      	movs	r3, #1
 800c250:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c256:	4b1f      	ldr	r3, [pc, #124]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c258:	7a5b      	ldrb	r3, [r3, #9]
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d131      	bne.n	800c2c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c260:	4b1c      	ldr	r3, [pc, #112]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c262:	7a5b      	ldrb	r3, [r3, #9]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	461a      	mov	r2, r3
 800c268:	4b1a      	ldr	r3, [pc, #104]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c26a:	2100      	movs	r1, #0
 800c26c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c26e:	4b19      	ldr	r3, [pc, #100]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c270:	7a5b      	ldrb	r3, [r3, #9]
 800c272:	b2db      	uxtb	r3, r3
 800c274:	4a17      	ldr	r2, [pc, #92]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c27e:	4b15      	ldr	r3, [pc, #84]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c280:	7a5b      	ldrb	r3, [r3, #9]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	4b13      	ldr	r3, [pc, #76]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c288:	4413      	add	r3, r2
 800c28a:	79fa      	ldrb	r2, [r7, #7]
 800c28c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c28e:	4b11      	ldr	r3, [pc, #68]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c290:	7a5b      	ldrb	r3, [r3, #9]
 800c292:	b2db      	uxtb	r3, r3
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	b2d1      	uxtb	r1, r2
 800c298:	4a0e      	ldr	r2, [pc, #56]	@ (800c2d4 <FATFS_LinkDriverEx+0x94>)
 800c29a:	7251      	strb	r1, [r2, #9]
 800c29c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c29e:	7dbb      	ldrb	r3, [r7, #22]
 800c2a0:	3330      	adds	r3, #48	@ 0x30
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	223a      	movs	r2, #58	@ 0x3a
 800c2ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	3302      	adds	r3, #2
 800c2b4:	222f      	movs	r2, #47	@ 0x2f
 800c2b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	3303      	adds	r3, #3
 800c2bc:	2200      	movs	r2, #0
 800c2be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	200005c8 	.word	0x200005c8

0800c2d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff ffaa 	bl	800c240 <FATFS_LinkDriverEx>
 800c2ec:	4603      	mov	r3, r0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
	...

0800c2f8 <malloc>:
 800c2f8:	4b02      	ldr	r3, [pc, #8]	@ (800c304 <malloc+0xc>)
 800c2fa:	4601      	mov	r1, r0
 800c2fc:	6818      	ldr	r0, [r3, #0]
 800c2fe:	f000 b82d 	b.w	800c35c <_malloc_r>
 800c302:	bf00      	nop
 800c304:	20000018 	.word	0x20000018

0800c308 <free>:
 800c308:	4b02      	ldr	r3, [pc, #8]	@ (800c314 <free+0xc>)
 800c30a:	4601      	mov	r1, r0
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	f000 b949 	b.w	800c5a4 <_free_r>
 800c312:	bf00      	nop
 800c314:	20000018 	.word	0x20000018

0800c318 <sbrk_aligned>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	4e0f      	ldr	r6, [pc, #60]	@ (800c358 <sbrk_aligned+0x40>)
 800c31c:	460c      	mov	r4, r1
 800c31e:	6831      	ldr	r1, [r6, #0]
 800c320:	4605      	mov	r5, r0
 800c322:	b911      	cbnz	r1, 800c32a <sbrk_aligned+0x12>
 800c324:	f000 f8f4 	bl	800c510 <_sbrk_r>
 800c328:	6030      	str	r0, [r6, #0]
 800c32a:	4621      	mov	r1, r4
 800c32c:	4628      	mov	r0, r5
 800c32e:	f000 f8ef 	bl	800c510 <_sbrk_r>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	d103      	bne.n	800c33e <sbrk_aligned+0x26>
 800c336:	f04f 34ff 	mov.w	r4, #4294967295
 800c33a:	4620      	mov	r0, r4
 800c33c:	bd70      	pop	{r4, r5, r6, pc}
 800c33e:	1cc4      	adds	r4, r0, #3
 800c340:	f024 0403 	bic.w	r4, r4, #3
 800c344:	42a0      	cmp	r0, r4
 800c346:	d0f8      	beq.n	800c33a <sbrk_aligned+0x22>
 800c348:	1a21      	subs	r1, r4, r0
 800c34a:	4628      	mov	r0, r5
 800c34c:	f000 f8e0 	bl	800c510 <_sbrk_r>
 800c350:	3001      	adds	r0, #1
 800c352:	d1f2      	bne.n	800c33a <sbrk_aligned+0x22>
 800c354:	e7ef      	b.n	800c336 <sbrk_aligned+0x1e>
 800c356:	bf00      	nop
 800c358:	200005d4 	.word	0x200005d4

0800c35c <_malloc_r>:
 800c35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c360:	1ccd      	adds	r5, r1, #3
 800c362:	f025 0503 	bic.w	r5, r5, #3
 800c366:	3508      	adds	r5, #8
 800c368:	2d0c      	cmp	r5, #12
 800c36a:	bf38      	it	cc
 800c36c:	250c      	movcc	r5, #12
 800c36e:	2d00      	cmp	r5, #0
 800c370:	4606      	mov	r6, r0
 800c372:	db01      	blt.n	800c378 <_malloc_r+0x1c>
 800c374:	42a9      	cmp	r1, r5
 800c376:	d904      	bls.n	800c382 <_malloc_r+0x26>
 800c378:	230c      	movs	r3, #12
 800c37a:	6033      	str	r3, [r6, #0]
 800c37c:	2000      	movs	r0, #0
 800c37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c458 <_malloc_r+0xfc>
 800c386:	f000 f869 	bl	800c45c <__malloc_lock>
 800c38a:	f8d8 3000 	ldr.w	r3, [r8]
 800c38e:	461c      	mov	r4, r3
 800c390:	bb44      	cbnz	r4, 800c3e4 <_malloc_r+0x88>
 800c392:	4629      	mov	r1, r5
 800c394:	4630      	mov	r0, r6
 800c396:	f7ff ffbf 	bl	800c318 <sbrk_aligned>
 800c39a:	1c43      	adds	r3, r0, #1
 800c39c:	4604      	mov	r4, r0
 800c39e:	d158      	bne.n	800c452 <_malloc_r+0xf6>
 800c3a0:	f8d8 4000 	ldr.w	r4, [r8]
 800c3a4:	4627      	mov	r7, r4
 800c3a6:	2f00      	cmp	r7, #0
 800c3a8:	d143      	bne.n	800c432 <_malloc_r+0xd6>
 800c3aa:	2c00      	cmp	r4, #0
 800c3ac:	d04b      	beq.n	800c446 <_malloc_r+0xea>
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	4639      	mov	r1, r7
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	eb04 0903 	add.w	r9, r4, r3
 800c3b8:	f000 f8aa 	bl	800c510 <_sbrk_r>
 800c3bc:	4581      	cmp	r9, r0
 800c3be:	d142      	bne.n	800c446 <_malloc_r+0xea>
 800c3c0:	6821      	ldr	r1, [r4, #0]
 800c3c2:	1a6d      	subs	r5, r5, r1
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	4630      	mov	r0, r6
 800c3c8:	f7ff ffa6 	bl	800c318 <sbrk_aligned>
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d03a      	beq.n	800c446 <_malloc_r+0xea>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	442b      	add	r3, r5
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	bb62      	cbnz	r2, 800c438 <_malloc_r+0xdc>
 800c3de:	f8c8 7000 	str.w	r7, [r8]
 800c3e2:	e00f      	b.n	800c404 <_malloc_r+0xa8>
 800c3e4:	6822      	ldr	r2, [r4, #0]
 800c3e6:	1b52      	subs	r2, r2, r5
 800c3e8:	d420      	bmi.n	800c42c <_malloc_r+0xd0>
 800c3ea:	2a0b      	cmp	r2, #11
 800c3ec:	d917      	bls.n	800c41e <_malloc_r+0xc2>
 800c3ee:	1961      	adds	r1, r4, r5
 800c3f0:	42a3      	cmp	r3, r4
 800c3f2:	6025      	str	r5, [r4, #0]
 800c3f4:	bf18      	it	ne
 800c3f6:	6059      	strne	r1, [r3, #4]
 800c3f8:	6863      	ldr	r3, [r4, #4]
 800c3fa:	bf08      	it	eq
 800c3fc:	f8c8 1000 	streq.w	r1, [r8]
 800c400:	5162      	str	r2, [r4, r5]
 800c402:	604b      	str	r3, [r1, #4]
 800c404:	4630      	mov	r0, r6
 800c406:	f000 f82f 	bl	800c468 <__malloc_unlock>
 800c40a:	f104 000b 	add.w	r0, r4, #11
 800c40e:	1d23      	adds	r3, r4, #4
 800c410:	f020 0007 	bic.w	r0, r0, #7
 800c414:	1ac2      	subs	r2, r0, r3
 800c416:	bf1c      	itt	ne
 800c418:	1a1b      	subne	r3, r3, r0
 800c41a:	50a3      	strne	r3, [r4, r2]
 800c41c:	e7af      	b.n	800c37e <_malloc_r+0x22>
 800c41e:	6862      	ldr	r2, [r4, #4]
 800c420:	42a3      	cmp	r3, r4
 800c422:	bf0c      	ite	eq
 800c424:	f8c8 2000 	streq.w	r2, [r8]
 800c428:	605a      	strne	r2, [r3, #4]
 800c42a:	e7eb      	b.n	800c404 <_malloc_r+0xa8>
 800c42c:	4623      	mov	r3, r4
 800c42e:	6864      	ldr	r4, [r4, #4]
 800c430:	e7ae      	b.n	800c390 <_malloc_r+0x34>
 800c432:	463c      	mov	r4, r7
 800c434:	687f      	ldr	r7, [r7, #4]
 800c436:	e7b6      	b.n	800c3a6 <_malloc_r+0x4a>
 800c438:	461a      	mov	r2, r3
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	42a3      	cmp	r3, r4
 800c43e:	d1fb      	bne.n	800c438 <_malloc_r+0xdc>
 800c440:	2300      	movs	r3, #0
 800c442:	6053      	str	r3, [r2, #4]
 800c444:	e7de      	b.n	800c404 <_malloc_r+0xa8>
 800c446:	230c      	movs	r3, #12
 800c448:	6033      	str	r3, [r6, #0]
 800c44a:	4630      	mov	r0, r6
 800c44c:	f000 f80c 	bl	800c468 <__malloc_unlock>
 800c450:	e794      	b.n	800c37c <_malloc_r+0x20>
 800c452:	6005      	str	r5, [r0, #0]
 800c454:	e7d6      	b.n	800c404 <_malloc_r+0xa8>
 800c456:	bf00      	nop
 800c458:	200005d8 	.word	0x200005d8

0800c45c <__malloc_lock>:
 800c45c:	4801      	ldr	r0, [pc, #4]	@ (800c464 <__malloc_lock+0x8>)
 800c45e:	f000 b891 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c462:	bf00      	nop
 800c464:	20000718 	.word	0x20000718

0800c468 <__malloc_unlock>:
 800c468:	4801      	ldr	r0, [pc, #4]	@ (800c470 <__malloc_unlock+0x8>)
 800c46a:	f000 b88c 	b.w	800c586 <__retarget_lock_release_recursive>
 800c46e:	bf00      	nop
 800c470:	20000718 	.word	0x20000718

0800c474 <realloc>:
 800c474:	4b02      	ldr	r3, [pc, #8]	@ (800c480 <realloc+0xc>)
 800c476:	460a      	mov	r2, r1
 800c478:	4601      	mov	r1, r0
 800c47a:	6818      	ldr	r0, [r3, #0]
 800c47c:	f000 b802 	b.w	800c484 <_realloc_r>
 800c480:	20000018 	.word	0x20000018

0800c484 <_realloc_r>:
 800c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c488:	4680      	mov	r8, r0
 800c48a:	4615      	mov	r5, r2
 800c48c:	460c      	mov	r4, r1
 800c48e:	b921      	cbnz	r1, 800c49a <_realloc_r+0x16>
 800c490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	4611      	mov	r1, r2
 800c496:	f7ff bf61 	b.w	800c35c <_malloc_r>
 800c49a:	b92a      	cbnz	r2, 800c4a8 <_realloc_r+0x24>
 800c49c:	f000 f882 	bl	800c5a4 <_free_r>
 800c4a0:	2400      	movs	r4, #0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4a8:	f000 f8c6 	bl	800c638 <_malloc_usable_size_r>
 800c4ac:	4285      	cmp	r5, r0
 800c4ae:	4606      	mov	r6, r0
 800c4b0:	d802      	bhi.n	800c4b8 <_realloc_r+0x34>
 800c4b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c4b6:	d8f4      	bhi.n	800c4a2 <_realloc_r+0x1e>
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4640      	mov	r0, r8
 800c4bc:	f7ff ff4e 	bl	800c35c <_malloc_r>
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	2800      	cmp	r0, #0
 800c4c4:	d0ec      	beq.n	800c4a0 <_realloc_r+0x1c>
 800c4c6:	42b5      	cmp	r5, r6
 800c4c8:	462a      	mov	r2, r5
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	bf28      	it	cs
 800c4ce:	4632      	movcs	r2, r6
 800c4d0:	f000 f85a 	bl	800c588 <memcpy>
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	4640      	mov	r0, r8
 800c4d8:	f000 f864 	bl	800c5a4 <_free_r>
 800c4dc:	463c      	mov	r4, r7
 800c4de:	e7e0      	b.n	800c4a2 <_realloc_r+0x1e>

0800c4e0 <memset>:
 800c4e0:	4402      	add	r2, r0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d100      	bne.n	800c4ea <memset+0xa>
 800c4e8:	4770      	bx	lr
 800c4ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ee:	e7f9      	b.n	800c4e4 <memset+0x4>

0800c4f0 <strcat>:
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	7814      	ldrb	r4, [r2, #0]
 800c4f6:	4613      	mov	r3, r2
 800c4f8:	3201      	adds	r2, #1
 800c4fa:	2c00      	cmp	r4, #0
 800c4fc:	d1fa      	bne.n	800c4f4 <strcat+0x4>
 800c4fe:	3b01      	subs	r3, #1
 800c500:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c504:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c508:	2a00      	cmp	r2, #0
 800c50a:	d1f9      	bne.n	800c500 <strcat+0x10>
 800c50c:	bd10      	pop	{r4, pc}
	...

0800c510 <_sbrk_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d06      	ldr	r5, [pc, #24]	@ (800c52c <_sbrk_r+0x1c>)
 800c514:	2300      	movs	r3, #0
 800c516:	4604      	mov	r4, r0
 800c518:	4608      	mov	r0, r1
 800c51a:	602b      	str	r3, [r5, #0]
 800c51c:	f7f7 f950 	bl	80037c0 <_sbrk>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d102      	bne.n	800c52a <_sbrk_r+0x1a>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b103      	cbz	r3, 800c52a <_sbrk_r+0x1a>
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	20000714 	.word	0x20000714

0800c530 <__errno>:
 800c530:	4b01      	ldr	r3, [pc, #4]	@ (800c538 <__errno+0x8>)
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	20000018 	.word	0x20000018

0800c53c <__libc_init_array>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	4d0d      	ldr	r5, [pc, #52]	@ (800c574 <__libc_init_array+0x38>)
 800c540:	4c0d      	ldr	r4, [pc, #52]	@ (800c578 <__libc_init_array+0x3c>)
 800c542:	1b64      	subs	r4, r4, r5
 800c544:	10a4      	asrs	r4, r4, #2
 800c546:	2600      	movs	r6, #0
 800c548:	42a6      	cmp	r6, r4
 800c54a:	d109      	bne.n	800c560 <__libc_init_array+0x24>
 800c54c:	4d0b      	ldr	r5, [pc, #44]	@ (800c57c <__libc_init_array+0x40>)
 800c54e:	4c0c      	ldr	r4, [pc, #48]	@ (800c580 <__libc_init_array+0x44>)
 800c550:	f000 f87a 	bl	800c648 <_init>
 800c554:	1b64      	subs	r4, r4, r5
 800c556:	10a4      	asrs	r4, r4, #2
 800c558:	2600      	movs	r6, #0
 800c55a:	42a6      	cmp	r6, r4
 800c55c:	d105      	bne.n	800c56a <__libc_init_array+0x2e>
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	f855 3b04 	ldr.w	r3, [r5], #4
 800c564:	4798      	blx	r3
 800c566:	3601      	adds	r6, #1
 800c568:	e7ee      	b.n	800c548 <__libc_init_array+0xc>
 800c56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56e:	4798      	blx	r3
 800c570:	3601      	adds	r6, #1
 800c572:	e7f2      	b.n	800c55a <__libc_init_array+0x1e>
 800c574:	0800d5c0 	.word	0x0800d5c0
 800c578:	0800d5c0 	.word	0x0800d5c0
 800c57c:	0800d5c0 	.word	0x0800d5c0
 800c580:	0800d5c4 	.word	0x0800d5c4

0800c584 <__retarget_lock_acquire_recursive>:
 800c584:	4770      	bx	lr

0800c586 <__retarget_lock_release_recursive>:
 800c586:	4770      	bx	lr

0800c588 <memcpy>:
 800c588:	440a      	add	r2, r1
 800c58a:	4291      	cmp	r1, r2
 800c58c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c590:	d100      	bne.n	800c594 <memcpy+0xc>
 800c592:	4770      	bx	lr
 800c594:	b510      	push	{r4, lr}
 800c596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c59e:	4291      	cmp	r1, r2
 800c5a0:	d1f9      	bne.n	800c596 <memcpy+0xe>
 800c5a2:	bd10      	pop	{r4, pc}

0800c5a4 <_free_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4605      	mov	r5, r0
 800c5a8:	2900      	cmp	r1, #0
 800c5aa:	d041      	beq.n	800c630 <_free_r+0x8c>
 800c5ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5b0:	1f0c      	subs	r4, r1, #4
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	bfb8      	it	lt
 800c5b6:	18e4      	addlt	r4, r4, r3
 800c5b8:	f7ff ff50 	bl	800c45c <__malloc_lock>
 800c5bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c634 <_free_r+0x90>)
 800c5be:	6813      	ldr	r3, [r2, #0]
 800c5c0:	b933      	cbnz	r3, 800c5d0 <_free_r+0x2c>
 800c5c2:	6063      	str	r3, [r4, #4]
 800c5c4:	6014      	str	r4, [r2, #0]
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5cc:	f7ff bf4c 	b.w	800c468 <__malloc_unlock>
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	d908      	bls.n	800c5e6 <_free_r+0x42>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	1821      	adds	r1, r4, r0
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf01      	itttt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	1809      	addeq	r1, r1, r0
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	e7ed      	b.n	800c5c2 <_free_r+0x1e>
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	b10b      	cbz	r3, 800c5f0 <_free_r+0x4c>
 800c5ec:	42a3      	cmp	r3, r4
 800c5ee:	d9fa      	bls.n	800c5e6 <_free_r+0x42>
 800c5f0:	6811      	ldr	r1, [r2, #0]
 800c5f2:	1850      	adds	r0, r2, r1
 800c5f4:	42a0      	cmp	r0, r4
 800c5f6:	d10b      	bne.n	800c610 <_free_r+0x6c>
 800c5f8:	6820      	ldr	r0, [r4, #0]
 800c5fa:	4401      	add	r1, r0
 800c5fc:	1850      	adds	r0, r2, r1
 800c5fe:	4283      	cmp	r3, r0
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	d1e0      	bne.n	800c5c6 <_free_r+0x22>
 800c604:	6818      	ldr	r0, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	6053      	str	r3, [r2, #4]
 800c60a:	4408      	add	r0, r1
 800c60c:	6010      	str	r0, [r2, #0]
 800c60e:	e7da      	b.n	800c5c6 <_free_r+0x22>
 800c610:	d902      	bls.n	800c618 <_free_r+0x74>
 800c612:	230c      	movs	r3, #12
 800c614:	602b      	str	r3, [r5, #0]
 800c616:	e7d6      	b.n	800c5c6 <_free_r+0x22>
 800c618:	6820      	ldr	r0, [r4, #0]
 800c61a:	1821      	adds	r1, r4, r0
 800c61c:	428b      	cmp	r3, r1
 800c61e:	bf04      	itt	eq
 800c620:	6819      	ldreq	r1, [r3, #0]
 800c622:	685b      	ldreq	r3, [r3, #4]
 800c624:	6063      	str	r3, [r4, #4]
 800c626:	bf04      	itt	eq
 800c628:	1809      	addeq	r1, r1, r0
 800c62a:	6021      	streq	r1, [r4, #0]
 800c62c:	6054      	str	r4, [r2, #4]
 800c62e:	e7ca      	b.n	800c5c6 <_free_r+0x22>
 800c630:	bd38      	pop	{r3, r4, r5, pc}
 800c632:	bf00      	nop
 800c634:	200005d8 	.word	0x200005d8

0800c638 <_malloc_usable_size_r>:
 800c638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63c:	1f18      	subs	r0, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbc      	itt	lt
 800c642:	580b      	ldrlt	r3, [r1, r0]
 800c644:	18c0      	addlt	r0, r0, r3
 800c646:	4770      	bx	lr

0800c648 <_init>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	bf00      	nop
 800c64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64e:	bc08      	pop	{r3}
 800c650:	469e      	mov	lr, r3
 800c652:	4770      	bx	lr

0800c654 <_fini>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	bf00      	nop
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr
