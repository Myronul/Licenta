
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e21c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f44  0800e3a4  0800e3a4  0000f3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2e8  0800f2e8  0001106c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2e8  0800f2e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2f0  0800f2f0  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2f0  0800f2f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f2f4  0800f2f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800f2f8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001106c  2**0
                  CONTENTS
 10 .bss          00014834  2000006c  2000006c  0001106c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200148a0  200148a0  0001106c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bea6  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041de  00000000  00000000  0002cf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d8  00000000  00000000  00031120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000133e  00000000  00000000  000329f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ef5  00000000  00000000  00033d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020cee  00000000  00000000  00059c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e27  00000000  00000000  0007a919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00151740  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c80  00000000  00000000  00151784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00158404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e38c 	.word	0x0800e38c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800e38c 	.word	0x0800e38c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d4:	f00d fd86 	bl	800dfe4 <malloc>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b39      	ldr	r3, [pc, #228]	@ (80005c4 <play_audio_file+0xfc>)
 80004de:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 80004e4:	4b37      	ldr	r3, [pc, #220]	@ (80005c4 <play_audio_file+0xfc>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d067      	beq.n	80005bc <play_audio_file+0xf4>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	mutex = 1;
 80004ec:	4b36      	ldr	r3, [pc, #216]	@ (80005c8 <play_audio_file+0x100>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004f2:	4b34      	ldr	r3, [pc, #208]	@ (80005c4 <play_audio_file+0xfc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f107 020f 	add.w	r2, r7, #15
 80004fa:	4619      	mov	r1, r3
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f002 fe75 	bl	80031ec <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8000502:	4b30      	ldr	r3, [pc, #192]	@ (80005c4 <play_audio_file+0xfc>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	2300      	movs	r3, #0
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800050e:	2100      	movs	r1, #0
 8000510:	482e      	ldr	r0, [pc, #184]	@ (80005cc <play_audio_file+0x104>)
 8000512:	f004 fa15 	bl	8004940 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000516:	e035      	b.n	8000584 <play_audio_file+0xbc>
	{
		mutex = 1;
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <play_audio_file+0x100>)
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer+1024, &flagAudioDone);
 800051e:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <play_audio_file+0xfc>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000526:	f107 020f 	add.w	r2, r7, #15
 800052a:	4619      	mov	r1, r3
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f002 fe5d 	bl	80031ec <read_audio_file>
		mutex = 0;
 8000532:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <play_audio_file+0x100>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 8000538:	bf00      	nop
 800053a:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <play_audio_file+0x108>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f7      	bne.n	800053a <play_audio_file+0x72>
		flagDmaDAC = 0;
 800054a:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <play_audio_file+0x108>)
 800054c:	2200      	movs	r2, #0
 800054e:	701a      	strb	r2, [r3, #0]
		mutex = 1;
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <play_audio_file+0x100>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 8000556:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <play_audio_file+0xfc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f107 020f 	add.w	r2, r7, #15
 800055e:	4619      	mov	r1, r3
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f002 fe43 	bl	80031ec <read_audio_file>
		mutex = 0;
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <play_audio_file+0x100>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 800056c:	bf00      	nop
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <play_audio_file+0x108>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	b2db      	uxtb	r3, r3
 8000574:	f083 0301 	eor.w	r3, r3, #1
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d1f7      	bne.n	800056e <play_audio_file+0xa6>
		flagDmaDAC = 0;
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <play_audio_file+0x108>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f083 0301 	eor.w	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1c3      	bne.n	8000518 <play_audio_file+0x50>

	}

	while(flagDmaDAC == 0);
 8000590:	bf00      	nop
 8000592:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <play_audio_file+0x108>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f083 0301 	eor.w	r3, r3, #1
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1f7      	bne.n	8000592 <play_audio_file+0xca>
	flagDmaDAC = 0;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <play_audio_file+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	4808      	ldr	r0, [pc, #32]	@ (80005cc <play_audio_file+0x104>)
 80005ac:	f004 fa8a 	bl	8004ac4 <HAL_DAC_Stop_DMA>

	free(buffer);
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <play_audio_file+0xfc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f00d fd1d 	bl	800dff4 <free>
 80005ba:	e000      	b.n	80005be <play_audio_file+0xf6>
		return;
 80005bc:	bf00      	nop

}
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000088 	.word	0x20000088
 80005c8:	20000090 	.word	0x20000090
 80005cc:	20014168 	.word	0x20014168
 80005d0:	200144aa 	.word	0x200144aa

080005d4 <convert_color_16_to_18>:

uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	6039      	str	r1, [r7, #0]
 80005de:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	0adb      	lsrs	r3, r3, #11
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	115b      	asrs	r3, r3, #5
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005f2:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80005f4:	88fb      	ldrh	r3, [r7, #6]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 031f 	and.w	r3, r3, #31
 80005fc:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	4613      	mov	r3, r2
 8000602:	019b      	lsls	r3, r3, #6
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	4a16      	ldr	r2, [pc, #88]	@ (8000660 <convert_color_16_to_18+0x8c>)
 8000608:	fb82 1203 	smull	r1, r2, r2, r3
 800060c:	441a      	add	r2, r3
 800060e:	1112      	asrs	r2, r2, #4
 8000610:	17db      	asrs	r3, r3, #31
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b2db      	uxtb	r3, r3
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000620:	7b7a      	ldrb	r2, [r7, #13]
 8000622:	4613      	mov	r3, r2
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <convert_color_16_to_18+0x8c>)
 800062a:	fb82 1203 	smull	r1, r2, r2, r3
 800062e:	441a      	add	r2, r3
 8000630:	1112      	asrs	r2, r2, #4
 8000632:	17db      	asrs	r3, r3, #31
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	7bfa      	ldrb	r2, [r7, #15]
 8000640:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	7bba      	ldrb	r2, [r7, #14]
 8000648:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	3302      	adds	r3, #2
 800064e:	7b7a      	ldrb	r2, [r7, #13]
 8000650:	701a      	strb	r2, [r3, #0]

}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	84210843 	.word	0x84210843

08000664 <write_color>:


void write_color(uint16_t color)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 800066e:	f107 020c 	add.w	r2, r7, #12
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ffac 	bl	80005d4 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 800067c:	f107 010c 	add.w	r1, r7, #12
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2203      	movs	r2, #3
 8000686:	4803      	ldr	r0, [pc, #12]	@ (8000694 <write_color+0x30>)
 8000688:	f006 fdd1 	bl	800722e <HAL_SPI_Transmit>


}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20014260 	.word	0x20014260

08000698 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b085      	sub	sp, #20
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
 80006a2:	460b      	mov	r3, r1
 80006a4:	80bb      	strh	r3, [r7, #4]
 80006a6:	4613      	mov	r3, r2
 80006a8:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 80006aa:	88bb      	ldrh	r3, [r7, #4]
 80006ac:	88fa      	ldrh	r2, [r7, #6]
 80006ae:	88b9      	ldrh	r1, [r7, #4]
 80006b0:	88f8      	ldrh	r0, [r7, #6]
 80006b2:	2477      	movs	r4, #119	@ 0x77
 80006b4:	9400      	str	r4, [sp, #0]
 80006b6:	f001 fc71 	bl	8001f9c <set_adress_window>

	DC_DATA();
 80006ba:	2201      	movs	r2, #1
 80006bc:	2108      	movs	r1, #8
 80006be:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <draw_pixel+0x50>)
 80006c0:	f005 f8e2 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 80006c4:	2200      	movs	r2, #0
 80006c6:	2110      	movs	r1, #16
 80006c8:	4807      	ldr	r0, [pc, #28]	@ (80006e8 <draw_pixel+0x50>)
 80006ca:	f005 f8dd 	bl	8005888 <HAL_GPIO_WritePin>

	write_color(color);
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffc7 	bl	8000664 <write_color>

	CS_D();
 80006d6:	2201      	movs	r2, #1
 80006d8:	2110      	movs	r1, #16
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <draw_pixel+0x50>)
 80006dc:	f005 f8d4 	bl	8005888 <HAL_GPIO_WritePin>

}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	40020c00 	.word	0x40020c00

080006ec <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	4603      	mov	r3, r0
 80006f4:	603a      	str	r2, [r7, #0]
 80006f6:	80fb      	strh	r3, [r7, #6]
 80006f8:	460b      	mov	r3, r1
 80006fa:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	88fa      	ldrh	r2, [r7, #6]
 8000700:	88b9      	ldrh	r1, [r7, #4]
 8000702:	88f8      	ldrh	r0, [r7, #6]
 8000704:	2477      	movs	r4, #119	@ 0x77
 8000706:	9400      	str	r4, [sp, #0]
 8000708:	f001 fc48 	bl	8001f9c <set_adress_window>

	DC_DATA();
 800070c:	2201      	movs	r2, #1
 800070e:	2108      	movs	r1, #8
 8000710:	480b      	ldr	r0, [pc, #44]	@ (8000740 <draw_pixel_data+0x54>)
 8000712:	f005 f8b9 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 8000716:	2200      	movs	r2, #0
 8000718:	2110      	movs	r1, #16
 800071a:	4809      	ldr	r0, [pc, #36]	@ (8000740 <draw_pixel_data+0x54>)
 800071c:	f005 f8b4 	bl	8005888 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000720:	f04f 33ff 	mov.w	r3, #4294967295
 8000724:	2203      	movs	r2, #3
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	4806      	ldr	r0, [pc, #24]	@ (8000744 <draw_pixel_data+0x58>)
 800072a:	f006 fd80 	bl	800722e <HAL_SPI_Transmit>

	CS_D();
 800072e:	2201      	movs	r2, #1
 8000730:	2110      	movs	r1, #16
 8000732:	4803      	ldr	r0, [pc, #12]	@ (8000740 <draw_pixel_data+0x54>)
 8000734:	f005 f8a8 	bl	8005888 <HAL_GPIO_WritePin>

}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	40020c00 	.word	0x40020c00
 8000744:	20014260 	.word	0x20014260

08000748 <fill_screen1>:



void fill_screen1(uint16_t color)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af02      	add	r7, sp, #8
 800074e:	4603      	mov	r3, r0
 8000750:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000752:	f107 020c 	add.w	r2, r7, #12
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff3a 	bl	80005d4 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8000760:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000764:	f00d fc3e 	bl	800dfe4 <malloc>
 8000768:	4603      	mov	r3, r0
 800076a:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800076c:	2377      	movs	r3, #119	@ 0x77
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	f240 13df 	movw	r3, #479	@ 0x1df
 8000774:	f240 123f 	movw	r2, #319	@ 0x13f
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f001 fc0e 	bl	8001f9c <set_adress_window>

	DC_DATA();
 8000780:	2201      	movs	r2, #1
 8000782:	2108      	movs	r1, #8
 8000784:	481e      	ldr	r0, [pc, #120]	@ (8000800 <fill_screen1+0xb8>)
 8000786:	f005 f87f 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 800078a:	2200      	movs	r2, #0
 800078c:	2110      	movs	r1, #16
 800078e:	481c      	ldr	r0, [pc, #112]	@ (8000800 <fill_screen1+0xb8>)
 8000790:	f005 f87a 	bl	8005888 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000794:	2300      	movs	r3, #0
 8000796:	82fb      	strh	r3, [r7, #22]
 8000798:	e00f      	b.n	80007ba <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 800079a:	8afa      	ldrh	r2, [r7, #22]
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	4413      	add	r3, r2
 80007a6:	461a      	mov	r2, r3
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	8819      	ldrh	r1, [r3, #0]
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	8011      	strh	r1, [r2, #0]
 80007b2:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80007b4:	8afb      	ldrh	r3, [r7, #22]
 80007b6:	3301      	adds	r3, #1
 80007b8:	82fb      	strh	r3, [r7, #22]
 80007ba:	8afb      	ldrh	r3, [r7, #22]
 80007bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80007c0:	d3eb      	bcc.n	800079a <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	82bb      	strh	r3, [r7, #20]
 80007c6:	e00a      	b.n	80007de <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80007c8:	f04f 33ff 	mov.w	r3, #4294967295
 80007cc:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80007d0:	6939      	ldr	r1, [r7, #16]
 80007d2:	480c      	ldr	r0, [pc, #48]	@ (8000804 <fill_screen1+0xbc>)
 80007d4:	f006 fd2b 	bl	800722e <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80007d8:	8abb      	ldrh	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	82bb      	strh	r3, [r7, #20]
 80007de:	8abb      	ldrh	r3, [r7, #20]
 80007e0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80007e4:	d3f0      	bcc.n	80007c8 <fill_screen1+0x80>

	}

	free(line);
 80007e6:	6938      	ldr	r0, [r7, #16]
 80007e8:	f00d fc04 	bl	800dff4 <free>

	CS_D();
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4803      	ldr	r0, [pc, #12]	@ (8000800 <fill_screen1+0xb8>)
 80007f2:	f005 f849 	bl	8005888 <HAL_GPIO_WritePin>

}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40020c00 	.word	0x40020c00
 8000804:	20014260 	.word	0x20014260

08000808 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8000808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800080c:	b08f      	sub	sp, #60	@ 0x3c
 800080e:	af02      	add	r7, sp, #8
 8000810:	4603      	mov	r3, r0
 8000812:	80fb      	strh	r3, [r7, #6]
 8000814:	466b      	mov	r3, sp
 8000816:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000818:	2377      	movs	r3, #119	@ 0x77
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	f240 13df 	movw	r3, #479	@ 0x1df
 8000820:	f240 123f 	movw	r2, #319	@ 0x13f
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fbb8 	bl	8001f9c <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 800082c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000832:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000836:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000838:	88fb      	ldrh	r3, [r7, #6]
 800083a:	0adb      	lsrs	r3, r3, #11
 800083c:	b29b      	uxth	r3, r3
 800083e:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	115b      	asrs	r3, r3, #5
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800084a:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 800084c:	88fb      	ldrh	r3, [r7, #6]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000856:	7ffa      	ldrb	r2, [r7, #31]
 8000858:	4613      	mov	r3, r2
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	4a4f      	ldr	r2, [pc, #316]	@ (800099c <fill_screen2+0x194>)
 8000860:	fb82 1203 	smull	r1, r2, r2, r3
 8000864:	441a      	add	r2, r3
 8000866:	1112      	asrs	r2, r2, #4
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800086e:	7fba      	ldrb	r2, [r7, #30]
 8000870:	4613      	mov	r3, r2
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	4a4a      	ldr	r2, [pc, #296]	@ (80009a0 <fill_screen2+0x198>)
 8000878:	fb82 1203 	smull	r1, r2, r2, r3
 800087c:	441a      	add	r2, r3
 800087e:	1152      	asrs	r2, r2, #5
 8000880:	17db      	asrs	r3, r3, #31
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 8000886:	7f7a      	ldrb	r2, [r7, #29]
 8000888:	4613      	mov	r3, r2
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	4a43      	ldr	r2, [pc, #268]	@ (800099c <fill_screen2+0x194>)
 8000890:	fb82 1203 	smull	r1, r2, r2, r3
 8000894:	441a      	add	r2, r3
 8000896:	1112      	asrs	r2, r2, #4
 8000898:	17db      	asrs	r3, r3, #31
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 800089e:	2201      	movs	r2, #1
 80008a0:	2108      	movs	r1, #8
 80008a2:	4840      	ldr	r0, [pc, #256]	@ (80009a4 <fill_screen2+0x19c>)
 80008a4:	f004 fff0 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	483d      	ldr	r0, [pc, #244]	@ (80009a4 <fill_screen2+0x19c>)
 80008ae:	f004 ffeb 	bl	8005888 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80008b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008b4:	460b      	mov	r3, r1
 80008b6:	3b01      	subs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	2300      	movs	r3, #0
 80008bc:	4688      	mov	r8, r1
 80008be:	4699      	mov	r9, r3
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	f04f 0300 	mov.w	r3, #0
 80008c8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008cc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008d0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008d4:	2300      	movs	r3, #0
 80008d6:	460c      	mov	r4, r1
 80008d8:	461d      	mov	r5, r3
 80008da:	f04f 0200 	mov.w	r2, #0
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	00eb      	lsls	r3, r5, #3
 80008e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008e8:	00e2      	lsls	r2, r4, #3
 80008ea:	1dcb      	adds	r3, r1, #7
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	ebad 0d03 	sub.w	sp, sp, r3
 80008f4:	ab02      	add	r3, sp, #8
 80008f6:	3300      	adds	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008fe:	e011      	b.n	8000924 <fill_screen2+0x11c>
	{
		frame[j] = r;
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000904:	4413      	add	r3, r2
 8000906:	7ffa      	ldrb	r2, [r7, #31]
 8000908:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 800090a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090c:	3301      	adds	r3, #1
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	7fb9      	ldrb	r1, [r7, #30]
 8000912:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000916:	3302      	adds	r3, #2
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	7f79      	ldrb	r1, [r7, #29]
 800091c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800091e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000920:	3303      	adds	r3, #3
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000928:	429a      	cmp	r2, r3
 800092a:	d3e9      	bcc.n	8000900 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <fill_screen2+0x1a0>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800094a:	e012      	b.n	8000972 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 800094c:	bf00      	nop
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <fill_screen2+0x1a0>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0fa      	beq.n	800094e <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <fill_screen2+0x1a0>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800095e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000960:	b29b      	uxth	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	6979      	ldr	r1, [r7, #20]
 8000966:	4811      	ldr	r0, [pc, #68]	@ (80009ac <fill_screen2+0x1a4>)
 8000968:	f007 f98e 	bl	8007c88 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 800096c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800096e:	3301      	adds	r3, #1
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000972:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3e8      	bcc.n	800094c <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800097a:	bf00      	nop
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <fill_screen2+0x1a0>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0fa      	beq.n	800097c <fill_screen2+0x174>
	CS_D();
 8000986:	2201      	movs	r2, #1
 8000988:	2110      	movs	r1, #16
 800098a:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <fill_screen2+0x19c>)
 800098c:	f004 ff7c 	bl	8005888 <HAL_GPIO_WritePin>
 8000990:	46b5      	mov	sp, r6
}
 8000992:	bf00      	nop
 8000994:	3734      	adds	r7, #52	@ 0x34
 8000996:	46bd      	mov	sp, r7
 8000998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800099c:	84210843 	.word	0x84210843
 80009a0:	82082083 	.word	0x82082083
 80009a4:	40020c00 	.word	0x40020c00
 80009a8:	200144a8 	.word	0x200144a8
 80009ac:	20014260 	.word	0x20014260

080009b0 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b089      	sub	sp, #36	@ 0x24
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	4604      	mov	r4, r0
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4623      	mov	r3, r4
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	4603      	mov	r3, r0
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	70fb      	strb	r3, [r7, #3]
 80009ca:	4613      	mov	r3, r2
 80009cc:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80009ce:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab8 <print_character+0x108>)
 80009d0:	889a      	ldrh	r2, [r3, #4]
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	4413      	add	r3, r2
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	3b01      	subs	r3, #1
 80009da:	b29c      	uxth	r4, r3
 80009dc:	4b36      	ldr	r3, [pc, #216]	@ (8000ab8 <print_character+0x108>)
 80009de:	88da      	ldrh	r2, [r3, #6]
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	3b01      	subs	r3, #1
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	88b9      	ldrh	r1, [r7, #4]
 80009ec:	88f8      	ldrh	r0, [r7, #6]
 80009ee:	2277      	movs	r2, #119	@ 0x77
 80009f0:	9200      	str	r2, [sp, #0]
 80009f2:	4622      	mov	r2, r4
 80009f4:	f001 fad2 	bl	8001f9c <set_adress_window>

	uint16_t mask = 0x8000;
 80009f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009fc:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 8000a02:	f107 020c 	add.w	r2, r7, #12
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fde2 	bl	80005d4 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8000a10:	f107 0208 	add.w	r2, r7, #8
 8000a14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fddb 	bl	80005d4 <convert_color_16_to_18>


	DC_DATA();
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2108      	movs	r1, #8
 8000a22:	4826      	ldr	r0, [pc, #152]	@ (8000abc <print_character+0x10c>)
 8000a24:	f004 ff30 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2110      	movs	r1, #16
 8000a2c:	4823      	ldr	r0, [pc, #140]	@ (8000abc <print_character+0x10c>)
 8000a2e:	f004 ff2b 	bl	8005888 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	75fb      	strb	r3, [r7, #23]
 8000a36:	e030      	b.n	8000a9a <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <print_character+0x108>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	3b20      	subs	r3, #32
 8000a40:	491d      	ldr	r1, [pc, #116]	@ (8000ab8 <print_character+0x108>)
 8000a42:	88c9      	ldrh	r1, [r1, #6]
 8000a44:	fb03 f101 	mul.w	r1, r3, r1
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	4413      	add	r3, r2
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	75bb      	strb	r3, [r7, #22]
 8000a58:	e016      	b.n	8000a88 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000a5a:	8a7a      	ldrh	r2, [r7, #18]
 8000a5c:	7dbb      	ldrb	r3, [r7, #22]
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	8abb      	ldrh	r3, [r7, #20]
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f8fc 	bl	8001c6c <LCD_send_data_multi>
 8000a74:	e005      	b.n	8000a82 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 f8f5 	bl	8001c6c <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000a82:	7dbb      	ldrb	r3, [r7, #22]
 8000a84:	3301      	adds	r3, #1
 8000a86:	75bb      	strb	r3, [r7, #22]
 8000a88:	7dbb      	ldrb	r3, [r7, #22]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <print_character+0x108>)
 8000a8e:	889b      	ldrh	r3, [r3, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d3e2      	bcc.n	8000a5a <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	3301      	adds	r3, #1
 8000a98:	75fb      	strb	r3, [r7, #23]
 8000a9a:	7dfb      	ldrb	r3, [r7, #23]
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <print_character+0x108>)
 8000aa0:	88db      	ldrh	r3, [r3, #6]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3c8      	bcc.n	8000a38 <print_character+0x88>
			}
		}
	}

	CS_D();
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <print_character+0x10c>)
 8000aac:	f004 feec 	bl	8005888 <HAL_GPIO_WritePin>

}
 8000ab0:	bf00      	nop
 8000ab2:	371c      	adds	r7, #28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	40020c00 	.word	0x40020c00

08000ac0 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint16_t fontColor, uint16_t backColor)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60ba      	str	r2, [r7, #8]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4603      	mov	r3, r0
 8000acc:	81fb      	strh	r3, [r7, #14]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	81bb      	strh	r3, [r7, #12]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]

	char *temp = string;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	617b      	str	r3, [r7, #20]

	while((*string)!='\0')
 8000ada:	e027      	b.n	8000b2c <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	4a18      	ldr	r2, [pc, #96]	@ (8000b40 <print_string+0x80>)
 8000ae0:	8892      	ldrh	r2, [r2, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ae8:	dd07      	ble.n	8000afa <print_string+0x3a>
		{
			x = font.width;
 8000aea:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <print_string+0x80>)
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <print_string+0x80>)
 8000af2:	88da      	ldrh	r2, [r3, #6]
 8000af4:	89bb      	ldrh	r3, [r7, #12]
 8000af6:	4413      	add	r3, r2
 8000af8:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000afa:	89bb      	ldrh	r3, [r7, #12]
 8000afc:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <print_string+0x80>)
 8000afe:	88d2      	ldrh	r2, [r2, #6]
 8000b00:	4413      	add	r3, r2
 8000b02:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000b06:	dc16      	bgt.n	8000b36 <print_string+0x76>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	88fc      	ldrh	r4, [r7, #6]
 8000b0e:	89b9      	ldrh	r1, [r7, #12]
 8000b10:	89f8      	ldrh	r0, [r7, #14]
 8000b12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	4623      	mov	r3, r4
 8000b18:	f7ff ff4a 	bl	80009b0 <print_character>
		string++;
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <print_string+0x80>)
 8000b24:	889a      	ldrh	r2, [r3, #4]
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	4413      	add	r3, r2
 8000b2a:	81fb      	strh	r3, [r7, #14]
	while((*string)!='\0')
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1d3      	bne.n	8000adc <print_string+0x1c>
 8000b34:	e000      	b.n	8000b38 <print_string+0x78>
			return;
 8000b36:	bf00      	nop
	}

}
 8000b38:	371c      	adds	r7, #28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000000 	.word	0x20000000

08000b44 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4608      	mov	r0, r1
 8000b4e:	4611      	mov	r1, r2
 8000b50:	461a      	mov	r2, r3
 8000b52:	4623      	mov	r3, r4
 8000b54:	80fb      	strh	r3, [r7, #6]
 8000b56:	4603      	mov	r3, r0
 8000b58:	80bb      	strh	r3, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	807b      	strh	r3, [r7, #2]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4413      	add	r3, r2
 8000b68:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	88bb      	ldrh	r3, [r7, #4]
 8000b72:	88b9      	ldrh	r1, [r7, #4]
 8000b74:	88f8      	ldrh	r0, [r7, #6]
 8000b76:	2477      	movs	r4, #119	@ 0x77
 8000b78:	9400      	str	r4, [sp, #0]
 8000b7a:	f001 fa0f 	bl	8001f9c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	883b      	ldrh	r3, [r7, #0]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fd24 	bl	80005d4 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	81fb      	strh	r3, [r7, #14]
 8000b90:	e008      	b.n	8000ba4 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2103      	movs	r1, #3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 f867 	bl	8001c6c <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000b9e:	89fb      	ldrh	r3, [r7, #14]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	81fb      	strh	r3, [r7, #14]
 8000ba4:	89fa      	ldrh	r2, [r7, #14]
 8000ba6:	8879      	ldrh	r1, [r7, #2]
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	1acb      	subs	r3, r1, r3
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf0      	blt.n	8000b92 <draw_horizontal_line+0x4e>
	}


}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}

08000bba <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000bba:	b590      	push	{r4, r7, lr}
 8000bbc:	b087      	sub	sp, #28
 8000bbe:	af02      	add	r7, sp, #8
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4623      	mov	r3, r4
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80bb      	strh	r3, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	807b      	strh	r3, [r7, #2]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000bd8:	88ba      	ldrh	r2, [r7, #4]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	4413      	add	r3, r2
 8000bde:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	88b9      	ldrh	r1, [r7, #4]
 8000bea:	88f8      	ldrh	r0, [r7, #6]
 8000bec:	2477      	movs	r4, #119	@ 0x77
 8000bee:	9400      	str	r4, [sp, #0]
 8000bf0:	f001 f9d4 	bl	8001f9c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000bf4:	f107 0208 	add.w	r2, r7, #8
 8000bf8:	883b      	ldrh	r3, [r7, #0]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fce9 	bl	80005d4 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	81fb      	strh	r3, [r7, #14]
 8000c06:	e008      	b.n	8000c1a <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 f82c 	bl	8001c6c <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000c14:	89fb      	ldrh	r3, [r7, #14]
 8000c16:	3301      	adds	r3, #1
 8000c18:	81fb      	strh	r3, [r7, #14]
 8000c1a:	89fa      	ldrh	r2, [r7, #14]
 8000c1c:	8879      	ldrh	r1, [r7, #2]
 8000c1e:	88bb      	ldrh	r3, [r7, #4]
 8000c20:	1acb      	subs	r3, r1, r3
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbf0      	blt.n	8000c08 <draw_vertical_line+0x4e>
	}


}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd90      	pop	{r4, r7, pc}

08000c30 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	80fb      	strh	r3, [r7, #6]
 8000c42:	4603      	mov	r3, r0
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000c4e:	887a      	ldrh	r2, [r7, #2]
 8000c50:	883b      	ldrh	r3, [r7, #0]
 8000c52:	fb12 f303 	smulbb	r3, r2, r3
 8000c56:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000c58:	f107 020c 	add.w	r2, r7, #12
 8000c5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fcb7 	bl	80005d4 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000c66:	8aba      	ldrh	r2, [r7, #20]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00d f9b8 	bl	800dfe4 <malloc>
 8000c74:	4603      	mov	r3, r0
 8000c76:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	82fb      	strh	r3, [r7, #22]
 8000c7c:	e00f      	b.n	8000c9e <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c7e:	8afa      	ldrh	r2, [r7, #22]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4413      	add	r3, r2
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	8819      	ldrh	r1, [r3, #0]
 8000c92:	789b      	ldrb	r3, [r3, #2]
 8000c94:	8011      	strh	r1, [r2, #0]
 8000c96:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	82fb      	strh	r3, [r7, #22]
 8000c9e:	8afa      	ldrh	r2, [r7, #22]
 8000ca0:	8abb      	ldrh	r3, [r7, #20]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3eb      	bcc.n	8000c7e <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4413      	add	r3, r2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b29c      	uxth	r4, r3
 8000cb2:	88ba      	ldrh	r2, [r7, #4]
 8000cb4:	883b      	ldrh	r3, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	88b9      	ldrh	r1, [r7, #4]
 8000cc0:	88f8      	ldrh	r0, [r7, #6]
 8000cc2:	2277      	movs	r2, #119	@ 0x77
 8000cc4:	9200      	str	r2, [sp, #0]
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	f001 f968 	bl	8001f9c <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000ccc:	8aba      	ldrh	r2, [r7, #20]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	6938      	ldr	r0, [r7, #16]
 8000cd8:	f000 ffc8 	bl	8001c6c <LCD_send_data_multi>

	free(data);
 8000cdc:	6938      	ldr	r0, [r7, #16]
 8000cde:	f00d f989 	bl	800dff4 <free>

}
 8000ce2:	bf00      	nop
 8000ce4:	371c      	adds	r7, #28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}

08000cea <init_entity_sd>:


void init_entity_sd(ENTITY *entity)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
	entity->x0 = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	805a      	strh	r2, [r3, #2]
	entity->y0 = 0;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	809a      	strh	r2, [r3, #4]
	entity->y1 = 0;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	811a      	strh	r2, [r3, #8]
	entity->x1 = 0;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2200      	movs	r2, #0
 8000d08:	80da      	strh	r2, [r3, #6]

	entity->ST.SD.filePathName = malloc(sizeof(char)*20);
 8000d0a:	2014      	movs	r0, #20
 8000d0c:	f00d f96a 	bl	800dfe4 <malloc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	611a      	str	r2, [r3, #16]
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <free_entity_sd>:


void free_entity_sd(ENTITY *entity)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	free(entity->ST.SD.filePathName);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f00d f961 	bl	800dff4 <free>
	free(entity->ST.SD.data);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f00d f95c 	bl	800dff4 <free>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <draw_entity>:


void draw_entity(ENTITY *entity)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	6078      	str	r0, [r7, #4]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]

	if(((entity->id & 1<<7) != 0))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	da72      	bge.n	8000e40 <draw_entity+0xfc>
	{
		/*Avem imagine monocolor <= 32x32 -> imagine nu se afla pe cardul SD!*/

		if((entity->id & (0xC0)) == 0xC0)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000d62:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d64:	d108      	bne.n	8000d78 <draw_entity+0x34>
		{
			/*
			 * Imagine stocata local in bufferul *data din afara structurii
			 */

			LCD_send_data_multi(entity->ST.LC.data, entity->ST.LC.size);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4610      	mov	r0, r2
 8000d72:	f000 ff7b 	bl	8001c6c <LCD_send_data_multi>
 8000d76:	e0e8      	b.n	8000f4a <draw_entity+0x206>
			return;

		}

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	fb12 f303 	smulbb	r3, r2, r3
 8000d8c:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->ST.color, pixel);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	899b      	ldrh	r3, [r3, #12]
 8000d92:	f107 020c 	add.w	r2, r7, #12
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc1b 	bl	80005d4 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000d9e:	8aba      	ldrh	r2, [r7, #20]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f00d f91c 	bl	800dfe4 <malloc>
 8000dac:	4603      	mov	r3, r0
 8000dae:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000db0:	2300      	movs	r3, #0
 8000db2:	82fb      	strh	r3, [r7, #22]
 8000db4:	e00f      	b.n	8000dd6 <draw_entity+0x92>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000db6:	8afa      	ldrh	r2, [r7, #22]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	8819      	ldrh	r1, [r3, #0]
 8000dca:	789b      	ldrb	r3, [r3, #2]
 8000dcc:	8011      	strh	r1, [r2, #0]
 8000dce:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000dd0:	8afb      	ldrh	r3, [r7, #22]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	82fb      	strh	r3, [r7, #22]
 8000dd6:	8afa      	ldrh	r2, [r7, #22]
 8000dd8:	8abb      	ldrh	r3, [r7, #20]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d3eb      	bcc.n	8000db6 <draw_entity+0x72>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000de4:	b298      	uxth	r0, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dec:	b299      	uxth	r1, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29c      	uxth	r4, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	2277      	movs	r2, #119	@ 0x77
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	4622      	mov	r2, r4
 8000e24:	f001 f8ba 	bl	8001f9c <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000e28:	8aba      	ldrh	r2, [r7, #20]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	6938      	ldr	r0, [r7, #16]
 8000e34:	f000 ff1a 	bl	8001c6c <LCD_send_data_multi>

		free(data);
 8000e38:	6938      	ldr	r0, [r7, #16]
 8000e3a:	f00d f8db 	bl	800dff4 <free>
 8000e3e:	e084      	b.n	8000f4a <draw_entity+0x206>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000e40:	2300      	movs	r3, #0
 8000e42:	817b      	strh	r3, [r7, #10]

		read_image_file(entity, &byteNr, &flagImgDone);
 8000e44:	f107 020f 	add.w	r2, r7, #15
 8000e48:	f107 030a 	add.w	r3, r7, #10
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f002 fb04 	bl	800345c <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e62:	b299      	uxth	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b29c      	uxth	r4, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	2277      	movs	r2, #119	@ 0x77
 8000e96:	9200      	str	r2, [sp, #0]
 8000e98:	4622      	mov	r2, r4
 8000e9a:	f001 f87f 	bl	8001f9c <set_adress_window>

		DC_DATA();
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	482b      	ldr	r0, [pc, #172]	@ (8000f50 <draw_entity+0x20c>)
 8000ea4:	f004 fcf0 	bl	8005888 <HAL_GPIO_WritePin>
		CS_A();
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4828      	ldr	r0, [pc, #160]	@ (8000f50 <draw_entity+0x20c>)
 8000eae:	f004 fceb 	bl	8005888 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000eb2:	897b      	ldrh	r3, [r7, #10]
 8000eb4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000eb8:	d20c      	bcs.n	8000ed4 <draw_entity+0x190>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->ST.SD.data, byteNr);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	897a      	ldrh	r2, [r7, #10]
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 fed2 	bl	8001c6c <LCD_send_data_multi>
			free(entity->ST.SD.data);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00d f891 	bl	800dff4 <free>
 8000ed2:	e03a      	b.n	8000f4a <draw_entity+0x206>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <draw_entity+0x210>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	897a      	ldrh	r2, [r7, #10]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481d      	ldr	r0, [pc, #116]	@ (8000f58 <draw_entity+0x214>)
 8000ee4:	f006 fed0 	bl	8007c88 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d11c      	bne.n	8000f28 <draw_entity+0x1e4>
				{
					break;
				}

				read_image_file(entity, &byteNr, &flagImgDone);
 8000eee:	f107 020f 	add.w	r2, r7, #15
 8000ef2:	f107 030a 	add.w	r3, r7, #10
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f002 faaf 	bl	800345c <read_image_file>

				while(flagDmaSpiTx == 0);
 8000efe:	bf00      	nop
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <draw_entity+0x210>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0fa      	beq.n	8000f00 <draw_entity+0x1bc>
				flagDmaSpiTx = 0;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <draw_entity+0x210>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	897a      	ldrh	r2, [r7, #10]
 8000f16:	4619      	mov	r1, r3
 8000f18:	480f      	ldr	r0, [pc, #60]	@ (8000f58 <draw_entity+0x214>)
 8000f1a:	f006 feb5 	bl	8007c88 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000f24:	d2e0      	bcs.n	8000ee8 <draw_entity+0x1a4>
 8000f26:	e000      	b.n	8000f2a <draw_entity+0x1e6>
					break;
 8000f28:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000f2a:	bf00      	nop
 8000f2c:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <draw_entity+0x210>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0fa      	beq.n	8000f2c <draw_entity+0x1e8>
		free(entity->ST.SD.data);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f00d f85a 	bl	800dff4 <free>
		CS_D();
 8000f40:	2201      	movs	r2, #1
 8000f42:	2110      	movs	r1, #16
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <draw_entity+0x20c>)
 8000f46:	f004 fc9f 	bl	8005888 <HAL_GPIO_WritePin>

	}


}
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	40020c00 	.word	0x40020c00
 8000f54:	200144a8 	.word	0x200144a8
 8000f58:	20014260 	.word	0x20014260

08000f5c <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000f5c:	b5b0      	push	{r4, r5, r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	4608      	mov	r0, r1
 8000f66:	4611      	mov	r1, r2
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	817b      	strh	r3, [r7, #10]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	813b      	strh	r3, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	71fb      	strb	r3, [r7, #7]
	 * 		  Modul de Step activ 1, neactiv 0 (deplasare in interiorul ferestrei initiale)
	 * Output: Void
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000f76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f2c0 810f 	blt.w	800119e <translation_entity+0x242>
 8000f80:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f84:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f88:	f300 8109 	bgt.w	800119e <translation_entity+0x242>
 8000f8c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f2c0 8104 	blt.w	800119e <translation_entity+0x242>
 8000f96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f9a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f9e:	f300 80fe 	bgt.w	800119e <translation_entity+0x242>

		return;
	}


	ENTITY temp = *entity;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f107 0414 	add.w	r4, r7, #20
 8000fa8:	461d      	mov	r5, r3
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	897a      	ldrh	r2, [r7, #10]
 8000fb6:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	893a      	ldrh	r2, [r7, #8]
 8000fbc:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000fbe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fc2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d163      	bne.n	8001092 <translation_entity+0x136>
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d060      	beq.n	8001092 <translation_entity+0x136>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000fd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000fd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fde:	440b      	add	r3, r1
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	da23      	bge.n	800102c <translation_entity+0xd0>
 8000fe4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fe8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dd1d      	ble.n	800102c <translation_entity+0xd0>
		{
			/*Pentru cazul deplasarii pe +x*/
			mutex = 1;
 8000ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80011b0 <translation_entity+0x254>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f7ff fea4 	bl	8000d44 <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, BackGroundColor); /*Culoare background*/
 8000ffc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001000:	b298      	uxth	r0, r3
 8001002:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001006:	b299      	uxth	r1, r3
 8001008:	897a      	ldrh	r2, [r7, #10]
 800100a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800100e:	b29b      	uxth	r3, r3
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001018:	b29c      	uxth	r4, r3
 800101a:	4b66      	ldr	r3, [pc, #408]	@ (80011b4 <translation_entity+0x258>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	4623      	mov	r3, r4
 8001022:	f7ff fe05 	bl	8000c30 <draw_rectangle>
			mutex = 0;
 8001026:	4b62      	ldr	r3, [pc, #392]	@ (80011b0 <translation_entity+0x254>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800102c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001030:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001034:	429a      	cmp	r2, r3
 8001036:	f280 80b4 	bge.w	80011a2 <translation_entity+0x246>
 800103a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800103e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001042:	4413      	add	r3, r2
 8001044:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001048:	4293      	cmp	r3, r2
 800104a:	f340 80aa 	ble.w	80011a2 <translation_entity+0x246>
		{
			/*Pentru cazul deplasarii pe -x*/
			mutex = 1;
 800104e:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <translation_entity+0x254>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff fe75 	bl	8000d44 <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, BackGroundColor); /*Culoare background*/
 800105a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800105e:	b29a      	uxth	r2, r3
 8001060:	897b      	ldrh	r3, [r7, #10]
 8001062:	4413      	add	r3, r2
 8001064:	b298      	uxth	r0, r3
 8001066:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800106a:	b299      	uxth	r1, r3
 800106c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001070:	b29a      	uxth	r2, r3
 8001072:	897b      	ldrh	r3, [r7, #10]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b29a      	uxth	r2, r3
 8001078:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800107c:	b29c      	uxth	r4, r3
 800107e:	4b4d      	ldr	r3, [pc, #308]	@ (80011b4 <translation_entity+0x258>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	4623      	mov	r3, r4
 8001086:	f7ff fdd3 	bl	8000c30 <draw_rectangle>
			mutex = 0;
 800108a:	4b49      	ldr	r3, [pc, #292]	@ (80011b0 <translation_entity+0x254>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001090:	e087      	b.n	80011a2 <translation_entity+0x246>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8001092:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001096:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800109a:	429a      	cmp	r2, r3
 800109c:	d163      	bne.n	8001166 <translation_entity+0x20a>
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d060      	beq.n	8001166 <translation_entity+0x20a>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 80010a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80010a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010b2:	440b      	add	r3, r1
 80010b4:	429a      	cmp	r2, r3
 80010b6:	da24      	bge.n	8001102 <translation_entity+0x1a6>
 80010b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dd1e      	ble.n	8001102 <translation_entity+0x1a6>
			{
				/*Pentru cazul deplasarii pe +y*/
				mutex = 1;
 80010c4:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <translation_entity+0x254>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f7ff fe3a 	bl	8000d44 <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, BackGroundColor);
 80010d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010d4:	b298      	uxth	r0, r3
 80010d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010da:	b299      	uxth	r1, r3
 80010dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010e0:	b29c      	uxth	r4, r3
 80010e2:	893a      	ldrh	r2, [r7, #8]
 80010e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <translation_entity+0x258>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	4622      	mov	r2, r4
 80010f8:	f7ff fd9a 	bl	8000c30 <draw_rectangle>
				mutex = 0;
 80010fc:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <translation_entity+0x254>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001102:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001106:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800110a:	429a      	cmp	r2, r3
 800110c:	da4b      	bge.n	80011a6 <translation_entity+0x24a>
 800110e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001112:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001116:	4413      	add	r3, r2
 8001118:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800111c:	4293      	cmp	r3, r2
 800111e:	dd42      	ble.n	80011a6 <translation_entity+0x24a>
			{
				/*Pentru cazul deplasarii pe -y*/
				mutex = 1;
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <translation_entity+0x254>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff fe0c 	bl	8000d44 <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, BackGroundColor);
 800112c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001130:	b298      	uxth	r0, r3
 8001132:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001136:	b29a      	uxth	r2, r3
 8001138:	893b      	ldrh	r3, [r7, #8]
 800113a:	4413      	add	r3, r2
 800113c:	b299      	uxth	r1, r3
 800113e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001142:	b29c      	uxth	r4, r3
 8001144:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001148:	b29a      	uxth	r2, r3
 800114a:	893b      	ldrh	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <translation_entity+0x258>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4613      	mov	r3, r2
 8001158:	4622      	mov	r2, r4
 800115a:	f7ff fd69 	bl	8000c30 <draw_rectangle>
				mutex = 0;
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <translation_entity+0x254>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001164:	e01f      	b.n	80011a6 <translation_entity+0x24a>
		}

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/
			mutex = 1;
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <translation_entity+0x254>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f7ff fde9 	bl	8000d44 <draw_entity>
			draw_rectangle(temp.x0, temp.y0, temp.x1, temp.y1, BackGroundColor);
 8001172:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001176:	b298      	uxth	r0, r3
 8001178:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800117c:	b299      	uxth	r1, r3
 800117e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001182:	b29a      	uxth	r2, r3
 8001184:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001188:	b29c      	uxth	r4, r3
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <translation_entity+0x258>)
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4623      	mov	r3, r4
 8001192:	f7ff fd4d 	bl	8000c30 <draw_rectangle>
			mutex = 0;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <translation_entity+0x254>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e004      	b.n	80011a8 <translation_entity+0x24c>
		return;
 800119e:	bf00      	nop
 80011a0:	e002      	b.n	80011a8 <translation_entity+0x24c>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 80011a2:	bf00      	nop
 80011a4:	e000      	b.n	80011a8 <translation_entity+0x24c>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80011a6:	bf00      	nop
		}


}
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdb0      	pop	{r4, r5, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000090 	.word	0x20000090
 80011b4:	20000008 	.word	0x20000008

080011b8 <translation_test>:


void translation_test(ENTITY *entity, uint8_t step, uint16_t delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70fb      	strb	r3, [r7, #3]
 80011c4:	4613      	mov	r3, r2
 80011c6:	803b      	strh	r3, [r7, #0]


	while(1)
	{
		while((entity->x0 + entity->x1) < LCD_Width)
 80011c8:	e013      	b.n	80011f2 <translation_test+0x3a>
		{
			translation_entity(entity, entity->x0+step, entity->y0, 1);//, color);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b219      	sxth	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80011e2:	2301      	movs	r3, #1
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff feb9 	bl	8000f5c <translation_entity>
			HAL_Delay(delay);
 80011ea:	883b      	ldrh	r3, [r7, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fa4f 	bl	8004690 <HAL_Delay>
		while((entity->x0 + entity->x1) < LCD_Width)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f8:	461a      	mov	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001200:	4413      	add	r3, r2
 8001202:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001206:	dbe0      	blt.n	80011ca <translation_test+0x12>
		}
		mutex = 1;
 8001208:	4b54      	ldr	r3, [pc, #336]	@ (800135c <translation_test+0x1a4>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fd98 	bl	8000d44 <draw_entity>
		mutex = 0;
 8001214:	4b51      	ldr	r3, [pc, #324]	@ (800135c <translation_test+0x1a4>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
		entity->x0 = LCD_Width - entity->x1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001226:	b29b      	uxth	r3, r3
 8001228:	b21a      	sxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	805a      	strh	r2, [r3, #2]

		while((entity->y0 + entity->y1) < LCD_Length)
 800122e:	e013      	b.n	8001258 <translation_test+0xa0>
		{

			translation_entity(entity, entity->x0, entity->y0+step, 1);//, color);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800123c:	b29a      	uxth	r2, r3
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	b21a      	sxth	r2, r3
 8001248:	2301      	movs	r3, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fe86 	bl	8000f5c <translation_entity>
			HAL_Delay(delay);
 8001250:	883b      	ldrh	r3, [r7, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fa1c 	bl	8004690 <HAL_Delay>
		while((entity->y0 + entity->y1) < LCD_Length)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001266:	4413      	add	r3, r2
 8001268:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800126c:	dbe0      	blt.n	8001230 <translation_test+0x78>
		}

		mutex = 1;
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <translation_test+0x1a4>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fd65 	bl	8000d44 <draw_entity>
		mutex = 0;
 800127a:	4b38      	ldr	r3, [pc, #224]	@ (800135c <translation_test+0x1a4>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
		entity->y0 = LCD_Length - entity->y1;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001286:	b29b      	uxth	r3, r3
 8001288:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 800128c:	b29b      	uxth	r3, r3
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	809a      	strh	r2, [r3, #4]

		while((entity->x0 - step) > 0)
 8001294:	e013      	b.n	80012be <translation_test+0x106>
		{
			translation_entity(entity, entity->x0-step, entity->y0, 1);//, color);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800129c:	b29a      	uxth	r2, r3
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	b219      	sxth	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80012ae:	2301      	movs	r3, #1
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fe53 	bl	8000f5c <translation_entity>
			HAL_Delay(delay);
 80012b6:	883b      	ldrh	r3, [r7, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 f9e9 	bl	8004690 <HAL_Delay>
		while((entity->x0 - step) > 0)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c4:	461a      	mov	r2, r3
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dce3      	bgt.n	8001296 <translation_test+0xde>
		}

		entity->ST.color = 0xFFFF;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d4:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 80012d6:	4b21      	ldr	r3, [pc, #132]	@ (800135c <translation_test+0x1a4>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd31 	bl	8000d44 <draw_entity>
		mutex = 0;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <translation_test+0x1a4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80012ee:	819a      	strh	r2, [r3, #12]
		entity->x0 = 0;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	805a      	strh	r2, [r3, #2]

		while((entity->y0 - step) > 0)
 80012f6:	e013      	b.n	8001320 <translation_test+0x168>
		{
			translation_entity(entity, entity->x0, entity->y0-step, 1);//, color);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001304:	b29a      	uxth	r2, r3
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	b29b      	uxth	r3, r3
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	b21a      	sxth	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fe22 	bl	8000f5c <translation_entity>
			HAL_Delay(delay);
 8001318:	883b      	ldrh	r3, [r7, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f003 f9b8 	bl	8004690 <HAL_Delay>
		while((entity->y0 - step) > 0)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001326:	461a      	mov	r2, r3
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	dce3      	bgt.n	80012f8 <translation_test+0x140>
		}
		entity->ST.color = 0xFFFF;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001336:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <translation_test+0x1a4>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fd00 	bl	8000d44 <draw_entity>
		mutex = 0;
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <translation_test+0x1a4>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001350:	819a      	strh	r2, [r3, #12]
		entity->y0 = 0;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	809a      	strh	r2, [r3, #4]
		while((entity->x0 + entity->x1) < LCD_Width)
 8001358:	e74b      	b.n	80011f2 <translation_test+0x3a>
 800135a:	bf00      	nop
 800135c:	20000090 	.word	0x20000090

08001360 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b093      	sub	sp, #76	@ 0x4c
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	ed87 0a00 	vstr	s0, [r7]
	 * o referinta catre entitatea de scalat si factorul asociat
	 */

	/*Vom elimina din sfera vizuala imaginea de scalat*/

	draw_rectangle(entity->x0, entity->y0, entity->x1, entity->y1, BackGroundColor);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001372:	b298      	uxth	r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137a:	b299      	uxth	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001382:	b29a      	uxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800138a:	b29c      	uxth	r4, r3
 800138c:	4bb2      	ldr	r3, [pc, #712]	@ (8001658 <scaling_entity+0x2f8>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4623      	mov	r3, r4
 8001394:	f7ff fc4c 	bl	8000c30 <draw_rectangle>
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 8001398:	4bb0      	ldr	r3, [pc, #704]	@ (800165c <scaling_entity+0x2fc>)
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char *fileName = return_file_name_current_path(entity->ST.SD.filePathName);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 feee 	bl	8003182 <return_file_name_current_path>
 80013a6:	62b8      	str	r0, [r7, #40]	@ 0x28

	scalFilePath = assign_filePath("graphic/scalare/");
 80013a8:	48ad      	ldr	r0, [pc, #692]	@ (8001660 <scaling_entity+0x300>)
 80013aa:	f001 fec6 	bl	800313a <assign_filePath>
 80013ae:	6278      	str	r0, [r7, #36]	@ 0x24
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 80013b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013b2:	f7fe ff09 	bl	80001c8 <strlen>
 80013b6:	4604      	mov	r4, r0
 80013b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013ba:	f7fe ff05 	bl	80001c8 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	4423      	add	r3, r4
 80013c2:	3301      	adds	r3, #1
 80013c4:	4619      	mov	r1, r3
 80013c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013c8:	f00c feca 	bl	800e160 <realloc>
 80013cc:	6278      	str	r0, [r7, #36]	@ 0x24
	strcat(scalFilePath, fileName);
 80013ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013d2:	f00c ff03 	bl	800e1dc <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 80013d6:	2300      	movs	r3, #0
 80013d8:	81fb      	strh	r3, [r7, #14]
	bool flagTerm = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	737b      	strb	r3, [r7, #13]

	int i = 0; /*indexi de referinta in M2*/
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
	int jk = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]

	bool flagPixel = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 80013f4:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80013f8:	f00c fdf4 	bl	800dfe4 <malloc>
 80013fc:	4603      	mov	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
	int16_t x1 = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	82fb      	strh	r3, [r7, #22]
	int16_t y1 = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	82bb      	strh	r3, [r7, #20]
	int16_t index = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	827b      	strh	r3, [r7, #18]

	x1 = (int16_t)((entity->x1)*factor);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141a:	edd7 7a00 	vldr	s15, [r7]
 800141e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001426:	ee17 3a90 	vmov	r3, s15
 800142a:	82fb      	strh	r3, [r7, #22]
	y1 = (int16_t)((entity->y1)*factor);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	edd7 7a00 	vldr	s15, [r7]
 800143e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001446:	ee17 3a90 	vmov	r3, s15
 800144a:	82bb      	strh	r3, [r7, #20]



	while(!flagTerm)
 800144c:	e0d2      	b.n	80015f4 <scaling_entity+0x294>
	{
		read_image_file_scaling(entity->ST.SD.filePathName, entity, factor, &x, &flagTerm);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6918      	ldr	r0, [r3, #16]
 8001452:	f107 030d 	add.w	r3, r7, #13
 8001456:	f107 020e 	add.w	r2, r7, #14
 800145a:	ed97 0a00 	vldr	s0, [r7]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	f002 fa68 	bl	8003934 <read_image_file_scaling>

		i = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
		jk = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
 8001478:	e07d      	b.n	8001576 <scaling_entity+0x216>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 800147a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	441a      	add	r2, r3
 8001484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001486:	fb93 f1f2 	sdiv	r1, r3, r2
 800148a:	fb01 f202 	mul.w	r2, r1, r2
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d107      	bne.n	80014a4 <scaling_entity+0x144>
 8001494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001496:	2b00      	cmp	r3, #0
 8001498:	d004      	beq.n	80014a4 <scaling_entity+0x144>
			{
				/*
				 * new line
				 */

				i++;
 800149a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800149c:	3301      	adds	r3, #1
 800149e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 80014a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001664 <scaling_entity+0x304>)
 80014a8:	fb83 3201 	smull	r3, r2, r3, r1
 80014ac:	17cb      	asrs	r3, r1, #31
 80014ae:	1ad2      	subs	r2, r2, r3
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	1aca      	subs	r2, r1, r3
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d102      	bne.n	80014c2 <scaling_entity+0x162>
			{
				flagPixel = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 80014c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d052      	beq.n	8001570 <scaling_entity+0x210>
			{
				ik = (int)i/factor;
 80014ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014d4:	ed97 7a00 	vldr	s14, [r7]
 80014d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e0:	ee17 3a90 	vmov	r3, s15
 80014e4:	623b      	str	r3, [r7, #32]
				jk = (int)j/factor;
 80014e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014f0:	ed97 7a00 	vldr	s14, [r7]
 80014f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	61fb      	str	r3, [r7, #28]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001508:	461a      	mov	r2, r3
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	fb03 f202 	mul.w	r2, r3, r2
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	b29b      	uxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	0052      	lsls	r2, r2, #1
 800151a:	4413      	add	r3, r2
 800151c:	b29b      	uxth	r3, r3
 800151e:	827b      	strh	r3, [r7, #18]

				data[k] = entity->ST.SD.data[index];
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001528:	441a      	add	r2, r3
 800152a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152c:	69b9      	ldr	r1, [r7, #24]
 800152e:	440b      	add	r3, r1
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->ST.SD.data[index + 1];
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800153c:	3301      	adds	r3, #1
 800153e:	441a      	add	r2, r3
 8001540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001542:	3301      	adds	r3, #1
 8001544:	69b9      	ldr	r1, [r7, #24]
 8001546:	440b      	add	r3, r1
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->ST.SD.data[index + 2];
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001554:	3302      	adds	r3, #2
 8001556:	441a      	add	r2, r3
 8001558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800155a:	3302      	adds	r3, #2
 800155c:	69b9      	ldr	r1, [r7, #24]
 800155e:	440b      	add	r3, r1
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	701a      	strb	r2, [r3, #0]

				j++;
 8001564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001566:	3301      	adds	r3, #1
 8001568:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001572:	3301      	adds	r3, #1
 8001574:	633b      	str	r3, [r7, #48]	@ 0x30
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001580:	edd7 7a00 	vldr	s15, [r7]
 8001584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a4:	ee17 2a90 	vmov	r2, s15
 80015a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015aa:	4293      	cmp	r3, r2
 80015ac:	f6ff af65 	blt.w	800147a <scaling_entity+0x11a>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 80015b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015bc:	edd7 7a00 	vldr	s15, [r7]
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c8:	ee17 2a90 	vmov	r2, s15
 80015cc:	89fb      	ldrh	r3, [r7, #14]
 80015ce:	fb03 f202 	mul.w	r2, r3, r2
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	7b7b      	ldrb	r3, [r7, #13]
 80015dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	460a      	mov	r2, r1
 80015ec:	69b9      	ldr	r1, [r7, #24]
 80015ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80015f0:	f002 fb9e 	bl	8003d30 <write_image_file>
	while(!flagTerm)
 80015f4:	7b7b      	ldrb	r3, [r7, #13]
 80015f6:	f083 0301 	eor.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f47f af26 	bne.w	800144e <scaling_entity+0xee>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 8001602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001604:	f00c faed 	bl	800dbe2 <f_unlink>
 8001608:	4603      	mov	r3, r0
 800160a:	747b      	strb	r3, [r7, #17]

	if((res != FR_OK) && (res != FR_NO_FILE))
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <scaling_entity+0x2b8>
 8001612:	7c7b      	ldrb	r3, [r7, #17]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d119      	bne.n	800164c <scaling_entity+0x2ec>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8001618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800161a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800161c:	f00c fb8c 	bl	800dd38 <f_rename>
 8001620:	4603      	mov	r3, r0
 8001622:	747b      	strb	r3, [r7, #17]

	if(res != FR_OK)
 8001624:	7c7b      	ldrb	r3, [r7, #17]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d112      	bne.n	8001650 <scaling_entity+0x2f0>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	8afa      	ldrh	r2, [r7, #22]
 800162e:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	8aba      	ldrh	r2, [r7, #20]
 8001634:	811a      	strh	r2, [r3, #8]
	assign_file_path_entity(entity, scalFilePath);
 8001636:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f001 fdc8 	bl	80031ce <assign_file_path_entity>

	free(data);
 800163e:	69b8      	ldr	r0, [r7, #24]
 8001640:	f00c fcd8 	bl	800dff4 <free>
	free(scalFilePath);
 8001644:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001646:	f00c fcd5 	bl	800dff4 <free>
 800164a:	e002      	b.n	8001652 <scaling_entity+0x2f2>
		return;
 800164c:	bf00      	nop
 800164e:	e000      	b.n	8001652 <scaling_entity+0x2f2>
		return;
 8001650:	bf00      	nop
	//free(entity->data);

}
 8001652:	3744      	adds	r7, #68	@ 0x44
 8001654:	46bd      	mov	sp, r7
 8001656:	bd90      	pop	{r4, r7, pc}
 8001658:	20000008 	.word	0x20000008
 800165c:	0800e3a4 	.word	0x0800e3a4
 8001660:	0800e3c0 	.word	0x0800e3c0
 8001664:	55555556 	.word	0x55555556

08001668 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08b      	sub	sp, #44	@ 0x2c
 800166c:	af02      	add	r7, sp, #8
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	 */


	/*Vom elimina din campul vizual imaginea curenta*/

	draw_rectangle(entity->x0, entity->y0, entity->x1, entity->y1, BackGroundColor);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001678:	b298      	uxth	r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001680:	b299      	uxth	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001688:	b29a      	uxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001690:	b29c      	uxth	r4, r3
 8001692:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <rotate_entity+0x1bc>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4623      	mov	r3, r4
 800169a:	f7ff fac9 	bl	8000c30 <draw_rectangle>

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016ac:	0fd9      	lsrs	r1, r3, #31
 80016ae:	440b      	add	r3, r1
 80016b0:	105b      	asrs	r3, r3, #1
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ca:	0fd9      	lsrs	r1, r3, #31
 80016cc:	440b      	add	r3, r1
 80016ce:	105b      	asrs	r3, r3, #1
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016e0:	0fda      	lsrs	r2, r3, #31
 80016e2:	4413      	add	r3, r2
 80016e4:	105b      	asrs	r3, r3, #1
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	425b      	negs	r3, r3
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016f6:	0fda      	lsrs	r2, r3, #31
 80016f8:	4413      	add	r3, r2
 80016fa:	105b      	asrs	r3, r3, #1
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	425b      	negs	r3, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 800171a:	e074      	b.n	8001806 <rotate_entity+0x19e>
	{
		read_image_file(entity, &byteNr, &flagImgDone);
 800171c:	f107 020f 	add.w	r2, r7, #15
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 fe98 	bl	800345c <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 800172c:	2300      	movs	r3, #0
 800172e:	833b      	strh	r3, [r7, #24]
 8001730:	e064      	b.n	80017fc <rotate_entity+0x194>
		{
			if(j == (entity->x1/2))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001738:	0fda      	lsrs	r2, r3, #31
 800173a:	4413      	add	r3, r2
 800173c:	105b      	asrs	r3, r3, #1
 800173e:	b21b      	sxth	r3, r3
 8001740:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	d110      	bne.n	800176a <rotate_entity+0x102>
			{
				i++;
 8001748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800174c:	b29b      	uxth	r3, r3
 800174e:	3301      	adds	r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800175a:	0fda      	lsrs	r2, r3, #31
 800175c:	4413      	add	r3, r2
 800175e:	105b      	asrs	r3, r3, #1
 8001760:	b21b      	sxth	r3, r3
 8001762:	b29b      	uxth	r3, r3
 8001764:	425b      	negs	r3, r3
 8001766:	b29b      	uxth	r3, r3
 8001768:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 800176a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800176e:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <rotate_entity+0x1c0>)
 8001770:	fb83 3102 	smull	r3, r1, r3, r2
 8001774:	17d3      	asrs	r3, r2, #31
 8001776:	1ac9      	subs	r1, r1, r3
 8001778:	460b      	mov	r3, r1
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	440b      	add	r3, r1
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b21b      	sxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <rotate_entity+0x122>
			{
				flagPixel = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 800178a:	7efb      	ldrb	r3, [r7, #27]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d02f      	beq.n	80017f0 <rotate_entity+0x188>
			{
				pixel[0] = entity->ST.SD.data[k];
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->ST.SD.data[k+1];
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017a6:	3301      	adds	r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->ST.SD.data[k+2];
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017b6:	3302      	adds	r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 80017be:	8afa      	ldrh	r2, [r7, #22]
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 80017c8:	8bba      	ldrh	r2, [r7, #28]
 80017ca:	8abb      	ldrh	r3, [r7, #20]
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 80017d2:	8a7b      	ldrh	r3, [r7, #18]
 80017d4:	8a39      	ldrh	r1, [r7, #16]
 80017d6:	f107 0208 	add.w	r2, r7, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff86 	bl	80006ec <draw_pixel_data>

				j++;
 80017e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 80017f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	833b      	strh	r3, [r7, #24]
 80017fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001800:	89ba      	ldrh	r2, [r7, #12]
 8001802:	4293      	cmp	r3, r2
 8001804:	db95      	blt.n	8001732 <rotate_entity+0xca>
	while(!flagImgDone)
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d184      	bne.n	800171c <rotate_entity+0xb4>

		}
	}


	free(entity->ST.SD.data);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4618      	mov	r0, r3
 8001818:	f00c fbec 	bl	800dff4 <free>

}
 800181c:	bf00      	nop
 800181e:	3724      	adds	r7, #36	@ 0x24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd90      	pop	{r4, r7, pc}
 8001824:	20000008 	.word	0x20000008
 8001828:	55555556 	.word	0x55555556

0800182c <HAL_TIM_PeriodElapsedCallback>:
TCB tcb[MAXPR];
TCB *currentProcess;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	/*
	 * ISR aferent timerului sistemului de operare.
	 * Perioada: Ts = 1ms
	 */

	kernel_count_sleep(); /*modifica flagAllSleep in 1 sau 0*/
 8001834:	f000 f988 	bl	8001b48 <kernel_count_sleep>

    if (htim->Instance == TIM4)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0c      	ldr	r2, [pc, #48]	@ (8001870 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d111      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x3a>
    {

    	if(startOS == 1 && mutex==0 && flagAllSleep==0)
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10d      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x3a>
 800184a:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <HAL_TIM_PeriodElapsedCallback+0x3a>
    	{
    		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001864:	6053      	str	r3, [r2, #4]
    	}
    }


}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40000800 	.word	0x40000800
 8001874:	2000008d 	.word	0x2000008d
 8001878:	20000090 	.word	0x20000090
 800187c:	20000094 	.word	0x20000094
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <PendSV_Handler>:
	 * citirea datelor de pe cardul SD prin SDIO)
	 * Feature: De comutat in functie de o politica de planificare,
	 * momentan se comuta circular intre 2 procese de test!
	 */

    __asm("CPSID I");
 8001884:	b672      	cpsid	i

    /*salvare context curent*/
    __asm("PUSH {R4-R7}");
 8001886:	b4f0      	push	{r4, r5, r6, r7}
    __asm("MOV R4, R8");
 8001888:	4644      	mov	r4, r8
    __asm("MOV R5, R9");
 800188a:	464d      	mov	r5, r9
    __asm("MOV R6, R10");
 800188c:	4656      	mov	r6, sl
    __asm("MOV R7, R11");
 800188e:	465f      	mov	r7, fp
    __asm("PUSH {R4-R7}");
 8001890:	b4f0      	push	{r4, r5, r6, r7}
    __asm("LDR R4, =currentProcess");
 8001892:	4c0b      	ldr	r4, [pc, #44]	@ (80018c0 <PendSV_Handler+0x3c>)
    __asm("LDR R5, [R4]"); /*R5->pstack*/
 8001894:	6825      	ldr	r5, [r4, #0]
    __asm("MOV R6, SP");
 8001896:	466e      	mov	r6, sp
    __asm("STR R6, [R5]"); /*salvam PS curent in pstack*/
 8001898:	602e      	str	r6, [r5, #0]

    /*apel scheduler pentru adresa next proces*/
    __asm("PUSH {R0-R3, LR}");
 800189a:	b50f      	push	{r0, r1, r2, r3, lr}
    __asm("LDR R0, =kernel_scheduler");
 800189c:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <PendSV_Handler+0x40>)
    __asm("BLX R0");
 800189e:	4780      	blx	r0
    __asm("POP {R1-R3, R12, LR}");
 80018a0:	e8bd 500e 	ldmia.w	sp!, {r1, r2, r3, ip, lr}

    /*restaurare context al proc ales de scheduler*/
    __asm("LDR R4, =currentProcess");
 80018a4:	4c06      	ldr	r4, [pc, #24]	@ (80018c0 <PendSV_Handler+0x3c>)
    __asm("STR R0, [R4]");
 80018a6:	6020      	str	r0, [r4, #0]
    __asm("LDR R5, [R0]");
 80018a8:	6805      	ldr	r5, [r0, #0]
    __asm("MOV SP, R5");
 80018aa:	46ad      	mov	sp, r5
    __asm("POP {R4-R7}");
 80018ac:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV R8, R4");
 80018ae:	46a0      	mov	r8, r4
    __asm("MOV R9, R5");
 80018b0:	46a9      	mov	r9, r5
    __asm("MOV R10, R6");
 80018b2:	46b2      	mov	sl, r6
    __asm("MOV R11, R7");
 80018b4:	46bb      	mov	fp, r7
    __asm("POP {R4-R7}");
 80018b6:	bcf0      	pop	{r4, r5, r6, r7}

    __asm("CPSIE I");
 80018b8:	b662      	cpsie	i
    __asm("BX LR");
 80018ba:	4770      	bx	lr
}
 80018bc:	bf00      	nop
 80018be:	0000      	.short	0x0000
 80018c0:	20014160 	.word	0x20014160
 80018c4:	08001b05 	.word	0x08001b05

080018c8 <kernel_add_process>:


void kernel_add_process(void (*adrFunction)(void))
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

	__asm("CPSID   I");
 80018d0:	b672      	cpsid	i

	if(nrProc==MAXPR)
 80018d2:	4b68      	ldr	r3, [pc, #416]	@ (8001a74 <kernel_add_process+0x1ac>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b0a      	cmp	r3, #10
 80018d8:	d101      	bne.n	80018de <kernel_add_process+0x16>
	{
	    __asm("CPSIE   I ");
 80018da:	b662      	cpsie	i
		return;
 80018dc:	e0c4      	b.n	8001a68 <kernel_add_process+0x1a0>
	}

	if(nrProc == 0)
 80018de:	4b65      	ldr	r3, [pc, #404]	@ (8001a74 <kernel_add_process+0x1ac>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d126      	bne.n	8001934 <kernel_add_process+0x6c>
	{
		tcb[0].pnext = &tcb[0];
 80018e6:	4b64      	ldr	r3, [pc, #400]	@ (8001a78 <kernel_add_process+0x1b0>)
 80018e8:	4a63      	ldr	r2, [pc, #396]	@ (8001a78 <kernel_add_process+0x1b0>)
 80018ea:	605a      	str	r2, [r3, #4]

		tcb[0].pstack = &tcb[0].stack[STACKSIZE-16];            /*Atribuire SP*/
 80018ec:	4b62      	ldr	r3, [pc, #392]	@ (8001a78 <kernel_add_process+0x1b0>)
 80018ee:	4a63      	ldr	r2, [pc, #396]	@ (8001a7c <kernel_add_process+0x1b4>)
 80018f0:	601a      	str	r2, [r3, #0]
		tcb[0].pfunction = adrFunction;                         /*Atribuire adr task in TCB*/
 80018f2:	4a61      	ldr	r2, [pc, #388]	@ (8001a78 <kernel_add_process+0x1b0>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-1] = 0x01000000;                 /*Atribuire thumb mod operare reg*/
 80018f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a78 <kernel_add_process+0x1b0>)
 80018fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018fe:	461a      	mov	r2, r3
 8001900:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001904:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-2] = (int32_t)tcb[0].pfunction;  /*Atribuire reg PC catre adr incep Task/functie*/
 8001906:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	461a      	mov	r2, r3
 800190c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <kernel_add_process+0x1b0>)
 800190e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001912:	605a      	str	r2, [r3, #4]
		tcb[0].pID = nrProc++;
 8001914:	4b57      	ldr	r3, [pc, #348]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	b2d1      	uxtb	r1, r2
 800191c:	4a55      	ldr	r2, [pc, #340]	@ (8001a74 <kernel_add_process+0x1ac>)
 800191e:	7011      	strb	r1, [r2, #0]
 8001920:	4a55      	ldr	r2, [pc, #340]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001922:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001926:	7313      	strb	r3, [r2, #12]
		tcb[0].state = awake;
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <kernel_add_process+0x1b0>)
 800192a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800192e:	2201      	movs	r2, #1
 8001930:	735a      	strb	r2, [r3, #13]
 8001932:	e098      	b.n	8001a66 <kernel_add_process+0x19e>

	}

	else
	{
		tcb[nrProc].pnext = &tcb[nrProc-1];
 8001934:	4b4f      	ldr	r3, [pc, #316]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a74 <kernel_add_process+0x1ac>)
 800193c:	7812      	ldrb	r2, [r2, #0]
 800193e:	4610      	mov	r0, r2
 8001940:	f242 0214 	movw	r2, #8212	@ 0x2014
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	4a4b      	ldr	r2, [pc, #300]	@ (8001a78 <kernel_add_process+0x1b0>)
 800194a:	441a      	add	r2, r3
 800194c:	494a      	ldr	r1, [pc, #296]	@ (8001a78 <kernel_add_process+0x1b0>)
 800194e:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001952:	fb00 f303 	mul.w	r3, r0, r3
 8001956:	440b      	add	r3, r1
 8001958:	3304      	adds	r3, #4
 800195a:	601a      	str	r2, [r3, #0]
		tcb[0].pnext = &tcb[nrProc];
 800195c:	4b45      	ldr	r3, [pc, #276]	@ (8001a74 <kernel_add_process+0x1ac>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4a43      	ldr	r2, [pc, #268]	@ (8001a78 <kernel_add_process+0x1b0>)
 800196c:	4413      	add	r3, r2
 800196e:	4a42      	ldr	r2, [pc, #264]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001970:	6053      	str	r3, [r2, #4]

		tcb[nrProc].pstack = &tcb[nrProc].stack[STACKSIZE-16];           /*Atribuire SP*/
 8001972:	4b40      	ldr	r3, [pc, #256]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b3e      	ldr	r3, [pc, #248]	@ (8001a74 <kernel_add_process+0x1ac>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	f503 53fe 	add.w	r3, r3, #8128	@ 0x1fc0
 800198a:	3308      	adds	r3, #8
 800198c:	4a3a      	ldr	r2, [pc, #232]	@ (8001a78 <kernel_add_process+0x1b0>)
 800198e:	4413      	add	r3, r2
 8001990:	1d1a      	adds	r2, r3, #4
 8001992:	4939      	ldr	r1, [pc, #228]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001994:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001998:	fb00 f303 	mul.w	r3, r0, r3
 800199c:	440b      	add	r3, r1
 800199e:	601a      	str	r2, [r3, #0]
		tcb[nrProc].pfunction = adrFunction;                             /*Atribuire adr task in TCB*/
 80019a0:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <kernel_add_process+0x1ac>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4a34      	ldr	r2, [pc, #208]	@ (8001a78 <kernel_add_process+0x1b0>)
 80019a8:	f242 0314 	movw	r3, #8212	@ 0x2014
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3308      	adds	r3, #8
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-1] = 0x01000000;                     /*Atribuire thumb mod operare reg*/
 80019b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <kernel_add_process+0x1ac>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4a2e      	ldr	r2, [pc, #184]	@ (8001a78 <kernel_add_process+0x1b0>)
 80019c0:	f242 0314 	movw	r3, #8212	@ 0x2014
 80019c4:	fb01 f303 	mul.w	r3, r1, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80019ce:	3308      	adds	r3, #8
 80019d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019d4:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-2] = (int32_t)tcb[nrProc].pfunction; /*Atribuire reg PC catre adr incep Task/functie*/
 80019d6:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <kernel_add_process+0x1ac>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	4619      	mov	r1, r3
 80019dc:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <kernel_add_process+0x1b0>)
 80019de:	f242 0314 	movw	r3, #8212	@ 0x2014
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3308      	adds	r3, #8
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <kernel_add_process+0x1ac>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	4611      	mov	r1, r2
 80019f4:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <kernel_add_process+0x1b0>)
 80019f6:	f242 0314 	movw	r3, #8212	@ 0x2014
 80019fa:	fb00 f303 	mul.w	r3, r0, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a04:	3304      	adds	r3, #4
 8001a06:	6019      	str	r1, [r3, #0]
		tcb[nrProc].pID = nrProc;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001a10:	7819      	ldrb	r1, [r3, #0]
 8001a12:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001a14:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001a18:	fb00 f303 	mul.w	r3, r0, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a22:	330c      	adds	r3, #12
 8001a24:	460a      	mov	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
		tcb[nrProc].state = awake;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001a30:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001a3e:	330d      	adds	r3, #13
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]

	    currentProcess = &tcb[nrProc];
 8001a44:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a09      	ldr	r2, [pc, #36]	@ (8001a78 <kernel_add_process+0x1b0>)
 8001a54:	4413      	add	r3, r2
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <kernel_add_process+0x1b8>)
 8001a58:	6013      	str	r3, [r2, #0]
	    nrProc++;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <kernel_add_process+0x1ac>)
 8001a64:	701a      	strb	r2, [r3, #0]
	}

    __asm("CPSIE   I ");
 8001a66:	b662      	cpsie	i

}
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000008c 	.word	0x2000008c
 8001a78:	20000098 	.word	0x20000098
 8001a7c:	20002064 	.word	0x20002064
 8001a80:	20014160 	.word	0x20014160

08001a84 <kernel_start>:
{
	/*
	 * Functie de start a kernelului.
	 */

	__asm("CPSID   I");
 8001a84:	b672      	cpsid	i

	__asm("LDR     R0, =startOS");
 8001a86:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <kernel_start+0x34>)
	__asm("MOV     R1, 1");
 8001a88:	f04f 0101 	mov.w	r1, #1
	__asm("STR     R1, [R0]");
 8001a8c:	6001      	str	r1, [r0, #0]
    __asm("LDR     R0, =currentProcess");
 8001a8e:	480b      	ldr	r0, [pc, #44]	@ (8001abc <kernel_start+0x38>)
    __asm("LDR     R2, [R0]");
 8001a90:	6802      	ldr	r2, [r0, #0]
    __asm("LDR     R4, [R2]");
 8001a92:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4"); /*punem in SP procesorului pstack al &curentProc*/
 8001a94:	46a5      	mov	sp, r4
    /*restauram contextul initial, emuland o intr*/
    __asm("POP     {R4-R7}");
 8001a96:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8001a98:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8001a9a:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8001a9c:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8001a9e:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8001aa0:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("POP     {R0-R3}");
 8001aa2:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 8001aa4:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8001aa6:	46a4      	mov	ip, r4
    __asm("ADD     SP,SP,#4"); /*restauram registrul LR sarind peste R12*/
 8001aa8:	b001      	add	sp, #4
    __asm("POP     {R4}");		/*deaorece nu se poate face pop pentru R12*/
 8001aaa:	bc10      	pop	{r4}

    __asm("MOV     LR, R4");
 8001aac:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4"); /*simulam comportamentul procesorului sarind la PC*/
 8001aae:	b001      	add	sp, #4

    __asm("CPSIE   I ");
 8001ab0:	b662      	cpsie	i
    __asm("BX      LR");
 8001ab2:	4770      	bx	lr

}
 8001ab4:	bf00      	nop
 8001ab6:	0000      	.short	0x0000
 8001ab8:	2000008d 	.word	0x2000008d
 8001abc:	20014160 	.word	0x20014160

08001ac0 <kernel_delay>:


void kernel_delay(unsigned int delay)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	 * currentProcess.
	 * Input: void
	 * Output: void
	 */

	currentProcess->state = sleep;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <kernel_delay+0x3c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	735a      	strb	r2, [r3, #13]
	currentProcess->n = delay;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <kernel_delay+0x3c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6113      	str	r3, [r2, #16]

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <kernel_delay+0x40>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <kernel_delay+0x40>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	6053      	str	r3, [r2, #4]

}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20014160 	.word	0x20014160
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <kernel_scheduler>:


static TCB* kernel_scheduler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
	 * Input: void
	 * Output: TCB*(adresa TCB al procesului)
	 */


	TCB *temp = currentProcess->pnext;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <kernel_scheduler+0x40>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	607b      	str	r3, [r7, #4]

	while(temp!=currentProcess)
 8001b12:	e00a      	b.n	8001b2a <kernel_scheduler+0x26>
	{
		if(temp->state == awake)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b1a:	7b5b      	ldrb	r3, [r3, #13]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <kernel_scheduler+0x20>
		{
			return temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	e009      	b.n	8001b38 <kernel_scheduler+0x34>
		}

		else
		{
			temp = temp->pnext;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	607b      	str	r3, [r7, #4]
	while(temp!=currentProcess)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <kernel_scheduler+0x40>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1ef      	bne.n	8001b14 <kernel_scheduler+0x10>
	}

	/*In cazul in care toate procesele sunt in sleep
	 * Se va returna adresa procesului curent*/

	return currentProcess;
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <kernel_scheduler+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]

}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20014160 	.word	0x20014160

08001b48 <kernel_count_sleep>:



void kernel_count_sleep(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
	 * Output: void
	 */

	static uint8_t nrProcSleep = 0;

	nrProcSleep = 0;
 8001b4e:	4b31      	ldr	r3, [pc, #196]	@ (8001c14 <kernel_count_sleep+0xcc>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
	flagAllSleep = 0;
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <kernel_count_sleep+0xd0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<nrProc; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	e044      	b.n	8001bea <kernel_count_sleep+0xa2>
	{
		if(tcb[i].state == sleep)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a2e      	ldr	r2, [pc, #184]	@ (8001c1c <kernel_count_sleep+0xd4>)
 8001b64:	f242 0114 	movw	r1, #8212	@ 0x2014
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b72:	330d      	adds	r3, #13
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d134      	bne.n	8001be4 <kernel_count_sleep+0x9c>
		{
			nrProcSleep++;
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <kernel_count_sleep+0xcc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <kernel_count_sleep+0xcc>)
 8001b84:	701a      	strb	r2, [r3, #0]

			tcb[i].n--;
 8001b86:	79fa      	ldrb	r2, [r7, #7]
 8001b88:	4924      	ldr	r1, [pc, #144]	@ (8001c1c <kernel_count_sleep+0xd4>)
 8001b8a:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	440b      	add	r3, r1
 8001b94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b98:	3310      	adds	r3, #16
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	1e59      	subs	r1, r3, #1
 8001b9e:	481f      	ldr	r0, [pc, #124]	@ (8001c1c <kernel_count_sleep+0xd4>)
 8001ba0:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001ba4:	fb02 f303 	mul.w	r3, r2, r3
 8001ba8:	4403      	add	r3, r0
 8001baa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bae:	3310      	adds	r3, #16
 8001bb0:	6019      	str	r1, [r3, #0]

			if(tcb[i].n == 0)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a19      	ldr	r2, [pc, #100]	@ (8001c1c <kernel_count_sleep+0xd4>)
 8001bb6:	f242 0114 	movw	r1, #8212	@ 0x2014
 8001bba:	fb01 f303 	mul.w	r3, r1, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bc4:	3310      	adds	r3, #16
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <kernel_count_sleep+0x9c>
			{
				tcb[i].state = awake;
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	4a13      	ldr	r2, [pc, #76]	@ (8001c1c <kernel_count_sleep+0xd4>)
 8001bd0:	f242 0114 	movw	r1, #8212	@ 0x2014
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bde:	330d      	adds	r3, #13
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nrProc; i++)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	3301      	adds	r3, #1
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <kernel_count_sleep+0xd8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d3b5      	bcc.n	8001b60 <kernel_count_sleep+0x18>
			}
		}
	}

	if(nrProcSleep == nrProc)
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <kernel_count_sleep+0xcc>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <kernel_count_sleep+0xd8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d102      	bne.n	8001c06 <kernel_count_sleep+0xbe>
	{
		flagAllSleep = 1;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <kernel_count_sleep+0xd0>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
	}


}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20014164 	.word	0x20014164
 8001c18:	20000094 	.word	0x20000094
 8001c1c:	20000098 	.word	0x20000098
 8001c20:	2000008c 	.word	0x2000008c

08001c24 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2108      	movs	r1, #8
 8001c32:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <LCD_send_command+0x40>)
 8001c34:	f003 fe28 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <LCD_send_command+0x40>)
 8001c3e:	f003 fe23 	bl	8005888 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8001c42:	1df9      	adds	r1, r7, #7
 8001c44:	f04f 33ff 	mov.w	r3, #4294967295
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4807      	ldr	r0, [pc, #28]	@ (8001c68 <LCD_send_command+0x44>)
 8001c4c:	f005 faef 	bl	800722e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8001c50:	2201      	movs	r2, #1
 8001c52:	2110      	movs	r1, #16
 8001c54:	4803      	ldr	r0, [pc, #12]	@ (8001c64 <LCD_send_command+0x40>)
 8001c56:	f003 fe17 	bl	8005888 <HAL_GPIO_WritePin>


}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	20014260 	.word	0x20014260

08001c6c <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8001c7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c80:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c94:	6939      	ldr	r1, [r7, #16]
 8001c96:	fb01 f202 	mul.w	r2, r1, r2
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	482a      	ldr	r0, [pc, #168]	@ (8001d4c <LCD_send_data_multi+0xe0>)
 8001ca4:	f003 fdf0 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2110      	movs	r1, #16
 8001cac:	4827      	ldr	r0, [pc, #156]	@ (8001d4c <LCD_send_data_multi+0xe0>)
 8001cae:	f003 fdeb 	bl	8005888 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d821      	bhi.n	8001cfe <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 8001cba:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4821      	ldr	r0, [pc, #132]	@ (8001d50 <LCD_send_data_multi+0xe4>)
 8001cca:	f005 ffdd 	bl	8007c88 <HAL_SPI_Transmit_DMA>
 8001cce:	e02c      	b.n	8001d2a <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8001cd0:	bf00      	nop
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0fa      	beq.n	8001cd2 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4819      	ldr	r0, [pc, #100]	@ (8001d50 <LCD_send_data_multi+0xe4>)
 8001cec:	f005 ffcc 	bl	8007c88 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e5      	bne.n	8001cd0 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00f      	beq.n	8001d2a <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8001d0a:	bf00      	nop
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0fa      	beq.n	8001d0c <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	480a      	ldr	r0, [pc, #40]	@ (8001d50 <LCD_send_data_multi+0xe4>)
 8001d26:	f005 ffaf 	bl	8007c88 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8001d2a:	bf00      	nop
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <LCD_send_data_multi+0xdc>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0fa      	beq.n	8001d2c <LCD_send_data_multi+0xc0>
	CS_D();
 8001d36:	2201      	movs	r2, #1
 8001d38:	2110      	movs	r1, #16
 8001d3a:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <LCD_send_data_multi+0xe0>)
 8001d3c:	f003 fda4 	bl	8005888 <HAL_GPIO_WritePin>

}
 8001d40:	bf00      	nop
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200144a8 	.word	0x200144a8
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	20014260 	.word	0x20014260

08001d54 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2108      	movs	r1, #8
 8001d62:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <LCD_send_data+0x40>)
 8001d64:	f003 fd90 	bl	8005888 <HAL_GPIO_WritePin>
	CS_A();
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <LCD_send_data+0x40>)
 8001d6e:	f003 fd8b 	bl	8005888 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8001d72:	1df9      	adds	r1, r7, #7
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <LCD_send_data+0x44>)
 8001d7c:	f005 fa57 	bl	800722e <HAL_SPI_Transmit>

	CS_D();
 8001d80:	2201      	movs	r2, #1
 8001d82:	2110      	movs	r1, #16
 8001d84:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <LCD_send_data+0x40>)
 8001d86:	f003 fd7f 	bl	8005888 <HAL_GPIO_WritePin>

}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	20014260 	.word	0x20014260

08001d9c <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8001da0:	2200      	movs	r2, #0
 8001da2:	2140      	movs	r1, #64	@ 0x40
 8001da4:	487c      	ldr	r0, [pc, #496]	@ (8001f98 <ILI9488_driver_init+0x1fc>)
 8001da6:	f003 fd6f 	bl	8005888 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001daa:	200a      	movs	r0, #10
 8001dac:	f002 fc70 	bl	8004690 <HAL_Delay>
	RST_D();
 8001db0:	2201      	movs	r2, #1
 8001db2:	2140      	movs	r1, #64	@ 0x40
 8001db4:	4878      	ldr	r0, [pc, #480]	@ (8001f98 <ILI9488_driver_init+0x1fc>)
 8001db6:	f003 fd67 	bl	8005888 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f7ff ff32 	bl	8001c24 <LCD_send_command>
	HAL_Delay(150);
 8001dc0:	2096      	movs	r0, #150	@ 0x96
 8001dc2:	f002 fc65 	bl	8004690 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8001dc6:	2011      	movs	r0, #17
 8001dc8:	f7ff ff2c 	bl	8001c24 <LCD_send_command>
	HAL_Delay(255);
 8001dcc:	20ff      	movs	r0, #255	@ 0xff
 8001dce:	f002 fc5f 	bl	8004690 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8001dd2:	20e0      	movs	r0, #224	@ 0xe0
 8001dd4:	f7ff ff26 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff ffbb 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0C);
 8001dde:	200c      	movs	r0, #12
 8001de0:	f7ff ffb8 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x05);
 8001de4:	2005      	movs	r0, #5
 8001de6:	f7ff ffb5 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x04);
 8001dea:	2004      	movs	r0, #4
 8001dec:	f7ff ffb2 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0F);
 8001df0:	200f      	movs	r0, #15
 8001df2:	f7ff ffaf 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x06);
 8001df6:	2006      	movs	r0, #6
 8001df8:	f7ff ffac 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x3A);
 8001dfc:	203a      	movs	r0, #58	@ 0x3a
 8001dfe:	f7ff ffa9 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x56);
 8001e02:	2056      	movs	r0, #86	@ 0x56
 8001e04:	f7ff ffa6 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x4D);
 8001e08:	204d      	movs	r0, #77	@ 0x4d
 8001e0a:	f7ff ffa3 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x03);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f7ff ffa0 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0A);
 8001e14:	200a      	movs	r0, #10
 8001e16:	f7ff ff9d 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x06);
 8001e1a:	2006      	movs	r0, #6
 8001e1c:	f7ff ff9a 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x30);
 8001e20:	2030      	movs	r0, #48	@ 0x30
 8001e22:	f7ff ff97 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x3E);
 8001e26:	203e      	movs	r0, #62	@ 0x3e
 8001e28:	f7ff ff94 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0F);
 8001e2c:	200f      	movs	r0, #15
 8001e2e:	f7ff ff91 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8001e32:	20e1      	movs	r0, #225	@ 0xe1
 8001e34:	f7ff fef6 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff ff8b 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x13);
 8001e3e:	2013      	movs	r0, #19
 8001e40:	f7ff ff88 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x18);
 8001e44:	2018      	movs	r0, #24
 8001e46:	f7ff ff85 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x01);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7ff ff82 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x11);
 8001e50:	2011      	movs	r0, #17
 8001e52:	f7ff ff7f 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x06);
 8001e56:	2006      	movs	r0, #6
 8001e58:	f7ff ff7c 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x38);
 8001e5c:	2038      	movs	r0, #56	@ 0x38
 8001e5e:	f7ff ff79 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x34);
 8001e62:	2034      	movs	r0, #52	@ 0x34
 8001e64:	f7ff ff76 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x4D);
 8001e68:	204d      	movs	r0, #77	@ 0x4d
 8001e6a:	f7ff ff73 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x06);
 8001e6e:	2006      	movs	r0, #6
 8001e70:	f7ff ff70 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0D);
 8001e74:	200d      	movs	r0, #13
 8001e76:	f7ff ff6d 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0B);
 8001e7a:	200b      	movs	r0, #11
 8001e7c:	f7ff ff6a 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x31);
 8001e80:	2031      	movs	r0, #49	@ 0x31
 8001e82:	f7ff ff67 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x37);
 8001e86:	2037      	movs	r0, #55	@ 0x37
 8001e88:	f7ff ff64 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0F);
 8001e8c:	200f      	movs	r0, #15
 8001e8e:	f7ff ff61 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8001e92:	20c0      	movs	r0, #192	@ 0xc0
 8001e94:	f7ff fec6 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x18);
 8001e98:	2018      	movs	r0, #24
 8001e9a:	f7ff ff5b 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x16);
 8001e9e:	2016      	movs	r0, #22
 8001ea0:	f7ff ff58 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8001ea4:	20c1      	movs	r0, #193	@ 0xc1
 8001ea6:	f7ff febd 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x45);
 8001eaa:	2045      	movs	r0, #69	@ 0x45
 8001eac:	f7ff ff52 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8001eb0:	20c2      	movs	r0, #194	@ 0xc2
 8001eb2:	f7ff feb7 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x33);
 8001eb6:	2033      	movs	r0, #51	@ 0x33
 8001eb8:	f7ff ff4c 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8001ebc:	20c3      	movs	r0, #195	@ 0xc3
 8001ebe:	f7ff feb1 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x33);
 8001ec2:	2033      	movs	r0, #51	@ 0x33
 8001ec4:	f7ff ff46 	bl	8001d54 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8001ec8:	2036      	movs	r0, #54	@ 0x36
 8001eca:	f7ff feab 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8001ece:	205c      	movs	r0, #92	@ 0x5c
 8001ed0:	f7ff ff40 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8001ed4:	203a      	movs	r0, #58	@ 0x3a
 8001ed6:	f7ff fea5 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8001eda:	2006      	movs	r0, #6
 8001edc:	f7ff ff3a 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fe9f 	bl	8001c24 <LCD_send_command>
	LCD_send_command(0x00);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fe9c 	bl	8001c24 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8001eec:	20b0      	movs	r0, #176	@ 0xb0
 8001eee:	f7ff fe99 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff ff2e 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8001ef8:	20b1      	movs	r0, #177	@ 0xb1
 8001efa:	f7ff fe93 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8001efe:	20a0      	movs	r0, #160	@ 0xa0
 8001f00:	f7ff ff28 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001f04:	2011      	movs	r0, #17
 8001f06:	f7ff ff25 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8001f0a:	20b4      	movs	r0, #180	@ 0xb4
 8001f0c:	f7ff fe8a 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff ff1f 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8001f16:	20b5      	movs	r0, #181	@ 0xb5
 8001f18:	f7ff fe84 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x02);
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7ff ff19 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x02);
 8001f22:	2002      	movs	r0, #2
 8001f24:	f7ff ff16 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x0A);
 8001f28:	200a      	movs	r0, #10
 8001f2a:	f7ff ff13 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x04);
 8001f2e:	2004      	movs	r0, #4
 8001f30:	f7ff ff10 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8001f34:	20b6      	movs	r0, #182	@ 0xb6
 8001f36:	f7ff fe75 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x02);
 8001f3a:	2002      	movs	r0, #2
 8001f3c:	f7ff ff0a 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x02);
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7ff ff07 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x3B);
 8001f46:	203b      	movs	r0, #59	@ 0x3b
 8001f48:	f7ff ff04 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8001f4c:	20e9      	movs	r0, #233	@ 0xe9
 8001f4e:	f7ff fe69 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff fefe 	bl	8001d54 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8001f58:	20f7      	movs	r0, #247	@ 0xf7
 8001f5a:	f7ff fe63 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0xA9);
 8001f5e:	20a9      	movs	r0, #169	@ 0xa9
 8001f60:	f7ff fef8 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x51);
 8001f64:	2051      	movs	r0, #81	@ 0x51
 8001f66:	f7ff fef5 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x2C);
 8001f6a:	202c      	movs	r0, #44	@ 0x2c
 8001f6c:	f7ff fef2 	bl	8001d54 <LCD_send_data>
	LCD_send_data(0x82);
 8001f70:	2082      	movs	r0, #130	@ 0x82
 8001f72:	f7ff feef 	bl	8001d54 <LCD_send_data>


	LCD_send_command(0x11);
 8001f76:	2011      	movs	r0, #17
 8001f78:	f7ff fe54 	bl	8001c24 <LCD_send_command>
	HAL_Delay(255);
 8001f7c:	20ff      	movs	r0, #255	@ 0xff
 8001f7e:	f002 fb87 	bl	8004690 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8001f82:	2051      	movs	r0, #81	@ 0x51
 8001f84:	f7ff fe4e 	bl	8001c24 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8001f88:	20ff      	movs	r0, #255	@ 0xff
 8001f8a:	f7ff fee3 	bl	8001d54 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8001f8e:	2029      	movs	r0, #41	@ 0x29
 8001f90:	f7ff fe48 	bl	8001c24 <LCD_send_command>


}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	80fb      	strh	r3, [r7, #6]
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80bb      	strh	r3, [r7, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	807b      	strh	r3, [r7, #2]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8001fba:	202a      	movs	r0, #42	@ 0x2a
 8001fbc:	f7ff fe32 	bl	8001c24 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8001fc0:	88fb      	ldrh	r3, [r7, #6]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	733b      	strb	r3, [r7, #12]
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	73bb      	strb	r3, [r7, #14]
 8001fda:	887b      	ldrh	r3, [r7, #2]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe40 	bl	8001c6c <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8001fec:	202b      	movs	r0, #43	@ 0x2b
 8001fee:	f7ff fe19 	bl	8001c24 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8001ff2:	88bb      	ldrh	r3, [r7, #4]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	733b      	strb	r3, [r7, #12]
 8001ffc:	88bb      	ldrh	r3, [r7, #4]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8002002:	883b      	ldrh	r3, [r7, #0]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	73bb      	strb	r3, [r7, #14]
 800200c:	883b      	ldrh	r3, [r7, #0]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2104      	movs	r1, #4
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fe27 	bl	8001c6c <LCD_send_data_multi>

	if(x == 'w')
 800201e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002022:	2b77      	cmp	r3, #119	@ 0x77
 8002024:	d102      	bne.n	800202c <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8002026:	202c      	movs	r0, #44	@ 0x2c
 8002028:	f7ff fdfc 	bl	8001c24 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 800202c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002030:	2b72      	cmp	r3, #114	@ 0x72
 8002032:	d102      	bne.n	800203a <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8002034:	202e      	movs	r0, #46	@ 0x2e
 8002036:	f7ff fdf5 	bl	8001c24 <LCD_send_command>
	}


}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
	...

08002044 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	4604      	mov	r4, r0
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	80fb      	strh	r3, [r7, #6]
 8002056:	4603      	mov	r3, r0
 8002058:	80bb      	strh	r3, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	807b      	strh	r3, [r7, #2]
 800205e:	4613      	mov	r3, r2
 8002060:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8002062:	4b7d      	ldr	r3, [pc, #500]	@ (8002258 <read_pixel_frame+0x214>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b7b      	ldr	r3, [pc, #492]	@ (8002258 <read_pixel_frame+0x214>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002070:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8002072:	4b79      	ldr	r3, [pc, #484]	@ (8002258 <read_pixel_frame+0x214>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b77      	ldr	r3, [pc, #476]	@ (8002258 <read_pixel_frame+0x214>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002080:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8002082:	4b75      	ldr	r3, [pc, #468]	@ (8002258 <read_pixel_frame+0x214>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b73      	ldr	r3, [pc, #460]	@ (8002258 <read_pixel_frame+0x214>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0210 	orr.w	r2, r2, #16
 8002090:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8002092:	4b71      	ldr	r3, [pc, #452]	@ (8002258 <read_pixel_frame+0x214>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b6f      	ldr	r3, [pc, #444]	@ (8002258 <read_pixel_frame+0x214>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020a0:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 80020a2:	4b6e      	ldr	r3, [pc, #440]	@ (800225c <read_pixel_frame+0x218>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bfb8      	it	lt
 80020b6:	425b      	neglt	r3, r3
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	8839      	ldrh	r1, [r7, #0]
 80020bc:	88bb      	ldrh	r3, [r7, #4]
 80020be:	1acb      	subs	r3, r1, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bfb8      	it	lt
 80020c4:	425b      	neglt	r3, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	fb12 f303 	smulbb	r3, r2, r3
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	0052      	lsls	r2, r2, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80020d6:	2300      	movs	r3, #0
 80020d8:	753b      	strb	r3, [r7, #20]

    free(data);
 80020da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80020dc:	f00b ff8a 	bl	800dff4 <free>
    data = malloc(byteNr);
 80020e0:	8afb      	ldrh	r3, [r7, #22]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00b ff7e 	bl	800dfe4 <malloc>
 80020e8:	4603      	mov	r3, r0
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	807b      	strh	r3, [r7, #2]
    y--;
 80020f2:	883b      	ldrh	r3, [r7, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	743b      	strb	r3, [r7, #16]
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	747b      	strb	r3, [r7, #17]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	b29b      	uxth	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	74bb      	strb	r3, [r7, #18]
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8002118:	88bb      	ldrh	r3, [r7, #4]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	b29b      	uxth	r3, r3
 800211e:	b2db      	uxtb	r3, r3
 8002120:	733b      	strb	r3, [r7, #12]
 8002122:	88bb      	ldrh	r3, [r7, #4]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	737b      	strb	r3, [r7, #13]
 8002128:	883b      	ldrh	r3, [r7, #0]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	b29b      	uxth	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73bb      	strb	r3, [r7, #14]
 8002132:	883b      	ldrh	r3, [r7, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8002138:	2200      	movs	r2, #0
 800213a:	2110      	movs	r1, #16
 800213c:	4848      	ldr	r0, [pc, #288]	@ (8002260 <read_pixel_frame+0x21c>)
 800213e:	f003 fba3 	bl	8005888 <HAL_GPIO_WritePin>

    DC_COMMAND();
 8002142:	2200      	movs	r2, #0
 8002144:	2108      	movs	r1, #8
 8002146:	4846      	ldr	r0, [pc, #280]	@ (8002260 <read_pixel_frame+0x21c>)
 8002148:	f003 fb9e 	bl	8005888 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 800214c:	232a      	movs	r3, #42	@ 0x2a
 800214e:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8002150:	f107 010b 	add.w	r1, r7, #11
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	2201      	movs	r2, #1
 800215a:	483f      	ldr	r0, [pc, #252]	@ (8002258 <read_pixel_frame+0x214>)
 800215c:	f005 f867 	bl	800722e <HAL_SPI_Transmit>
    DC_DATA();
 8002160:	2201      	movs	r2, #1
 8002162:	2108      	movs	r1, #8
 8002164:	483e      	ldr	r0, [pc, #248]	@ (8002260 <read_pixel_frame+0x21c>)
 8002166:	f003 fb8f 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 800216a:	f107 0110 	add.w	r1, r7, #16
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	2204      	movs	r2, #4
 8002174:	4838      	ldr	r0, [pc, #224]	@ (8002258 <read_pixel_frame+0x214>)
 8002176:	f005 f85a 	bl	800722e <HAL_SPI_Transmit>

    DC_COMMAND();
 800217a:	2200      	movs	r2, #0
 800217c:	2108      	movs	r1, #8
 800217e:	4838      	ldr	r0, [pc, #224]	@ (8002260 <read_pixel_frame+0x21c>)
 8002180:	f003 fb82 	bl	8005888 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8002184:	232b      	movs	r3, #43	@ 0x2b
 8002186:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8002188:	f107 010a 	add.w	r1, r7, #10
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	2201      	movs	r2, #1
 8002192:	4831      	ldr	r0, [pc, #196]	@ (8002258 <read_pixel_frame+0x214>)
 8002194:	f005 f84b 	bl	800722e <HAL_SPI_Transmit>
    DC_DATA();
 8002198:	2201      	movs	r2, #1
 800219a:	2108      	movs	r1, #8
 800219c:	4830      	ldr	r0, [pc, #192]	@ (8002260 <read_pixel_frame+0x21c>)
 800219e:	f003 fb73 	bl	8005888 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 80021a2:	f107 010c 	add.w	r1, r7, #12
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	2204      	movs	r2, #4
 80021ac:	482a      	ldr	r0, [pc, #168]	@ (8002258 <read_pixel_frame+0x214>)
 80021ae:	f005 f83e 	bl	800722e <HAL_SPI_Transmit>

    DC_COMMAND();
 80021b2:	2200      	movs	r2, #0
 80021b4:	2108      	movs	r1, #8
 80021b6:	482a      	ldr	r0, [pc, #168]	@ (8002260 <read_pixel_frame+0x21c>)
 80021b8:	f003 fb66 	bl	8005888 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 80021bc:	232e      	movs	r3, #46	@ 0x2e
 80021be:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 80021c0:	f107 0109 	add.w	r1, r7, #9
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	2201      	movs	r2, #1
 80021ca:	4823      	ldr	r0, [pc, #140]	@ (8002258 <read_pixel_frame+0x214>)
 80021cc:	f005 f82f 	bl	800722e <HAL_SPI_Transmit>
    DC_DATA();
 80021d0:	2201      	movs	r2, #1
 80021d2:	2108      	movs	r1, #8
 80021d4:	4822      	ldr	r0, [pc, #136]	@ (8002260 <read_pixel_frame+0x21c>)
 80021d6:	f003 fb57 	bl	8005888 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80021da:	f107 0114 	add.w	r1, r7, #20
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	2201      	movs	r2, #1
 80021e4:	481c      	ldr	r0, [pc, #112]	@ (8002258 <read_pixel_frame+0x214>)
 80021e6:	f005 f966 	bl	80074b6 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80021ea:	8afb      	ldrh	r3, [r7, #22]
 80021ec:	461a      	mov	r2, r3
 80021ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f0:	4819      	ldr	r0, [pc, #100]	@ (8002258 <read_pixel_frame+0x214>)
 80021f2:	f005 fdfb 	bl	8007dec <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80021f6:	bf00      	nop
 80021f8:	4b18      	ldr	r3, [pc, #96]	@ (800225c <read_pixel_frame+0x218>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0fa      	beq.n	80021f8 <read_pixel_frame+0x1b4>
    CS_D();
 8002202:	2201      	movs	r2, #1
 8002204:	2110      	movs	r1, #16
 8002206:	4816      	ldr	r0, [pc, #88]	@ (8002260 <read_pixel_frame+0x21c>)
 8002208:	f003 fb3e 	bl	8005888 <HAL_GPIO_WritePin>

    free(data);
 800220c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800220e:	f00b fef1 	bl	800dff4 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <read_pixel_frame+0x214>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <read_pixel_frame+0x214>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002220:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <read_pixel_frame+0x214>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <read_pixel_frame+0x214>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002230:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <read_pixel_frame+0x214>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <read_pixel_frame+0x214>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <read_pixel_frame+0x214>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <read_pixel_frame+0x214>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800224c:	601a      	str	r2, [r3, #0]

}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd90      	pop	{r4, r7, pc}
 8002256:	bf00      	nop
 8002258:	20014260 	.word	0x20014260
 800225c:	200144a9 	.word	0x200144a9
 8002260:	40020c00 	.word	0x40020c00

08002264 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a05      	ldr	r2, [pc, #20]	@ (8002288 <HAL_SPI_TxCpltCallback+0x24>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d102      	bne.n	800227c <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 8002276:	4b05      	ldr	r3, [pc, #20]	@ (800228c <HAL_SPI_TxCpltCallback+0x28>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
	}



}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40013000 	.word	0x40013000
 800228c:	200144a8 	.word	0x200144a8

08002290 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2a      	ldr	r2, [pc, #168]	@ (8002348 <HAL_SPI_RxCpltCallback+0xb8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d102      	bne.n	80022a8 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 80022a2:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_SPI_RxCpltCallback+0xbc>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a28      	ldr	r2, [pc, #160]	@ (8002350 <HAL_SPI_RxCpltCallback+0xc0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d145      	bne.n	800233e <HAL_SPI_RxCpltCallback+0xae>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 80022b2:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <HAL_SPI_RxCpltCallback+0xc4>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d837      	bhi.n	800232c <HAL_SPI_RxCpltCallback+0x9c>
 80022bc:	a201      	add	r2, pc, #4	@ (adr r2, 80022c4 <HAL_SPI_RxCpltCallback+0x34>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	08002305 	.word	0x08002305
 80022c8:	0800230d 	.word	0x0800230d
 80022cc:	0800232d 	.word	0x0800232d
 80022d0:	08002315 	.word	0x08002315
 80022d4:	0800232d 	.word	0x0800232d
 80022d8:	0800232d 	.word	0x0800232d
 80022dc:	0800232d 	.word	0x0800232d
 80022e0:	0800231d 	.word	0x0800231d
 80022e4:	0800232d 	.word	0x0800232d
 80022e8:	0800232d 	.word	0x0800232d
 80022ec:	0800232d 	.word	0x0800232d
 80022f0:	0800232d 	.word	0x0800232d
 80022f4:	0800232d 	.word	0x0800232d
 80022f8:	0800232d 	.word	0x0800232d
 80022fc:	0800232d 	.word	0x0800232d
 8002300:	08002325 	.word	0x08002325
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_SPI_RxCpltCallback+0xc8>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
		  	  break;
 800230a:	e013      	b.n	8002334 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_SPI_RxCpltCallback+0xc8>)
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002312:	e00f      	b.n	8002334 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 8002314:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <HAL_SPI_RxCpltCallback+0xc8>)
 8002316:	2204      	movs	r2, #4
 8002318:	701a      	strb	r2, [r3, #0]
		  	  break;
 800231a:	e00b      	b.n	8002334 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <HAL_SPI_RxCpltCallback+0xc8>)
 800231e:	2208      	movs	r2, #8
 8002320:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002322:	e007      	b.n	8002334 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 8002324:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_SPI_RxCpltCallback+0xc8>)
 8002326:	2210      	movs	r2, #16
 8002328:	701a      	strb	r2, [r3, #0]
		  	  break;
 800232a:	e003      	b.n	8002334 <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_SPI_RxCpltCallback+0xc8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002332:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 8002334:	2201      	movs	r2, #1
 8002336:	4907      	ldr	r1, [pc, #28]	@ (8002354 <HAL_SPI_RxCpltCallback+0xc4>)
 8002338:	4808      	ldr	r0, [pc, #32]	@ (800235c <HAL_SPI_RxCpltCallback+0xcc>)
 800233a:	f005 fb7f 	bl	8007a3c <HAL_SPI_Receive_IT>

	}

}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40013000 	.word	0x40013000
 800234c:	200144a9 	.word	0x200144a9
 8002350:	40003800 	.word	0x40003800
 8002354:	200144ab 	.word	0x200144ab
 8002358:	200144ac 	.word	0x200144ac
 800235c:	200142b8 	.word	0x200142b8

08002360 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 8002368:	4b04      	ldr	r3, [pc, #16]	@ (800237c <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]

}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	200144aa 	.word	0x200144aa

08002380 <controller_test>:




void controller_test()
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 800238a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800238e:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 8002390:	2340      	movs	r3, #64	@ 0x40
 8002392:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8002394:	2340      	movs	r3, #64	@ 0x40
 8002396:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 800239c:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80023a0:	823b      	strh	r3, [r7, #16]

	draw_entity(&entity);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fccd 	bl	8000d44 <draw_entity>

	while(1)
	{

		switch(currentDx)
 80023aa:	4b30      	ldr	r3, [pc, #192]	@ (800246c <controller_test+0xec>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	2b07      	cmp	r3, #7
 80023b2:	d853      	bhi.n	800245c <controller_test+0xdc>
 80023b4:	a201      	add	r2, pc, #4	@ (adr r2, 80023bc <controller_test+0x3c>)
 80023b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ba:	bf00      	nop
 80023bc:	080023dd 	.word	0x080023dd
 80023c0:	080023fd 	.word	0x080023fd
 80023c4:	0800245d 	.word	0x0800245d
 80023c8:	0800241d 	.word	0x0800241d
 80023cc:	0800245d 	.word	0x0800245d
 80023d0:	0800245d 	.word	0x0800245d
 80023d4:	0800245d 	.word	0x0800245d
 80023d8:	0800243d 	.word	0x0800243d
		{
			case DxRight:
				translation_entity(&entity, entity.x0+32, entity.y0, 1);
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3320      	adds	r3, #32
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b219      	sxth	r1, r3
 80023e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80023ec:	1d38      	adds	r0, r7, #4
 80023ee:	2301      	movs	r3, #1
 80023f0:	f7fe fdb4 	bl	8000f5c <translation_entity>
				currentDx = 0;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <controller_test+0xec>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
				break;
 80023fa:	e033      	b.n	8002464 <controller_test+0xe4>
			case DxLeft:
				translation_entity(&entity, entity.x0-32, entity.y0, 1);
 80023fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b20      	subs	r3, #32
 8002404:	b29b      	uxth	r3, r3
 8002406:	b219      	sxth	r1, r3
 8002408:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800240c:	1d38      	adds	r0, r7, #4
 800240e:	2301      	movs	r3, #1
 8002410:	f7fe fda4 	bl	8000f5c <translation_entity>
				currentDx = 0;
 8002414:	4b15      	ldr	r3, [pc, #84]	@ (800246c <controller_test+0xec>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
				break;
 800241a:	e023      	b.n	8002464 <controller_test+0xe4>
			case DxUp:
				translation_entity(&entity, entity.x0, entity.y0-32, 1);
 800241c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002420:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b20      	subs	r3, #32
 8002428:	b29b      	uxth	r3, r3
 800242a:	b21a      	sxth	r2, r3
 800242c:	1d38      	adds	r0, r7, #4
 800242e:	2301      	movs	r3, #1
 8002430:	f7fe fd94 	bl	8000f5c <translation_entity>
				currentDx = 0;
 8002434:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <controller_test+0xec>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
				break;
 800243a:	e013      	b.n	8002464 <controller_test+0xe4>
			case DxDown:
				translation_entity(&entity, entity.x0, entity.y0+32, 1);
 800243c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002440:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002444:	b29b      	uxth	r3, r3
 8002446:	3320      	adds	r3, #32
 8002448:	b29b      	uxth	r3, r3
 800244a:	b21a      	sxth	r2, r3
 800244c:	1d38      	adds	r0, r7, #4
 800244e:	2301      	movs	r3, #1
 8002450:	f7fe fd84 	bl	8000f5c <translation_entity>
				currentDx = 0;
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <controller_test+0xec>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
				break;
 800245a:	e003      	b.n	8002464 <controller_test+0xe4>
			default:
				currentDx = 0;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <controller_test+0xec>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
				break;
 8002462:	bf00      	nop
		}

		kernel_delay(50);
 8002464:	2032      	movs	r0, #50	@ 0x32
 8002466:	f7ff fb2b 	bl	8001ac0 <kernel_delay>
		switch(currentDx)
 800246a:	e79e      	b.n	80023aa <controller_test+0x2a>
 800246c:	200144ac 	.word	0x200144ac

08002470 <Task0>:
}



volatile void Task0()
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0

	ENTITY entity;
	entity.x0 = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 800247e:	2340      	movs	r3, #64	@ 0x40
 8002480:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8002482:	2340      	movs	r3, #64	@ 0x40
 8002484:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8002486:	2380      	movs	r3, #128	@ 0x80
 8002488:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 800248a:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800248e:	823b      	strh	r3, [r7, #16]
    {
        //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
        //mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
        translation_test(&entity, 1, 0);
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	2200      	movs	r2, #0
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fe8e 	bl	80011b8 <translation_test>
 800249c:	e7f8      	b.n	8002490 <Task0+0x20>
	...

080024a0 <Task1>:
    	//mutex = 0;
    }
}

volatile void Task1()
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0

    while(1)
    {
    	play_audio_file("Audio/acoustic.txt");
 80024a4:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <Task1+0x14>)
 80024a6:	f7fe f80f 	bl	80004c8 <play_audio_file>
    	kernel_delay(20);
 80024aa:	2014      	movs	r0, #20
 80024ac:	f7ff fb08 	bl	8001ac0 <kernel_delay>
    	play_audio_file("Audio/acoustic.txt");
 80024b0:	bf00      	nop
 80024b2:	e7f7      	b.n	80024a4 <Task1+0x4>
 80024b4:	0800e3d4 	.word	0x0800e3d4

080024b8 <Task2>:
    }
}
*/

volatile void Task2()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 80024c2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80024c6:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 80024c8:	2340      	movs	r3, #64	@ 0x40
 80024ca:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 80024cc:	2340      	movs	r3, #64	@ 0x40
 80024ce:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 80024d4:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80024d8:	823b      	strh	r3, [r7, #16]

    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
    	//flagg = 1;
    	//mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        translation_test(&entity, 1, 0);
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	2200      	movs	r2, #0
 80024de:	2101      	movs	r1, #1
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fe69 	bl	80011b8 <translation_test>
 80024e6:	e7f8      	b.n	80024da <Task2+0x22>

080024e8 <Task3>:
    }
}


volatile void Task3()
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	while(1)
	{
		controller_test();
 80024ec:	f7ff ff48 	bl	8002380 <controller_test>
 80024f0:	e7fc      	b.n	80024ec <Task3+0x4>
	...

080024f4 <demo_os_1>:
	}
}


void demo_os_1()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af02      	add	r7, sp, #8
	  BackGroundColor = 0xFFFF;
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <demo_os_1+0x4c>)
 80024fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002500:	801a      	strh	r2, [r3, #0]
	  fill_screen2(0xFFFF);
 8002502:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002506:	f7fe f97f 	bl	8000808 <fill_screen2>
	  print_string(128, 128, "os demo",0xF100, BackGroundColor);
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <demo_os_1+0x4c>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002514:	4a0b      	ldr	r2, [pc, #44]	@ (8002544 <demo_os_1+0x50>)
 8002516:	2180      	movs	r1, #128	@ 0x80
 8002518:	2080      	movs	r0, #128	@ 0x80
 800251a:	f7fe fad1 	bl	8000ac0 <print_string>

	  kernel_add_process(Task0);
 800251e:	480a      	ldr	r0, [pc, #40]	@ (8002548 <demo_os_1+0x54>)
 8002520:	f7ff f9d2 	bl	80018c8 <kernel_add_process>
	  kernel_add_process(Task1);
 8002524:	4809      	ldr	r0, [pc, #36]	@ (800254c <demo_os_1+0x58>)
 8002526:	f7ff f9cf 	bl	80018c8 <kernel_add_process>
	  kernel_add_process(Task2);
 800252a:	4809      	ldr	r0, [pc, #36]	@ (8002550 <demo_os_1+0x5c>)
 800252c:	f7ff f9cc 	bl	80018c8 <kernel_add_process>
	  kernel_add_process(Task3);
 8002530:	4808      	ldr	r0, [pc, #32]	@ (8002554 <demo_os_1+0x60>)
 8002532:	f7ff f9c9 	bl	80018c8 <kernel_add_process>
	  //kernel_add_process(Task4);
	  //kernel_add_process(Task5);
	  kernel_start();
 8002536:	f7ff faa5 	bl	8001a84 <kernel_start>

	  while(1)
 800253a:	bf00      	nop
 800253c:	e7fd      	b.n	800253a <demo_os_1+0x46>
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008
 8002544:	0800e3e8 	.word	0x0800e3e8
 8002548:	08002471 	.word	0x08002471
 800254c:	080024a1 	.word	0x080024a1
 8002550:	080024b9 	.word	0x080024b9
 8002554:	080024e9 	.word	0x080024e9

08002558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b093      	sub	sp, #76	@ 0x4c
 800255c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255e:	f002 f825 	bl	80045ac <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	210f      	movs	r1, #15
 8002566:	f06f 0001 	mvn.w	r0, #1
 800256a:	f002 f990 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	210e      	movs	r1, #14
 8002572:	201e      	movs	r0, #30
 8002574:	f002 f98b 	bl	800488e <HAL_NVIC_SetPriority>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002578:	f000 faf2 	bl	8002b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257c:	f000 fd10 	bl	8002fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002580:	f000 fcd0 	bl	8002f24 <MX_DMA_Init>
  MX_SPI1_Init();
 8002584:	f000 fba0 	bl	8002cc8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002588:	f000 fca2 	bl	8002ed0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 800258c:	f000 fb52 	bl	8002c34 <MX_DAC_Init>
  MX_TIM2_Init();
 8002590:	f000 fc04 	bl	8002d9c <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8002594:	f000 fb78 	bl	8002c88 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002598:	f008 fc88 	bl	800aeac <MX_FATFS_Init>
  MX_SPI2_Init();
 800259c:	f000 fbca 	bl	8002d34 <MX_SPI2_Init>
  MX_TIM4_Init();
 80025a0:	f000 fc48 	bl	8002e34 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 80025a4:	f000 fd92 	bl	80030cc <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 80025a8:	f7ff fbf8 	bl	8001d9c <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 80025ac:	48da      	ldr	r0, [pc, #872]	@ (8002918 <main+0x3c0>)
 80025ae:	f006 fb9f 	bl	8008cf0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80025b2:	48da      	ldr	r0, [pc, #872]	@ (800291c <main+0x3c4>)
 80025b4:	f006 fc04 	bl	8008dc0 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 80025b8:	2201      	movs	r2, #1
 80025ba:	49d9      	ldr	r1, [pc, #868]	@ (8002920 <main+0x3c8>)
 80025bc:	48d9      	ldr	r0, [pc, #868]	@ (8002924 <main+0x3cc>)
 80025be:	f005 fa3d 	bl	8007a3c <HAL_SPI_Receive_IT>

  fill_screen1(0xFFFF);
 80025c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025c6:	f7fe f8bf 	bl	8000748 <fill_screen1>
  //controller_test();
  demo_os_1();
 80025ca:	f7ff ff93 	bl	80024f4 <demo_os_1>
  //play_audio_file_echo("Audio/acoustic.txt", 22, 0);
  //HAL_Delay(1000);
  //play_audio_file("Audio/king.txt"); //doremi mine songita song22 king acoustic bambina


  fill_screen1(0xF100);
 80025ce:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 80025d2:	f7fe f8b9 	bl	8000748 <fill_screen1>
  HAL_Delay(1000);
 80025d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025da:	f002 f859 	bl	8004690 <HAL_Delay>
  fill_screen2(0xF00F);
 80025de:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 80025e2:	f7fe f911 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 80025e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025ea:	f002 f851 	bl	8004690 <HAL_Delay>
  fill_screen2(0xFFFF);
 80025ee:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80025f2:	f7fe f909 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 80025f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025fa:	f002 f849 	bl	8004690 <HAL_Delay>

  unsigned int startTick = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30

  ENTITY entity;
  init_entity_sd(&entity);
 800260a:	f107 0318 	add.w	r3, r7, #24
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fb6b 	bl	8000cea <init_entity_sd>

  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8002614:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002618:	f7fe f8f6 	bl	8000808 <fill_screen2>

  BackGroundColor = 0xFFFF;
 800261c:	4bc2      	ldr	r3, [pc, #776]	@ (8002928 <main+0x3d0>)
 800261e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002622:	801a      	strh	r2, [r3, #0]

  entity.x0 = 100;
 8002624:	2364      	movs	r3, #100	@ 0x64
 8002626:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8002628:	2364      	movs	r3, #100	@ 0x64
 800262a:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	763b      	strb	r3, [r7, #24]
  assign_file_path_entity(&entity, "graphic/multi2.bin");
 8002630:	f107 0318 	add.w	r3, r7, #24
 8002634:	49bd      	ldr	r1, [pc, #756]	@ (800292c <main+0x3d4>)
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fdc9 	bl	80031ce <assign_file_path_entity>
  draw_entity(&entity);
 800263c:	f107 0318 	add.w	r3, r7, #24
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb7f 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 8002646:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800264a:	f002 f821 	bl	8004690 <HAL_Delay>
  scaling_entity(&entity, 38);
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	ed9f 0ab7 	vldr	s0, [pc, #732]	@ 8002930 <main+0x3d8>
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fe82 	bl	8001360 <scaling_entity>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 800265c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002660:	b298      	uxth	r0, r3
 8002662:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002666:	b299      	uxth	r1, r3
 8002668:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800266c:	b29a      	uxth	r2, r3
 800266e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002672:	b29c      	uxth	r4, r3
 8002674:	4bac      	ldr	r3, [pc, #688]	@ (8002928 <main+0x3d0>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4623      	mov	r3, r4
 800267c:	f7fe fad8 	bl	8000c30 <draw_rectangle>
  draw_entity(&entity);
 8002680:	f107 0318 	add.w	r3, r7, #24
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fb5d 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 800268a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800268e:	f001 ffff 	bl	8004690 <HAL_Delay>

  //--------------------------------------------

  HAL_Delay(1000);
 8002692:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002696:	f001 fffb 	bl	8004690 <HAL_Delay>
  //fill_screen2(0xFFFF);

  rotate_entity(&entity, 90);
 800269a:	f107 0318 	add.w	r3, r7, #24
 800269e:	215a      	movs	r1, #90	@ 0x5a
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe ffe1 	bl	8001668 <rotate_entity>

  HAL_Delay(1000);
 80026a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026aa:	f001 fff1 	bl	8004690 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 80026ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026b2:	f001 ffed 	bl	8004690 <HAL_Delay>

  //fill_screen2(0xFFFF);
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 80026b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026ba:	b298      	uxth	r0, r3
 80026bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026c0:	b299      	uxth	r1, r3
 80026c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80026cc:	b29c      	uxth	r4, r3
 80026ce:	4b96      	ldr	r3, [pc, #600]	@ (8002928 <main+0x3d0>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4623      	mov	r3, r4
 80026d6:	f7fe faab 	bl	8000c30 <draw_rectangle>
  draw_entity(&entity);
 80026da:	f107 0318 	add.w	r3, r7, #24
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fb30 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 80026e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026e8:	f001 ffd2 	bl	8004690 <HAL_Delay>
  //fill_screen2(0xFFFF);
  scaling_entity(&entity, 0.5);
 80026ec:	f107 0318 	add.w	r3, r7, #24
 80026f0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fe33 	bl	8001360 <scaling_entity>
  HAL_Delay(1000);
 80026fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026fe:	f001 ffc7 	bl	8004690 <HAL_Delay>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8002702:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002706:	b298      	uxth	r0, r3
 8002708:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800270c:	b299      	uxth	r1, r3
 800270e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002712:	b29a      	uxth	r2, r3
 8002714:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002718:	b29c      	uxth	r4, r3
 800271a:	4b83      	ldr	r3, [pc, #524]	@ (8002928 <main+0x3d0>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4623      	mov	r3, r4
 8002722:	f7fe fa85 	bl	8000c30 <draw_rectangle>
  draw_entity(&entity);
 8002726:	f107 0318 	add.w	r3, r7, #24
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fb0a 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 8002730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002734:	f001 ffac 	bl	8004690 <HAL_Delay>

  fill_screen2(0xFFFF);
 8002738:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800273c:	f7fe f864 	bl	8000808 <fill_screen2>
  entity.x0 = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	83bb      	strh	r3, [r7, #28]
  assign_file_path_entity(&entity, "graphic/img8.bin");
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	4979      	ldr	r1, [pc, #484]	@ (8002934 <main+0x3dc>)
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fd3d 	bl	80031ce <assign_file_path_entity>
  draw_entity(&entity);
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	4618      	mov	r0, r3
 800275a:	f7fe faf3 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 800275e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002762:	f001 ff95 	bl	8004690 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002766:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800276a:	f7fe f84d 	bl	8000808 <fill_screen2>
  scaling_entity(&entity, 0.5);
 800276e:	f107 0318 	add.w	r3, r7, #24
 8002772:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fdf2 	bl	8001360 <scaling_entity>
  draw_entity(&entity);
 800277c:	f107 0318 	add.w	r3, r7, #24
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe fadf 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 8002786:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800278a:	f001 ff81 	bl	8004690 <HAL_Delay>
  scaling_entity(&entity, 2);
 800278e:	f107 0318 	add.w	r3, r7, #24
 8002792:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fde2 	bl	8001360 <scaling_entity>
  draw_entity(&entity);
 800279c:	f107 0318 	add.w	r3, r7, #24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe facf 	bl	8000d44 <draw_entity>
  HAL_Delay(1000);
 80027a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027aa:	f001 ff71 	bl	8004690 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	713b      	strb	r3, [r7, #4]
  init_entity_sd(&ent);
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa94 	bl	8000cea <init_entity_sd>
  assign_file_path_entity(&ent, "graphic/img5.bin");
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	495c      	ldr	r1, [pc, #368]	@ (8002938 <main+0x3e0>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fd01 	bl	80031ce <assign_file_path_entity>
  draw_entity(&ent);
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fab8 	bl	8000d44 <draw_entity>
  HAL_Delay(2000);
 80027d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027d8:	f001 ff5a 	bl	8004690 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img6.bin");
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	4957      	ldr	r1, [pc, #348]	@ (800293c <main+0x3e4>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fcf4 	bl	80031ce <assign_file_path_entity>
  draw_entity(&ent);
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe faab 	bl	8000d44 <draw_entity>
  HAL_Delay(2000);
 80027ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027f2:	f001 ff4d 	bl	8004690 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img8.bin");
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	494e      	ldr	r1, [pc, #312]	@ (8002934 <main+0x3dc>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fce7 	bl	80031ce <assign_file_path_entity>
  draw_entity(&ent);
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fa9e 	bl	8000d44 <draw_entity>
  HAL_Delay(2000);
 8002808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800280c:	f001 ff40 	bl	8004690 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img9.bin");
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	494b      	ldr	r1, [pc, #300]	@ (8002940 <main+0x3e8>)
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fcda 	bl	80031ce <assign_file_path_entity>
  draw_entity(&ent);
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa91 	bl	8000d44 <draw_entity>
  HAL_Delay(2000);
 8002822:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002826:	f001 ff33 	bl	8004690 <HAL_Delay>
  startTick = HAL_GetTick();
 800282a:	f001 ff25 	bl	8004678 <HAL_GetTick>
 800282e:	63b8      	str	r0, [r7, #56]	@ 0x38
  assign_file_path_entity(&ent, "graphic/img92.bin");
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	4944      	ldr	r1, [pc, #272]	@ (8002944 <main+0x3ec>)
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fcca 	bl	80031ce <assign_file_path_entity>
  draw_entity(&ent);
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fa81 	bl	8000d44 <draw_entity>
  endTick = HAL_GetTick();
 8002842:	f001 ff19 	bl	8004678 <HAL_GetTick>
 8002846:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8002848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800284a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fd ffd9 	bl	8000808 <fill_screen2>
  assign_file_path_entity(&ent, "graphic/pixel1.bin");
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	493b      	ldr	r1, [pc, #236]	@ (8002948 <main+0x3f0>)
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fcb7 	bl	80031ce <assign_file_path_entity>
  draw_entity(&ent);
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fa6e 	bl	8000d44 <draw_entity>
  HAL_Delay(3000);
 8002868:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800286c:	f001 ff10 	bl	8004690 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  free_entity_sd(&entity);
 8002870:	f107 0318 	add.w	r3, r7, #24
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fa53 	bl	8000d20 <free_entity_sd>

  entity.x0 = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 8002886:	2340      	movs	r3, #64	@ 0x40
 8002888:	843b      	strh	r3, [r7, #32]
  entity.id = 0x80;
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	763b      	strb	r3, [r7, #24]
  entity.ST.color = 0xF100;
 800288e:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002892:	84bb      	strh	r3, [r7, #36]	@ 0x24

  //draw_entity(&entity,NULL);

  translation_test(&entity, 1, 0);
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	2200      	movs	r2, #0
 800289a:	2101      	movs	r1, #1
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fc8b 	bl	80011b8 <translation_test>

  HAL_Delay(500);
 80028a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028a6:	f001 fef3 	bl	8004690 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 0);//, 0xF100);
 80028aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	3364      	adds	r3, #100	@ 0x64
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b219      	sxth	r1, r3
 80028b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3364      	adds	r3, #100	@ 0x64
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	f107 0018 	add.w	r0, r7, #24
 80028c6:	2300      	movs	r3, #0
 80028c8:	f7fe fb48 	bl	8000f5c <translation_entity>
  HAL_Delay(2000);
 80028cc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028d0:	f001 fede 	bl	8004690 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 0);//, 0xF100);
 80028d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3320      	adds	r3, #32
 80028dc:	b29b      	uxth	r3, r3
 80028de:	b219      	sxth	r1, r3
 80028e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3320      	adds	r3, #32
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	f107 0018 	add.w	r0, r7, #24
 80028f0:	2300      	movs	r3, #0
 80028f2:	f7fe fb33 	bl	8000f5c <translation_entity>
  HAL_Delay(500);
 80028f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028fa:	f001 fec9 	bl	8004690 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 0);//, 0xF100);
 80028fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002902:	b29b      	uxth	r3, r3
 8002904:	330c      	adds	r3, #12
 8002906:	b29b      	uxth	r3, r3
 8002908:	b219      	sxth	r1, r3
 800290a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800290e:	b29b      	uxth	r3, r3
 8002910:	3320      	adds	r3, #32
 8002912:	b29b      	uxth	r3, r3
 8002914:	e01a      	b.n	800294c <main+0x3f4>
 8002916:	bf00      	nop
 8002918:	200143d0 	.word	0x200143d0
 800291c:	20014418 	.word	0x20014418
 8002920:	200144ab 	.word	0x200144ab
 8002924:	200142b8 	.word	0x200142b8
 8002928:	20000008 	.word	0x20000008
 800292c:	0800e3f0 	.word	0x0800e3f0
 8002930:	42180000 	.word	0x42180000
 8002934:	0800e404 	.word	0x0800e404
 8002938:	0800e418 	.word	0x0800e418
 800293c:	0800e42c 	.word	0x0800e42c
 8002940:	0800e440 	.word	0x0800e440
 8002944:	0800e454 	.word	0x0800e454
 8002948:	0800e468 	.word	0x0800e468
 800294c:	b21a      	sxth	r2, r3
 800294e:	f107 0018 	add.w	r0, r7, #24
 8002952:	2300      	movs	r3, #0
 8002954:	f7fe fb02 	bl	8000f5c <translation_entity>
  HAL_Delay(500);
 8002958:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800295c:	f001 fe98 	bl	8004690 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 0);//, 0xF100);
 8002960:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002964:	b29b      	uxth	r3, r3
 8002966:	330c      	adds	r3, #12
 8002968:	b29b      	uxth	r3, r3
 800296a:	b219      	sxth	r1, r3
 800296c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002970:	f107 0018 	add.w	r0, r7, #24
 8002974:	2300      	movs	r3, #0
 8002976:	f7fe faf1 	bl	8000f5c <translation_entity>
  HAL_Delay(500);
 800297a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800297e:	f001 fe87 	bl	8004690 <HAL_Delay>

  //Test_SD_Card();

  //play_audio_file("audio/mine.txt"); //doremi mine songita song22

  fill_screen2(0xF100);
 8002982:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002986:	f7fd ff3f 	bl	8000808 <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 800298a:	2064      	movs	r0, #100	@ 0x64
 800298c:	f001 fe80 	bl	8004690 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8002990:	2300      	movs	r3, #0
 8002992:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002996:	e059      	b.n	8002a4c <main+0x4f4>
  {
	  for(uint8_t j=0; j<100;j++)
 8002998:	2300      	movs	r3, #0
 800299a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800299e:	e04c      	b.n	8002a3a <main+0x4e2>
	  {

		  if(i==j)
 80029a0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80029a4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d10b      	bne.n	80029c4 <main+0x46c>
		  {
			  draw_pixel(i,j,0xF100);
 80029ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80029b6:	b291      	uxth	r1, r2
 80029b8:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fe6b 	bl	8000698 <draw_pixel>
			  continue;
 80029c2:	e035      	b.n	8002a30 <main+0x4d8>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 80029c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029c8:	2b50      	cmp	r3, #80	@ 0x50
 80029ca:	d103      	bne.n	80029d4 <main+0x47c>
 80029cc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80029d0:	2b14      	cmp	r3, #20
 80029d2:	d017      	beq.n	8002a04 <main+0x4ac>
 80029d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029d8:	2b50      	cmp	r3, #80	@ 0x50
 80029da:	d103      	bne.n	80029e4 <main+0x48c>
 80029dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80029e0:	2b13      	cmp	r3, #19
 80029e2:	d00f      	beq.n	8002a04 <main+0x4ac>
 80029e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029e8:	2b51      	cmp	r3, #81	@ 0x51
 80029ea:	d103      	bne.n	80029f4 <main+0x49c>
 80029ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80029f0:	2b14      	cmp	r3, #20
 80029f2:	d007      	beq.n	8002a04 <main+0x4ac>
 80029f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80029f8:	2b51      	cmp	r3, #81	@ 0x51
 80029fa:	d10e      	bne.n	8002a1a <main+0x4c2>
 80029fc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a00:	2b13      	cmp	r3, #19
 8002a02:	d10a      	bne.n	8002a1a <main+0x4c2>
		  {
			  draw_pixel(i,j,0x001F);
 8002a04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002a0e:	b291      	uxth	r1, r2
 8002a10:	221f      	movs	r2, #31
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fe40 	bl	8000698 <draw_pixel>
			  continue;
 8002a18:	e00a      	b.n	8002a30 <main+0x4d8>
		  }


		  draw_pixel(i,j,0xFFFF);
 8002a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002a24:	b291      	uxth	r1, r2
 8002a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fe34 	bl	8000698 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8002a30:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a34:	3301      	adds	r3, #1
 8002a36:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002a3a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002a3e:	2b63      	cmp	r3, #99	@ 0x63
 8002a40:	d9ae      	bls.n	80029a0 <main+0x448>
  for(uint8_t i=0;i<100;i++)
 8002a42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a46:	3301      	adds	r3, #1
 8002a48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002a4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a50:	2b63      	cmp	r3, #99	@ 0x63
 8002a52:	d9a1      	bls.n	8002998 <main+0x440>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8002a54:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002a58:	f7fd fed6 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 8002a5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a60:	f001 fe16 	bl	8004690 <HAL_Delay>
  fill_screen2(0xF150);
 8002a64:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8002a68:	f7fd fece 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 8002a6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a70:	f001 fe0e 	bl	8004690 <HAL_Delay>
  fill_screen2(0xF111);
 8002a74:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8002a78:	f7fd fec6 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 8002a7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a80:	f001 fe06 	bl	8004690 <HAL_Delay>
  fill_screen2(0xF10F);
 8002a84:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8002a88:	f7fd febe 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 8002a8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a90:	f001 fdfe 	bl	8004690 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002a94:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a98:	f7fd feb6 	bl	8000808 <fill_screen2>
  HAL_Delay(1000);
 8002a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa0:	f001 fdf6 	bl	8004690 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002aa4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002aa8:	f7fd feae 	bl	8000808 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 0x1F00, 0x001F);
 8002aac:	231f      	movs	r3, #31
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002ab4:	4a26      	ldr	r2, [pc, #152]	@ (8002b50 <main+0x5f8>)
 8002ab6:	21c8      	movs	r1, #200	@ 0xc8
 8002ab8:	2024      	movs	r0, #36	@ 0x24
 8002aba:	f7fe f801 	bl	8000ac0 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8002abe:	4b25      	ldr	r3, [pc, #148]	@ (8002b54 <main+0x5fc>)
 8002ac0:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4823      	ldr	r0, [pc, #140]	@ (8002b58 <main+0x600>)
 8002aca:	f005 f8dd 	bl	8007c88 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8002ace:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002ad2:	2250      	movs	r2, #80	@ 0x50
 8002ad4:	2114      	movs	r1, #20
 8002ad6:	2014      	movs	r0, #20
 8002ad8:	f7fe f834 	bl	8000b44 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8002adc:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002ae0:	2250      	movs	r2, #80	@ 0x50
 8002ae2:	2114      	movs	r1, #20
 8002ae4:	2014      	movs	r0, #20
 8002ae6:	f7fe f868 	bl	8000bba <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <main+0x604>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002af0:	221f      	movs	r2, #31
 8002af2:	2100      	movs	r1, #0
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fd fdcf 	bl	8000698 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002afa:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002afe:	2100      	movs	r1, #0
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7fd fdc9 	bl	8000698 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8002b06:	221f      	movs	r2, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fd fdc4 	bl	8000698 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002b10:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002b14:	2101      	movs	r1, #1
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fd fdbe 	bl	8000698 <draw_pixel>

  HAL_Delay(50);
 8002b1c:	2032      	movs	r0, #50	@ 0x32
 8002b1e:	f001 fdb7 	bl	8004690 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002b22:	2001      	movs	r0, #1
 8002b24:	f00b fa5e 	bl	800dfe4 <malloc>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	2302      	movs	r3, #2
 8002b32:	2202      	movs	r2, #2
 8002b34:	2100      	movs	r1, #0
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff fa84 	bl	8002044 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8002b3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b3e:	f00b fa59 	bl	800dff4 <free>

  HAL_Delay(3000);
 8002b42:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002b46:	f001 fda3 	bl	8004690 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b4a:	bf00      	nop
 8002b4c:	e7fd      	b.n	8002b4a <main+0x5f2>
 8002b4e:	bf00      	nop
 8002b50:	0800e47c 	.word	0x0800e47c
 8002b54:	04030201 	.word	0x04030201
 8002b58:	20014260 	.word	0x20014260
 8002b5c:	200144a8 	.word	0x200144a8

08002b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b094      	sub	sp, #80	@ 0x50
 8002b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b66:	f107 0320 	add.w	r3, r7, #32
 8002b6a:	2230      	movs	r2, #48	@ 0x30
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00b fb2c 	bl	800e1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	4b28      	ldr	r3, [pc, #160]	@ (8002c2c <SystemClock_Config+0xcc>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	4a27      	ldr	r2, [pc, #156]	@ (8002c2c <SystemClock_Config+0xcc>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b94:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <SystemClock_Config+0xcc>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <SystemClock_Config+0xd0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <SystemClock_Config+0xd0>)
 8002baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <SystemClock_Config+0xd0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002bd4:	23a8      	movs	r3, #168	@ 0xa8
 8002bd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bdc:	2307      	movs	r3, #7
 8002bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be0:	f107 0320 	add.w	r3, r7, #32
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fe69 	bl	80058bc <HAL_RCC_OscConfig>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002bf0:	f000 fa66 	bl	80030c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf4:	230f      	movs	r3, #15
 8002bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c0c:	f107 030c 	add.w	r3, r7, #12
 8002c10:	2105      	movs	r1, #5
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 f8ca 	bl	8005dac <HAL_RCC_ClockConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c1e:	f000 fa4f 	bl	80030c0 <Error_Handler>
  }
}
 8002c22:	bf00      	nop
 8002c24:	3750      	adds	r7, #80	@ 0x50
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000

08002c34 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c3a:	463b      	mov	r3, r7
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <MX_DAC_Init+0x4c>)
 8002c44:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <MX_DAC_Init+0x50>)
 8002c46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002c48:	480d      	ldr	r0, [pc, #52]	@ (8002c80 <MX_DAC_Init+0x4c>)
 8002c4a:	f001 fe56 	bl	80048fa <HAL_DAC_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002c54:	f000 fa34 	bl	80030c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002c58:	2324      	movs	r3, #36	@ 0x24
 8002c5a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c60:	463b      	mov	r3, r7
 8002c62:	2200      	movs	r2, #0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4806      	ldr	r0, [pc, #24]	@ (8002c80 <MX_DAC_Init+0x4c>)
 8002c68:	f001 ff8d 	bl	8004b86 <HAL_DAC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002c72:	f000 fa25 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20014168 	.word	0x20014168
 8002c84:	40007400 	.word	0x40007400

08002c88 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <MX_SDIO_SD_Init+0x3c>)
 8002c90:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <MX_SDIO_SD_Init+0x38>)
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	200141dc 	.word	0x200141dc
 8002cc4:	40012c00 	.word	0x40012c00

08002cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ccc:	4b17      	ldr	r3, [pc, #92]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002cce:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <MX_SPI1_Init+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002cd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cda:	4b14      	ldr	r3, [pc, #80]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce6:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cec:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002cf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d06:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002d14:	220a      	movs	r2, #10
 8002d16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d18:	4804      	ldr	r0, [pc, #16]	@ (8002d2c <MX_SPI1_Init+0x64>)
 8002d1a:	f004 f9ff 	bl	800711c <HAL_SPI_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d24:	f000 f9cc 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20014260 	.word	0x20014260
 8002d30:	40013000 	.word	0x40013000

08002d34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d3a:	4a17      	ldr	r2, [pc, #92]	@ (8002d98 <MX_SPI2_Init+0x64>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d52:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d64:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d66:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d78:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d7a:	220a      	movs	r2, #10
 8002d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d7e:	4805      	ldr	r0, [pc, #20]	@ (8002d94 <MX_SPI2_Init+0x60>)
 8002d80:	f004 f9cc 	bl	800711c <HAL_SPI_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8002d8a:	f000 f999 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	200142b8 	.word	0x200142b8
 8002d98:	40003800 	.word	0x40003800

08002d9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002da2:	f107 0308 	add.w	r3, r7, #8
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	609a      	str	r2, [r3, #8]
 8002dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db0:	463b      	mov	r3, r7
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dc2:	2229      	movs	r2, #41	@ 0x29
 8002dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 8002dcc:	4b18      	ldr	r3, [pc, #96]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dce:	221b      	movs	r2, #27
 8002dd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd2:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dde:	4814      	ldr	r0, [pc, #80]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002de0:	f005 ff37 	bl	8008c52 <HAL_TIM_Base_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002dea:	f000 f969 	bl	80030c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002df4:	f107 0308 	add.w	r3, r7, #8
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480d      	ldr	r0, [pc, #52]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002dfc:	f006 f940 	bl	8009080 <HAL_TIM_ConfigClockSource>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002e06:	f000 f95b 	bl	80030c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e12:	463b      	mov	r3, r7
 8002e14:	4619      	mov	r1, r3
 8002e16:	4806      	ldr	r0, [pc, #24]	@ (8002e30 <MX_TIM2_Init+0x94>)
 8002e18:	f006 fb68 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002e22:	f000 f94d 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e26:	bf00      	nop
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	200143d0 	.word	0x200143d0

08002e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e48:	463b      	mov	r3, r7
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e50:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <MX_TIM4_Init+0x98>)
 8002e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002e56:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e58:	2254      	movs	r2, #84	@ 0x54
 8002e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002e62:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e76:	4814      	ldr	r0, [pc, #80]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e78:	f005 feeb 	bl	8008c52 <HAL_TIM_Base_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002e82:	f000 f91d 	bl	80030c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e8c:	f107 0308 	add.w	r3, r7, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	480d      	ldr	r0, [pc, #52]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002e94:	f006 f8f4 	bl	8009080 <HAL_TIM_ConfigClockSource>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002e9e:	f000 f90f 	bl	80030c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	4619      	mov	r1, r3
 8002eae:	4806      	ldr	r0, [pc, #24]	@ (8002ec8 <MX_TIM4_Init+0x94>)
 8002eb0:	f006 fb1c 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002eba:	f000 f901 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20014418 	.word	0x20014418
 8002ecc:	40000800 	.word	0x40000800

08002ed0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <MX_USART1_UART_Init+0x50>)
 8002ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002edc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f06:	4805      	ldr	r0, [pc, #20]	@ (8002f1c <MX_USART1_UART_Init+0x4c>)
 8002f08:	f006 fb80 	bl	800960c <HAL_UART_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f12:	f000 f8d5 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20014460 	.word	0x20014460
 8002f20:	40011000 	.word	0x40011000

08002f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <MX_DMA_Init+0x78>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a1a      	ldr	r2, [pc, #104]	@ (8002f9c <MX_DMA_Init+0x78>)
 8002f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b18      	ldr	r3, [pc, #96]	@ (8002f9c <MX_DMA_Init+0x78>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <MX_DMA_Init+0x78>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a13      	ldr	r2, [pc, #76]	@ (8002f9c <MX_DMA_Init+0x78>)
 8002f50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <MX_DMA_Init+0x78>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	2010      	movs	r0, #16
 8002f68:	f001 fc91 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f6c:	2010      	movs	r0, #16
 8002f6e:	f001 fcaa 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	2100      	movs	r1, #0
 8002f76:	2038      	movs	r0, #56	@ 0x38
 8002f78:	f001 fc89 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f7c:	2038      	movs	r0, #56	@ 0x38
 8002f7e:	f001 fca2 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	203b      	movs	r0, #59	@ 0x3b
 8002f88:	f001 fc81 	bl	800488e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002f8c:	203b      	movs	r0, #59	@ 0x3b
 8002f8e:	f001 fc9a 	bl	80048c6 <HAL_NVIC_EnableIRQ>

}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08c      	sub	sp, #48	@ 0x30
 8002fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa6:	f107 031c 	add.w	r3, r7, #28
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	4a3d      	ldr	r2, [pc, #244]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	4a36      	ldr	r2, [pc, #216]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe2:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	4b30      	ldr	r3, [pc, #192]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8002ff8:	f043 0304 	orr.w	r3, r3, #4
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	4b29      	ldr	r3, [pc, #164]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b26      	ldr	r3, [pc, #152]	@ (80030b4 <MX_GPIO_Init+0x114>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	4b22      	ldr	r3, [pc, #136]	@ (80030b4 <MX_GPIO_Init+0x114>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	4a21      	ldr	r2, [pc, #132]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003030:	f043 0302 	orr.w	r3, r3, #2
 8003034:	6313      	str	r3, [r2, #48]	@ 0x30
 8003036:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a1a      	ldr	r2, [pc, #104]	@ (80030b4 <MX_GPIO_Init+0x114>)
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b18      	ldr	r3, [pc, #96]	@ (80030b4 <MX_GPIO_Init+0x114>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800305e:	2200      	movs	r2, #0
 8003060:	2110      	movs	r1, #16
 8003062:	4815      	ldr	r0, [pc, #84]	@ (80030b8 <MX_GPIO_Init+0x118>)
 8003064:	f002 fc10 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8003068:	2200      	movs	r2, #0
 800306a:	2158      	movs	r1, #88	@ 0x58
 800306c:	4813      	ldr	r0, [pc, #76]	@ (80030bc <MX_GPIO_Init+0x11c>)
 800306e:	f002 fc0b 	bl	8005888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003072:	2310      	movs	r3, #16
 8003074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003076:	2301      	movs	r3, #1
 8003078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307e:	2300      	movs	r3, #0
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	480b      	ldr	r0, [pc, #44]	@ (80030b8 <MX_GPIO_Init+0x118>)
 800308a:	f002 fa61 	bl	8005550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800308e:	2358      	movs	r3, #88	@ 0x58
 8003090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003092:	2301      	movs	r3, #1
 8003094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800309e:	f107 031c 	add.w	r3, r7, #28
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	@ (80030bc <MX_GPIO_Init+0x11c>)
 80030a6:	f002 fa53 	bl	8005550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030aa:	bf00      	nop
 80030ac:	3730      	adds	r7, #48	@ 0x30
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40020c00 	.word	0x40020c00

080030c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030c4:	b672      	cpsid	i
}
 80030c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <Error_Handler+0x8>

080030cc <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80030d0:	2201      	movs	r2, #1
 80030d2:	4903      	ldr	r1, [pc, #12]	@ (80030e0 <init_cardSD+0x14>)
 80030d4:	4803      	ldr	r0, [pc, #12]	@ (80030e4 <init_cardSD+0x18>)
 80030d6:	f009 fe1f 	bl	800cd18 <f_mount>

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	0800e48c 	.word	0x0800e48c
 80030e4:	200144b0 	.word	0x200144b0

080030e8 <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80030f4:	e015      	b.n	8003122 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80030fc:	d90e      	bls.n	800311c <string_to_int+0x34>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b39      	cmp	r3, #57	@ 0x39
 8003104:	d80a      	bhi.n	800311c <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	461a      	mov	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	3b30      	subs	r3, #48	@ 0x30
 800311a:	60fb      	str	r3, [r7, #12]
		}

		string++;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3301      	adds	r3, #1
 8003120:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b0a      	cmp	r3, #10
 8003128:	d1e5      	bne.n	80030f6 <string_to_int+0xe>
	}

	return number;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	b29b      	uxth	r3, r3
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 8003146:	e002      	b.n	800314e <assign_filePath+0x14>
	{
		i++;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	3301      	adds	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f6      	bne.n	8003148 <assign_filePath+0xe>
	}

	i++;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	3301      	adds	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	4618      	mov	r0, r3
 8003164:	f00a ff3e 	bl	800dfe4 <malloc>
 8003168:	4603      	mov	r3, r0
 800316a:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	461a      	mov	r2, r3
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	f00b f89c 	bl	800e2b0 <memcpy>

	return string;
 8003178:	68bb      	ldr	r3, [r7, #8]


}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <return_file_name_current_path>:


char* return_file_name_current_path(char *filePathName)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
	 * Input: calea fisierului
	 * Output: pointer catre nume
	 */


	char *fileName = strrchr(filePathName, '/');
 800318a:	212f      	movs	r1, #47	@ 0x2f
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f00b f834 	bl	800e1fa <strrchr>
 8003192:	60f8      	str	r0, [r7, #12]

	if(fileName == NULL)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <return_file_name_current_path+0x20>
	{
		fileName = filePathName;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]
		return fileName;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	e011      	b.n	80031c6 <return_file_name_current_path+0x44>
	}

	else
	{
		fileName++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
	}

	char *string = malloc(strlen(fileName) + 1);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7fd f80d 	bl	80001c8 <strlen>
 80031ae:	4603      	mov	r3, r0
 80031b0:	3301      	adds	r3, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f00a ff16 	bl	800dfe4 <malloc>
 80031b8:	4603      	mov	r3, r0
 80031ba:	60bb      	str	r3, [r7, #8]
	strcpy(string, fileName);
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	68b8      	ldr	r0, [r7, #8]
 80031c0:	f00b f86e 	bl	800e2a0 <strcpy>

	return string;
 80031c4:	68bb      	ldr	r3, [r7, #8]

}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <assign_file_path_entity>:


void assign_file_path_entity(ENTITY *entity, const char *filePathName)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
	 * Input: adresa entitatii si calea literara
	 * Output: Void
	 */


	strcpy(entity->ST.SD.filePathName, filePathName);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f00b f85e 	bl	800e2a0 <strcpy>

}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <read_audio_file>:


void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 80031ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031f0:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80031fa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80031fe:	6018      	str	r0, [r3, #0]
 8003200:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003204:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003208:	6019      	str	r1, [r3, #0]
 800320a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800320e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	466b      	mov	r3, sp
 8003216:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003218:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800321c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003220:	f107 0020 	add.w	r0, r7, #32
 8003224:	2201      	movs	r2, #1
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	f009 fdbc 	bl	800cda4 <f_open>
 800322c:	4603      	mov	r3, r0
 800322e:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 8003232:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 8101 	bne.w	800343e <read_audio_file+0x252>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 800323c:	4b83      	ldr	r3, [pc, #524]	@ (800344c <read_audio_file+0x260>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	f107 0320 	add.w	r3, r7, #32
 8003244:	4611      	mov	r1, r2
 8003246:	4618      	mov	r0, r3
 8003248:	f00a fac2 	bl	800d7d0 <f_lseek>


	if(flagNewAudioFile == 1)
 800324c:	4b80      	ldr	r3, [pc, #512]	@ (8003450 <read_audio_file+0x264>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <read_audio_file+0x98>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8003254:	4b7e      	ldr	r3, [pc, #504]	@ (8003450 <read_audio_file+0x264>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 800325a:	4b7e      	ldr	r3, [pc, #504]	@ (8003454 <read_audio_file+0x268>)
 800325c:	2200      	movs	r2, #0
 800325e:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8003260:	4b7a      	ldr	r3, [pc, #488]	@ (800344c <read_audio_file+0x260>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8003266:	4b79      	ldr	r3, [pc, #484]	@ (800344c <read_audio_file+0x260>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f107 0320 	add.w	r3, r7, #32
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f00a faad 	bl	800d7d0 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8003276:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800327a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a75      	ldr	r2, [pc, #468]	@ (8003458 <read_audio_file+0x26c>)
 8003282:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8003284:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003288:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 800328c:	4b72      	ldr	r3, [pc, #456]	@ (8003458 <read_audio_file+0x26c>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 800329c:	4b6e      	ldr	r3, [pc, #440]	@ (8003458 <read_audio_file+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80032a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80032a8:	fb01 f202 	mul.w	r2, r1, r2
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <read_audio_file+0xd0>
	{
		nrFrames++;
 80032b2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80032b6:	3301      	adds	r3, #1
 80032b8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 80032c2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80032cc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80032d0:	2200      	movs	r2, #0
 80032d2:	4698      	mov	r8, r3
 80032d4:	4691      	mov	r9, r2
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ea:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80032ee:	2200      	movs	r2, #0
 80032f0:	461c      	mov	r4, r3
 80032f2:	4615      	mov	r5, r2
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003308:	3307      	adds	r3, #7
 800330a:	08db      	lsrs	r3, r3, #3
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	ebad 0d03 	sub.w	sp, sp, r3
 8003312:	466b      	mov	r3, sp
 8003314:	3300      	adds	r3, #0
 8003316:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 800331a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	f107 031c 	add.w	r3, r7, #28
 8003324:	f107 0020 	add.w	r0, r7, #32
 8003328:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800332c:	f009 fef4 	bl	800d118 <f_read>
	tempBuffer[byteRead] = '\n';
 8003330:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003334:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800333e:	210a      	movs	r1, #10
 8003340:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8003342:	2300      	movs	r3, #0
 8003344:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8003348:	e040      	b.n	80033cc <read_audio_file+0x1e0>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 800334a:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 800334e:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	2b0a      	cmp	r3, #10
 8003356:	d011      	beq.n	800337c <read_audio_file+0x190>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8003358:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 800335c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003360:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8003364:	5c89      	ldrb	r1, [r1, r2]
 8003366:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800336a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800336e:	54d1      	strb	r1, [r2, r3]
			index++;
 8003370:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003374:	3301      	adds	r3, #1
 8003376:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 800337a:	e022      	b.n	80033c2 <read_audio_file+0x1d6>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 800337c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003380:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8003384:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8003388:	210a      	movs	r1, #10
 800338a:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 800338c:	f107 0314 	add.w	r3, r7, #20
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fea9 	bl	80030e8 <string_to_int>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800339e:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	601a      	str	r2, [r3, #0]
			buffer++;
 80033a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80033aa:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80033ae:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80033b2:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	3204      	adds	r2, #4
 80033ba:	601a      	str	r2, [r3, #0]

			index = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 80033c2:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80033c6:	3301      	adds	r3, #1
 80033c8:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 80033cc:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80033d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80033d4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3b5      	bcc.n	800334a <read_audio_file+0x15e>


	}


	if(currentFrame == nrFrames)
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <read_audio_file+0x268>)
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10f      	bne.n	800340c <read_audio_file+0x220>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 80033ec:	4b18      	ldr	r3, [pc, #96]	@ (8003450 <read_audio_file+0x264>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 80033f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80033f6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 8003400:	f107 0320 	add.w	r3, r7, #32
 8003404:	4618      	mov	r0, r3
 8003406:	f00a f9b9 	bl	800d77c <f_close>
		return;
 800340a:	e018      	b.n	800343e <read_audio_file+0x252>
	}

	currentFrame++;
 800340c:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <read_audio_file+0x268>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b0f      	ldr	r3, [pc, #60]	@ (8003454 <read_audio_file+0x268>)
 8003416:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8003418:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800341c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <read_audio_file+0x260>)
 8003424:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <read_audio_file+0x260>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	4a07      	ldr	r2, [pc, #28]	@ (800344c <read_audio_file+0x260>)
 800342e:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8003430:	f107 0320 	add.w	r3, r7, #32
 8003434:	4618      	mov	r0, r3
 8003436:	f00a f9a1 	bl	800d77c <f_close>
 800343a:	46b5      	mov	sp, r6
 800343c:	e000      	b.n	8003440 <read_audio_file+0x254>
		return;
 800343e:	46b5      	mov	sp, r6


}
 8003440:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8003444:	46bd      	mov	sp, r7
 8003446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800344a:	bf00      	nop
 800344c:	200146e0 	.word	0x200146e0
 8003450:	2000000a 	.word	0x2000000a
 8003454:	200146e4 	.word	0x200146e4
 8003458:	200146e8 	.word	0x200146e8

0800345c <read_image_file>:


void read_image_file(ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 800345c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003460:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8003464:	af00      	add	r7, sp, #0
 8003466:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800346a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800346e:	6018      	str	r0, [r3, #0]
 8003470:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003474:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003478:	6019      	str	r1, [r3, #0]
 800347a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800347e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	466b      	mov	r3, sp
 8003486:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, entity->ST.SD.filePathName, FA_READ);
 8003488:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800348c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	2201      	movs	r2, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f009 fc82 	bl	800cda4 <f_open>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80034a6:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 81af 	bne.w	800380e <read_image_file+0x3b2>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80034b0:	4ba8      	ldr	r3, [pc, #672]	@ (8003754 <read_image_file+0x2f8>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80d6 	beq.w	8003666 <read_image_file+0x20a>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80034ba:	4ba7      	ldr	r3, [pc, #668]	@ (8003758 <read_image_file+0x2fc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80034c0:	4ba5      	ldr	r3, [pc, #660]	@ (8003758 <read_image_file+0x2fc>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	f107 031c 	add.w	r3, r7, #28
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f00a f980 	bl	800d7d0 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80034d0:	f107 0318 	add.w	r3, r7, #24
 80034d4:	f107 0114 	add.w	r1, r7, #20
 80034d8:	f107 001c 	add.w	r0, r7, #28
 80034dc:	2204      	movs	r2, #4
 80034de:	f009 fe1b 	bl	800d118 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 80034e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034e6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 80034f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80034f4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 80034fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003502:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800350c:	461a      	mov	r2, r3
 800350e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003512:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003516:	785b      	ldrb	r3, [r3, #1]
 8003518:	4313      	orrs	r3, r2
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	b21a      	sxth	r2, r3
 800351e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003522:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800352c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003530:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b21b      	sxth	r3, r3
 8003538:	430b      	orrs	r3, r1
 800353a:	b21b      	sxth	r3, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	b21a      	sxth	r2, r3
 8003540:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003544:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800354c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003550:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800355a:	461a      	mov	r2, r3
 800355c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003560:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003564:	78db      	ldrb	r3, [r3, #3]
 8003566:	4313      	orrs	r3, r2
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	b21a      	sxth	r2, r3
 800356c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003570:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800357a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800357e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003582:	789b      	ldrb	r3, [r3, #2]
 8003584:	b21b      	sxth	r3, r3
 8003586:	430b      	orrs	r3, r1
 8003588:	b21b      	sxth	r3, r3
 800358a:	4313      	orrs	r3, r2
 800358c:	b21a      	sxth	r2, r3
 800358e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003592:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 800359a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800359e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80035ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c0:	da1f      	bge.n	8003602 <read_image_file+0x1a6>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80035c2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80035c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80035d6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035e0:	fb03 f202 	mul.w	r2, r3, r2
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f00a fcfa 	bl	800dfe4 <malloc>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80035f8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e00b      	b.n	800361a <read_image_file+0x1be>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->ST.SD.data = malloc(sizeof(char)*3072);
 8003602:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003606:	f00a fced 	bl	800dfe4 <malloc>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003612:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 800361a:	4b4e      	ldr	r3, [pc, #312]	@ (8003754 <read_image_file+0x2f8>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003620:	4b4e      	ldr	r3, [pc, #312]	@ (800375c <read_image_file+0x300>)
 8003622:	2200      	movs	r2, #0
 8003624:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8003626:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800362a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a49      	ldr	r2, [pc, #292]	@ (8003758 <read_image_file+0x2fc>)
 8003632:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003634:	4b48      	ldr	r3, [pc, #288]	@ (8003758 <read_image_file+0x2fc>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f107 031c 	add.w	r3, r7, #28
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f00a f8c6 	bl	800d7d0 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8003644:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003648:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	3b04      	subs	r3, #4
 8003650:	4a43      	ldr	r2, [pc, #268]	@ (8003760 <read_image_file+0x304>)
 8003652:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8003654:	4b42      	ldr	r3, [pc, #264]	@ (8003760 <read_image_file+0x304>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a42      	ldr	r2, [pc, #264]	@ (8003764 <read_image_file+0x308>)
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003660:	4a41      	ldr	r2, [pc, #260]	@ (8003768 <read_image_file+0x30c>)
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e007      	b.n	8003676 <read_image_file+0x21a>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003666:	4b3c      	ldr	r3, [pc, #240]	@ (8003758 <read_image_file+0x2fc>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f00a f8ad 	bl	800d7d0 <f_lseek>
	}



	if(fileSize == n)
 8003676:	4b3a      	ldr	r3, [pc, #232]	@ (8003760 <read_image_file+0x304>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3a      	ldr	r2, [pc, #232]	@ (8003764 <read_image_file+0x308>)
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	4293      	cmp	r3, r2
 8003680:	d104      	bne.n	800368c <read_image_file+0x230>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8003682:	4b39      	ldr	r3, [pc, #228]	@ (8003768 <read_image_file+0x30c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3b01      	subs	r3, #1
 8003688:	4a37      	ldr	r2, [pc, #220]	@ (8003768 <read_image_file+0x30c>)
 800368a:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 800368c:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <read_image_file+0x304>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a34      	ldr	r2, [pc, #208]	@ (8003764 <read_image_file+0x308>)
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	fbb3 f1f2 	udiv	r1, r3, r2
 8003698:	fb01 f202 	mul.w	r2, r1, r2
 800369c:	1a9b      	subs	r3, r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <read_image_file+0x258>
 80036a2:	4b31      	ldr	r3, [pc, #196]	@ (8003768 <read_image_file+0x30c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <read_image_file+0x258>
	{
		nrFrames++;
 80036aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <read_image_file+0x30c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <read_image_file+0x30c>)
 80036b2:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 80036b4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036b8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 80036c2:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <read_image_file+0x308>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80036cc:	4b25      	ldr	r3, [pc, #148]	@ (8003764 <read_image_file+0x308>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	4690      	mov	r8, r2
 80036d6:	4699      	mov	r9, r3
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <read_image_file+0x308>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	2300      	movs	r3, #0
 80036f4:	4614      	mov	r4, r2
 80036f6:	461d      	mov	r5, r3
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	00eb      	lsls	r3, r5, #3
 8003702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003706:	00e2      	lsls	r2, r4, #3
 8003708:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <read_image_file+0x308>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3307      	adds	r3, #7
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	ebad 0d03 	sub.w	sp, sp, r3
 8003716:	466b      	mov	r3, sp
 8003718:	3300      	adds	r3, #0
 800371a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <read_image_file+0x308>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	f107 0318 	add.w	r3, r7, #24
 8003728:	f107 001c 	add.w	r0, r7, #28
 800372c:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8003730:	f009 fcf2 	bl	800d118 <f_read>
	(*indexFlag) = byteRead;
 8003734:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003738:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b29a      	uxth	r2, r3
 8003740:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003744:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8003752:	e01f      	b.n	8003794 <read_image_file+0x338>
 8003754:	2000000b 	.word	0x2000000b
 8003758:	200146ec 	.word	0x200146ec
 800375c:	200146f0 	.word	0x200146f0
 8003760:	200146f4 	.word	0x200146f4
 8003764:	0800f230 	.word	0x0800f230
 8003768:	200146f8 	.word	0x200146f8
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->ST.SD.data[i] = tempBuffer[i];
 800376c:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8003770:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003774:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68d9      	ldr	r1, [r3, #12]
 800377c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8003780:	440b      	add	r3, r1
 8003782:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8003786:	5c8a      	ldrb	r2, [r1, r2]
 8003788:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 800378a:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 800378e:	3301      	adds	r3, #1
 8003790:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8003794:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8003798:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800379c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d3e2      	bcc.n	800376c <read_image_file+0x310>

	}


	currentFrame++;
 80037a6:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <read_image_file+0x3c0>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <read_image_file+0x3c0>)
 80037b0:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 80037b2:	4b1a      	ldr	r3, [pc, #104]	@ (800381c <read_image_file+0x3c0>)
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <read_image_file+0x3c4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d208      	bcs.n	80037d2 <read_image_file+0x376>
 80037c0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037c4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037d0:	d20f      	bcs.n	80037f2 <read_image_file+0x396>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 80037d2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037d6:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 80037e0:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <read_image_file+0x3c8>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	4618      	mov	r0, r3
 80037ec:	f009 ffc6 	bl	800d77c <f_close>
		return;
 80037f0:	e00d      	b.n	800380e <read_image_file+0x3b2>
	}


	currentPosition = f_tell(&file);
 80037f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037f6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <read_image_file+0x3cc>)
 80037fe:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	4618      	mov	r0, r3
 8003806:	f009 ffb9 	bl	800d77c <f_close>
 800380a:	46b5      	mov	sp, r6
 800380c:	e000      	b.n	8003810 <read_image_file+0x3b4>
		return;
 800380e:	46b5      	mov	sp, r6


}
 8003810:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800381a:	bf00      	nop
 800381c:	200146f0 	.word	0x200146f0
 8003820:	200146f8 	.word	0x200146f8
 8003824:	2000000b 	.word	0x2000000b
 8003828:	200146ec 	.word	0x200146ec

0800382c <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 800383c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003840:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	dd33      	ble.n	80038b6 <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 800384e:	e00b      	b.n	8003868 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003858:	4293      	cmp	r3, r2
 800385a:	d102      	bne.n	8003862 <frame_number_x+0x36>
			{
				return x;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	b29b      	uxth	r3, r3
 8003860:	e05f      	b.n	8003922 <frame_number_x+0xf6>
			}

			x++;
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	3301      	adds	r3, #1
 8003866:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003876:	edd7 7a02 	vldr	s15, [r7, #8]
 800387a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	ee07 3a90 	vmov	s15, r3
 800388c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003894:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003930 <frame_number_x+0x104>
 8003898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a0:	d9d6      	bls.n	8003850 <frame_number_x+0x24>
		}


		if(x==1)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <frame_number_x+0x80>
		{
			return 1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e03a      	b.n	8003922 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	e035      	b.n	8003922 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 80038ba:	e016      	b.n	80038ea <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d102      	bne.n	80038ce <frame_number_x+0xa2>
			{
				return x;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	e029      	b.n	8003922 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 80038ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80038d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038de:	edc7 7a01 	vstr	s15, [r7, #4]
 80038e2:	793a      	ldrb	r2, [r7, #4]
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	4413      	add	r3, r2
 80038e8:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80038f0:	461a      	mov	r2, r3
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fc:	ddde      	ble.n	80038bc <frame_number_x+0x90>
		}


		return (x-(1/factor));
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003908:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800390c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003910:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800391c:	ee17 3a90 	vmov	r3, s15
 8003920:	b29b      	uxth	r3, r3

	}


}
 8003922:	4618      	mov	r0, r3
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	44800000 	.word	0x44800000

08003934 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8003934:	b590      	push	{r4, r7, lr}
 8003936:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800393a:	af00      	add	r7, sp, #0
 800393c:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8003940:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003944:	6020      	str	r0, [r4, #0]
 8003946:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 800394a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800394e:	6001      	str	r1, [r0, #0]
 8003950:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003954:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003958:	ed81 0a00 	vstr	s0, [r1]
 800395c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003960:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8003964:	600a      	str	r2, [r1, #0]
 8003966:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800396a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800396e:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003970:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003974:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003978:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800397c:	2201      	movs	r2, #1
 800397e:	6819      	ldr	r1, [r3, #0]
 8003980:	f009 fa10 	bl	800cda4 <f_open>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 800398a:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 81be 	bne.w	8003d10 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8003994:	4ba9      	ldr	r3, [pc, #676]	@ (8003c3c <read_image_file_scaling+0x308>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8112 	beq.w	8003bc2 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 800399e:	4ba8      	ldr	r3, [pc, #672]	@ (8003c40 <read_image_file_scaling+0x30c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80039a4:	4ba6      	ldr	r3, [pc, #664]	@ (8003c40 <read_image_file_scaling+0x30c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f009 ff0e 	bl	800d7d0 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80039b4:	f107 0320 	add.w	r3, r7, #32
 80039b8:	f107 011c 	add.w	r1, r7, #28
 80039bc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80039c0:	2204      	movs	r2, #4
 80039c2:	f009 fba9 	bl	800d118 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 80039c6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039ca:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 80039d4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039d8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 80039e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039e6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80039f0:	461a      	mov	r2, r3
 80039f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80039f6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	021b      	lsls	r3, r3, #8
 8003a00:	b21a      	sxth	r2, r3
 8003a02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a06:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8003a10:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a14:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b21b      	sxth	r3, r3
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	b21b      	sxth	r3, r3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b21a      	sxth	r2, r3
 8003a24:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a28:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8003a30:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a34:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a44:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003a48:	78db      	ldrb	r3, [r3, #3]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	b21a      	sxth	r2, r3
 8003a50:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a54:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8003a5e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a62:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003a66:	789b      	ldrb	r3, [r3, #2]
 8003a68:	b21b      	sxth	r3, r3
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	b21b      	sxth	r3, r3
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	b21a      	sxth	r2, r3
 8003a72:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a76:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8003a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c3c <read_image_file_scaling+0x308>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003a84:	4b6f      	ldr	r3, [pc, #444]	@ (8003c44 <read_image_file_scaling+0x310>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8003a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8003c48 <read_image_file_scaling+0x314>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8003a90:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a94:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a69      	ldr	r2, [pc, #420]	@ (8003c40 <read_image_file_scaling+0x30c>)
 8003a9c:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003a9e:	4b68      	ldr	r3, [pc, #416]	@ (8003c40 <read_image_file_scaling+0x30c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f009 fe91 	bl	800d7d0 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8003aae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003ab2:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8003ab6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003aba:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003abe:	ed92 0a00 	vldr	s0, [r2]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	f7ff feb2 	bl	800382c <frame_number_x>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b5f      	ldr	r3, [pc, #380]	@ (8003c4c <read_image_file_scaling+0x318>)
 8003ace:	801a      	strh	r2, [r3, #0]
		*px = x;
 8003ad0:	4b5e      	ldr	r3, [pc, #376]	@ (8003c4c <read_image_file_scaling+0x318>)
 8003ad2:	881a      	ldrh	r2, [r3, #0]
 8003ad4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003ad8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c4c <read_image_file_scaling+0x318>)
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003aea:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d125      	bne.n	8003b44 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8003af8:	4b53      	ldr	r3, [pc, #332]	@ (8003c48 <read_image_file_scaling+0x314>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8003afe:	4b54      	ldr	r3, [pc, #336]	@ (8003c50 <read_image_file_scaling+0x31c>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8003b04:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b08:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b18:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b22:	fb03 f202 	mul.w	r2, r3, r2
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f00a fa59 	bl	800dfe4 <malloc>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b3a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e046      	b.n	8003bd2 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*x);
 8003b44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b48:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b3d      	ldr	r3, [pc, #244]	@ (8003c4c <read_image_file_scaling+0x318>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	fb03 f202 	mul.w	r2, r3, r2
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f00a fa3e 	bl	800dfe4 <malloc>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b70:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8003b78:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b7c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b30      	ldr	r3, [pc, #192]	@ (8003c4c <read_image_file_scaling+0x318>)
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b2f      	ldr	r3, [pc, #188]	@ (8003c50 <read_image_file_scaling+0x31c>)
 8003b94:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8003b96:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b9a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ba4:	4a29      	ldr	r2, [pc, #164]	@ (8003c4c <read_image_file_scaling+0x318>)
 8003ba6:	8812      	ldrh	r2, [r2, #0]
 8003ba8:	fb93 f1f2 	sdiv	r1, r3, r2
 8003bac:	fb01 f202 	mul.w	r2, r1, r2
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8003bb6:	4b26      	ldr	r3, [pc, #152]	@ (8003c50 <read_image_file_scaling+0x31c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	4a24      	ldr	r2, [pc, #144]	@ (8003c50 <read_image_file_scaling+0x31c>)
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	e007      	b.n	8003bd2 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c40 <read_image_file_scaling+0x30c>)
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bca:	4611      	mov	r1, r2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f009 fdff 	bl	800d7d0 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c48 <read_image_file_scaling+0x314>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d03c      	beq.n	8003c54 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8003bda:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bde:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68d9      	ldr	r1, [r3, #12]
 8003be6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bea:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bfa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c04:	fb03 f202 	mul.w	r2, r3, r2
 8003c08:	4613      	mov	r3, r2
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	441a      	add	r2, r3
 8003c0e:	f107 0320 	add.w	r3, r7, #32
 8003c12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c16:	f009 fa7f 	bl	800d118 <f_read>

		*flagTerm = 1;
 8003c1a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c1e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003c28:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <read_image_file_scaling+0x308>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c32:	4618      	mov	r0, r3
 8003c34:	f009 fda2 	bl	800d77c <f_close>
		return;
 8003c38:	e06b      	b.n	8003d12 <read_image_file_scaling+0x3de>
 8003c3a:	bf00      	nop
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	200146fc 	.word	0x200146fc
 8003c44:	20014700 	.word	0x20014700
 8003c48:	20014702 	.word	0x20014702
 8003c4c:	20014704 	.word	0x20014704
 8003c50:	20014708 	.word	0x20014708

	}

	else
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8003c54:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c58:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68d9      	ldr	r1, [r3, #12]
 8003c60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c64:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b2a      	ldr	r3, [pc, #168]	@ (8003d1c <read_image_file_scaling+0x3e8>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	fb03 f202 	mul.w	r2, r3, r2
 8003c78:	4613      	mov	r3, r2
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	441a      	add	r2, r3
 8003c7e:	f107 0320 	add.w	r3, r7, #32
 8003c82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c86:	f009 fa47 	bl	800d118 <f_read>

		currentFrame++;
 8003c8a:	4b25      	ldr	r3, [pc, #148]	@ (8003d20 <read_image_file_scaling+0x3ec>)
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	4b23      	ldr	r3, [pc, #140]	@ (8003d20 <read_image_file_scaling+0x3ec>)
 8003c94:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 8003c96:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <read_image_file_scaling+0x3ec>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	4b21      	ldr	r3, [pc, #132]	@ (8003d24 <read_image_file_scaling+0x3f0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d328      	bcc.n	8003cf6 <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 8003ca4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003ca8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d24 <read_image_file_scaling+0x3f0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b299      	uxth	r1, r3
 8003cbc:	4b17      	ldr	r3, [pc, #92]	@ (8003d1c <read_image_file_scaling+0x3e8>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	fb11 f303 	smulbb	r3, r1, r3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cce:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 8003cd6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cda:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 8003ce4:	4b10      	ldr	r3, [pc, #64]	@ (8003d28 <read_image_file_scaling+0x3f4>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f009 fd44 	bl	800d77c <f_close>
			return;
 8003cf4:	e00d      	b.n	8003d12 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 8003cf6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cfa:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <read_image_file_scaling+0x3f8>)
 8003d02:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8003d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f009 fd37 	bl	800d77c <f_close>
 8003d0e:	e000      	b.n	8003d12 <read_image_file_scaling+0x3de>
		return;
 8003d10:	bf00      	nop

	}



}
 8003d12:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20014704 	.word	0x20014704
 8003d20:	20014700 	.word	0x20014700
 8003d24:	20014708 	.word	0x20014708
 8003d28:	2000000c 	.word	0x2000000c
 8003d2c:	200146fc 	.word	0x200146fc

08003d30 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003d3c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003d40:	6020      	str	r0, [r4, #0]
 8003d42:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8003d46:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003d4a:	6001      	str	r1, [r0, #0]
 8003d4c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003d50:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003d54:	600a      	str	r2, [r1, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d5c:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003d60:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 8003d62:	4b4b      	ldr	r3, [pc, #300]	@ (8003e90 <write_image_file+0x160>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	f083 0301 	eor.w	r3, r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d04b      	beq.n	8003e08 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003d70:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d74:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003d78:	f107 001c 	add.w	r0, r7, #28
 8003d7c:	220a      	movs	r2, #10
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	f009 f810 	bl	800cda4 <f_open>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 8003d8a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d177      	bne.n	8003e82 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 8003d92:	4b40      	ldr	r3, [pc, #256]	@ (8003e94 <write_image_file+0x164>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 8003d98:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003d9c:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003da8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003dac:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 8003dae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003db2:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dba:	121b      	asrs	r3, r3, #8
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003dc4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003dc8:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 8003dca:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003dd4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003dd8:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8003dda:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8003dde:	121b      	asrs	r3, r3, #8
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003de8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003dec:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8003dee:	f107 0318 	add.w	r3, r7, #24
 8003df2:	f107 0114 	add.w	r1, r7, #20
 8003df6:	f107 001c 	add.w	r0, r7, #28
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	f009 facb 	bl	800d396 <f_write>

		flagStart = 1;
 8003e00:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <write_image_file+0x160>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e018      	b.n	8003e3a <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003e08:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003e0c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003e10:	f107 001c 	add.w	r0, r7, #28
 8003e14:	2212      	movs	r2, #18
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	f008 ffc4 	bl	800cda4 <f_open>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8003e22:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d12d      	bne.n	8003e86 <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <write_image_file+0x164>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	f107 031c 	add.w	r3, r7, #28
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f009 fccb 	bl	800d7d0 <f_lseek>

	}


	if(flagTerm == 1)
 8003e3a:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <write_image_file+0x118>
	{
		flagStart = 0;
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <write_image_file+0x160>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003e48:	f107 0318 	add.w	r3, r7, #24
 8003e4c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8003e50:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8003e54:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003e58:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8003e5c:	f107 001c 	add.w	r0, r7, #28
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	6809      	ldr	r1, [r1, #0]
 8003e64:	f009 fa97 	bl	800d396 <f_write>
	currentPosition = f_tell(&file);
 8003e68:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003e6c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	4a08      	ldr	r2, [pc, #32]	@ (8003e94 <write_image_file+0x164>)
 8003e74:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f009 fc7e 	bl	800d77c <f_close>
 8003e80:	e002      	b.n	8003e88 <write_image_file+0x158>
		    return;
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <write_image_file+0x158>
		    return;
 8003e86:	bf00      	nop

}
 8003e88:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd90      	pop	{r4, r7, pc}
 8003e90:	2001470c 	.word	0x2001470c
 8003e94:	20014710 	.word	0x20014710

08003e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_MspInit+0x4c>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee4 <HAL_MspInit+0x4c>)
 8003ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <HAL_MspInit+0x4c>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <HAL_MspInit+0x4c>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	4a08      	ldr	r2, [pc, #32]	@ (8003ee4 <HAL_MspInit+0x4c>)
 8003ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eca:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_MspInit+0x4c>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	@ 0x28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 0314 	add.w	r3, r7, #20
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <HAL_DAC_MspInit+0xe0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d159      	bne.n	8003fbe <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003fcc <HAL_DAC_MspInit+0xe4>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	4a2e      	ldr	r2, [pc, #184]	@ (8003fcc <HAL_DAC_MspInit+0xe4>)
 8003f14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fcc <HAL_DAC_MspInit+0xe4>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	4b28      	ldr	r3, [pc, #160]	@ (8003fcc <HAL_DAC_MspInit+0xe4>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2e:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <HAL_DAC_MspInit+0xe4>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f36:	4b25      	ldr	r3, [pc, #148]	@ (8003fcc <HAL_DAC_MspInit+0xe4>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f42:	2310      	movs	r3, #16
 8003f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f46:	2303      	movs	r3, #3
 8003f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4e:	f107 0314 	add.w	r3, r7, #20
 8003f52:	4619      	mov	r1, r3
 8003f54:	481e      	ldr	r0, [pc, #120]	@ (8003fd0 <HAL_DAC_MspInit+0xe8>)
 8003f56:	f001 fafb 	bl	8005550 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <HAL_DAC_MspInit+0xf0>)
 8003f5e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003f60:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f62:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8003f66:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f68:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f6a:	2240      	movs	r2, #64	@ 0x40
 8003f6c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f6e:	4b19      	ldr	r3, [pc, #100]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003f74:	4b17      	ldr	r3, [pc, #92]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f7a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f7e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f82:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f84:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f8a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f92:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003f94:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003f9a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003fa2:	480c      	ldr	r0, [pc, #48]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003fa4:	f000 fed2 	bl	8004d4c <HAL_DMA_Init>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003fae:	f7ff f887 	bl	80030c0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a07      	ldr	r2, [pc, #28]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	4a06      	ldr	r2, [pc, #24]	@ (8003fd4 <HAL_DAC_MspInit+0xec>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003fbe:	bf00      	nop
 8003fc0:	3728      	adds	r7, #40	@ 0x28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40007400 	.word	0x40007400
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	2001417c 	.word	0x2001417c
 8003fd8:	40026088 	.word	0x40026088

08003fdc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a31      	ldr	r2, [pc, #196]	@ (80040c0 <HAL_SD_MspInit+0xe4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d15b      	bne.n	80040b6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	4a2f      	ldr	r2, [pc, #188]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004008:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800400c:	6453      	str	r3, [r2, #68]	@ 0x44
 800400e:	4b2d      	ldr	r3, [pc, #180]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004022:	4a28      	ldr	r2, [pc, #160]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004024:	f043 0304 	orr.w	r3, r3, #4
 8004028:	6313      	str	r3, [r2, #48]	@ 0x30
 800402a:	4b26      	ldr	r3, [pc, #152]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b22      	ldr	r3, [pc, #136]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	4a21      	ldr	r2, [pc, #132]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	6313      	str	r3, [r2, #48]	@ 0x30
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <HAL_SD_MspInit+0xe8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004058:	2302      	movs	r3, #2
 800405a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800405c:	2301      	movs	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004060:	2303      	movs	r3, #3
 8004062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004064:	230c      	movs	r3, #12
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4619      	mov	r1, r3
 800406e:	4816      	ldr	r0, [pc, #88]	@ (80040c8 <HAL_SD_MspInit+0xec>)
 8004070:	f001 fa6e 	bl	8005550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	2302      	movs	r3, #2
 800407c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004082:	2303      	movs	r3, #3
 8004084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004086:	230c      	movs	r3, #12
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408a:	f107 0314 	add.w	r3, r7, #20
 800408e:	4619      	mov	r1, r3
 8004090:	480d      	ldr	r0, [pc, #52]	@ (80040c8 <HAL_SD_MspInit+0xec>)
 8004092:	f001 fa5d 	bl	8005550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004096:	2304      	movs	r3, #4
 8004098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800409e:	2301      	movs	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a2:	2303      	movs	r3, #3
 80040a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040a6:	230c      	movs	r3, #12
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040aa:	f107 0314 	add.w	r3, r7, #20
 80040ae:	4619      	mov	r1, r3
 80040b0:	4806      	ldr	r0, [pc, #24]	@ (80040cc <HAL_SD_MspInit+0xf0>)
 80040b2:	f001 fa4d 	bl	8005550 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80040b6:	bf00      	nop
 80040b8:	3728      	adds	r7, #40	@ 0x28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020c00 	.word	0x40020c00

080040d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08c      	sub	sp, #48	@ 0x30
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 031c 	add.w	r3, r7, #28
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a74      	ldr	r2, [pc, #464]	@ (80042c0 <HAL_SPI_MspInit+0x1f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f040 8089 	bne.w	8004206 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	4b72      	ldr	r3, [pc, #456]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 80040fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fc:	4a71      	ldr	r2, [pc, #452]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 80040fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004102:	6453      	str	r3, [r2, #68]	@ 0x44
 8004104:	4b6f      	ldr	r3, [pc, #444]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	4b6b      	ldr	r3, [pc, #428]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	4a6a      	ldr	r2, [pc, #424]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004120:	4b68      	ldr	r3, [pc, #416]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800412c:	23e0      	movs	r3, #224	@ 0xe0
 800412e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004130:	2302      	movs	r3, #2
 8004132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004138:	2303      	movs	r3, #3
 800413a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800413c:	2305      	movs	r3, #5
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004140:	f107 031c 	add.w	r3, r7, #28
 8004144:	4619      	mov	r1, r3
 8004146:	4860      	ldr	r0, [pc, #384]	@ (80042c8 <HAL_SPI_MspInit+0x1f8>)
 8004148:	f001 fa02 	bl	8005550 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800414c:	4b5f      	ldr	r3, [pc, #380]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 800414e:	4a60      	ldr	r2, [pc, #384]	@ (80042d0 <HAL_SPI_MspInit+0x200>)
 8004150:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004152:	4b5e      	ldr	r3, [pc, #376]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004154:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004158:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800415a:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 800415c:	2240      	movs	r2, #64	@ 0x40
 800415e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004160:	4b5a      	ldr	r3, [pc, #360]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004162:	2200      	movs	r2, #0
 8004164:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004166:	4b59      	ldr	r3, [pc, #356]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004168:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800416c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800416e:	4b57      	ldr	r3, [pc, #348]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004170:	2200      	movs	r2, #0
 8004172:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004174:	4b55      	ldr	r3, [pc, #340]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004176:	2200      	movs	r2, #0
 8004178:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800417a:	4b54      	ldr	r3, [pc, #336]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 800417c:	2200      	movs	r2, #0
 800417e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004180:	4b52      	ldr	r3, [pc, #328]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004182:	2200      	movs	r2, #0
 8004184:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004186:	4b51      	ldr	r3, [pc, #324]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 8004188:	2200      	movs	r2, #0
 800418a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800418c:	484f      	ldr	r0, [pc, #316]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 800418e:	f000 fddd 	bl	8004d4c <HAL_DMA_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004198:	f7fe ff92 	bl	80030c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a4b      	ldr	r2, [pc, #300]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 80041a0:	649a      	str	r2, [r3, #72]	@ 0x48
 80041a2:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <HAL_SPI_MspInit+0x1fc>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80041a8:	4b4a      	ldr	r3, [pc, #296]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041aa:	4a4b      	ldr	r2, [pc, #300]	@ (80042d8 <HAL_SPI_MspInit+0x208>)
 80041ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80041ae:	4b49      	ldr	r3, [pc, #292]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041b0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80041b4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041b6:	4b47      	ldr	r3, [pc, #284]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041bc:	4b45      	ldr	r3, [pc, #276]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041c2:	4b44      	ldr	r3, [pc, #272]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ca:	4b42      	ldr	r3, [pc, #264]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041d0:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80041d6:	4b3f      	ldr	r3, [pc, #252]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041d8:	2200      	movs	r2, #0
 80041da:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041dc:	4b3d      	ldr	r3, [pc, #244]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041de:	2200      	movs	r2, #0
 80041e0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041e2:	4b3c      	ldr	r3, [pc, #240]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80041e8:	483a      	ldr	r0, [pc, #232]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041ea:	f000 fdaf 	bl	8004d4c <HAL_DMA_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80041f4:	f7fe ff64 	bl	80030c0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a36      	ldr	r2, [pc, #216]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 80041fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80041fe:	4a35      	ldr	r2, [pc, #212]	@ (80042d4 <HAL_SPI_MspInit+0x204>)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004204:	e057      	b.n	80042b6 <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a34      	ldr	r2, [pc, #208]	@ (80042dc <HAL_SPI_MspInit+0x20c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d152      	bne.n	80042b6 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	4a2a      	ldr	r2, [pc, #168]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 800421a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800421e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004220:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004234:	4a23      	ldr	r2, [pc, #140]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	6313      	str	r3, [r2, #48]	@ 0x30
 800423c:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004248:	2300      	movs	r3, #0
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	4a1c      	ldr	r2, [pc, #112]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	6313      	str	r3, [r2, #48]	@ 0x30
 8004258:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <HAL_SPI_MspInit+0x1f4>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004264:	2308      	movs	r3, #8
 8004266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004268:	2302      	movs	r3, #2
 800426a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004270:	2303      	movs	r3, #3
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004274:	2305      	movs	r3, #5
 8004276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004278:	f107 031c 	add.w	r3, r7, #28
 800427c:	4619      	mov	r1, r3
 800427e:	4818      	ldr	r0, [pc, #96]	@ (80042e0 <HAL_SPI_MspInit+0x210>)
 8004280:	f001 f966 	bl	8005550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	2302      	movs	r3, #2
 800428c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004292:	2303      	movs	r3, #3
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004296:	2305      	movs	r3, #5
 8004298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800429a:	f107 031c 	add.w	r3, r7, #28
 800429e:	4619      	mov	r1, r3
 80042a0:	4810      	ldr	r0, [pc, #64]	@ (80042e4 <HAL_SPI_MspInit+0x214>)
 80042a2:	f001 f955 	bl	8005550 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80042a6:	2200      	movs	r2, #0
 80042a8:	2100      	movs	r1, #0
 80042aa:	2024      	movs	r0, #36	@ 0x24
 80042ac:	f000 faef 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80042b0:	2024      	movs	r0, #36	@ 0x24
 80042b2:	f000 fb08 	bl	80048c6 <HAL_NVIC_EnableIRQ>
}
 80042b6:	bf00      	nop
 80042b8:	3730      	adds	r7, #48	@ 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40013000 	.word	0x40013000
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40020000 	.word	0x40020000
 80042cc:	20014310 	.word	0x20014310
 80042d0:	40026458 	.word	0x40026458
 80042d4:	20014370 	.word	0x20014370
 80042d8:	40026410 	.word	0x40026410
 80042dc:	40003800 	.word	0x40003800
 80042e0:	40020800 	.word	0x40020800
 80042e4:	40020400 	.word	0x40020400

080042e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	4b16      	ldr	r3, [pc, #88]	@ (8004358 <HAL_TIM_Base_MspInit+0x70>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	4a15      	ldr	r2, [pc, #84]	@ (8004358 <HAL_TIM_Base_MspInit+0x70>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6413      	str	r3, [r2, #64]	@ 0x40
 800430a:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <HAL_TIM_Base_MspInit+0x70>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004316:	e01a      	b.n	800434e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0f      	ldr	r2, [pc, #60]	@ (800435c <HAL_TIM_Base_MspInit+0x74>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d115      	bne.n	800434e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <HAL_TIM_Base_MspInit+0x70>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	4a0b      	ldr	r2, [pc, #44]	@ (8004358 <HAL_TIM_Base_MspInit+0x70>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6413      	str	r3, [r2, #64]	@ 0x40
 8004332:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_TIM_Base_MspInit+0x70>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800433e:	2200      	movs	r2, #0
 8004340:	2100      	movs	r1, #0
 8004342:	201e      	movs	r0, #30
 8004344:	f000 faa3 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004348:	201e      	movs	r0, #30
 800434a:	f000 fabc 	bl	80048c6 <HAL_NVIC_EnableIRQ>
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	40000800 	.word	0x40000800

08004360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	@ 0x28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 0314 	add.w	r3, r7, #20
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_UART_MspInit+0x94>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d134      	bne.n	80043ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <HAL_UART_MspInit+0x98>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_UART_MspInit+0x98>)
 800438c:	f043 0310 	orr.w	r3, r3, #16
 8004390:	6453      	str	r3, [r2, #68]	@ 0x44
 8004392:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <HAL_UART_MspInit+0x98>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <HAL_UART_MspInit+0x98>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	4a14      	ldr	r2, [pc, #80]	@ (80043f8 <HAL_UART_MspInit+0x98>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ae:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <HAL_UART_MspInit+0x98>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80043be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	2302      	movs	r3, #2
 80043c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043cc:	2307      	movs	r3, #7
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043d0:	f107 0314 	add.w	r3, r7, #20
 80043d4:	4619      	mov	r1, r3
 80043d6:	4809      	ldr	r0, [pc, #36]	@ (80043fc <HAL_UART_MspInit+0x9c>)
 80043d8:	f001 f8ba 	bl	8005550 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043dc:	2200      	movs	r2, #0
 80043de:	2100      	movs	r1, #0
 80043e0:	2025      	movs	r0, #37	@ 0x25
 80043e2:	f000 fa54 	bl	800488e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043e6:	2025      	movs	r0, #37	@ 0x25
 80043e8:	f000 fa6d 	bl	80048c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80043ec:	bf00      	nop
 80043ee:	3728      	adds	r7, #40	@ 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40020000 	.word	0x40020000

08004400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <NMI_Handler+0x4>

08004408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800440c:	bf00      	nop
 800440e:	e7fd      	b.n	800440c <HardFault_Handler+0x4>

08004410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004414:	bf00      	nop
 8004416:	e7fd      	b.n	8004414 <MemManage_Handler+0x4>

08004418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <BusFault_Handler+0x4>

08004420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <UsageFault_Handler+0x4>

08004428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004448:	f000 f902 	bl	8004650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}

08004450 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004454:	4802      	ldr	r0, [pc, #8]	@ (8004460 <DMA1_Stream5_IRQHandler+0x10>)
 8004456:	f000 fe11 	bl	800507c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	2001417c 	.word	0x2001417c

08004464 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004468:	4802      	ldr	r0, [pc, #8]	@ (8004474 <TIM4_IRQHandler+0x10>)
 800446a:	f004 fd19 	bl	8008ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20014418 	.word	0x20014418

08004478 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800447c:	4802      	ldr	r0, [pc, #8]	@ (8004488 <SPI2_IRQHandler+0x10>)
 800447e:	f003 fe75 	bl	800816c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200142b8 	.word	0x200142b8

0800448c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004490:	4802      	ldr	r0, [pc, #8]	@ (800449c <USART1_IRQHandler+0x10>)
 8004492:	f005 f90b 	bl	80096ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20014460 	.word	0x20014460

080044a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80044a4:	4802      	ldr	r0, [pc, #8]	@ (80044b0 <DMA2_Stream0_IRQHandler+0x10>)
 80044a6:	f000 fde9 	bl	800507c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20014370 	.word	0x20014370

080044b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80044b8:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <DMA2_Stream3_IRQHandler+0x10>)
 80044ba:	f000 fddf 	bl	800507c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20014310 	.word	0x20014310

080044c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d0:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <_sbrk+0x5c>)
 80044d2:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <_sbrk+0x60>)
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044dc:	4b13      	ldr	r3, [pc, #76]	@ (800452c <_sbrk+0x64>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044e4:	4b11      	ldr	r3, [pc, #68]	@ (800452c <_sbrk+0x64>)
 80044e6:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <_sbrk+0x68>)
 80044e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ea:	4b10      	ldr	r3, [pc, #64]	@ (800452c <_sbrk+0x64>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d207      	bcs.n	8004508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044f8:	f009 fea6 	bl	800e248 <__errno>
 80044fc:	4603      	mov	r3, r0
 80044fe:	220c      	movs	r2, #12
 8004500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295
 8004506:	e009      	b.n	800451c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004508:	4b08      	ldr	r3, [pc, #32]	@ (800452c <_sbrk+0x64>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800450e:	4b07      	ldr	r3, [pc, #28]	@ (800452c <_sbrk+0x64>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <_sbrk+0x64>)
 8004518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800451a:	68fb      	ldr	r3, [r7, #12]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20020000 	.word	0x20020000
 8004528:	00000400 	.word	0x00000400
 800452c:	20014714 	.word	0x20014714
 8004530:	200148a0 	.word	0x200148a0

08004534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004538:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <SystemInit+0x20>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453e:	4a05      	ldr	r2, [pc, #20]	@ (8004554 <SystemInit+0x20>)
 8004540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004558:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004590 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800455c:	f7ff ffea 	bl	8004534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004560:	480c      	ldr	r0, [pc, #48]	@ (8004594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004562:	490d      	ldr	r1, [pc, #52]	@ (8004598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004564:	4a0d      	ldr	r2, [pc, #52]	@ (800459c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004568:	e002      	b.n	8004570 <LoopCopyDataInit>

0800456a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800456a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800456c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800456e:	3304      	adds	r3, #4

08004570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004574:	d3f9      	bcc.n	800456a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004578:	4c0a      	ldr	r4, [pc, #40]	@ (80045a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800457a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800457c:	e001      	b.n	8004582 <LoopFillZerobss>

0800457e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800457e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004580:	3204      	adds	r2, #4

08004582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004584:	d3fb      	bcc.n	800457e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004586:	f009 fe65 	bl	800e254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800458a:	f7fd ffe5 	bl	8002558 <main>
  bx  lr    
 800458e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004598:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800459c:	0800f2f8 	.word	0x0800f2f8
  ldr r2, =_sbss
 80045a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80045a4:	200148a0 	.word	0x200148a0

080045a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a8:	e7fe      	b.n	80045a8 <ADC_IRQHandler>
	...

080045ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045b0:	4b0e      	ldr	r3, [pc, #56]	@ (80045ec <HAL_Init+0x40>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0d      	ldr	r2, [pc, #52]	@ (80045ec <HAL_Init+0x40>)
 80045b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045bc:	4b0b      	ldr	r3, [pc, #44]	@ (80045ec <HAL_Init+0x40>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <HAL_Init+0x40>)
 80045c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <HAL_Init+0x40>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a07      	ldr	r2, [pc, #28]	@ (80045ec <HAL_Init+0x40>)
 80045ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d4:	2003      	movs	r0, #3
 80045d6:	f000 f94f 	bl	8004878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045da:	200f      	movs	r0, #15
 80045dc:	f000 f808 	bl	80045f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045e0:	f7ff fc5a 	bl	8003e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00

080045f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f8:	4b12      	ldr	r3, [pc, #72]	@ (8004644 <HAL_InitTick+0x54>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <HAL_InitTick+0x58>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4619      	mov	r1, r3
 8004602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004606:	fbb3 f3f1 	udiv	r3, r3, r1
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f967 	bl	80048e2 <HAL_SYSTICK_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e00e      	b.n	800463c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b0f      	cmp	r3, #15
 8004622:	d80a      	bhi.n	800463a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004624:	2200      	movs	r2, #0
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	f000 f92f 	bl	800488e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004630:	4a06      	ldr	r2, [pc, #24]	@ (800464c <HAL_InitTick+0x5c>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000010 	.word	0x20000010
 8004648:	20000018 	.word	0x20000018
 800464c:	20000014 	.word	0x20000014

08004650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <HAL_IncTick+0x20>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <HAL_IncTick+0x24>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4413      	add	r3, r2
 8004660:	4a04      	ldr	r2, [pc, #16]	@ (8004674 <HAL_IncTick+0x24>)
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000018 	.word	0x20000018
 8004674:	20014718 	.word	0x20014718

08004678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return uwTick;
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <HAL_GetTick+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20014718 	.word	0x20014718

08004690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004698:	f7ff ffee 	bl	8004678 <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d005      	beq.n	80046b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046aa:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <HAL_Delay+0x44>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046b6:	bf00      	nop
 80046b8:	f7ff ffde 	bl	8004678 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d8f7      	bhi.n	80046b8 <HAL_Delay+0x28>
  {
  }
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000018 	.word	0x20000018

080046d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e8:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <__NVIC_SetPriorityGrouping+0x44>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046f4:	4013      	ands	r3, r2
 80046f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800470a:	4a04      	ldr	r2, [pc, #16]	@ (800471c <__NVIC_SetPriorityGrouping+0x44>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	60d3      	str	r3, [r2, #12]
}
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <__NVIC_GetPriorityGrouping+0x18>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	f003 0307 	and.w	r3, r3, #7
}
 800472e:	4618      	mov	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000ed00 	.word	0xe000ed00

0800473c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800474a:	2b00      	cmp	r3, #0
 800474c:	db0b      	blt.n	8004766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	f003 021f 	and.w	r2, r3, #31
 8004754:	4907      	ldr	r1, [pc, #28]	@ (8004774 <__NVIC_EnableIRQ+0x38>)
 8004756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2001      	movs	r0, #1
 800475e:	fa00 f202 	lsl.w	r2, r0, r2
 8004762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000e100 	.word	0xe000e100

08004778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	6039      	str	r1, [r7, #0]
 8004782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004788:	2b00      	cmp	r3, #0
 800478a:	db0a      	blt.n	80047a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	b2da      	uxtb	r2, r3
 8004790:	490c      	ldr	r1, [pc, #48]	@ (80047c4 <__NVIC_SetPriority+0x4c>)
 8004792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004796:	0112      	lsls	r2, r2, #4
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	440b      	add	r3, r1
 800479c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047a0:	e00a      	b.n	80047b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	4908      	ldr	r1, [pc, #32]	@ (80047c8 <__NVIC_SetPriority+0x50>)
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	3b04      	subs	r3, #4
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	440b      	add	r3, r1
 80047b6:	761a      	strb	r2, [r3, #24]
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000e100 	.word	0xe000e100
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	@ 0x24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f1c3 0307 	rsb	r3, r3, #7
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	bf28      	it	cs
 80047ea:	2304      	movcs	r3, #4
 80047ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d902      	bls.n	80047fc <NVIC_EncodePriority+0x30>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3b03      	subs	r3, #3
 80047fa:	e000      	b.n	80047fe <NVIC_EncodePriority+0x32>
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43da      	mvns	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	401a      	ands	r2, r3
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004814:	f04f 31ff 	mov.w	r1, #4294967295
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	43d9      	mvns	r1, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004824:	4313      	orrs	r3, r2
         );
}
 8004826:	4618      	mov	r0, r3
 8004828:	3724      	adds	r7, #36	@ 0x24
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3b01      	subs	r3, #1
 8004840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004844:	d301      	bcc.n	800484a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004846:	2301      	movs	r3, #1
 8004848:	e00f      	b.n	800486a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800484a:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <SysTick_Config+0x40>)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b01      	subs	r3, #1
 8004850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004852:	210f      	movs	r1, #15
 8004854:	f04f 30ff 	mov.w	r0, #4294967295
 8004858:	f7ff ff8e 	bl	8004778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800485c:	4b05      	ldr	r3, [pc, #20]	@ (8004874 <SysTick_Config+0x40>)
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004862:	4b04      	ldr	r3, [pc, #16]	@ (8004874 <SysTick_Config+0x40>)
 8004864:	2207      	movs	r2, #7
 8004866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	e000e010 	.word	0xe000e010

08004878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff29 	bl	80046d8 <__NVIC_SetPriorityGrouping>
}
 8004886:	bf00      	nop
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	4603      	mov	r3, r0
 8004896:	60b9      	str	r1, [r7, #8]
 8004898:	607a      	str	r2, [r7, #4]
 800489a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048a0:	f7ff ff3e 	bl	8004720 <__NVIC_GetPriorityGrouping>
 80048a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7ff ff8e 	bl	80047cc <NVIC_EncodePriority>
 80048b0:	4602      	mov	r2, r0
 80048b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048b6:	4611      	mov	r1, r2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff5d 	bl	8004778 <__NVIC_SetPriority>
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	4603      	mov	r3, r0
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff ff31 	bl	800473c <__NVIC_EnableIRQ>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ffa2 	bl	8004834 <SysTick_Config>
 80048f0:	4603      	mov	r3, r0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b082      	sub	sp, #8
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e014      	b.n	8004936 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	791b      	ldrb	r3, [r3, #4]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d105      	bne.n	8004922 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fae3 	bl	8003ee8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0a2      	b.n	8004aa2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	795b      	ldrb	r3, [r3, #5]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_DAC_Start_DMA+0x28>
 8004964:	2302      	movs	r3, #2
 8004966:	e09c      	b.n	8004aa2 <HAL_DAC_Start_DMA+0x162>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2202      	movs	r2, #2
 8004972:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d129      	bne.n	80049ce <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	4a4b      	ldr	r2, [pc, #300]	@ (8004aac <HAL_DAC_Start_DMA+0x16c>)
 8004980:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	4a4a      	ldr	r2, [pc, #296]	@ (8004ab0 <HAL_DAC_Start_DMA+0x170>)
 8004988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4a49      	ldr	r2, [pc, #292]	@ (8004ab4 <HAL_DAC_Start_DMA+0x174>)
 8004990:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049a0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_DAC_Start_DMA+0x70>
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d005      	beq.n	80049ba <HAL_DAC_Start_DMA+0x7a>
 80049ae:	e009      	b.n	80049c4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	613b      	str	r3, [r7, #16]
        break;
 80049b8:	e033      	b.n	8004a22 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	613b      	str	r3, [r7, #16]
        break;
 80049c2:	e02e      	b.n	8004a22 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3310      	adds	r3, #16
 80049ca:	613b      	str	r3, [r7, #16]
        break;
 80049cc:	e029      	b.n	8004a22 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	4a39      	ldr	r2, [pc, #228]	@ (8004ab8 <HAL_DAC_Start_DMA+0x178>)
 80049d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a38      	ldr	r2, [pc, #224]	@ (8004abc <HAL_DAC_Start_DMA+0x17c>)
 80049dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a37      	ldr	r2, [pc, #220]	@ (8004ac0 <HAL_DAC_Start_DMA+0x180>)
 80049e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80049f4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_DAC_Start_DMA+0xc4>
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d005      	beq.n	8004a0e <HAL_DAC_Start_DMA+0xce>
 8004a02:	e009      	b.n	8004a18 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	613b      	str	r3, [r7, #16]
        break;
 8004a0c:	e009      	b.n	8004a22 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3318      	adds	r3, #24
 8004a14:	613b      	str	r3, [r7, #16]
        break;
 8004a16:	e004      	b.n	8004a22 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	331c      	adds	r3, #28
 8004a1e:	613b      	str	r3, [r7, #16]
        break;
 8004a20:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d111      	bne.n	8004a4c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6898      	ldr	r0, [r3, #8]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	f000 fa31 	bl	8004ea8 <HAL_DMA_Start_IT>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]
 8004a4a:	e010      	b.n	8004a6e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68d8      	ldr	r0, [r3, #12]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	f000 fa1f 	bl	8004ea8 <HAL_DMA_Start_IT>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2201      	movs	r2, #1
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e005      	b.n	8004aa0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	08004c39 	.word	0x08004c39
 8004ab0:	08004c5b 	.word	0x08004c5b
 8004ab4:	08004c77 	.word	0x08004c77
 8004ab8:	08004ce1 	.word	0x08004ce1
 8004abc:	08004d03 	.word	0x08004d03
 8004ac0:	08004d1f 	.word	0x08004d1f

08004ac4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e03e      	b.n	8004b56 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6819      	ldr	r1, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43da      	mvns	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	400a      	ands	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f003 0310 	and.w	r3, r3, #16
 8004b02:	2201      	movs	r2, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	400a      	ands	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10d      	bne.n	8004b34 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fa1b 	bl	8004f58 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e00c      	b.n	8004b4e <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fa0d 	bl	8004f58 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004b4c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b089      	sub	sp, #36	@ 0x24
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_DAC_ConfigChannel+0x1c>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e042      	b.n	8004c2c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	795b      	ldrb	r3, [r3, #5]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_DAC_ConfigChannel+0x2c>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e03c      	b.n	8004c2c <HAL_DAC_ConfigChannel+0xa6>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6819      	ldr	r1, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	22c0      	movs	r2, #192	@ 0xc0
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	43da      	mvns	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2201      	movs	r2, #1
 8004c22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3724      	adds	r7, #36	@ 0x24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff89 	bl	8004b5e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	711a      	strb	r2, [r3, #4]
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7fd fb79 	bl	8002360 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f043 0204 	orr.w	r2, r3, #4
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff ff6e 	bl	8004b72 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	711a      	strb	r2, [r3, #4]
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ffd8 	bl	8004ca4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	711a      	strb	r2, [r3, #4]
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f7ff ffd1 	bl	8004cb8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f043 0204 	orr.w	r2, r3, #4
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff ffc7 	bl	8004ccc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	711a      	strb	r2, [r3, #4]
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d58:	f7ff fc8e 	bl	8004678 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e099      	b.n	8004e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d88:	e00f      	b.n	8004daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d8a:	f7ff fc75 	bl	8004678 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d908      	bls.n	8004daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2203      	movs	r2, #3
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e078      	b.n	8004e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e8      	bne.n	8004d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4b38      	ldr	r3, [pc, #224]	@ (8004ea4 <HAL_DMA_Init+0x158>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d107      	bne.n	8004e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d117      	bne.n	8004e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fb01 	bl	8005458 <DMA_CheckFifoParam>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2240      	movs	r2, #64	@ 0x40
 8004e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e016      	b.n	8004e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fab8 	bl	80053ec <DMA_CalcBaseAndBitshift>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e84:	223f      	movs	r2, #63	@ 0x3f
 8004e86:	409a      	lsls	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	f010803f 	.word	0xf010803f

08004ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_DMA_Start_IT+0x26>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e040      	b.n	8004f50 <HAL_DMA_Start_IT+0xa8>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d12f      	bne.n	8004f42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 fa4a 	bl	8005390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f00:	223f      	movs	r2, #63	@ 0x3f
 8004f02:	409a      	lsls	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0216 	orr.w	r2, r2, #22
 8004f16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0208 	orr.w	r2, r2, #8
 8004f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	e005      	b.n	8004f4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f66:	f7ff fb87 	bl	8004678 <HAL_GetTick>
 8004f6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d008      	beq.n	8004f8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2280      	movs	r2, #128	@ 0x80
 8004f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e052      	b.n	8005030 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0216 	bic.w	r2, r2, #22
 8004f98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <HAL_DMA_Abort+0x62>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0208 	bic.w	r2, r2, #8
 8004fc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0201 	bic.w	r2, r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fda:	e013      	b.n	8005004 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fdc:	f7ff fb4c 	bl	8004678 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b05      	cmp	r3, #5
 8004fe8:	d90c      	bls.n	8005004 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e015      	b.n	8005030 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e4      	bne.n	8004fdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005016:	223f      	movs	r2, #63	@ 0x3f
 8005018:	409a      	lsls	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d004      	beq.n	8005056 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2280      	movs	r2, #128	@ 0x80
 8005050:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e00c      	b.n	8005070 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2205      	movs	r2, #5
 800505a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005088:	4b8e      	ldr	r3, [pc, #568]	@ (80052c4 <HAL_DMA_IRQHandler+0x248>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a8e      	ldr	r2, [pc, #568]	@ (80052c8 <HAL_DMA_IRQHandler+0x24c>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0a9b      	lsrs	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	2208      	movs	r2, #8
 80050a8:	409a      	lsls	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4013      	ands	r3, r2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01a      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d4:	2208      	movs	r2, #8
 80050d6:	409a      	lsls	r2, r3
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ec:	2201      	movs	r2, #1
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d012      	beq.n	800511e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510a:	2201      	movs	r2, #1
 800510c:	409a      	lsls	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	f043 0202 	orr.w	r2, r3, #2
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005122:	2204      	movs	r2, #4
 8005124:	409a      	lsls	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d012      	beq.n	8005154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	2204      	movs	r2, #4
 8005142:	409a      	lsls	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514c:	f043 0204 	orr.w	r2, r3, #4
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005158:	2210      	movs	r2, #16
 800515a:	409a      	lsls	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d043      	beq.n	80051ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03c      	beq.n	80051ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005176:	2210      	movs	r2, #16
 8005178:	409a      	lsls	r2, r3
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d108      	bne.n	80051ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d024      	beq.n	80051ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
 80051aa:	e01f      	b.n	80051ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
 80051bc:	e016      	b.n	80051ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0208 	bic.w	r2, r2, #8
 80051da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	2220      	movs	r2, #32
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 808f 	beq.w	800531c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8087 	beq.w	800531c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005212:	2220      	movs	r2, #32
 8005214:	409a      	lsls	r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b05      	cmp	r3, #5
 8005224:	d136      	bne.n	8005294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0216 	bic.w	r2, r2, #22
 8005234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <HAL_DMA_IRQHandler+0x1da>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0208 	bic.w	r2, r2, #8
 8005264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526a:	223f      	movs	r2, #63	@ 0x3f
 800526c:	409a      	lsls	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005286:	2b00      	cmp	r3, #0
 8005288:	d07e      	beq.n	8005388 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
        }
        return;
 8005292:	e079      	b.n	8005388 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10d      	bne.n	80052cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d031      	beq.n	800531c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
 80052c0:	e02c      	b.n	800531c <HAL_DMA_IRQHandler+0x2a0>
 80052c2:	bf00      	nop
 80052c4:	20000010 	.word	0x20000010
 80052c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d023      	beq.n	800531c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
 80052dc:	e01e      	b.n	800531c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10f      	bne.n	800530c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0210 	bic.w	r2, r2, #16
 80052fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005320:	2b00      	cmp	r3, #0
 8005322:	d032      	beq.n	800538a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d022      	beq.n	8005376 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2205      	movs	r2, #5
 8005334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3301      	adds	r3, #1
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	429a      	cmp	r2, r3
 8005352:	d307      	bcc.n	8005364 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f2      	bne.n	8005348 <HAL_DMA_IRQHandler+0x2cc>
 8005362:	e000      	b.n	8005366 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005364:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
 8005386:	e000      	b.n	800538a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005388:	bf00      	nop
    }
  }
}
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b40      	cmp	r3, #64	@ 0x40
 80053bc:	d108      	bne.n	80053d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053ce:	e007      	b.n	80053e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	3b10      	subs	r3, #16
 80053fc:	4a14      	ldr	r2, [pc, #80]	@ (8005450 <DMA_CalcBaseAndBitshift+0x64>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	091b      	lsrs	r3, r3, #4
 8005404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <DMA_CalcBaseAndBitshift+0x68>)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b03      	cmp	r3, #3
 8005418:	d909      	bls.n	800542e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	659a      	str	r2, [r3, #88]	@ 0x58
 800542c:	e007      	b.n	800543e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	aaaaaaab 	.word	0xaaaaaaab
 8005454:	0800f24c 	.word	0x0800f24c

08005458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11f      	bne.n	80054b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b03      	cmp	r3, #3
 8005476:	d856      	bhi.n	8005526 <DMA_CheckFifoParam+0xce>
 8005478:	a201      	add	r2, pc, #4	@ (adr r2, 8005480 <DMA_CheckFifoParam+0x28>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	08005491 	.word	0x08005491
 8005484:	080054a3 	.word	0x080054a3
 8005488:	08005491 	.word	0x08005491
 800548c:	08005527 	.word	0x08005527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d046      	beq.n	800552a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a0:	e043      	b.n	800552a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054aa:	d140      	bne.n	800552e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b0:	e03d      	b.n	800552e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ba:	d121      	bne.n	8005500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d837      	bhi.n	8005532 <DMA_CheckFifoParam+0xda>
 80054c2:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <DMA_CheckFifoParam+0x70>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054d9 	.word	0x080054d9
 80054cc:	080054df 	.word	0x080054df
 80054d0:	080054d9 	.word	0x080054d9
 80054d4:	080054f1 	.word	0x080054f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      break;
 80054dc:	e030      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d025      	beq.n	8005536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ee:	e022      	b.n	8005536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054f8:	d11f      	bne.n	800553a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054fe:	e01c      	b.n	800553a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d903      	bls.n	800550e <DMA_CheckFifoParam+0xb6>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d003      	beq.n	8005514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800550c:	e018      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
      break;
 8005512:	e015      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
      break;
 8005524:	e00b      	b.n	800553e <DMA_CheckFifoParam+0xe6>
      break;
 8005526:	bf00      	nop
 8005528:	e00a      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      break;
 800552a:	bf00      	nop
 800552c:	e008      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      break;
 800552e:	bf00      	nop
 8005530:	e006      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      break;
 8005532:	bf00      	nop
 8005534:	e004      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      break;
 8005536:	bf00      	nop
 8005538:	e002      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      break;   
 800553a:	bf00      	nop
 800553c:	e000      	b.n	8005540 <DMA_CheckFifoParam+0xe8>
      break;
 800553e:	bf00      	nop
    }
  } 
  
  return status; 
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop

08005550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	@ 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800555e:	2300      	movs	r3, #0
 8005560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005566:	2300      	movs	r3, #0
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	e16b      	b.n	8005844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800556c:	2201      	movs	r2, #1
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4013      	ands	r3, r2
 800557e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	429a      	cmp	r2, r3
 8005586:	f040 815a 	bne.w	800583e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b01      	cmp	r3, #1
 8005594:	d005      	beq.n	80055a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d130      	bne.n	8005604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	2203      	movs	r2, #3
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	43db      	mvns	r3, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4013      	ands	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055d8:	2201      	movs	r2, #1
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 0201 	and.w	r2, r3, #1
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	2b03      	cmp	r3, #3
 800560e:	d017      	beq.n	8005640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	005b      	lsls	r3, r3, #1
 800561a:	2203      	movs	r2, #3
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4013      	ands	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4313      	orrs	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d123      	bne.n	8005694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	08da      	lsrs	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3208      	adds	r2, #8
 8005654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	220f      	movs	r2, #15
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	43db      	mvns	r3, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4013      	ands	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	08da      	lsrs	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3208      	adds	r2, #8
 800568e:	69b9      	ldr	r1, [r7, #24]
 8005690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 0203 	and.w	r2, r3, #3
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	4313      	orrs	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 80b4 	beq.w	800583e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	4b60      	ldr	r3, [pc, #384]	@ (800585c <HAL_GPIO_Init+0x30c>)
 80056dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056de:	4a5f      	ldr	r2, [pc, #380]	@ (800585c <HAL_GPIO_Init+0x30c>)
 80056e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80056e6:	4b5d      	ldr	r3, [pc, #372]	@ (800585c <HAL_GPIO_Init+0x30c>)
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005860 <HAL_GPIO_Init+0x310>)
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	089b      	lsrs	r3, r3, #2
 80056f8:	3302      	adds	r3, #2
 80056fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	220f      	movs	r2, #15
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a52      	ldr	r2, [pc, #328]	@ (8005864 <HAL_GPIO_Init+0x314>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02b      	beq.n	8005776 <HAL_GPIO_Init+0x226>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a51      	ldr	r2, [pc, #324]	@ (8005868 <HAL_GPIO_Init+0x318>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d025      	beq.n	8005772 <HAL_GPIO_Init+0x222>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a50      	ldr	r2, [pc, #320]	@ (800586c <HAL_GPIO_Init+0x31c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d01f      	beq.n	800576e <HAL_GPIO_Init+0x21e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a4f      	ldr	r2, [pc, #316]	@ (8005870 <HAL_GPIO_Init+0x320>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d019      	beq.n	800576a <HAL_GPIO_Init+0x21a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a4e      	ldr	r2, [pc, #312]	@ (8005874 <HAL_GPIO_Init+0x324>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_GPIO_Init+0x216>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a4d      	ldr	r2, [pc, #308]	@ (8005878 <HAL_GPIO_Init+0x328>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00d      	beq.n	8005762 <HAL_GPIO_Init+0x212>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a4c      	ldr	r2, [pc, #304]	@ (800587c <HAL_GPIO_Init+0x32c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <HAL_GPIO_Init+0x20e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a4b      	ldr	r2, [pc, #300]	@ (8005880 <HAL_GPIO_Init+0x330>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <HAL_GPIO_Init+0x20a>
 8005756:	2307      	movs	r3, #7
 8005758:	e00e      	b.n	8005778 <HAL_GPIO_Init+0x228>
 800575a:	2308      	movs	r3, #8
 800575c:	e00c      	b.n	8005778 <HAL_GPIO_Init+0x228>
 800575e:	2306      	movs	r3, #6
 8005760:	e00a      	b.n	8005778 <HAL_GPIO_Init+0x228>
 8005762:	2305      	movs	r3, #5
 8005764:	e008      	b.n	8005778 <HAL_GPIO_Init+0x228>
 8005766:	2304      	movs	r3, #4
 8005768:	e006      	b.n	8005778 <HAL_GPIO_Init+0x228>
 800576a:	2303      	movs	r3, #3
 800576c:	e004      	b.n	8005778 <HAL_GPIO_Init+0x228>
 800576e:	2302      	movs	r3, #2
 8005770:	e002      	b.n	8005778 <HAL_GPIO_Init+0x228>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <HAL_GPIO_Init+0x228>
 8005776:	2300      	movs	r3, #0
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	f002 0203 	and.w	r2, r2, #3
 800577e:	0092      	lsls	r2, r2, #2
 8005780:	4093      	lsls	r3, r2
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005788:	4935      	ldr	r1, [pc, #212]	@ (8005860 <HAL_GPIO_Init+0x310>)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	3302      	adds	r3, #2
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005796:	4b3b      	ldr	r3, [pc, #236]	@ (8005884 <HAL_GPIO_Init+0x334>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057ba:	4a32      	ldr	r2, [pc, #200]	@ (8005884 <HAL_GPIO_Init+0x334>)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057c0:	4b30      	ldr	r3, [pc, #192]	@ (8005884 <HAL_GPIO_Init+0x334>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057e4:	4a27      	ldr	r2, [pc, #156]	@ (8005884 <HAL_GPIO_Init+0x334>)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057ea:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <HAL_GPIO_Init+0x334>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800580e:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <HAL_GPIO_Init+0x334>)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005814:	4b1b      	ldr	r3, [pc, #108]	@ (8005884 <HAL_GPIO_Init+0x334>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005838:	4a12      	ldr	r2, [pc, #72]	@ (8005884 <HAL_GPIO_Init+0x334>)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3301      	adds	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b0f      	cmp	r3, #15
 8005848:	f67f ae90 	bls.w	800556c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3724      	adds	r7, #36	@ 0x24
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800
 8005860:	40013800 	.word	0x40013800
 8005864:	40020000 	.word	0x40020000
 8005868:	40020400 	.word	0x40020400
 800586c:	40020800 	.word	0x40020800
 8005870:	40020c00 	.word	0x40020c00
 8005874:	40021000 	.word	0x40021000
 8005878:	40021400 	.word	0x40021400
 800587c:	40021800 	.word	0x40021800
 8005880:	40021c00 	.word	0x40021c00
 8005884:	40013c00 	.word	0x40013c00

08005888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	807b      	strh	r3, [r7, #2]
 8005894:	4613      	mov	r3, r2
 8005896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005898:	787b      	ldrb	r3, [r7, #1]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800589e:	887a      	ldrh	r2, [r7, #2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058a4:	e003      	b.n	80058ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058a6:	887b      	ldrh	r3, [r7, #2]
 80058a8:	041a      	lsls	r2, r3, #16
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	619a      	str	r2, [r3, #24]
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e267      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d075      	beq.n	80059c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058da:	4b88      	ldr	r3, [pc, #544]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d00c      	beq.n	8005900 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058e6:	4b85      	ldr	r3, [pc, #532]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d112      	bne.n	8005918 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058f2:	4b82      	ldr	r3, [pc, #520]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058fe:	d10b      	bne.n	8005918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005900:	4b7e      	ldr	r3, [pc, #504]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d05b      	beq.n	80059c4 <HAL_RCC_OscConfig+0x108>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d157      	bne.n	80059c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e242      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005920:	d106      	bne.n	8005930 <HAL_RCC_OscConfig+0x74>
 8005922:	4b76      	ldr	r3, [pc, #472]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a75      	ldr	r2, [pc, #468]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	e01d      	b.n	800596c <HAL_RCC_OscConfig+0xb0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005938:	d10c      	bne.n	8005954 <HAL_RCC_OscConfig+0x98>
 800593a:	4b70      	ldr	r3, [pc, #448]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a6f      	ldr	r2, [pc, #444]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	4b6d      	ldr	r3, [pc, #436]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a6c      	ldr	r2, [pc, #432]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 800594c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	e00b      	b.n	800596c <HAL_RCC_OscConfig+0xb0>
 8005954:	4b69      	ldr	r3, [pc, #420]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a68      	ldr	r2, [pc, #416]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 800595a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	4b66      	ldr	r3, [pc, #408]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a65      	ldr	r2, [pc, #404]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800596a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d013      	beq.n	800599c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005974:	f7fe fe80 	bl	8004678 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597c:	f7fe fe7c 	bl	8004678 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b64      	cmp	r3, #100	@ 0x64
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e207      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598e:	4b5b      	ldr	r3, [pc, #364]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0xc0>
 800599a:	e014      	b.n	80059c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599c:	f7fe fe6c 	bl	8004678 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a4:	f7fe fe68 	bl	8004678 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b64      	cmp	r3, #100	@ 0x64
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e1f3      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b6:	4b51      	ldr	r3, [pc, #324]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0xe8>
 80059c2:	e000      	b.n	80059c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d063      	beq.n	8005a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059d2:	4b4a      	ldr	r3, [pc, #296]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059de:	4b47      	ldr	r3, [pc, #284]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d11c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ea:	4b44      	ldr	r3, [pc, #272]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d116      	bne.n	8005a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f6:	4b41      	ldr	r3, [pc, #260]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_RCC_OscConfig+0x152>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d001      	beq.n	8005a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e1c7      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4937      	ldr	r1, [pc, #220]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a22:	e03a      	b.n	8005a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d020      	beq.n	8005a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a2c:	4b34      	ldr	r3, [pc, #208]	@ (8005b00 <HAL_RCC_OscConfig+0x244>)
 8005a2e:	2201      	movs	r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fe fe21 	bl	8004678 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3a:	f7fe fe1d 	bl	8004678 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e1a8      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a58:	4b28      	ldr	r3, [pc, #160]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4925      	ldr	r1, [pc, #148]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]
 8005a6c:	e015      	b.n	8005a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a6e:	4b24      	ldr	r3, [pc, #144]	@ (8005b00 <HAL_RCC_OscConfig+0x244>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fe fe00 	bl	8004678 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7c:	f7fe fdfc 	bl	8004678 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e187      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d036      	beq.n	8005b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d016      	beq.n	8005adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aae:	4b15      	ldr	r3, [pc, #84]	@ (8005b04 <HAL_RCC_OscConfig+0x248>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fe fde0 	bl	8004678 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005abc:	f7fe fddc 	bl	8004678 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e167      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <HAL_RCC_OscConfig+0x240>)
 8005ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x200>
 8005ada:	e01b      	b.n	8005b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <HAL_RCC_OscConfig+0x248>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae2:	f7fe fdc9 	bl	8004678 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ae8:	e00e      	b.n	8005b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aea:	f7fe fdc5 	bl	8004678 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d907      	bls.n	8005b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e150      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
 8005afc:	40023800 	.word	0x40023800
 8005b00:	42470000 	.word	0x42470000
 8005b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b08:	4b88      	ldr	r3, [pc, #544]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ea      	bne.n	8005aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8097 	beq.w	8005c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b22:	2300      	movs	r3, #0
 8005b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b26:	4b81      	ldr	r3, [pc, #516]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10f      	bne.n	8005b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	2300      	movs	r3, #0
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	4b7d      	ldr	r3, [pc, #500]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b42:	4b7a      	ldr	r3, [pc, #488]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b52:	4b77      	ldr	r3, [pc, #476]	@ (8005d30 <HAL_RCC_OscConfig+0x474>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d118      	bne.n	8005b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b5e:	4b74      	ldr	r3, [pc, #464]	@ (8005d30 <HAL_RCC_OscConfig+0x474>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a73      	ldr	r2, [pc, #460]	@ (8005d30 <HAL_RCC_OscConfig+0x474>)
 8005b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b6a:	f7fe fd85 	bl	8004678 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b72:	f7fe fd81 	bl	8004678 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e10c      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b84:	4b6a      	ldr	r3, [pc, #424]	@ (8005d30 <HAL_RCC_OscConfig+0x474>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f0      	beq.n	8005b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d106      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x2ea>
 8005b98:	4b64      	ldr	r3, [pc, #400]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9c:	4a63      	ldr	r2, [pc, #396]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005b9e:	f043 0301 	orr.w	r3, r3, #1
 8005ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ba4:	e01c      	b.n	8005be0 <HAL_RCC_OscConfig+0x324>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	d10c      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x30c>
 8005bae:	4b5f      	ldr	r3, [pc, #380]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bb4:	f043 0304 	orr.w	r3, r3, #4
 8005bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bba:	4b5c      	ldr	r3, [pc, #368]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bc6:	e00b      	b.n	8005be0 <HAL_RCC_OscConfig+0x324>
 8005bc8:	4b58      	ldr	r3, [pc, #352]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bcc:	4a57      	ldr	r2, [pc, #348]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bd4:	4b55      	ldr	r3, [pc, #340]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd8:	4a54      	ldr	r2, [pc, #336]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005bda:	f023 0304 	bic.w	r3, r3, #4
 8005bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d015      	beq.n	8005c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fe fd46 	bl	8004678 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bee:	e00a      	b.n	8005c06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf0:	f7fe fd42 	bl	8004678 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e0cb      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c06:	4b49      	ldr	r3, [pc, #292]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0ee      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x334>
 8005c12:	e014      	b.n	8005c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c14:	f7fe fd30 	bl	8004678 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1c:	f7fe fd2c 	bl	8004678 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0b5      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c32:	4b3e      	ldr	r3, [pc, #248]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1ee      	bne.n	8005c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d105      	bne.n	8005c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c44:	4b39      	ldr	r3, [pc, #228]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	4a38      	ldr	r2, [pc, #224]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80a1 	beq.w	8005d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c5a:	4b34      	ldr	r3, [pc, #208]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d05c      	beq.n	8005d20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d141      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c6e:	4b31      	ldr	r3, [pc, #196]	@ (8005d34 <HAL_RCC_OscConfig+0x478>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fe fd00 	bl	8004678 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fe fcfc 	bl	8004678 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e087      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c8e:	4b27      	ldr	r3, [pc, #156]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f0      	bne.n	8005c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	491b      	ldr	r1, [pc, #108]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d34 <HAL_RCC_OscConfig+0x478>)
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fe fcd5 	bl	8004678 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd2:	f7fe fcd1 	bl	8004678 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e05c      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ce4:	4b11      	ldr	r3, [pc, #68]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x416>
 8005cf0:	e054      	b.n	8005d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <HAL_RCC_OscConfig+0x478>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf8:	f7fe fcbe 	bl	8004678 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d00:	f7fe fcba 	bl	8004678 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e045      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d12:	4b06      	ldr	r3, [pc, #24]	@ (8005d2c <HAL_RCC_OscConfig+0x470>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0x444>
 8005d1e:	e03d      	b.n	8005d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d107      	bne.n	8005d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e038      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40007000 	.word	0x40007000
 8005d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d38:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <HAL_RCC_OscConfig+0x4ec>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d028      	beq.n	8005d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d121      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d11a      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005d68:	4013      	ands	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d111      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	085b      	lsrs	r3, r3, #1
 8005d80:	3b01      	subs	r3, #1
 8005d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d107      	bne.n	8005d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d001      	beq.n	8005d9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800

08005dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0cc      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b68      	ldr	r3, [pc, #416]	@ (8005f64 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d90c      	bls.n	8005de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b65      	ldr	r3, [pc, #404]	@ (8005f64 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b63      	ldr	r3, [pc, #396]	@ (8005f64 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0b8      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d020      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e00:	4b59      	ldr	r3, [pc, #356]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	4a58      	ldr	r2, [pc, #352]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d005      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e18:	4b53      	ldr	r3, [pc, #332]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	4a52      	ldr	r2, [pc, #328]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e24:	4b50      	ldr	r3, [pc, #320]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	494d      	ldr	r1, [pc, #308]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d044      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d107      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4a:	4b47      	ldr	r3, [pc, #284]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d119      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e07f      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d003      	beq.n	8005e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d107      	bne.n	8005e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e06f      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e067      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e8a:	4b37      	ldr	r3, [pc, #220]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f023 0203 	bic.w	r2, r3, #3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4934      	ldr	r1, [pc, #208]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e9c:	f7fe fbec 	bl	8004678 <HAL_GetTick>
 8005ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea2:	e00a      	b.n	8005eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ea4:	f7fe fbe8 	bl	8004678 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e04f      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eba:	4b2b      	ldr	r3, [pc, #172]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 020c 	and.w	r2, r3, #12
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d1eb      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ecc:	4b25      	ldr	r3, [pc, #148]	@ (8005f64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d20c      	bcs.n	8005ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eda:	4b22      	ldr	r3, [pc, #136]	@ (8005f64 <HAL_RCC_ClockConfig+0x1b8>)
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee2:	4b20      	ldr	r3, [pc, #128]	@ (8005f64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e032      	b.n	8005f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f00:	4b19      	ldr	r3, [pc, #100]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4916      	ldr	r1, [pc, #88]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f1e:	4b12      	ldr	r3, [pc, #72]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	490e      	ldr	r1, [pc, #56]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f32:	f000 f821 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8005f36:	4602      	mov	r2, r0
 8005f38:	4b0b      	ldr	r3, [pc, #44]	@ (8005f68 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	490a      	ldr	r1, [pc, #40]	@ (8005f6c <HAL_RCC_ClockConfig+0x1c0>)
 8005f44:	5ccb      	ldrb	r3, [r1, r3]
 8005f46:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4a:	4a09      	ldr	r2, [pc, #36]	@ (8005f70 <HAL_RCC_ClockConfig+0x1c4>)
 8005f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f4e:	4b09      	ldr	r3, [pc, #36]	@ (8005f74 <HAL_RCC_ClockConfig+0x1c8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fb4c 	bl	80045f0 <HAL_InitTick>

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	40023c00 	.word	0x40023c00
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	0800f234 	.word	0x0800f234
 8005f70:	20000010 	.word	0x20000010
 8005f74:	20000014 	.word	0x20000014

08005f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f7c:	b094      	sub	sp, #80	@ 0x50
 8005f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f90:	4b79      	ldr	r3, [pc, #484]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f003 030c 	and.w	r3, r3, #12
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d00d      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	f200 80e1 	bhi.w	8006164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_RCC_GetSysClockFreq+0x34>
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d003      	beq.n	8005fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005faa:	e0db      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fac:	4b73      	ldr	r3, [pc, #460]	@ (800617c <HAL_RCC_GetSysClockFreq+0x204>)
 8005fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fb0:	e0db      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fb2:	4b73      	ldr	r3, [pc, #460]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fb6:	e0d8      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d063      	beq.n	8006096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fce:	4b6a      	ldr	r3, [pc, #424]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	099b      	lsrs	r3, r3, #6
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	f04f 0000 	mov.w	r0, #0
 8005ff2:	f04f 0100 	mov.w	r1, #0
 8005ff6:	0159      	lsls	r1, r3, #5
 8005ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ffc:	0150      	lsls	r0, r2, #5
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4621      	mov	r1, r4
 8006004:	1a51      	subs	r1, r2, r1
 8006006:	6139      	str	r1, [r7, #16]
 8006008:	4629      	mov	r1, r5
 800600a:	eb63 0301 	sbc.w	r3, r3, r1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800601c:	4659      	mov	r1, fp
 800601e:	018b      	lsls	r3, r1, #6
 8006020:	4651      	mov	r1, sl
 8006022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006026:	4651      	mov	r1, sl
 8006028:	018a      	lsls	r2, r1, #6
 800602a:	4651      	mov	r1, sl
 800602c:	ebb2 0801 	subs.w	r8, r2, r1
 8006030:	4659      	mov	r1, fp
 8006032:	eb63 0901 	sbc.w	r9, r3, r1
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	f04f 0300 	mov.w	r3, #0
 800603e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800604a:	4690      	mov	r8, r2
 800604c:	4699      	mov	r9, r3
 800604e:	4623      	mov	r3, r4
 8006050:	eb18 0303 	adds.w	r3, r8, r3
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	462b      	mov	r3, r5
 8006058:	eb49 0303 	adc.w	r3, r9, r3
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	f04f 0200 	mov.w	r2, #0
 8006062:	f04f 0300 	mov.w	r3, #0
 8006066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800606a:	4629      	mov	r1, r5
 800606c:	024b      	lsls	r3, r1, #9
 800606e:	4621      	mov	r1, r4
 8006070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006074:	4621      	mov	r1, r4
 8006076:	024a      	lsls	r2, r1, #9
 8006078:	4610      	mov	r0, r2
 800607a:	4619      	mov	r1, r3
 800607c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607e:	2200      	movs	r2, #0
 8006080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006088:	f7fa f8a6 	bl	80001d8 <__aeabi_uldivmod>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4613      	mov	r3, r2
 8006092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006094:	e058      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006096:	4b38      	ldr	r3, [pc, #224]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x200>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	099b      	lsrs	r3, r3, #6
 800609c:	2200      	movs	r2, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	4611      	mov	r1, r2
 80060a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	2300      	movs	r3, #0
 80060aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060b0:	4642      	mov	r2, r8
 80060b2:	464b      	mov	r3, r9
 80060b4:	f04f 0000 	mov.w	r0, #0
 80060b8:	f04f 0100 	mov.w	r1, #0
 80060bc:	0159      	lsls	r1, r3, #5
 80060be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060c2:	0150      	lsls	r0, r2, #5
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4641      	mov	r1, r8
 80060ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80060ce:	4649      	mov	r1, r9
 80060d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80060e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80060e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80060e8:	ebb2 040a 	subs.w	r4, r2, sl
 80060ec:	eb63 050b 	sbc.w	r5, r3, fp
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	00eb      	lsls	r3, r5, #3
 80060fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060fe:	00e2      	lsls	r2, r4, #3
 8006100:	4614      	mov	r4, r2
 8006102:	461d      	mov	r5, r3
 8006104:	4643      	mov	r3, r8
 8006106:	18e3      	adds	r3, r4, r3
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	464b      	mov	r3, r9
 800610c:	eb45 0303 	adc.w	r3, r5, r3
 8006110:	607b      	str	r3, [r7, #4]
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800611e:	4629      	mov	r1, r5
 8006120:	028b      	lsls	r3, r1, #10
 8006122:	4621      	mov	r1, r4
 8006124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006128:	4621      	mov	r1, r4
 800612a:	028a      	lsls	r2, r1, #10
 800612c:	4610      	mov	r0, r2
 800612e:	4619      	mov	r1, r3
 8006130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006132:	2200      	movs	r2, #0
 8006134:	61bb      	str	r3, [r7, #24]
 8006136:	61fa      	str	r2, [r7, #28]
 8006138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800613c:	f7fa f84c 	bl	80001d8 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4613      	mov	r3, r2
 8006146:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_RCC_GetSysClockFreq+0x200>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	3301      	adds	r3, #1
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800615a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006162:	e002      	b.n	800616a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006164:	4b05      	ldr	r3, [pc, #20]	@ (800617c <HAL_RCC_GetSysClockFreq+0x204>)
 8006166:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800616a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800616c:	4618      	mov	r0, r3
 800616e:	3750      	adds	r7, #80	@ 0x50
 8006170:	46bd      	mov	sp, r7
 8006172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
 800617c:	00f42400 	.word	0x00f42400
 8006180:	007a1200 	.word	0x007a1200

08006184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006188:	4b03      	ldr	r3, [pc, #12]	@ (8006198 <HAL_RCC_GetHCLKFreq+0x14>)
 800618a:	681b      	ldr	r3, [r3, #0]
}
 800618c:	4618      	mov	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	20000010 	.word	0x20000010

0800619c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061a0:	f7ff fff0 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 80061a4:	4602      	mov	r2, r0
 80061a6:	4b05      	ldr	r3, [pc, #20]	@ (80061bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	0a9b      	lsrs	r3, r3, #10
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	4903      	ldr	r1, [pc, #12]	@ (80061c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b2:	5ccb      	ldrb	r3, [r1, r3]
 80061b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40023800 	.word	0x40023800
 80061c0:	0800f244 	.word	0x0800f244

080061c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061c8:	f7ff ffdc 	bl	8006184 <HAL_RCC_GetHCLKFreq>
 80061cc:	4602      	mov	r2, r0
 80061ce:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	0b5b      	lsrs	r3, r3, #13
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	4903      	ldr	r1, [pc, #12]	@ (80061e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061da:	5ccb      	ldrb	r3, [r1, r3]
 80061dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40023800 	.word	0x40023800
 80061e8:	0800f244 	.word	0x0800f244

080061ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e022      	b.n	8006244 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fd fee3 	bl	8003fdc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2203      	movs	r2, #3
 800621a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f814 	bl	800624c <HAL_SD_InitCard>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e00a      	b.n	8006244 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b08e      	sub	sp, #56	@ 0x38
 8006250:	af04      	add	r7, sp, #16
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006254:	2300      	movs	r3, #0
 8006256:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006264:	2300      	movs	r3, #0
 8006266:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006268:	2376      	movs	r3, #118	@ 0x76
 800626a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681d      	ldr	r5, [r3, #0]
 8006270:	466c      	mov	r4, sp
 8006272:	f107 0314 	add.w	r3, r7, #20
 8006276:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800627a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006284:	4628      	mov	r0, r5
 8006286:	f004 f8df 	bl	800a448 <SDIO_Init>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e04f      	b.n	800633c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800629c:	4b29      	ldr	r3, [pc, #164]	@ (8006344 <HAL_SD_InitCard+0xf8>)
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f004 f917 	bl	800a4da <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80062ac:	4b25      	ldr	r3, [pc, #148]	@ (8006344 <HAL_SD_InitCard+0xf8>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80062b2:	2002      	movs	r0, #2
 80062b4:	f7fe f9ec 	bl	8004690 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fe79 	bl	8006fb0 <SD_PowerON>
 80062be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062d2:	6a3b      	ldr	r3, [r7, #32]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e02e      	b.n	800633c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fd98 	bl	8006e14 <SD_InitCard>
 80062e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e01b      	b.n	800633c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800630c:	4618      	mov	r0, r3
 800630e:	f004 f976 	bl	800a5fe <SDMMC_CmdBlockLength>
 8006312:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a0a      	ldr	r2, [pc, #40]	@ (8006348 <HAL_SD_InitCard+0xfc>)
 8006320:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3728      	adds	r7, #40	@ 0x28
 8006340:	46bd      	mov	sp, r7
 8006342:	bdb0      	pop	{r4, r5, r7, pc}
 8006344:	422580a0 	.word	0x422580a0
 8006348:	004005ff 	.word	0x004005ff

0800634c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b092      	sub	sp, #72	@ 0x48
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800635a:	f7fe f98d 	bl	8004678 <HAL_GetTick>
 800635e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d107      	bne.n	800637e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e1c5      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	f040 81b8 	bne.w	80066fc <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006392:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	441a      	add	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800639c:	429a      	cmp	r2, r3
 800639e:	d907      	bls.n	80063b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e1ac      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2203      	movs	r2, #3
 80063b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2200      	movs	r2, #0
 80063be:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d002      	beq.n	80063ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	025b      	lsls	r3, r3, #9
 80063cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063ce:	f04f 33ff 	mov.w	r3, #4294967295
 80063d2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	025b      	lsls	r3, r3, #9
 80063d8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80063da:	2390      	movs	r3, #144	@ 0x90
 80063dc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80063de:	2302      	movs	r3, #2
 80063e0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80063e6:	2301      	movs	r3, #1
 80063e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f107 0214 	add.w	r2, r7, #20
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f004 f8d6 	bl	800a5a6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d90a      	bls.n	8006416 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2202      	movs	r2, #2
 8006404:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800640c:	4618      	mov	r0, r3
 800640e:	f004 f93a 	bl	800a686 <SDMMC_CmdReadMultiBlock>
 8006412:	6478      	str	r0, [r7, #68]	@ 0x44
 8006414:	e009      	b.n	800642a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2201      	movs	r2, #1
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006422:	4618      	mov	r0, r3
 8006424:	f004 f90d 	bl	800a642 <SDMMC_CmdReadSingleBlock>
 8006428:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800642a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800642c:	2b00      	cmp	r3, #0
 800642e:	d012      	beq.n	8006456 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7e      	ldr	r2, [pc, #504]	@ (8006630 <HAL_SD_ReadBlocks+0x2e4>)
 8006436:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800643c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643e:	431a      	orrs	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e159      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800645a:	e061      	b.n	8006520 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d03c      	beq.n	80064e4 <HAL_SD_ReadBlocks+0x198>
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d039      	beq.n	80064e4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006470:	2300      	movs	r3, #0
 8006472:	643b      	str	r3, [r7, #64]	@ 0x40
 8006474:	e033      	b.n	80064de <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f004 f80f 	bl	800a49e <SDIO_ReadFIFO>
 8006480:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006488:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800648a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800648c:	3301      	adds	r3, #1
 800648e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006492:	3b01      	subs	r3, #1
 8006494:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	b2da      	uxtb	r2, r3
 800649c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800649e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a2:	3301      	adds	r3, #1
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80064a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a8:	3b01      	subs	r3, #1
 80064aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	0c1b      	lsrs	r3, r3, #16
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b8:	3301      	adds	r3, #1
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80064bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064be:	3b01      	subs	r3, #1
 80064c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80064c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80064cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ce:	3301      	adds	r3, #1
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80064d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d4:	3b01      	subs	r3, #1
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80064d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064da:	3301      	adds	r3, #1
 80064dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80064de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064e0:	2b07      	cmp	r3, #7
 80064e2:	d9c8      	bls.n	8006476 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80064e4:	f7fe f8c8 	bl	8004678 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d902      	bls.n	80064fa <HAL_SD_ReadBlocks+0x1ae>
 80064f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d112      	bne.n	8006520 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a4c      	ldr	r2, [pc, #304]	@ (8006630 <HAL_SD_ReadBlocks+0x2e4>)
 8006500:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006506:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e0f4      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006526:	f240 332a 	movw	r3, #810	@ 0x32a
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d095      	beq.n	800645c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d022      	beq.n	8006584 <HAL_SD_ReadBlocks+0x238>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d91f      	bls.n	8006584 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006548:	2b03      	cmp	r3, #3
 800654a:	d01b      	beq.n	8006584 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f004 f8ff 	bl	800a754 <SDMMC_CmdStopTransfer>
 8006556:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655a:	2b00      	cmp	r3, #0
 800655c:	d012      	beq.n	8006584 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a33      	ldr	r2, [pc, #204]	@ (8006630 <HAL_SD_ReadBlocks+0x2e4>)
 8006564:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800656a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800656c:	431a      	orrs	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0c2      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_SD_ReadBlocks+0x254>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800659c:	2b00      	cmp	r3, #0
 800659e:	d012      	beq.n	80065c6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a22      	ldr	r2, [pc, #136]	@ (8006630 <HAL_SD_ReadBlocks+0x2e4>)
 80065a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	f043 0208 	orr.w	r2, r3, #8
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e0a1      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d012      	beq.n	80065fa <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a15      	ldr	r2, [pc, #84]	@ (8006630 <HAL_SD_ReadBlocks+0x2e4>)
 80065da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e0:	f043 0202 	orr.w	r2, r3, #2
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e087      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d064      	beq.n	80066d2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a08      	ldr	r2, [pc, #32]	@ (8006630 <HAL_SD_ReadBlocks+0x2e4>)
 800660e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e06d      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
 800662e:	bf00      	nop
 8006630:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f003 ff30 	bl	800a49e <SDIO_ReadFIFO>
 800663e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006642:	b2da      	uxtb	r2, r3
 8006644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006646:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800664a:	3301      	adds	r3, #1
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800664e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006650:	3b01      	subs	r3, #1
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b2da      	uxtb	r2, r3
 800665a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800665e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006660:	3301      	adds	r3, #1
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006666:	3b01      	subs	r3, #1
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b2da      	uxtb	r2, r3
 8006670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006672:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006676:	3301      	adds	r3, #1
 8006678:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800667a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667c:	3b01      	subs	r3, #1
 800667e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	0e1b      	lsrs	r3, r3, #24
 8006684:	b2da      	uxtb	r2, r3
 8006686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006688:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	3301      	adds	r3, #1
 800668e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006692:	3b01      	subs	r3, #1
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006696:	f7fd ffef 	bl	8004678 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d902      	bls.n	80066ac <HAL_SD_ReadBlocks+0x360>
 80066a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d112      	bne.n	80066d2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a18      	ldr	r2, [pc, #96]	@ (8006714 <HAL_SD_ReadBlocks+0x3c8>)
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e01b      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_SD_ReadBlocks+0x39a>
 80066e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1a6      	bne.n	8006634 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	e006      	b.n	800670a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006700:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3748      	adds	r7, #72	@ 0x48
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	004005ff 	.word	0x004005ff

08006718 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b092      	sub	sp, #72	@ 0x48
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006726:	f7fd ffa7 	bl	8004678 <HAL_GetTick>
 800672a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e16d      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	f040 8160 	bne.w	8006a18 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800675e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	441a      	add	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006768:	429a      	cmp	r2, r3
 800676a:	d907      	bls.n	800677c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006770:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e154      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2203      	movs	r2, #3
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	2b01      	cmp	r3, #1
 8006792:	d002      	beq.n	800679a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	025b      	lsls	r3, r3, #9
 8006798:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	025b      	lsls	r3, r3, #9
 80067a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80067a6:	2390      	movs	r3, #144	@ 0x90
 80067a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f107 0218 	add.w	r2, r7, #24
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f003 fef0 	bl	800a5a6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d90a      	bls.n	80067e2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067d8:	4618      	mov	r0, r3
 80067da:	f003 ff98 	bl	800a70e <SDMMC_CmdWriteMultiBlock>
 80067de:	6478      	str	r0, [r7, #68]	@ 0x44
 80067e0:	e009      	b.n	80067f6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2210      	movs	r2, #16
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067ee:	4618      	mov	r0, r3
 80067f0:	f003 ff6b 	bl	800a6ca <SDMMC_CmdWriteSingleBlock>
 80067f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a8b      	ldr	r2, [pc, #556]	@ (8006a30 <HAL_SD_WriteBlocks+0x318>)
 8006802:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680a:	431a      	orrs	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e101      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006826:	e065      	b.n	80068f4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d040      	beq.n	80068b8 <HAL_SD_WriteBlocks+0x1a0>
 8006836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d03d      	beq.n	80068b8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800683c:	2300      	movs	r3, #0
 800683e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006840:	e037      	b.n	80068b2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684a:	3301      	adds	r3, #1
 800684c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800684e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006850:	3b01      	subs	r3, #1
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	021a      	lsls	r2, r3, #8
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006862:	3301      	adds	r3, #1
 8006864:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006868:	3b01      	subs	r3, #1
 800686a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	041a      	lsls	r2, r3, #16
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687a:	3301      	adds	r3, #1
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800687e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006880:	3b01      	subs	r3, #1
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	061a      	lsls	r2, r3, #24
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006892:	3301      	adds	r3, #1
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	3b01      	subs	r3, #1
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f107 0214 	add.w	r2, r7, #20
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f003 fe06 	bl	800a4b8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80068ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ae:	3301      	adds	r3, #1
 80068b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b4:	2b07      	cmp	r3, #7
 80068b6:	d9c4      	bls.n	8006842 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80068b8:	f7fd fede 	bl	8004678 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d902      	bls.n	80068ce <HAL_SD_WriteBlocks+0x1b6>
 80068c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d112      	bne.n	80068f4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a57      	ldr	r2, [pc, #348]	@ (8006a30 <HAL_SD_WriteBlocks+0x318>)
 80068d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068dc:	431a      	orrs	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e098      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068fa:	f240 331a 	movw	r3, #794	@ 0x31a
 80068fe:	4013      	ands	r3, r2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d091      	beq.n	8006828 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d022      	beq.n	8006958 <HAL_SD_WriteBlocks+0x240>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d91f      	bls.n	8006958 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691c:	2b03      	cmp	r3, #3
 800691e:	d01b      	beq.n	8006958 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4618      	mov	r0, r3
 8006926:	f003 ff15 	bl	800a754 <SDMMC_CmdStopTransfer>
 800692a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800692c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800692e:	2b00      	cmp	r3, #0
 8006930:	d012      	beq.n	8006958 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a3e      	ldr	r2, [pc, #248]	@ (8006a30 <HAL_SD_WriteBlocks+0x318>)
 8006938:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800693e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006940:	431a      	orrs	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e066      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_SD_WriteBlocks+0x25c>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006970:	2b00      	cmp	r3, #0
 8006972:	d012      	beq.n	800699a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2d      	ldr	r2, [pc, #180]	@ (8006a30 <HAL_SD_WriteBlocks+0x318>)
 800697a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	f043 0208 	orr.w	r2, r3, #8
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e045      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d012      	beq.n	80069ce <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a20      	ldr	r2, [pc, #128]	@ (8006a30 <HAL_SD_WriteBlocks+0x318>)
 80069ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b4:	f043 0202 	orr.w	r2, r3, #2
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e02b      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d4:	f003 0310 	and.w	r3, r3, #16
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d012      	beq.n	8006a02 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a13      	ldr	r2, [pc, #76]	@ (8006a30 <HAL_SD_WriteBlocks+0x318>)
 80069e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e8:	f043 0210 	orr.w	r2, r3, #16
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e011      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006a0a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	e006      	b.n	8006a26 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3748      	adds	r7, #72	@ 0x48
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	004005ff 	.word	0x004005ff

08006a34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a42:	0f9b      	lsrs	r3, r3, #30
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a4e:	0e9b      	lsrs	r3, r3, #26
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 030f 	and.w	r3, r3, #15
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a60:	0e1b      	lsrs	r3, r3, #24
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	f003 0303 	and.w	r3, r3, #3
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a7e:	0a1b      	lsrs	r3, r3, #8
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a94:	0d1b      	lsrs	r3, r3, #20
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aa0:	0c1b      	lsrs	r3, r3, #16
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab2:	0bdb      	lsrs	r3, r3, #15
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ac4:	0b9b      	lsrs	r3, r3, #14
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ad6:	0b5b      	lsrs	r3, r3, #13
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ae8:	0b1b      	lsrs	r3, r3, #12
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2200      	movs	r2, #0
 8006afa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d163      	bne.n	8006bcc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b08:	009a      	lsls	r2, r3, #2
 8006b0a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006b0e:	4013      	ands	r3, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006b14:	0f92      	lsrs	r2, r2, #30
 8006b16:	431a      	orrs	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b20:	0edb      	lsrs	r3, r3, #27
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b32:	0e1b      	lsrs	r3, r3, #24
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b44:	0d5b      	lsrs	r3, r3, #21
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b56:	0c9b      	lsrs	r3, r3, #18
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b68:	0bdb      	lsrs	r3, r3, #15
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	7e1b      	ldrb	r3, [r3, #24]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	3302      	adds	r3, #2
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006b96:	fb03 f202 	mul.w	r2, r3, r2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	7a1b      	ldrb	r3, [r3, #8]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	2201      	movs	r2, #1
 8006baa:	409a      	lsls	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006bb8:	0a52      	lsrs	r2, r2, #9
 8006bba:	fb03 f202 	mul.w	r2, r3, r2
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bc8:	661a      	str	r2, [r3, #96]	@ 0x60
 8006bca:	e031      	b.n	8006c30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d11d      	bne.n	8006c10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006be2:	0c1b      	lsrs	r3, r3, #16
 8006be4:	431a      	orrs	r2, r3
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	029a      	lsls	r2, r3, #10
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c04:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c0e:	e00f      	b.n	8006c30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a58      	ldr	r2, [pc, #352]	@ (8006d78 <HAL_SD_GetCardCSD+0x344>)
 8006c16:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e09d      	b.n	8006d6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c34:	0b9b      	lsrs	r3, r3, #14
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c46:	09db      	lsrs	r3, r3, #7
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c68:	0fdb      	lsrs	r3, r3, #31
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c74:	0f5b      	lsrs	r3, r3, #29
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 0303 	and.w	r3, r3, #3
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c86:	0e9b      	lsrs	r3, r3, #26
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c98:	0d9b      	lsrs	r3, r3, #22
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006caa:	0d5b      	lsrs	r3, r3, #21
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc6:	0c1b      	lsrs	r3, r3, #16
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cda:	0bdb      	lsrs	r3, r3, #15
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cee:	0b9b      	lsrs	r3, r3, #14
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d02:	0b5b      	lsrs	r3, r3, #13
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d16:	0b1b      	lsrs	r3, r3, #12
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2a:	0a9b      	lsrs	r3, r3, #10
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	004005ff 	.word	0x004005ff

08006d7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006de0:	f107 030c 	add.w	r3, r7, #12
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f970 	bl	80070cc <SD_SendStatus>
 8006dec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	0a5b      	lsrs	r3, r3, #9
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e0a:	693b      	ldr	r3, [r7, #16]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e14:	b5b0      	push	{r4, r5, r7, lr}
 8006e16:	b094      	sub	sp, #80	@ 0x50
 8006e18:	af04      	add	r7, sp, #16
 8006e1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f003 fb66 	bl	800a4f6 <SDIO_GetPowerState>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e30:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006e34:	e0b8      	b.n	8006fa8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d02f      	beq.n	8006e9e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f003 fd4d 	bl	800a8e2 <SDMMC_CmdSendCID>
 8006e48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <SD_InitCard+0x40>
    {
      return errorstate;
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	e0a9      	b.n	8006fa8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f003 fb90 	bl	800a580 <SDIO_GetResponse>
 8006e60:	4602      	mov	r2, r0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2104      	movs	r1, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f003 fb87 	bl	800a580 <SDIO_GetResponse>
 8006e72:	4602      	mov	r2, r0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2108      	movs	r1, #8
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f003 fb7e 	bl	800a580 <SDIO_GetResponse>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	210c      	movs	r1, #12
 8006e90:	4618      	mov	r0, r3
 8006e92:	f003 fb75 	bl	800a580 <SDIO_GetResponse>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d00d      	beq.n	8006ec2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f107 020e 	add.w	r2, r7, #14
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f003 fd53 	bl	800a95c <SDMMC_CmdSetRelAdd>
 8006eb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ec0:	e072      	b.n	8006fa8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d036      	beq.n	8006f38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006eca:	89fb      	ldrh	r3, [r7, #14]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f003 fd1d 	bl	800a91e <SDMMC_CmdSendCSD>
 8006ee4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eee:	e05b      	b.n	8006fa8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f003 fb42 	bl	800a580 <SDIO_GetResponse>
 8006efc:	4602      	mov	r2, r0
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2104      	movs	r1, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f003 fb39 	bl	800a580 <SDIO_GetResponse>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2108      	movs	r1, #8
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 fb30 	bl	800a580 <SDIO_GetResponse>
 8006f20:	4602      	mov	r2, r0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	210c      	movs	r1, #12
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f003 fb27 	bl	800a580 <SDIO_GetResponse>
 8006f32:	4602      	mov	r2, r0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2104      	movs	r1, #4
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f003 fb1e 	bl	800a580 <SDIO_GetResponse>
 8006f44:	4603      	mov	r3, r0
 8006f46:	0d1a      	lsrs	r2, r3, #20
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f4c:	f107 0310 	add.w	r3, r7, #16
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fd6e 	bl	8006a34 <HAL_SD_GetCardCSD>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006f62:	e021      	b.n	8006fa8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6819      	ldr	r1, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	2200      	movs	r2, #0
 8006f70:	461c      	mov	r4, r3
 8006f72:	4615      	mov	r5, r2
 8006f74:	4622      	mov	r2, r4
 8006f76:	462b      	mov	r3, r5
 8006f78:	4608      	mov	r0, r1
 8006f7a:	f003 fc0d 	bl	800a798 <SDMMC_CmdSelDesel>
 8006f7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <SD_InitCard+0x176>
  {
    return errorstate;
 8006f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f88:	e00e      	b.n	8006fa8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681d      	ldr	r5, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	466c      	mov	r4, sp
 8006f92:	f103 0210 	add.w	r2, r3, #16
 8006f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f003 fa51 	bl	800a448 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3740      	adds	r7, #64	@ 0x40
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f003 fc08 	bl	800a7de <SDMMC_CmdGoIdleState>
 8006fce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <SD_PowerON+0x2a>
  {
    return errorstate;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	e072      	b.n	80070c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f003 fc1b 	bl	800a81a <SDMMC_CmdOperCond>
 8006fe4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00d      	beq.n	8007008 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f003 fbf1 	bl	800a7de <SDMMC_CmdGoIdleState>
 8006ffc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	e05b      	b.n	80070c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007012:	2b01      	cmp	r3, #1
 8007014:	d137      	bne.n	8007086 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2100      	movs	r1, #0
 800701c:	4618      	mov	r0, r3
 800701e:	f003 fc1b 	bl	800a858 <SDMMC_CmdAppCommand>
 8007022:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d02d      	beq.n	8007086 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800702a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800702e:	e047      	b.n	80070c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f003 fc0e 	bl	800a858 <SDMMC_CmdAppCommand>
 800703c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <SD_PowerON+0x98>
    {
      return errorstate;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	e03b      	b.n	80070c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	491e      	ldr	r1, [pc, #120]	@ (80070c8 <SD_PowerON+0x118>)
 800704e:	4618      	mov	r0, r3
 8007050:	f003 fc24 	bl	800a89c <SDMMC_CmdAppOperCommand>
 8007054:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800705c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007060:	e02e      	b.n	80070c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f003 fa89 	bl	800a580 <SDIO_GetResponse>
 800706e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	0fdb      	lsrs	r3, r3, #31
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <SD_PowerON+0xcc>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <SD_PowerON+0xce>
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]

    count++;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3301      	adds	r3, #1
 8007084:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800708c:	4293      	cmp	r3, r2
 800708e:	d802      	bhi.n	8007096 <SD_PowerON+0xe6>
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0cc      	beq.n	8007030 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800709c:	4293      	cmp	r3, r2
 800709e:	d902      	bls.n	80070a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070a4:	e00c      	b.n	80070c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80070b6:	e002      	b.n	80070be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	c1100000 	.word	0xc1100000

080070cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80070dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070e0:	e018      	b.n	8007114 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ea:	041b      	lsls	r3, r3, #16
 80070ec:	4619      	mov	r1, r3
 80070ee:	4610      	mov	r0, r2
 80070f0:	f003 fc55 	bl	800a99e <SDMMC_CmdSendStatus>
 80070f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <SD_SendStatus+0x34>
  {
    return errorstate;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	e009      	b.n	8007114 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f003 fa3a 	bl	800a580 <SDIO_GetResponse>
 800710c:	4602      	mov	r2, r0
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e07b      	b.n	8007226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d108      	bne.n	8007148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800713e:	d009      	beq.n	8007154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	61da      	str	r2, [r3, #28]
 8007146:	e005      	b.n	8007154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d106      	bne.n	8007174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7fc ffae 	bl	80040d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800718a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	431a      	orrs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d8:	ea42 0103 	orr.w	r1, r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	0c1b      	lsrs	r3, r3, #16
 80071f2:	f003 0104 	and.w	r1, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	f003 0210 	and.w	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69da      	ldr	r2, [r3, #28]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b088      	sub	sp, #32
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723e:	f7fd fa1b 	bl	8004678 <HAL_GetTick>
 8007242:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d001      	beq.n	8007258 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007254:	2302      	movs	r3, #2
 8007256:	e12a      	b.n	80074ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <HAL_SPI_Transmit+0x36>
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e122      	b.n	80074ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_SPI_Transmit+0x48>
 8007272:	2302      	movs	r3, #2
 8007274:	e11b      	b.n	80074ae <HAL_SPI_Transmit+0x280>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	88fa      	ldrh	r2, [r7, #6]
 8007296:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072c4:	d10f      	bne.n	80072e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f0:	2b40      	cmp	r3, #64	@ 0x40
 80072f2:	d007      	beq.n	8007304 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800730c:	d152      	bne.n	80073b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_SPI_Transmit+0xee>
 8007316:	8b7b      	ldrh	r3, [r7, #26]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d145      	bne.n	80073a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800732c:	1c9a      	adds	r2, r3, #2
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007340:	e032      	b.n	80073a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d112      	bne.n	8007376 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007360:	1c9a      	adds	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800736a:	b29b      	uxth	r3, r3
 800736c:	3b01      	subs	r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007374:	e018      	b.n	80073a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007376:	f7fd f97f 	bl	8004678 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d803      	bhi.n	800738e <HAL_SPI_Transmit+0x160>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d102      	bne.n	8007394 <HAL_SPI_Transmit+0x166>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e082      	b.n	80074ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1c7      	bne.n	8007342 <HAL_SPI_Transmit+0x114>
 80073b2:	e053      	b.n	800745c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <HAL_SPI_Transmit+0x194>
 80073bc:	8b7b      	ldrh	r3, [r7, #26]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d147      	bne.n	8007452 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073e8:	e033      	b.n	8007452 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d113      	bne.n	8007420 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	330c      	adds	r3, #12
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800741e:	e018      	b.n	8007452 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007420:	f7fd f92a 	bl	8004678 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d803      	bhi.n	8007438 <HAL_SPI_Transmit+0x20a>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d102      	bne.n	800743e <HAL_SPI_Transmit+0x210>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e02d      	b.n	80074ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1c6      	bne.n	80073ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f001 faef 	bl	8008a44 <SPI_EndRxTxTransaction>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	617b      	str	r3, [r7, #20]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	617b      	str	r3, [r7, #20]
 800748e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b088      	sub	sp, #32
 80074ba:	af02      	add	r7, sp, #8
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d001      	beq.n	80074d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80074d2:	2302      	movs	r3, #2
 80074d4:	e104      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074de:	d112      	bne.n	8007506 <HAL_SPI_Receive+0x50>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10e      	bne.n	8007506 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2204      	movs	r2, #4
 80074ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4613      	mov	r3, r2
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f8f3 	bl	80076e8 <HAL_SPI_TransmitReceive>
 8007502:	4603      	mov	r3, r0
 8007504:	e0ec      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007506:	f7fd f8b7 	bl	8004678 <HAL_GetTick>
 800750a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_SPI_Receive+0x62>
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e0e1      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_SPI_Receive+0x74>
 8007526:	2302      	movs	r3, #2
 8007528:	e0da      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2204      	movs	r2, #4
 8007536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	88fa      	ldrh	r2, [r7, #6]
 800754a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	88fa      	ldrh	r2, [r7, #6]
 8007550:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007578:	d10f      	bne.n	800759a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007598:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a4:	2b40      	cmp	r3, #64	@ 0x40
 80075a6:	d007      	beq.n	80075b8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d170      	bne.n	80076a2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075c0:	e035      	b.n	800762e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d115      	bne.n	80075fc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f103 020c 	add.w	r2, r3, #12
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	7812      	ldrb	r2, [r2, #0]
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075fa:	e018      	b.n	800762e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075fc:	f7fd f83c 	bl	8004678 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d803      	bhi.n	8007614 <HAL_SPI_Receive+0x15e>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007612:	d102      	bne.n	800761a <HAL_SPI_Receive+0x164>
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e058      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1c4      	bne.n	80075c2 <HAL_SPI_Receive+0x10c>
 8007638:	e038      	b.n	80076ac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d113      	bne.n	8007670 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	b292      	uxth	r2, r2
 8007654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800766e:	e018      	b.n	80076a2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007670:	f7fd f802 	bl	8004678 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d803      	bhi.n	8007688 <HAL_SPI_Receive+0x1d2>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d102      	bne.n	800768e <HAL_SPI_Receive+0x1d8>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e01e      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1c6      	bne.n	800763a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 f961 	bl	8008978 <SPI_EndRxTransaction>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80076de:	2300      	movs	r3, #0
  }
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	@ 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
 80076f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076f6:	2301      	movs	r3, #1
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076fa:	f7fc ffbd 	bl	8004678 <HAL_GetTick>
 80076fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007706:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d00c      	beq.n	8007732 <HAL_SPI_TransmitReceive+0x4a>
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800771e:	d106      	bne.n	800772e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <HAL_SPI_TransmitReceive+0x46>
 8007728:	7ffb      	ldrb	r3, [r7, #31]
 800772a:	2b04      	cmp	r3, #4
 800772c:	d001      	beq.n	8007732 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800772e:	2302      	movs	r3, #2
 8007730:	e17f      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <HAL_SPI_TransmitReceive+0x5c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d002      	beq.n	8007744 <HAL_SPI_TransmitReceive+0x5c>
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e174      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x6e>
 8007752:	2302      	movs	r3, #2
 8007754:	e16d      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b04      	cmp	r3, #4
 8007768:	d003      	beq.n	8007772 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2205      	movs	r2, #5
 800776e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	887a      	ldrh	r2, [r7, #2]
 8007788:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	887a      	ldrh	r2, [r7, #2]
 8007794:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	887a      	ldrh	r2, [r7, #2]
 800779a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b2:	2b40      	cmp	r3, #64	@ 0x40
 80077b4:	d007      	beq.n	80077c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077ce:	d17e      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_SPI_TransmitReceive+0xf6>
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d16c      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e2:	881a      	ldrh	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ee:	1c9a      	adds	r2, r3, #2
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007802:	e059      	b.n	80078b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b02      	cmp	r3, #2
 8007810:	d11b      	bne.n	800784a <HAL_SPI_TransmitReceive+0x162>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d016      	beq.n	800784a <HAL_SPI_TransmitReceive+0x162>
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	2b01      	cmp	r3, #1
 8007820:	d113      	bne.n	800784a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	881a      	ldrh	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d119      	bne.n	800788c <HAL_SPI_TransmitReceive+0x1a4>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d014      	beq.n	800788c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	b292      	uxth	r2, r2
 800786e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	1c9a      	adds	r2, r3, #2
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007888:	2301      	movs	r3, #1
 800788a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800788c:	f7fc fef4 	bl	8004678 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007898:	429a      	cmp	r2, r3
 800789a:	d80d      	bhi.n	80078b8 <HAL_SPI_TransmitReceive+0x1d0>
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	d009      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e0bc      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1a0      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x11c>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d19b      	bne.n	8007804 <HAL_SPI_TransmitReceive+0x11c>
 80078cc:	e082      	b.n	80079d4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_SPI_TransmitReceive+0x1f4>
 80078d6:	8afb      	ldrh	r3, [r7, #22]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d171      	bne.n	80079c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	330c      	adds	r3, #12
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007902:	e05d      	b.n	80079c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b02      	cmp	r3, #2
 8007910:	d11c      	bne.n	800794c <HAL_SPI_TransmitReceive+0x264>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d017      	beq.n	800794c <HAL_SPI_TransmitReceive+0x264>
 800791c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791e:	2b01      	cmp	r3, #1
 8007920:	d114      	bne.n	800794c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d119      	bne.n	800798e <HAL_SPI_TransmitReceive+0x2a6>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d014      	beq.n	800798e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800798a:	2301      	movs	r3, #1
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800798e:	f7fc fe73 	bl	8004678 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800799a:	429a      	cmp	r2, r3
 800799c:	d803      	bhi.n	80079a6 <HAL_SPI_TransmitReceive+0x2be>
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d102      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x2c4>
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d109      	bne.n	80079c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e038      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d19c      	bne.n	8007904 <HAL_SPI_TransmitReceive+0x21c>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d197      	bne.n	8007904 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079d4:	6a3a      	ldr	r2, [r7, #32]
 80079d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 f833 	bl	8008a44 <SPI_EndRxTxTransaction>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2220      	movs	r2, #32
 80079e8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e01d      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
  }
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3728      	adds	r7, #40	@ 0x28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d001      	beq.n	8007a5a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8007a56:	2302      	movs	r3, #2
 8007a58:	e07f      	b.n	8007b5a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d110      	bne.n	8007a84 <HAL_SPI_Receive_IT+0x48>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a6a:	d10b      	bne.n	8007a84 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f876 	bl	8007b6c <HAL_SPI_TransmitReceive_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	e06a      	b.n	8007b5a <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_SPI_Receive_IT+0x54>
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e062      	b.n	8007b5a <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_SPI_Receive_IT+0x66>
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e05b      	b.n	8007b5a <HAL_SPI_Receive_IT+0x11e>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2204      	movs	r2, #4
 8007aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	88fa      	ldrh	r2, [r7, #6]
 8007ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d003      	beq.n	8007af2 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4a1d      	ldr	r2, [pc, #116]	@ (8007b64 <HAL_SPI_Receive_IT+0x128>)
 8007aee:	641a      	str	r2, [r3, #64]	@ 0x40
 8007af0:	e002      	b.n	8007af8 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b68 <HAL_SPI_Receive_IT+0x12c>)
 8007af6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b00:	d10f      	bne.n	8007b22 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b20:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b2c:	2b40      	cmp	r3, #64	@ 0x40
 8007b2e:	d007      	beq.n	8007b40 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b3e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007b56:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	08008821 	.word	0x08008821
 8007b68:	080087d7 	.word	0x080087d7

08007b6c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
 8007b78:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b80:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d00c      	beq.n	8007ba8 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b94:	d106      	bne.n	8007ba4 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <HAL_SPI_TransmitReceive_IT+0x38>
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d001      	beq.n	8007ba8 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e061      	b.n	8007c6c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <HAL_SPI_TransmitReceive_IT+0x4e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <HAL_SPI_TransmitReceive_IT+0x4e>
 8007bb4:	887b      	ldrh	r3, [r7, #2]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e056      	b.n	8007c6c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d101      	bne.n	8007bcc <HAL_SPI_TransmitReceive_IT+0x60>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e04f      	b.n	8007c6c <HAL_SPI_TransmitReceive_IT+0x100>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d003      	beq.n	8007be8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2205      	movs	r2, #5
 8007be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	887a      	ldrh	r2, [r7, #2]
 8007bf8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	887a      	ldrh	r2, [r7, #2]
 8007c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	887a      	ldrh	r2, [r7, #2]
 8007c10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	@ (8007c78 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8007c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	4a16      	ldr	r2, [pc, #88]	@ (8007c7c <HAL_SPI_TransmitReceive_IT+0x110>)
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44
 8007c26:	e005      	b.n	8007c34 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a15      	ldr	r2, [pc, #84]	@ (8007c80 <HAL_SPI_TransmitReceive_IT+0x114>)
 8007c2c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4a14      	ldr	r2, [pc, #80]	@ (8007c84 <HAL_SPI_TransmitReceive_IT+0x118>)
 8007c32:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3e:	2b40      	cmp	r3, #64	@ 0x40
 8007c40:	d007      	beq.n	8007c52 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c50:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8007c68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	08008719 	.word	0x08008719
 8007c7c:	08008779 	.word	0x08008779
 8007c80:	08008655 	.word	0x08008655
 8007c84:	080086b9 	.word	0x080086b9

08007c88 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d001      	beq.n	8007ca6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	e097      	b.n	8007dd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d002      	beq.n	8007cb2 <HAL_SPI_Transmit_DMA+0x2a>
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e08f      	b.n	8007dd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_SPI_Transmit_DMA+0x3c>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e088      	b.n	8007dd6 <HAL_SPI_Transmit_DMA+0x14e>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2203      	movs	r2, #3
 8007cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	88fa      	ldrh	r2, [r7, #6]
 8007ce4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d12:	d10f      	bne.n	8007d34 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d38:	4a29      	ldr	r2, [pc, #164]	@ (8007de0 <HAL_SPI_Transmit_DMA+0x158>)
 8007d3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d40:	4a28      	ldr	r2, [pc, #160]	@ (8007de4 <HAL_SPI_Transmit_DMA+0x15c>)
 8007d42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d48:	4a27      	ldr	r2, [pc, #156]	@ (8007de8 <HAL_SPI_Transmit_DMA+0x160>)
 8007d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d50:	2200      	movs	r2, #0
 8007d52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	330c      	adds	r3, #12
 8007d64:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007d6c:	f7fd f89c 	bl	8004ea8 <HAL_DMA_Start_IT>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7a:	f043 0210 	orr.w	r2, r3, #16
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e023      	b.n	8007dd6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d98:	2b40      	cmp	r3, #64	@ 0x40
 8007d9a:	d007      	beq.n	8007dac <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007daa:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0220 	orr.w	r2, r2, #32
 8007dc2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0202 	orr.w	r2, r2, #2
 8007dd2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	08008599 	.word	0x08008599
 8007de4:	080083b9 	.word	0x080083b9
 8007de8:	080085ed 	.word	0x080085ed

08007dec <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d001      	beq.n	8007e0a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8007e06:	2302      	movs	r3, #2
 8007e08:	e0a9      	b.n	8007f5e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d110      	bne.n	8007e34 <HAL_SPI_Receive_DMA+0x48>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e1a:	d10b      	bne.n	8007e34 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2204      	movs	r2, #4
 8007e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007e24:	88fb      	ldrh	r3, [r7, #6]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f8a2 	bl	8007f74 <HAL_SPI_TransmitReceive_DMA>
 8007e30:	4603      	mov	r3, r0
 8007e32:	e094      	b.n	8007f5e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_SPI_Receive_DMA+0x54>
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e08c      	b.n	8007f5e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_SPI_Receive_DMA+0x66>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e085      	b.n	8007f5e <HAL_SPI_Receive_DMA+0x172>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	88fa      	ldrh	r2, [r7, #6]
 8007e72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	88fa      	ldrh	r2, [r7, #6]
 8007e78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e9a:	d10f      	bne.n	8007ebc <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007eba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec0:	4a29      	ldr	r2, [pc, #164]	@ (8007f68 <HAL_SPI_Receive_DMA+0x17c>)
 8007ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec8:	4a28      	ldr	r2, [pc, #160]	@ (8007f6c <HAL_SPI_Receive_DMA+0x180>)
 8007eca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed0:	4a27      	ldr	r2, [pc, #156]	@ (8007f70 <HAL_SPI_Receive_DMA+0x184>)
 8007ed2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed8:	2200      	movs	r2, #0
 8007eda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ef2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ef4:	f7fc ffd8 	bl	8004ea8 <HAL_DMA_Start_IT>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f02:	f043 0210 	orr.w	r2, r3, #16
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e023      	b.n	8007f5e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d007      	beq.n	8007f34 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f32:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0220 	orr.w	r2, r2, #32
 8007f4a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	080085b5 	.word	0x080085b5
 8007f6c:	08008461 	.word	0x08008461
 8007f70:	080085ed 	.word	0x080085ed

08007f74 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f88:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d00c      	beq.n	8007fb0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f9c:	d106      	bne.n	8007fac <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d102      	bne.n	8007fac <HAL_SPI_TransmitReceive_DMA+0x38>
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d001      	beq.n	8007fb0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
 8007fae:	e0cf      	b.n	8008150 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007fbc:	887b      	ldrh	r3, [r7, #2]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e0c4      	b.n	8008150 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_SPI_TransmitReceive_DMA+0x60>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e0bd      	b.n	8008150 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d003      	beq.n	8007ff0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2205      	movs	r2, #5
 8007fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	887a      	ldrh	r2, [r7, #2]
 8008000:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	887a      	ldrh	r2, [r7, #2]
 8008006:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	887a      	ldrh	r2, [r7, #2]
 8008012:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	887a      	ldrh	r2, [r7, #2]
 8008018:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b04      	cmp	r3, #4
 8008030:	d108      	bne.n	8008044 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008036:	4a48      	ldr	r2, [pc, #288]	@ (8008158 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8008038:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800803e:	4a47      	ldr	r2, [pc, #284]	@ (800815c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8008040:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008042:	e007      	b.n	8008054 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008048:	4a45      	ldr	r2, [pc, #276]	@ (8008160 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800804a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008050:	4a44      	ldr	r2, [pc, #272]	@ (8008164 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008052:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008058:	4a43      	ldr	r2, [pc, #268]	@ (8008168 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800805a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008060:	2200      	movs	r2, #0
 8008062:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	4619      	mov	r1, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800807c:	f7fc ff14 	bl	8004ea8 <HAL_DMA_Start_IT>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808a:	f043 0210 	orr.w	r2, r3, #16
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e058      	b.n	8008150 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b2:	2200      	movs	r2, #0
 80080b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ba:	2200      	movs	r2, #0
 80080bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080c2:	2200      	movs	r2, #0
 80080c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ca:	2200      	movs	r2, #0
 80080cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d6:	4619      	mov	r1, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	330c      	adds	r3, #12
 80080de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80080e6:	f7fc fedf 	bl	8004ea8 <HAL_DMA_Start_IT>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f4:	f043 0210 	orr.w	r2, r3, #16
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e023      	b.n	8008150 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008112:	2b40      	cmp	r3, #64	@ 0x40
 8008114:	d007      	beq.n	8008126 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008124:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f042 0220 	orr.w	r2, r2, #32
 800813c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0202 	orr.w	r2, r2, #2
 800814c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	080085b5 	.word	0x080085b5
 800815c:	08008461 	.word	0x08008461
 8008160:	080085d1 	.word	0x080085d1
 8008164:	08008509 	.word	0x08008509
 8008168:	080085ed 	.word	0x080085ed

0800816c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10e      	bne.n	80081ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008194:	2b00      	cmp	r3, #0
 8008196:	d009      	beq.n	80081ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d004      	beq.n	80081ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
    return;
 80081aa:	e0ce      	b.n	800834a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_SPI_IRQHandler+0x5e>
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
    return;
 80081c8:	e0bf      	b.n	800834a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f003 0320 	and.w	r3, r3, #32
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <HAL_SPI_IRQHandler+0x7e>
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d105      	bne.n	80081ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80b0 	beq.w	800834a <HAL_SPI_IRQHandler+0x1de>
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80aa 	beq.w	800834a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d023      	beq.n	8008248 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b03      	cmp	r3, #3
 800820a:	d011      	beq.n	8008230 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008210:	f043 0204 	orr.w	r2, r3, #4
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	e00b      	b.n	8008248 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	693b      	ldr	r3, [r7, #16]
        return;
 8008246:	e080      	b.n	800834a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d014      	beq.n	800827c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008256:	f043 0201 	orr.w	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800825e:	2300      	movs	r3, #0
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00c      	beq.n	80082a0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	f043 0208 	orr.w	r2, r3, #8
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008292:	2300      	movs	r3, #0
 8008294:	60bb      	str	r3, [r7, #8]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	60bb      	str	r3, [r7, #8]
 800829e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d04f      	beq.n	8008348 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80082b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <HAL_SPI_IRQHandler+0x168>
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d034      	beq.n	800833e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0203 	bic.w	r2, r2, #3
 80082e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d011      	beq.n	8008310 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f0:	4a17      	ldr	r2, [pc, #92]	@ (8008350 <HAL_SPI_IRQHandler+0x1e4>)
 80082f2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fc fe9d 	bl	8005038 <HAL_DMA_Abort_IT>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008308:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008314:	2b00      	cmp	r3, #0
 8008316:	d016      	beq.n	8008346 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800831c:	4a0c      	ldr	r2, [pc, #48]	@ (8008350 <HAL_SPI_IRQHandler+0x1e4>)
 800831e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008324:	4618      	mov	r0, r3
 8008326:	f7fc fe87 	bl	8005038 <HAL_DMA_Abort_IT>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00a      	beq.n	8008346 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008334:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800833c:	e003      	b.n	8008346 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f830 	bl	80083a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008344:	e000      	b.n	8008348 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008346:	bf00      	nop
    return;
 8008348:	bf00      	nop
  }
}
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	0800862d 	.word	0x0800862d

08008354 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083c6:	f7fc f957 	bl	8004678 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083da:	d03b      	beq.n	8008454 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0220 	bic.w	r2, r2, #32
 80083ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0202 	bic.w	r2, r2, #2
 80083fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	2164      	movs	r1, #100	@ 0x64
 8008400:	6978      	ldr	r0, [r7, #20]
 8008402:	f000 fb1f 	bl	8008a44 <SPI_EndRxTxTransaction>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008410:	f043 0220 	orr.w	r2, r3, #32
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800844c:	6978      	ldr	r0, [r7, #20]
 800844e:	f7ff ffa9 	bl	80083a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008452:	e002      	b.n	800845a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008454:	6978      	ldr	r0, [r7, #20]
 8008456:	f7f9 ff05 	bl	8002264 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800846e:	f7fc f903 	bl	8004678 <HAL_GetTick>
 8008472:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800847e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008482:	d03b      	beq.n	80084fc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	685a      	ldr	r2, [r3, #4]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0220 	bic.w	r2, r2, #32
 8008492:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10d      	bne.n	80084b8 <SPI_DMAReceiveCplt+0x58>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084a4:	d108      	bne.n	80084b8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0203 	bic.w	r2, r2, #3
 80084b4:	605a      	str	r2, [r3, #4]
 80084b6:	e007      	b.n	80084c8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685a      	ldr	r2, [r3, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0201 	bic.w	r2, r2, #1
 80084c6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	2164      	movs	r1, #100	@ 0x64
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fa53 	bl	8008978 <SPI_EndRxTransaction>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d002      	beq.n	80084de <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff ff55 	bl	80083a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80084fa:	e002      	b.n	8008502 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7f9 fec7 	bl	8002290 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008516:	f7fc f8af 	bl	8004678 <HAL_GetTick>
 800851a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800852a:	d02f      	beq.n	800858c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 0220 	bic.w	r2, r2, #32
 800853a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	2164      	movs	r1, #100	@ 0x64
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fa7f 	bl	8008a44 <SPI_EndRxTxTransaction>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008550:	f043 0220 	orr.w	r2, r3, #32
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0203 	bic.w	r2, r2, #3
 8008566:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7ff ff0d 	bl	80083a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800858a:	e002      	b.n	8008592 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff fee1 	bl	8008354 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff fede 	bl	8008368 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085ac:	bf00      	nop
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff feda 	bl	800837c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085c8:	bf00      	nop
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085dc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f7ff fed6 	bl	8008390 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0203 	bic.w	r2, r2, #3
 8008608:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860e:	f043 0210 	orr.w	r2, r3, #16
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fec0 	bl	80083a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff feac 	bl	80083a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f103 020c 	add.w	r2, r3, #12
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008668:	7812      	ldrb	r2, [r2, #0]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800867c:	b29b      	uxth	r3, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800868a:	b29b      	uxth	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10f      	bne.n	80086b0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800869e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d102      	bne.n	80086b0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa1e 	bl	8008aec <SPI_CloseRxTx_ISR>
    }
  }
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10f      	bne.n	8008710 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086fe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f9ee 	bl	8008aec <SPI_CloseRxTx_ISR>
    }
  }
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872a:	b292      	uxth	r2, r2
 800872c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008732:	1c9a      	adds	r2, r3, #2
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800874a:	b29b      	uxth	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10f      	bne.n	8008770 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800875e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008764:	b29b      	uxth	r3, r3
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f9be 	bl	8008aec <SPI_CloseRxTx_ISR>
    }
  }
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	881a      	ldrh	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008790:	1c9a      	adds	r2, r3, #2
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800879a:	b29b      	uxth	r3, r3
 800879c:	3b01      	subs	r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10f      	bne.n	80087ce <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087bc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f98f 	bl	8008aec <SPI_CloseRxTx_ISR>
    }
  }
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f103 020c 	add.w	r2, r3, #12
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	b2d2      	uxtb	r2, r2
 80087ee:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800880c:	b29b      	uxth	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9de 	bl	8008bd4 <SPI_CloseRx_ISR>
  }
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008832:	b292      	uxth	r2, r2
 8008834:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883a:	1c9a      	adds	r2, r3, #2
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008852:	b29b      	uxth	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d102      	bne.n	800885e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9bb 	bl	8008bd4 <SPI_CloseRx_ISR>
  }
}
 800885e:	bf00      	nop
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008878:	f7fb fefe 	bl	8004678 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4413      	add	r3, r2
 8008886:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008888:	f7fb fef6 	bl	8004678 <HAL_GetTick>
 800888c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800888e:	4b39      	ldr	r3, [pc, #228]	@ (8008974 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	015b      	lsls	r3, r3, #5
 8008894:	0d1b      	lsrs	r3, r3, #20
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800889e:	e054      	b.n	800894a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a6:	d050      	beq.n	800894a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088a8:	f7fb fee6 	bl	8004678 <HAL_GetTick>
 80088ac:	4602      	mov	r2, r0
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d902      	bls.n	80088be <SPI_WaitFlagStateUntilTimeout+0x56>
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d13d      	bne.n	800893a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80088cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088d6:	d111      	bne.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e0:	d004      	beq.n	80088ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ea:	d107      	bne.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008904:	d10f      	bne.n	8008926 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008914:	601a      	str	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008924:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e017      	b.n	800896a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	3b01      	subs	r3, #1
 8008948:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4013      	ands	r3, r2
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	bf0c      	ite	eq
 800895a:	2301      	moveq	r3, #1
 800895c:	2300      	movne	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	461a      	mov	r2, r3
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	429a      	cmp	r2, r3
 8008966:	d19b      	bne.n	80088a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000010 	.word	0x20000010

08008978 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af02      	add	r7, sp, #8
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800898c:	d111      	bne.n	80089b2 <SPI_EndRxTransaction+0x3a>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008996:	d004      	beq.n	80089a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a0:	d107      	bne.n	80089b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089ba:	d12a      	bne.n	8008a12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089c4:	d012      	beq.n	80089ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2200      	movs	r2, #0
 80089ce:	2180      	movs	r1, #128	@ 0x80
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f7ff ff49 	bl	8008868 <SPI_WaitFlagStateUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d02d      	beq.n	8008a38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e0:	f043 0220 	orr.w	r2, r3, #32
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e026      	b.n	8008a3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	2101      	movs	r1, #1
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff ff36 	bl	8008868 <SPI_WaitFlagStateUntilTimeout>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01a      	beq.n	8008a38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a06:	f043 0220 	orr.w	r2, r3, #32
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e013      	b.n	8008a3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7ff ff23 	bl	8008868 <SPI_WaitFlagStateUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d007      	beq.n	8008a38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a2c:	f043 0220 	orr.w	r2, r3, #32
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e000      	b.n	8008a3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2201      	movs	r2, #1
 8008a58:	2102      	movs	r1, #2
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff ff04 	bl	8008868 <SPI_WaitFlagStateUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6a:	f043 0220 	orr.w	r2, r3, #32
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e032      	b.n	8008adc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a76:	4b1b      	ldr	r3, [pc, #108]	@ (8008ae4 <SPI_EndRxTxTransaction+0xa0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae8 <SPI_EndRxTxTransaction+0xa4>)
 8008a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a80:	0d5b      	lsrs	r3, r3, #21
 8008a82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a94:	d112      	bne.n	8008abc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2180      	movs	r1, #128	@ 0x80
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff fee1 	bl	8008868 <SPI_WaitFlagStateUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d016      	beq.n	8008ada <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab0:	f043 0220 	orr.w	r2, r3, #32
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e00f      	b.n	8008adc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00a      	beq.n	8008ad8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad2:	2b80      	cmp	r3, #128	@ 0x80
 8008ad4:	d0f2      	beq.n	8008abc <SPI_EndRxTxTransaction+0x78>
 8008ad6:	e000      	b.n	8008ada <SPI_EndRxTxTransaction+0x96>
        break;
 8008ad8:	bf00      	nop
  }

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20000010 	.word	0x20000010
 8008ae8:	165e9f81 	.word	0x165e9f81

08008aec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008af4:	4b35      	ldr	r3, [pc, #212]	@ (8008bcc <SPI_CloseRxTx_ISR+0xe0>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a35      	ldr	r2, [pc, #212]	@ (8008bd0 <SPI_CloseRxTx_ISR+0xe4>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	0a5b      	lsrs	r3, r3, #9
 8008b00:	2264      	movs	r2, #100	@ 0x64
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b08:	f7fb fdb6 	bl	8004678 <HAL_GetTick>
 8008b0c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0220 	bic.w	r2, r2, #32
 8008b1c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d106      	bne.n	8008b32 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b28:	f043 0220 	orr.w	r2, r3, #32
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b30:	e009      	b.n	8008b46 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0eb      	beq.n	8008b1e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	2164      	movs	r1, #100	@ 0x64
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff ff7a 	bl	8008a44 <SPI_EndRxTxTransaction>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b5a:	f043 0220 	orr.w	r2, r3, #32
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10a      	bne.n	8008b80 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d115      	bne.n	8008bb4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d107      	bne.n	8008ba4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7f9 fb77 	bl	8002290 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008ba2:	e00e      	b.n	8008bc2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff fbd1 	bl	8008354 <HAL_SPI_TxRxCpltCallback>
}
 8008bb2:	e006      	b.n	8008bc2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fbf1 	bl	80083a4 <HAL_SPI_ErrorCallback>
}
 8008bc2:	bf00      	nop
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000010 	.word	0x20000010
 8008bd0:	057619f1 	.word	0x057619f1

08008bd4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008bea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008bec:	f7fb fd44 	bl	8004678 <HAL_GetTick>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	2164      	movs	r1, #100	@ 0x64
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff febe 	bl	8008978 <SPI_EndRxTransaction>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c06:	f043 0220 	orr.w	r2, r3, #32
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c16:	2300      	movs	r3, #0
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7f9 fb27 	bl	8002290 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008c42:	e002      	b.n	8008c4a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff fbad 	bl	80083a4 <HAL_SPI_ErrorCallback>
}
 8008c4a:	bf00      	nop
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e041      	b.n	8008ce8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7fb fb35 	bl	80042e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2202      	movs	r2, #2
 8008c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f000 fae5 	bl	8009260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d001      	beq.n	8008d08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e046      	b.n	8008d96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a23      	ldr	r2, [pc, #140]	@ (8008da4 <HAL_TIM_Base_Start+0xb4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d022      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d22:	d01d      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a1f      	ldr	r2, [pc, #124]	@ (8008da8 <HAL_TIM_Base_Start+0xb8>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d018      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a1e      	ldr	r2, [pc, #120]	@ (8008dac <HAL_TIM_Base_Start+0xbc>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d013      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8008db0 <HAL_TIM_Base_Start+0xc0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00e      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a1b      	ldr	r2, [pc, #108]	@ (8008db4 <HAL_TIM_Base_Start+0xc4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d009      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a19      	ldr	r2, [pc, #100]	@ (8008db8 <HAL_TIM_Base_Start+0xc8>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d004      	beq.n	8008d60 <HAL_TIM_Base_Start+0x70>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a18      	ldr	r2, [pc, #96]	@ (8008dbc <HAL_TIM_Base_Start+0xcc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d111      	bne.n	8008d84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b06      	cmp	r3, #6
 8008d70:	d010      	beq.n	8008d94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0201 	orr.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d82:	e007      	b.n	8008d94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0201 	orr.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40010000 	.word	0x40010000
 8008da8:	40000400 	.word	0x40000400
 8008dac:	40000800 	.word	0x40000800
 8008db0:	40000c00 	.word	0x40000c00
 8008db4:	40010400 	.word	0x40010400
 8008db8:	40014000 	.word	0x40014000
 8008dbc:	40001800 	.word	0x40001800

08008dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d001      	beq.n	8008dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e04e      	b.n	8008e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0201 	orr.w	r2, r2, #1
 8008dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a23      	ldr	r2, [pc, #140]	@ (8008e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d022      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e02:	d01d      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1f      	ldr	r2, [pc, #124]	@ (8008e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d018      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1e      	ldr	r2, [pc, #120]	@ (8008e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d013      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00e      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a1b      	ldr	r2, [pc, #108]	@ (8008e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a19      	ldr	r2, [pc, #100]	@ (8008e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_TIM_Base_Start_IT+0x80>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d111      	bne.n	8008e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b06      	cmp	r3, #6
 8008e50:	d010      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0201 	orr.w	r2, r2, #1
 8008e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e62:	e007      	b.n	8008e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0201 	orr.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	40010400 	.word	0x40010400
 8008e98:	40014000 	.word	0x40014000
 8008e9c:	40001800 	.word	0x40001800

08008ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0302 	and.w	r3, r3, #2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d020      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0202 	mvn.w	r2, #2
 8008ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f999 	bl	8009222 <HAL_TIM_IC_CaptureCallback>
 8008ef0:	e005      	b.n	8008efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f98b 	bl	800920e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f99c 	bl	8009236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d020      	beq.n	8008f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01b      	beq.n	8008f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0204 	mvn.w	r2, #4
 8008f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f973 	bl	8009222 <HAL_TIM_IC_CaptureCallback>
 8008f3c:	e005      	b.n	8008f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f965 	bl	800920e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f976 	bl	8009236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d020      	beq.n	8008f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f003 0308 	and.w	r3, r3, #8
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01b      	beq.n	8008f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0208 	mvn.w	r2, #8
 8008f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2204      	movs	r2, #4
 8008f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f94d 	bl	8009222 <HAL_TIM_IC_CaptureCallback>
 8008f88:	e005      	b.n	8008f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f93f 	bl	800920e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f950 	bl	8009236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f003 0310 	and.w	r3, r3, #16
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d020      	beq.n	8008fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d01b      	beq.n	8008fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f06f 0210 	mvn.w	r2, #16
 8008fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2208      	movs	r2, #8
 8008fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f927 	bl	8009222 <HAL_TIM_IC_CaptureCallback>
 8008fd4:	e005      	b.n	8008fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f919 	bl	800920e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f92a 	bl	8009236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00c      	beq.n	800900c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d007      	beq.n	800900c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f06f 0201 	mvn.w	r2, #1
 8009004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7f8 fc10 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00c      	beq.n	8009030 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fae4 	bl	80095f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00c      	beq.n	8009054 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800904c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f8fb 	bl	800924a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00c      	beq.n	8009078 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f003 0320 	and.w	r3, r3, #32
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f06f 0220 	mvn.w	r2, #32
 8009070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fab6 	bl	80095e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009078:	bf00      	nop
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_TIM_ConfigClockSource+0x1c>
 8009098:	2302      	movs	r3, #2
 800909a:	e0b4      	b.n	8009206 <HAL_TIM_ConfigClockSource+0x186>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090d4:	d03e      	beq.n	8009154 <HAL_TIM_ConfigClockSource+0xd4>
 80090d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090da:	f200 8087 	bhi.w	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 80090de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090e2:	f000 8086 	beq.w	80091f2 <HAL_TIM_ConfigClockSource+0x172>
 80090e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090ea:	d87f      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 80090ec:	2b70      	cmp	r3, #112	@ 0x70
 80090ee:	d01a      	beq.n	8009126 <HAL_TIM_ConfigClockSource+0xa6>
 80090f0:	2b70      	cmp	r3, #112	@ 0x70
 80090f2:	d87b      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 80090f4:	2b60      	cmp	r3, #96	@ 0x60
 80090f6:	d050      	beq.n	800919a <HAL_TIM_ConfigClockSource+0x11a>
 80090f8:	2b60      	cmp	r3, #96	@ 0x60
 80090fa:	d877      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 80090fc:	2b50      	cmp	r3, #80	@ 0x50
 80090fe:	d03c      	beq.n	800917a <HAL_TIM_ConfigClockSource+0xfa>
 8009100:	2b50      	cmp	r3, #80	@ 0x50
 8009102:	d873      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 8009104:	2b40      	cmp	r3, #64	@ 0x40
 8009106:	d058      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0x13a>
 8009108:	2b40      	cmp	r3, #64	@ 0x40
 800910a:	d86f      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 800910c:	2b30      	cmp	r3, #48	@ 0x30
 800910e:	d064      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x15a>
 8009110:	2b30      	cmp	r3, #48	@ 0x30
 8009112:	d86b      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 8009114:	2b20      	cmp	r3, #32
 8009116:	d060      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x15a>
 8009118:	2b20      	cmp	r3, #32
 800911a:	d867      	bhi.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d05c      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x15a>
 8009120:	2b10      	cmp	r3, #16
 8009122:	d05a      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x15a>
 8009124:	e062      	b.n	80091ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009136:	f000 f9b9 	bl	80094ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	609a      	str	r2, [r3, #8]
      break;
 8009152:	e04f      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009164:	f000 f9a2 	bl	80094ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009176:	609a      	str	r2, [r3, #8]
      break;
 8009178:	e03c      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009186:	461a      	mov	r2, r3
 8009188:	f000 f916 	bl	80093b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2150      	movs	r1, #80	@ 0x50
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f96f 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 8009198:	e02c      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091a6:	461a      	mov	r2, r3
 80091a8:	f000 f935 	bl	8009416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2160      	movs	r1, #96	@ 0x60
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 f95f 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 80091b8:	e01c      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091c6:	461a      	mov	r2, r3
 80091c8:	f000 f8f6 	bl	80093b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2140      	movs	r1, #64	@ 0x40
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f94f 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 80091d8:	e00c      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f000 f946 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 80091ea:	e003      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
      break;
 80091f0:	e000      	b.n	80091f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009204:	7bfb      	ldrb	r3, [r7, #15]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800923e:	bf00      	nop
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a46      	ldr	r2, [pc, #280]	@ (800938c <TIM_Base_SetConfig+0x12c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d013      	beq.n	80092a0 <TIM_Base_SetConfig+0x40>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927e:	d00f      	beq.n	80092a0 <TIM_Base_SetConfig+0x40>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a43      	ldr	r2, [pc, #268]	@ (8009390 <TIM_Base_SetConfig+0x130>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_Base_SetConfig+0x40>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a42      	ldr	r2, [pc, #264]	@ (8009394 <TIM_Base_SetConfig+0x134>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_Base_SetConfig+0x40>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a41      	ldr	r2, [pc, #260]	@ (8009398 <TIM_Base_SetConfig+0x138>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_Base_SetConfig+0x40>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a40      	ldr	r2, [pc, #256]	@ (800939c <TIM_Base_SetConfig+0x13c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d108      	bne.n	80092b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a35      	ldr	r2, [pc, #212]	@ (800938c <TIM_Base_SetConfig+0x12c>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d02b      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c0:	d027      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a32      	ldr	r2, [pc, #200]	@ (8009390 <TIM_Base_SetConfig+0x130>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d023      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a31      	ldr	r2, [pc, #196]	@ (8009394 <TIM_Base_SetConfig+0x134>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d01f      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a30      	ldr	r2, [pc, #192]	@ (8009398 <TIM_Base_SetConfig+0x138>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d01b      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a2f      	ldr	r2, [pc, #188]	@ (800939c <TIM_Base_SetConfig+0x13c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d017      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a2e      	ldr	r2, [pc, #184]	@ (80093a0 <TIM_Base_SetConfig+0x140>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d013      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a2d      	ldr	r2, [pc, #180]	@ (80093a4 <TIM_Base_SetConfig+0x144>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00f      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a2c      	ldr	r2, [pc, #176]	@ (80093a8 <TIM_Base_SetConfig+0x148>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00b      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a2b      	ldr	r2, [pc, #172]	@ (80093ac <TIM_Base_SetConfig+0x14c>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d007      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a2a      	ldr	r2, [pc, #168]	@ (80093b0 <TIM_Base_SetConfig+0x150>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d003      	beq.n	8009312 <TIM_Base_SetConfig+0xb2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a29      	ldr	r2, [pc, #164]	@ (80093b4 <TIM_Base_SetConfig+0x154>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d108      	bne.n	8009324 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4313      	orrs	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a10      	ldr	r2, [pc, #64]	@ (800938c <TIM_Base_SetConfig+0x12c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d003      	beq.n	8009358 <TIM_Base_SetConfig+0xf8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a12      	ldr	r2, [pc, #72]	@ (800939c <TIM_Base_SetConfig+0x13c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d103      	bne.n	8009360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b01      	cmp	r3, #1
 8009370:	d105      	bne.n	800937e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f023 0201 	bic.w	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	611a      	str	r2, [r3, #16]
  }
}
 800937e:	bf00      	nop
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	40010000 	.word	0x40010000
 8009390:	40000400 	.word	0x40000400
 8009394:	40000800 	.word	0x40000800
 8009398:	40000c00 	.word	0x40000c00
 800939c:	40010400 	.word	0x40010400
 80093a0:	40014000 	.word	0x40014000
 80093a4:	40014400 	.word	0x40014400
 80093a8:	40014800 	.word	0x40014800
 80093ac:	40001800 	.word	0x40001800
 80093b0:	40001c00 	.word	0x40001c00
 80093b4:	40002000 	.word	0x40002000

080093b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f023 0201 	bic.w	r2, r3, #1
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80093e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f023 030a 	bic.w	r3, r3, #10
 80093f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	621a      	str	r2, [r3, #32]
}
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009416:	b480      	push	{r7}
 8009418:	b087      	sub	sp, #28
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6a1b      	ldr	r3, [r3, #32]
 800942c:	f023 0210 	bic.w	r2, r3, #16
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	031b      	lsls	r3, r3, #12
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009452:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	011b      	lsls	r3, r3, #4
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	621a      	str	r2, [r3, #32]
}
 800946a:	bf00      	nop
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009476:	b480      	push	{r7}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800948c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	f043 0307 	orr.w	r3, r3, #7
 8009498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	609a      	str	r2, [r3, #8]
}
 80094a0:	bf00      	nop
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	021a      	lsls	r2, r3, #8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	609a      	str	r2, [r3, #8]
}
 80094e0:	bf00      	nop
 80094e2:	371c      	adds	r7, #28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d101      	bne.n	8009504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009500:	2302      	movs	r3, #2
 8009502:	e05a      	b.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a21      	ldr	r2, [pc, #132]	@ (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d022      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009550:	d01d      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1d      	ldr	r2, [pc, #116]	@ (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d018      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1b      	ldr	r2, [pc, #108]	@ (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d013      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1a      	ldr	r2, [pc, #104]	@ (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00e      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a18      	ldr	r2, [pc, #96]	@ (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d009      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a17      	ldr	r2, [pc, #92]	@ (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d004      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a15      	ldr	r2, [pc, #84]	@ (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d10c      	bne.n	80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4313      	orrs	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	40010400 	.word	0x40010400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40001800 	.word	0x40001800

080095e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e042      	b.n	80096a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	d106      	bne.n	8009638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f7fa fe94 	bl	8004360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2224      	movs	r2, #36	@ 0x24
 800963c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800964e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fc85 	bl	8009f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	695a      	ldr	r2, [r3, #20]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2220      	movs	r2, #32
 8009698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b0ba      	sub	sp, #232	@ 0xe8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80096d8:	2300      	movs	r3, #0
 80096da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80096ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10f      	bne.n	8009712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_UART_IRQHandler+0x66>
 80096fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fb69 	bl	8009de2 <UART_Receive_IT>
      return;
 8009710:	e25b      	b.n	8009bca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009716:	2b00      	cmp	r3, #0
 8009718:	f000 80de 	beq.w	80098d8 <HAL_UART_IRQHandler+0x22c>
 800971c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d106      	bne.n	8009736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800972c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80d1 	beq.w	80098d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <HAL_UART_IRQHandler+0xae>
 8009742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009752:	f043 0201 	orr.w	r2, r3, #1
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800975a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975e:	f003 0304 	and.w	r3, r3, #4
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00b      	beq.n	800977e <HAL_UART_IRQHandler+0xd2>
 8009766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	f043 0202 	orr.w	r2, r3, #2
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00b      	beq.n	80097a2 <HAL_UART_IRQHandler+0xf6>
 800978a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	d005      	beq.n	80097a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800979a:	f043 0204 	orr.w	r2, r3, #4
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d011      	beq.n	80097d2 <HAL_UART_IRQHandler+0x126>
 80097ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80097ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d005      	beq.n	80097d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ca:	f043 0208 	orr.w	r2, r3, #8
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 81f2 	beq.w	8009bc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d008      	beq.n	80097fa <HAL_UART_IRQHandler+0x14e>
 80097e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ec:	f003 0320 	and.w	r3, r3, #32
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d002      	beq.n	80097fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 faf4 	bl	8009de2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009804:	2b40      	cmp	r3, #64	@ 0x40
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <HAL_UART_IRQHandler+0x17a>
 800981e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009822:	2b00      	cmp	r3, #0
 8009824:	d04f      	beq.n	80098c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f9fc 	bl	8009c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009836:	2b40      	cmp	r3, #64	@ 0x40
 8009838:	d141      	bne.n	80098be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3314      	adds	r3, #20
 8009840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800986a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800987e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1d9      	bne.n	800983a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d013      	beq.n	80098b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009892:	4a7e      	ldr	r2, [pc, #504]	@ (8009a8c <HAL_UART_IRQHandler+0x3e0>)
 8009894:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989a:	4618      	mov	r0, r3
 800989c:	f7fb fbcc 	bl	8005038 <HAL_DMA_Abort_IT>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d016      	beq.n	80098d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80098b0:	4610      	mov	r0, r2
 80098b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b4:	e00e      	b.n	80098d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f99e 	bl	8009bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098bc:	e00a      	b.n	80098d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f99a 	bl	8009bf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c4:	e006      	b.n	80098d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f996 	bl	8009bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80098d2:	e175      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d4:	bf00      	nop
    return;
 80098d6:	e173      	b.n	8009bc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098dc:	2b01      	cmp	r3, #1
 80098de:	f040 814f 	bne.w	8009b80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8148 	beq.w	8009b80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80098f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f4:	f003 0310 	and.w	r3, r3, #16
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8141 	beq.w	8009b80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60bb      	str	r3, [r7, #8]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	60bb      	str	r3, [r7, #8]
 8009912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991e:	2b40      	cmp	r3, #64	@ 0x40
 8009920:	f040 80b6 	bne.w	8009a90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8145 	beq.w	8009bc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800993e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009942:	429a      	cmp	r2, r3
 8009944:	f080 813e 	bcs.w	8009bc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800994e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800995a:	f000 8088 	beq.w	8009a6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	330c      	adds	r3, #12
 8009964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800996c:	e853 3f00 	ldrex	r3, [r3]
 8009970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800997c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800998a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800998e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800999a:	e841 2300 	strex	r3, r2, [r1]
 800999e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1d9      	bne.n	800995e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3314      	adds	r3, #20
 80099b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80099ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80099bc:	f023 0301 	bic.w	r3, r3, #1
 80099c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3314      	adds	r3, #20
 80099ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80099ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80099d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80099d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80099e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e1      	bne.n	80099aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3314      	adds	r3, #20
 80099ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3314      	adds	r3, #20
 8009a06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e3      	bne.n	80099e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2220      	movs	r2, #32
 8009a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	330c      	adds	r3, #12
 8009a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a36:	e853 3f00 	ldrex	r3, [r3]
 8009a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a3e:	f023 0310 	bic.w	r3, r3, #16
 8009a42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	330c      	adds	r3, #12
 8009a4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009a52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a58:	e841 2300 	strex	r3, r2, [r1]
 8009a5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1e3      	bne.n	8009a2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fb fa75 	bl	8004f58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2202      	movs	r2, #2
 8009a72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f8c1 	bl	8009c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a8a:	e09b      	b.n	8009bc4 <HAL_UART_IRQHandler+0x518>
 8009a8c:	08009ceb 	.word	0x08009ceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 808e 	beq.w	8009bc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8089 	beq.w	8009bc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	330c      	adds	r3, #12
 8009abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	330c      	adds	r3, #12
 8009ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009ada:	647a      	str	r2, [r7, #68]	@ 0x44
 8009adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e3      	bne.n	8009ab6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3314      	adds	r3, #20
 8009af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	623b      	str	r3, [r7, #32]
   return(result);
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	f023 0301 	bic.w	r3, r3, #1
 8009b04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3314      	adds	r3, #20
 8009b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b12:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e3      	bne.n	8009aee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009b58:	61fa      	str	r2, [r7, #28]
 8009b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	69b9      	ldr	r1, [r7, #24]
 8009b5e:	69fa      	ldr	r2, [r7, #28]
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	617b      	str	r3, [r7, #20]
   return(result);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e3      	bne.n	8009b34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f847 	bl	8009c0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b7e:	e023      	b.n	8009bc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x4f4>
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8ba 	bl	8009d12 <UART_Transmit_IT>
    return;
 8009b9e:	e014      	b.n	8009bca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <HAL_UART_IRQHandler+0x51e>
 8009bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d008      	beq.n	8009bca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f8fa 	bl	8009db2 <UART_EndTransmit_IT>
    return;
 8009bbe:	e004      	b.n	8009bca <HAL_UART_IRQHandler+0x51e>
    return;
 8009bc0:	bf00      	nop
 8009bc2:	e002      	b.n	8009bca <HAL_UART_IRQHandler+0x51e>
      return;
 8009bc4:	bf00      	nop
 8009bc6:	e000      	b.n	8009bca <HAL_UART_IRQHandler+0x51e>
      return;
 8009bc8:	bf00      	nop
  }
}
 8009bca:	37e8      	adds	r7, #232	@ 0xe8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b095      	sub	sp, #84	@ 0x54
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f023 0301 	bic.w	r3, r3, #1
 8009c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e5      	bne.n	8009c60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d119      	bne.n	8009cd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	330c      	adds	r3, #12
 8009ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f023 0310 	bic.w	r3, r3, #16
 8009cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	330c      	adds	r3, #12
 8009cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cbc:	61ba      	str	r2, [r7, #24]
 8009cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	6979      	ldr	r1, [r7, #20]
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e5      	bne.n	8009c9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009cde:	bf00      	nop
 8009ce0:	3754      	adds	r7, #84	@ 0x54
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f7ff ff77 	bl	8009bf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b085      	sub	sp, #20
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b21      	cmp	r3, #33	@ 0x21
 8009d24:	d13e      	bne.n	8009da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d2e:	d114      	bne.n	8009d5a <UART_Transmit_IT+0x48>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d110      	bne.n	8009d5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	1c9a      	adds	r2, r3, #2
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	621a      	str	r2, [r3, #32]
 8009d58:	e008      	b.n	8009d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	1c59      	adds	r1, r3, #1
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	6211      	str	r1, [r2, #32]
 8009d64:	781a      	ldrb	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10f      	bne.n	8009da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	e000      	b.n	8009da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009da4:	2302      	movs	r3, #2
  }
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2220      	movs	r2, #32
 8009dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7ff fefc 	bl	8009bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b08c      	sub	sp, #48	@ 0x30
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	2b22      	cmp	r3, #34	@ 0x22
 8009df4:	f040 80ae 	bne.w	8009f54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e00:	d117      	bne.n	8009e32 <UART_Receive_IT+0x50>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d113      	bne.n	8009e32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2a:	1c9a      	adds	r2, r3, #2
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e30:	e026      	b.n	8009e80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e44:	d007      	beq.n	8009e56 <UART_Receive_IT+0x74>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <UART_Receive_IT+0x82>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e60:	701a      	strb	r2, [r3, #0]
 8009e62:	e008      	b.n	8009e76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d15d      	bne.n	8009f50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68da      	ldr	r2, [r3, #12]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0220 	bic.w	r2, r2, #32
 8009ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68da      	ldr	r2, [r3, #12]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695a      	ldr	r2, [r3, #20]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d135      	bne.n	8009f46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	e853 3f00 	ldrex	r3, [r3]
 8009eee:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f023 0310 	bic.w	r3, r3, #16
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	330c      	adds	r3, #12
 8009efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f00:	623a      	str	r2, [r7, #32]
 8009f02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	69f9      	ldr	r1, [r7, #28]
 8009f06:	6a3a      	ldr	r2, [r7, #32]
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e5      	bne.n	8009ee0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0310 	and.w	r3, r3, #16
 8009f1e:	2b10      	cmp	r3, #16
 8009f20:	d10a      	bne.n	8009f38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	60fb      	str	r3, [r7, #12]
 8009f36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7ff fe64 	bl	8009c0c <HAL_UARTEx_RxEventCallback>
 8009f44:	e002      	b.n	8009f4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff fe4c 	bl	8009be4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	e002      	b.n	8009f56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	e000      	b.n	8009f56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009f54:	2302      	movs	r3, #2
  }
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3730      	adds	r7, #48	@ 0x30
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f64:	b0c0      	sub	sp, #256	@ 0x100
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7c:	68d9      	ldr	r1, [r3, #12]
 8009f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	ea40 0301 	orr.w	r3, r0, r1
 8009f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	431a      	orrs	r2, r3
 8009f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009fb8:	f021 010c 	bic.w	r1, r1, #12
 8009fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009fc6:	430b      	orrs	r3, r1
 8009fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fda:	6999      	ldr	r1, [r3, #24]
 8009fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	ea40 0301 	orr.w	r3, r0, r1
 8009fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4b8f      	ldr	r3, [pc, #572]	@ (800a22c <UART_SetConfig+0x2cc>)
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d005      	beq.n	800a000 <UART_SetConfig+0xa0>
 8009ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	4b8d      	ldr	r3, [pc, #564]	@ (800a230 <UART_SetConfig+0x2d0>)
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d104      	bne.n	800a00a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a000:	f7fc f8e0 	bl	80061c4 <HAL_RCC_GetPCLK2Freq>
 800a004:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a008:	e003      	b.n	800a012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a00a:	f7fc f8c7 	bl	800619c <HAL_RCC_GetPCLK1Freq>
 800a00e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a01c:	f040 810c 	bne.w	800a238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a024:	2200      	movs	r2, #0
 800a026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a02a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a02e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a032:	4622      	mov	r2, r4
 800a034:	462b      	mov	r3, r5
 800a036:	1891      	adds	r1, r2, r2
 800a038:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a03a:	415b      	adcs	r3, r3
 800a03c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a042:	4621      	mov	r1, r4
 800a044:	eb12 0801 	adds.w	r8, r2, r1
 800a048:	4629      	mov	r1, r5
 800a04a:	eb43 0901 	adc.w	r9, r3, r1
 800a04e:	f04f 0200 	mov.w	r2, #0
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a05a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a05e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a062:	4690      	mov	r8, r2
 800a064:	4699      	mov	r9, r3
 800a066:	4623      	mov	r3, r4
 800a068:	eb18 0303 	adds.w	r3, r8, r3
 800a06c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a070:	462b      	mov	r3, r5
 800a072:	eb49 0303 	adc.w	r3, r9, r3
 800a076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a086:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a08a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a08e:	460b      	mov	r3, r1
 800a090:	18db      	adds	r3, r3, r3
 800a092:	653b      	str	r3, [r7, #80]	@ 0x50
 800a094:	4613      	mov	r3, r2
 800a096:	eb42 0303 	adc.w	r3, r2, r3
 800a09a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a09c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a0a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a0a4:	f7f6 f898 	bl	80001d8 <__aeabi_uldivmod>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4b61      	ldr	r3, [pc, #388]	@ (800a234 <UART_SetConfig+0x2d4>)
 800a0ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a0b2:	095b      	lsrs	r3, r3, #5
 800a0b4:	011c      	lsls	r4, r3, #4
 800a0b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a0c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a0c8:	4642      	mov	r2, r8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	1891      	adds	r1, r2, r2
 800a0ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a0d0:	415b      	adcs	r3, r3
 800a0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a0d8:	4641      	mov	r1, r8
 800a0da:	eb12 0a01 	adds.w	sl, r2, r1
 800a0de:	4649      	mov	r1, r9
 800a0e0:	eb43 0b01 	adc.w	fp, r3, r1
 800a0e4:	f04f 0200 	mov.w	r2, #0
 800a0e8:	f04f 0300 	mov.w	r3, #0
 800a0ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a0f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a0f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0f8:	4692      	mov	sl, r2
 800a0fa:	469b      	mov	fp, r3
 800a0fc:	4643      	mov	r3, r8
 800a0fe:	eb1a 0303 	adds.w	r3, sl, r3
 800a102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a106:	464b      	mov	r3, r9
 800a108:	eb4b 0303 	adc.w	r3, fp, r3
 800a10c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a11c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a124:	460b      	mov	r3, r1
 800a126:	18db      	adds	r3, r3, r3
 800a128:	643b      	str	r3, [r7, #64]	@ 0x40
 800a12a:	4613      	mov	r3, r2
 800a12c:	eb42 0303 	adc.w	r3, r2, r3
 800a130:	647b      	str	r3, [r7, #68]	@ 0x44
 800a132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a13a:	f7f6 f84d 	bl	80001d8 <__aeabi_uldivmod>
 800a13e:	4602      	mov	r2, r0
 800a140:	460b      	mov	r3, r1
 800a142:	4611      	mov	r1, r2
 800a144:	4b3b      	ldr	r3, [pc, #236]	@ (800a234 <UART_SetConfig+0x2d4>)
 800a146:	fba3 2301 	umull	r2, r3, r3, r1
 800a14a:	095b      	lsrs	r3, r3, #5
 800a14c:	2264      	movs	r2, #100	@ 0x64
 800a14e:	fb02 f303 	mul.w	r3, r2, r3
 800a152:	1acb      	subs	r3, r1, r3
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a15a:	4b36      	ldr	r3, [pc, #216]	@ (800a234 <UART_SetConfig+0x2d4>)
 800a15c:	fba3 2302 	umull	r2, r3, r3, r2
 800a160:	095b      	lsrs	r3, r3, #5
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a168:	441c      	add	r4, r3
 800a16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a174:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	1891      	adds	r1, r2, r2
 800a182:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a184:	415b      	adcs	r3, r3
 800a186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a18c:	4641      	mov	r1, r8
 800a18e:	1851      	adds	r1, r2, r1
 800a190:	6339      	str	r1, [r7, #48]	@ 0x30
 800a192:	4649      	mov	r1, r9
 800a194:	414b      	adcs	r3, r1
 800a196:	637b      	str	r3, [r7, #52]	@ 0x34
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	00cb      	lsls	r3, r1, #3
 800a1a8:	4651      	mov	r1, sl
 800a1aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1ae:	4651      	mov	r1, sl
 800a1b0:	00ca      	lsls	r2, r1, #3
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	460a      	mov	r2, r1
 800a1c4:	eb42 0303 	adc.w	r3, r2, r3
 800a1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a1d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a1dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	18db      	adds	r3, r3, r3
 800a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	eb42 0303 	adc.w	r3, r2, r3
 800a1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a1f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a1f6:	f7f5 ffef 	bl	80001d8 <__aeabi_uldivmod>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a234 <UART_SetConfig+0x2d4>)
 800a200:	fba3 1302 	umull	r1, r3, r3, r2
 800a204:	095b      	lsrs	r3, r3, #5
 800a206:	2164      	movs	r1, #100	@ 0x64
 800a208:	fb01 f303 	mul.w	r3, r1, r3
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	3332      	adds	r3, #50	@ 0x32
 800a212:	4a08      	ldr	r2, [pc, #32]	@ (800a234 <UART_SetConfig+0x2d4>)
 800a214:	fba2 2303 	umull	r2, r3, r2, r3
 800a218:	095b      	lsrs	r3, r3, #5
 800a21a:	f003 0207 	and.w	r2, r3, #7
 800a21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4422      	add	r2, r4
 800a226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a228:	e106      	b.n	800a438 <UART_SetConfig+0x4d8>
 800a22a:	bf00      	nop
 800a22c:	40011000 	.word	0x40011000
 800a230:	40011400 	.word	0x40011400
 800a234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a242:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a24a:	4642      	mov	r2, r8
 800a24c:	464b      	mov	r3, r9
 800a24e:	1891      	adds	r1, r2, r2
 800a250:	6239      	str	r1, [r7, #32]
 800a252:	415b      	adcs	r3, r3
 800a254:	627b      	str	r3, [r7, #36]	@ 0x24
 800a256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a25a:	4641      	mov	r1, r8
 800a25c:	1854      	adds	r4, r2, r1
 800a25e:	4649      	mov	r1, r9
 800a260:	eb43 0501 	adc.w	r5, r3, r1
 800a264:	f04f 0200 	mov.w	r2, #0
 800a268:	f04f 0300 	mov.w	r3, #0
 800a26c:	00eb      	lsls	r3, r5, #3
 800a26e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a272:	00e2      	lsls	r2, r4, #3
 800a274:	4614      	mov	r4, r2
 800a276:	461d      	mov	r5, r3
 800a278:	4643      	mov	r3, r8
 800a27a:	18e3      	adds	r3, r4, r3
 800a27c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a280:	464b      	mov	r3, r9
 800a282:	eb45 0303 	adc.w	r3, r5, r3
 800a286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	f04f 0300 	mov.w	r3, #0
 800a2a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	008b      	lsls	r3, r1, #2
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	008a      	lsls	r2, r1, #2
 800a2b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a2b8:	f7f5 ff8e 	bl	80001d8 <__aeabi_uldivmod>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4b60      	ldr	r3, [pc, #384]	@ (800a444 <UART_SetConfig+0x4e4>)
 800a2c2:	fba3 2302 	umull	r2, r3, r3, r2
 800a2c6:	095b      	lsrs	r3, r3, #5
 800a2c8:	011c      	lsls	r4, r3, #4
 800a2ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a2d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a2d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a2dc:	4642      	mov	r2, r8
 800a2de:	464b      	mov	r3, r9
 800a2e0:	1891      	adds	r1, r2, r2
 800a2e2:	61b9      	str	r1, [r7, #24]
 800a2e4:	415b      	adcs	r3, r3
 800a2e6:	61fb      	str	r3, [r7, #28]
 800a2e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	1851      	adds	r1, r2, r1
 800a2f0:	6139      	str	r1, [r7, #16]
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	414b      	adcs	r3, r1
 800a2f6:	617b      	str	r3, [r7, #20]
 800a2f8:	f04f 0200 	mov.w	r2, #0
 800a2fc:	f04f 0300 	mov.w	r3, #0
 800a300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a304:	4659      	mov	r1, fp
 800a306:	00cb      	lsls	r3, r1, #3
 800a308:	4651      	mov	r1, sl
 800a30a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a30e:	4651      	mov	r1, sl
 800a310:	00ca      	lsls	r2, r1, #3
 800a312:	4610      	mov	r0, r2
 800a314:	4619      	mov	r1, r3
 800a316:	4603      	mov	r3, r0
 800a318:	4642      	mov	r2, r8
 800a31a:	189b      	adds	r3, r3, r2
 800a31c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a320:	464b      	mov	r3, r9
 800a322:	460a      	mov	r2, r1
 800a324:	eb42 0303 	adc.w	r3, r2, r3
 800a328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a336:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a338:	f04f 0200 	mov.w	r2, #0
 800a33c:	f04f 0300 	mov.w	r3, #0
 800a340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a344:	4649      	mov	r1, r9
 800a346:	008b      	lsls	r3, r1, #2
 800a348:	4641      	mov	r1, r8
 800a34a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a34e:	4641      	mov	r1, r8
 800a350:	008a      	lsls	r2, r1, #2
 800a352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a356:	f7f5 ff3f 	bl	80001d8 <__aeabi_uldivmod>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	4b38      	ldr	r3, [pc, #224]	@ (800a444 <UART_SetConfig+0x4e4>)
 800a362:	fba3 2301 	umull	r2, r3, r3, r1
 800a366:	095b      	lsrs	r3, r3, #5
 800a368:	2264      	movs	r2, #100	@ 0x64
 800a36a:	fb02 f303 	mul.w	r3, r2, r3
 800a36e:	1acb      	subs	r3, r1, r3
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	3332      	adds	r3, #50	@ 0x32
 800a374:	4a33      	ldr	r2, [pc, #204]	@ (800a444 <UART_SetConfig+0x4e4>)
 800a376:	fba2 2303 	umull	r2, r3, r2, r3
 800a37a:	095b      	lsrs	r3, r3, #5
 800a37c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a380:	441c      	add	r4, r3
 800a382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a386:	2200      	movs	r2, #0
 800a388:	673b      	str	r3, [r7, #112]	@ 0x70
 800a38a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a38c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a390:	4642      	mov	r2, r8
 800a392:	464b      	mov	r3, r9
 800a394:	1891      	adds	r1, r2, r2
 800a396:	60b9      	str	r1, [r7, #8]
 800a398:	415b      	adcs	r3, r3
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	1851      	adds	r1, r2, r1
 800a3a4:	6039      	str	r1, [r7, #0]
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	414b      	adcs	r3, r1
 800a3aa:	607b      	str	r3, [r7, #4]
 800a3ac:	f04f 0200 	mov.w	r2, #0
 800a3b0:	f04f 0300 	mov.w	r3, #0
 800a3b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3b8:	4659      	mov	r1, fp
 800a3ba:	00cb      	lsls	r3, r1, #3
 800a3bc:	4651      	mov	r1, sl
 800a3be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3c2:	4651      	mov	r1, sl
 800a3c4:	00ca      	lsls	r2, r1, #3
 800a3c6:	4610      	mov	r0, r2
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	4642      	mov	r2, r8
 800a3ce:	189b      	adds	r3, r3, r2
 800a3d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3d2:	464b      	mov	r3, r9
 800a3d4:	460a      	mov	r2, r1
 800a3d6:	eb42 0303 	adc.w	r3, r2, r3
 800a3da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3e6:	667a      	str	r2, [r7, #100]	@ 0x64
 800a3e8:	f04f 0200 	mov.w	r2, #0
 800a3ec:	f04f 0300 	mov.w	r3, #0
 800a3f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a3f4:	4649      	mov	r1, r9
 800a3f6:	008b      	lsls	r3, r1, #2
 800a3f8:	4641      	mov	r1, r8
 800a3fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3fe:	4641      	mov	r1, r8
 800a400:	008a      	lsls	r2, r1, #2
 800a402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a406:	f7f5 fee7 	bl	80001d8 <__aeabi_uldivmod>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4b0d      	ldr	r3, [pc, #52]	@ (800a444 <UART_SetConfig+0x4e4>)
 800a410:	fba3 1302 	umull	r1, r3, r3, r2
 800a414:	095b      	lsrs	r3, r3, #5
 800a416:	2164      	movs	r1, #100	@ 0x64
 800a418:	fb01 f303 	mul.w	r3, r1, r3
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	3332      	adds	r3, #50	@ 0x32
 800a422:	4a08      	ldr	r2, [pc, #32]	@ (800a444 <UART_SetConfig+0x4e4>)
 800a424:	fba2 2303 	umull	r2, r3, r2, r3
 800a428:	095b      	lsrs	r3, r3, #5
 800a42a:	f003 020f 	and.w	r2, r3, #15
 800a42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4422      	add	r2, r4
 800a436:	609a      	str	r2, [r3, #8]
}
 800a438:	bf00      	nop
 800a43a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a43e:	46bd      	mov	sp, r7
 800a440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a444:	51eb851f 	.word	0x51eb851f

0800a448 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a448:	b084      	sub	sp, #16
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	f107 001c 	add.w	r0, r7, #28
 800a456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a45e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a460:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a462:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a466:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a46a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a46e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a472:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a482:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3714      	adds	r7, #20
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	b004      	add	sp, #16
 800a49c:	4770      	bx	lr

0800a49e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2203      	movs	r2, #3
 800a4e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	370c      	adds	r7, #12
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0303 	and.w	r3, r3, #3
}
 800a506:	4618      	mov	r0, r3
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a512:	b480      	push	{r7}
 800a514:	b085      	sub	sp, #20
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
 800a51a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a530:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a536:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a53c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a54c:	f023 030f 	bic.w	r3, r3, #15
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	431a      	orrs	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	b2db      	uxtb	r3, r3
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3314      	adds	r3, #20
 800a58e:	461a      	mov	r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	4413      	add	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
}  
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5cc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a5d2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a5d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0

}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b088      	sub	sp, #32
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a60c:	2310      	movs	r3, #16
 800a60e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a610:	2340      	movs	r3, #64	@ 0x40
 800a612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a614:	2300      	movs	r3, #0
 800a616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a61c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a61e:	f107 0308 	add.w	r3, r7, #8
 800a622:	4619      	mov	r1, r3
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff ff74 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a62a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a62e:	2110      	movs	r1, #16
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f9d7 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a638:	69fb      	ldr	r3, [r7, #28]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3720      	adds	r7, #32
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b088      	sub	sp, #32
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a650:	2311      	movs	r3, #17
 800a652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a654:	2340      	movs	r3, #64	@ 0x40
 800a656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a65c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a660:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a662:	f107 0308 	add.w	r3, r7, #8
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7ff ff52 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a66e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a672:	2111      	movs	r1, #17
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f9b5 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a67a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a67c:	69fb      	ldr	r3, [r7, #28]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3720      	adds	r7, #32
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b088      	sub	sp, #32
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a694:	2312      	movs	r3, #18
 800a696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a698:	2340      	movs	r3, #64	@ 0x40
 800a69a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a69c:	2300      	movs	r3, #0
 800a69e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6a6:	f107 0308 	add.w	r3, r7, #8
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff ff30 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a6b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6b6:	2112      	movs	r1, #18
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f993 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6c0:	69fb      	ldr	r3, [r7, #28]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a6d8:	2318      	movs	r3, #24
 800a6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6dc:	2340      	movs	r3, #64	@ 0x40
 800a6de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6ea:	f107 0308 	add.w	r3, r7, #8
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff ff0e 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a6f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6fa:	2118      	movs	r1, #24
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f000 f971 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a704:	69fb      	ldr	r3, [r7, #28]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3720      	adds	r7, #32
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b088      	sub	sp, #32
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a71c:	2319      	movs	r3, #25
 800a71e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a720:	2340      	movs	r3, #64	@ 0x40
 800a722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a724:	2300      	movs	r3, #0
 800a726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a72c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a72e:	f107 0308 	add.w	r3, r7, #8
 800a732:	4619      	mov	r1, r3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff feec 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a73a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a73e:	2119      	movs	r1, #25
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f94f 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a748:	69fb      	ldr	r3, [r7, #28]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3720      	adds	r7, #32
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a760:	230c      	movs	r3, #12
 800a762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a764:	2340      	movs	r3, #64	@ 0x40
 800a766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a768:	2300      	movs	r3, #0
 800a76a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a76c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a770:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a772:	f107 0308 	add.w	r3, r7, #8
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff feca 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a77e:	4a05      	ldr	r2, [pc, #20]	@ (800a794 <SDMMC_CmdStopTransfer+0x40>)
 800a780:	210c      	movs	r1, #12
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f92e 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a788:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a78a:	69fb      	ldr	r3, [r7, #28]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3720      	adds	r7, #32
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	05f5e100 	.word	0x05f5e100

0800a798 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	@ 0x28
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a7a8:	2307      	movs	r3, #7
 800a7aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7ac:	2340      	movs	r3, #64	@ 0x40
 800a7ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7ba:	f107 0310 	add.w	r3, r7, #16
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fea6 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a7c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7ca:	2107      	movs	r1, #7
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 f909 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a7d2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3728      	adds	r7, #40	@ 0x28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b088      	sub	sp, #32
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fe85 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fb23 	bl	800ae54 <SDMMC_GetCmdError>
 800a80e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a810:	69fb      	ldr	r3, [r7, #28]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b088      	sub	sp, #32
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a822:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a828:	2308      	movs	r3, #8
 800a82a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a82c:	2340      	movs	r3, #64	@ 0x40
 800a82e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a830:	2300      	movs	r3, #0
 800a832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a83a:	f107 0308 	add.w	r3, r7, #8
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff fe66 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fab6 	bl	800adb8 <SDMMC_GetCmdResp7>
 800a84c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a84e:	69fb      	ldr	r3, [r7, #28]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3720      	adds	r7, #32
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a866:	2337      	movs	r3, #55	@ 0x37
 800a868:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a86a:	2340      	movs	r3, #64	@ 0x40
 800a86c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a86e:	2300      	movs	r3, #0
 800a870:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a876:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a878:	f107 0308 	add.w	r3, r7, #8
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fe47 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a884:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a888:	2137      	movs	r1, #55	@ 0x37
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8aa 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a890:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a892:	69fb      	ldr	r3, [r7, #28]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3720      	adds	r7, #32
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b088      	sub	sp, #32
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a8ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a8b2:	2329      	movs	r3, #41	@ 0x29
 800a8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8b6:	2340      	movs	r3, #64	@ 0x40
 800a8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fe21 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f9bd 	bl	800ac50 <SDMMC_GetCmdResp3>
 800a8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3720      	adds	r7, #32
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b088      	sub	sp, #32
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a8f2:	23c0      	movs	r3, #192	@ 0xc0
 800a8f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a900:	f107 0308 	add.w	r3, r7, #8
 800a904:	4619      	mov	r1, r3
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fe03 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f957 	bl	800abc0 <SDMMC_GetCmdResp2>
 800a912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a914:	69fb      	ldr	r3, [r7, #28]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b088      	sub	sp, #32
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a92c:	2309      	movs	r3, #9
 800a92e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a930:	23c0      	movs	r3, #192	@ 0xc0
 800a932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a934:	2300      	movs	r3, #0
 800a936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a93c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a93e:	f107 0308 	add.w	r3, r7, #8
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff fde4 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f938 	bl	800abc0 <SDMMC_GetCmdResp2>
 800a950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a952:	69fb      	ldr	r3, [r7, #28]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3720      	adds	r7, #32
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b088      	sub	sp, #32
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a966:	2300      	movs	r3, #0
 800a968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a96a:	2303      	movs	r3, #3
 800a96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a96e:	2340      	movs	r3, #64	@ 0x40
 800a970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a97a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a97c:	f107 0308 	add.w	r3, r7, #8
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff fdc5 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	2103      	movs	r1, #3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f99d 	bl	800accc <SDMMC_GetCmdResp6>
 800a992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a994:	69fb      	ldr	r3, [r7, #28]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b088      	sub	sp, #32
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a9ac:	230d      	movs	r3, #13
 800a9ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9b0:	2340      	movs	r3, #64	@ 0x40
 800a9b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fda4 	bl	800a512 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a9ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ce:	210d      	movs	r1, #13
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f807 	bl	800a9e4 <SDMMC_GetCmdResp1>
 800a9d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3720      	adds	r7, #32
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
	...

0800a9e4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b088      	sub	sp, #32
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a9f2:	4b70      	ldr	r3, [pc, #448]	@ (800abb4 <SDMMC_GetCmdResp1+0x1d0>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a70      	ldr	r2, [pc, #448]	@ (800abb8 <SDMMC_GetCmdResp1+0x1d4>)
 800a9f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fc:	0a5a      	lsrs	r2, r3, #9
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	fb02 f303 	mul.w	r3, r2, r3
 800aa04:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	1e5a      	subs	r2, r3, #1
 800aa0a:	61fa      	str	r2, [r7, #28]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d102      	bne.n	800aa16 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa14:	e0c9      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa1a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0ef      	beq.n	800aa06 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1ea      	bne.n	800aa06 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa34:	f003 0304 	and.w	r3, r3, #4
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2204      	movs	r2, #4
 800aa40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa42:	2304      	movs	r3, #4
 800aa44:	e0b1      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa4a:	f003 0301 	and.w	r3, r3, #1
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d004      	beq.n	800aa5c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2201      	movs	r2, #1
 800aa56:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e0a6      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	22c5      	movs	r2, #197	@ 0xc5
 800aa60:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fd7f 	bl	800a566 <SDIO_GetCommandResponse>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	7afb      	ldrb	r3, [r7, #11]
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d001      	beq.n	800aa76 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e099      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa76:	2100      	movs	r1, #0
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff fd81 	bl	800a580 <SDIO_GetResponse>
 800aa7e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4b4e      	ldr	r3, [pc, #312]	@ (800abbc <SDMMC_GetCmdResp1+0x1d8>)
 800aa84:	4013      	ands	r3, r2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d101      	bne.n	800aa8e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e08d      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	da02      	bge.n	800aa9a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aa94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa98:	e087      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800aaa4:	2340      	movs	r3, #64	@ 0x40
 800aaa6:	e080      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800aab2:	2380      	movs	r3, #128	@ 0x80
 800aab4:	e079      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aac4:	e071      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800aad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aad4:	e069      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800aae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aae4:	e061      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d002      	beq.n	800aaf6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800aaf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aaf4:	e059      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d002      	beq.n	800ab06 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab04:	e051      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab14:	e049      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d002      	beq.n	800ab26 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ab20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab24:	e041      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ab30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab34:	e039      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ab40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ab44:	e031      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d002      	beq.n	800ab56 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ab50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ab54:	e029      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ab60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab64:	e021      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d002      	beq.n	800ab76 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ab70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab74:	e019      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d002      	beq.n	800ab86 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ab80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ab84:	e011      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ab90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ab94:	e009      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	f003 0308 	and.w	r3, r3, #8
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d002      	beq.n	800aba6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aba0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800aba4:	e001      	b.n	800abaa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3720      	adds	r7, #32
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20000010 	.word	0x20000010
 800abb8:	10624dd3 	.word	0x10624dd3
 800abbc:	fdffe008 	.word	0xfdffe008

0800abc0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abc8:	4b1f      	ldr	r3, [pc, #124]	@ (800ac48 <SDMMC_GetCmdResp2+0x88>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a1f      	ldr	r2, [pc, #124]	@ (800ac4c <SDMMC_GetCmdResp2+0x8c>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	0a5b      	lsrs	r3, r3, #9
 800abd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abd8:	fb02 f303 	mul.w	r3, r2, r3
 800abdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1e5a      	subs	r2, r3, #1
 800abe2:	60fa      	str	r2, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abe8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abec:	e026      	b.n	800ac3c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0ef      	beq.n	800abde <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1ea      	bne.n	800abde <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2204      	movs	r2, #4
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac1a:	2304      	movs	r3, #4
 800ac1c:	e00e      	b.n	800ac3c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d004      	beq.n	800ac34 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e003      	b.n	800ac3c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	22c5      	movs	r2, #197	@ 0xc5
 800ac38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	20000010 	.word	0x20000010
 800ac4c:	10624dd3 	.word	0x10624dd3

0800ac50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac58:	4b1a      	ldr	r3, [pc, #104]	@ (800acc4 <SDMMC_GetCmdResp3+0x74>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a1a      	ldr	r2, [pc, #104]	@ (800acc8 <SDMMC_GetCmdResp3+0x78>)
 800ac5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac62:	0a5b      	lsrs	r3, r3, #9
 800ac64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac68:	fb02 f303 	mul.w	r3, r2, r3
 800ac6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1e5a      	subs	r2, r3, #1
 800ac72:	60fa      	str	r2, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac7c:	e01b      	b.n	800acb6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d0ef      	beq.n	800ac6e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1ea      	bne.n	800ac6e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2204      	movs	r2, #4
 800aca8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800acaa:	2304      	movs	r3, #4
 800acac:	e003      	b.n	800acb6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	22c5      	movs	r2, #197	@ 0xc5
 800acb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3714      	adds	r7, #20
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	20000010 	.word	0x20000010
 800acc8:	10624dd3 	.word	0x10624dd3

0800accc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	460b      	mov	r3, r1
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acda:	4b35      	ldr	r3, [pc, #212]	@ (800adb0 <SDMMC_GetCmdResp6+0xe4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a35      	ldr	r2, [pc, #212]	@ (800adb4 <SDMMC_GetCmdResp6+0xe8>)
 800ace0:	fba2 2303 	umull	r2, r3, r2, r3
 800ace4:	0a5b      	lsrs	r3, r3, #9
 800ace6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acea:	fb02 f303 	mul.w	r3, r2, r3
 800acee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	1e5a      	subs	r2, r3, #1
 800acf4:	61fa      	str	r2, [r7, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d102      	bne.n	800ad00 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acfa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acfe:	e052      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad04:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d0ef      	beq.n	800acf0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1ea      	bne.n	800acf0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad1e:	f003 0304 	and.w	r3, r3, #4
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2204      	movs	r2, #4
 800ad2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	e03a      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e02f      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fc0d 	bl	800a566 <SDIO_GetCommandResponse>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d001      	beq.n	800ad5a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e025      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	22c5      	movs	r2, #197	@ 0xc5
 800ad5e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad60:	2100      	movs	r1, #0
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f7ff fc0c 	bl	800a580 <SDIO_GetResponse>
 800ad68:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	0c1b      	lsrs	r3, r3, #16
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e011      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad90:	e009      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ada0:	e001      	b.n	800ada6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ada2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000010 	.word	0x20000010
 800adb4:	10624dd3 	.word	0x10624dd3

0800adb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adc0:	4b22      	ldr	r3, [pc, #136]	@ (800ae4c <SDMMC_GetCmdResp7+0x94>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a22      	ldr	r2, [pc, #136]	@ (800ae50 <SDMMC_GetCmdResp7+0x98>)
 800adc6:	fba2 2303 	umull	r2, r3, r2, r3
 800adca:	0a5b      	lsrs	r3, r3, #9
 800adcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800add0:	fb02 f303 	mul.w	r3, r2, r3
 800add4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	60fa      	str	r2, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ade0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ade4:	e02c      	b.n	800ae40 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0ef      	beq.n	800add6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1ea      	bne.n	800add6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d004      	beq.n	800ae16 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2204      	movs	r2, #4
 800ae10:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae12:	2304      	movs	r3, #4
 800ae14:	e014      	b.n	800ae40 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d004      	beq.n	800ae2c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e009      	b.n	800ae40 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2240      	movs	r2, #64	@ 0x40
 800ae3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ae3e:	2300      	movs	r3, #0
  
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr
 800ae4c:	20000010 	.word	0x20000010
 800ae50:	10624dd3 	.word	0x10624dd3

0800ae54 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae5c:	4b11      	ldr	r3, [pc, #68]	@ (800aea4 <SDMMC_GetCmdError+0x50>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a11      	ldr	r2, [pc, #68]	@ (800aea8 <SDMMC_GetCmdError+0x54>)
 800ae62:	fba2 2303 	umull	r2, r3, r2, r3
 800ae66:	0a5b      	lsrs	r3, r3, #9
 800ae68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae6c:	fb02 f303 	mul.w	r3, r2, r3
 800ae70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1e5a      	subs	r2, r3, #1
 800ae76:	60fa      	str	r2, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d102      	bne.n	800ae82 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae80:	e009      	b.n	800ae96 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0f1      	beq.n	800ae72 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	22c5      	movs	r2, #197	@ 0xc5
 800ae92:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3714      	adds	r7, #20
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	20000010 	.word	0x20000010
 800aea8:	10624dd3 	.word	0x10624dd3

0800aeac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aeb0:	4904      	ldr	r1, [pc, #16]	@ (800aec4 <MX_FATFS_Init+0x18>)
 800aeb2:	4805      	ldr	r0, [pc, #20]	@ (800aec8 <MX_FATFS_Init+0x1c>)
 800aeb4:	f003 f886 	bl	800dfc4 <FATFS_LinkDriver>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b03      	ldr	r3, [pc, #12]	@ (800aecc <MX_FATFS_Init+0x20>)
 800aebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aec0:	bf00      	nop
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20014720 	.word	0x20014720
 800aec8:	0800f254 	.word	0x0800f254
 800aecc:	2001471c 	.word	0x2001471c

0800aed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aed0:	b480      	push	{r7}
 800aed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aed4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aeea:	f000 f86b 	bl	800afc4 <BSP_SD_IsDetected>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d001      	beq.n	800aef8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e005      	b.n	800af04 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800aef8:	4804      	ldr	r0, [pc, #16]	@ (800af0c <BSP_SD_Init+0x2c>)
 800aefa:	f7fb f977 	bl	80061ec <HAL_SD_Init>
 800aefe:	4603      	mov	r3, r0
 800af00:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800af02:	79fb      	ldrb	r3, [r7, #7]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	200141dc 	.word	0x200141dc

0800af10 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b088      	sub	sp, #32
 800af14:	af02      	add	r7, sp, #8
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
 800af1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	4806      	ldr	r0, [pc, #24]	@ (800af48 <BSP_SD_ReadBlocks+0x38>)
 800af2e:	f7fb fa0d 	bl	800634c <HAL_SD_ReadBlocks>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d001      	beq.n	800af3c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	200141dc 	.word	0x200141dc

0800af4c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b088      	sub	sp, #32
 800af50:	af02      	add	r7, sp, #8
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	68f9      	ldr	r1, [r7, #12]
 800af68:	4806      	ldr	r0, [pc, #24]	@ (800af84 <BSP_SD_WriteBlocks+0x38>)
 800af6a:	f7fb fbd5 	bl	8006718 <HAL_SD_WriteBlocks>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800af74:	2301      	movs	r3, #1
 800af76:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200141dc 	.word	0x200141dc

0800af88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800af8c:	4805      	ldr	r0, [pc, #20]	@ (800afa4 <BSP_SD_GetCardState+0x1c>)
 800af8e:	f7fb ff21 	bl	8006dd4 <HAL_SD_GetCardState>
 800af92:	4603      	mov	r3, r0
 800af94:	2b04      	cmp	r3, #4
 800af96:	bf14      	ite	ne
 800af98:	2301      	movne	r3, #1
 800af9a:	2300      	moveq	r3, #0
 800af9c:	b2db      	uxtb	r3, r3
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200141dc 	.word	0x200141dc

0800afa8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	4803      	ldr	r0, [pc, #12]	@ (800afc0 <BSP_SD_GetCardInfo+0x18>)
 800afb4:	f7fb fee2 	bl	8006d7c <HAL_SD_GetCardInfo>
}
 800afb8:	bf00      	nop
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	200141dc 	.word	0x200141dc

0800afc4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800afca:	2301      	movs	r3, #1
 800afcc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800afce:	79fb      	ldrb	r3, [r7, #7]
 800afd0:	b2db      	uxtb	r3, r3
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
	...

0800afe0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800afea:	4b0b      	ldr	r3, [pc, #44]	@ (800b018 <SD_CheckStatus+0x38>)
 800afec:	2201      	movs	r2, #1
 800afee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800aff0:	f7ff ffca 	bl	800af88 <BSP_SD_GetCardState>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d107      	bne.n	800b00a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800affa:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <SD_CheckStatus+0x38>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f023 0301 	bic.w	r3, r3, #1
 800b004:	b2da      	uxtb	r2, r3
 800b006:	4b04      	ldr	r3, [pc, #16]	@ (800b018 <SD_CheckStatus+0x38>)
 800b008:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b00a:	4b03      	ldr	r3, [pc, #12]	@ (800b018 <SD_CheckStatus+0x38>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	b2db      	uxtb	r3, r3
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20000019 	.word	0x20000019

0800b01c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b026:	4b0b      	ldr	r3, [pc, #44]	@ (800b054 <SD_initialize+0x38>)
 800b028:	2201      	movs	r2, #1
 800b02a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b02c:	f7ff ff58 	bl	800aee0 <BSP_SD_Init>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d107      	bne.n	800b046 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff ffd1 	bl	800afe0 <SD_CheckStatus>
 800b03e:	4603      	mov	r3, r0
 800b040:	461a      	mov	r2, r3
 800b042:	4b04      	ldr	r3, [pc, #16]	@ (800b054 <SD_initialize+0x38>)
 800b044:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b046:	4b03      	ldr	r3, [pc, #12]	@ (800b054 <SD_initialize+0x38>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	b2db      	uxtb	r3, r3
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000019 	.word	0x20000019

0800b058 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff ffbb 	bl	800afe0 <SD_CheckStatus>
 800b06a:	4603      	mov	r3, r0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	607a      	str	r2, [r7, #4]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4603      	mov	r3, r0
 800b082:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b088:	f04f 33ff 	mov.w	r3, #4294967295
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	68b8      	ldr	r0, [r7, #8]
 800b092:	f7ff ff3d 	bl	800af10 <BSP_SD_ReadBlocks>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d107      	bne.n	800b0ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b09c:	bf00      	nop
 800b09e:	f7ff ff73 	bl	800af88 <BSP_SD_GetCardState>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1fa      	bne.n	800b09e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b086      	sub	sp, #24
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	68b8      	ldr	r0, [r7, #8]
 800b0d4:	f7ff ff3a 	bl	800af4c <BSP_SD_WriteBlocks>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d107      	bne.n	800b0ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b0de:	bf00      	nop
 800b0e0:	f7ff ff52 	bl	800af88 <BSP_SD_GetCardState>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1fa      	bne.n	800b0e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08c      	sub	sp, #48	@ 0x30
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	603a      	str	r2, [r7, #0]
 800b102:	71fb      	strb	r3, [r7, #7]
 800b104:	460b      	mov	r3, r1
 800b106:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b10e:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <SD_ioctl+0xac>)
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <SD_ioctl+0x28>
 800b11c:	2303      	movs	r3, #3
 800b11e:	e03c      	b.n	800b19a <SD_ioctl+0xa2>

  switch (cmd)
 800b120:	79bb      	ldrb	r3, [r7, #6]
 800b122:	2b03      	cmp	r3, #3
 800b124:	d834      	bhi.n	800b190 <SD_ioctl+0x98>
 800b126:	a201      	add	r2, pc, #4	@ (adr r2, 800b12c <SD_ioctl+0x34>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b13d 	.word	0x0800b13d
 800b130:	0800b145 	.word	0x0800b145
 800b134:	0800b15d 	.word	0x0800b15d
 800b138:	0800b177 	.word	0x0800b177
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b142:	e028      	b.n	800b196 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b144:	f107 030c 	add.w	r3, r7, #12
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff ff2d 	bl	800afa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b14e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b15a:	e01c      	b.n	800b196 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b15c:	f107 030c 	add.w	r3, r7, #12
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff ff21 	bl	800afa8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	b29a      	uxth	r2, r3
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b174:	e00f      	b.n	800b196 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b176:	f107 030c 	add.w	r3, r7, #12
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff ff14 	bl	800afa8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b182:	0a5a      	lsrs	r2, r3, #9
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b18e:	e002      	b.n	800b196 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b190:	2304      	movs	r3, #4
 800b192:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b196:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3730      	adds	r7, #48	@ 0x30
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000019 	.word	0x20000019

0800b1a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	4a08      	ldr	r2, [pc, #32]	@ (800b1d8 <disk_status+0x30>)
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	79fa      	ldrb	r2, [r7, #7]
 800b1c0:	4905      	ldr	r1, [pc, #20]	@ (800b1d8 <disk_status+0x30>)
 800b1c2:	440a      	add	r2, r1
 800b1c4:	7a12      	ldrb	r2, [r2, #8]
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	4798      	blx	r3
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	2001474c 	.word	0x2001474c

0800b1dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b1ea:	79fb      	ldrb	r3, [r7, #7]
 800b1ec:	4a0e      	ldr	r2, [pc, #56]	@ (800b228 <disk_initialize+0x4c>)
 800b1ee:	5cd3      	ldrb	r3, [r2, r3]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d114      	bne.n	800b21e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	4a0c      	ldr	r2, [pc, #48]	@ (800b228 <disk_initialize+0x4c>)
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	4413      	add	r3, r2
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	79fa      	ldrb	r2, [r7, #7]
 800b202:	4909      	ldr	r1, [pc, #36]	@ (800b228 <disk_initialize+0x4c>)
 800b204:	440a      	add	r2, r1
 800b206:	7a12      	ldrb	r2, [r2, #8]
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
 800b20c:	4603      	mov	r3, r0
 800b20e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d103      	bne.n	800b21e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b216:	79fb      	ldrb	r3, [r7, #7]
 800b218:	4a03      	ldr	r2, [pc, #12]	@ (800b228 <disk_initialize+0x4c>)
 800b21a:	2101      	movs	r1, #1
 800b21c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	2001474c 	.word	0x2001474c

0800b22c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b22c:	b590      	push	{r4, r7, lr}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	4a0a      	ldr	r2, [pc, #40]	@ (800b268 <disk_read+0x3c>)
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	689c      	ldr	r4, [r3, #8]
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	4a07      	ldr	r2, [pc, #28]	@ (800b268 <disk_read+0x3c>)
 800b24c:	4413      	add	r3, r2
 800b24e:	7a18      	ldrb	r0, [r3, #8]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	47a0      	blx	r4
 800b258:	4603      	mov	r3, r0
 800b25a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	371c      	adds	r7, #28
 800b262:	46bd      	mov	sp, r7
 800b264:	bd90      	pop	{r4, r7, pc}
 800b266:	bf00      	nop
 800b268:	2001474c 	.word	0x2001474c

0800b26c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b26c:	b590      	push	{r4, r7, lr}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	607a      	str	r2, [r7, #4]
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	4603      	mov	r3, r0
 800b27a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b27c:	7bfb      	ldrb	r3, [r7, #15]
 800b27e:	4a0a      	ldr	r2, [pc, #40]	@ (800b2a8 <disk_write+0x3c>)
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	4413      	add	r3, r2
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	68dc      	ldr	r4, [r3, #12]
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	4a07      	ldr	r2, [pc, #28]	@ (800b2a8 <disk_write+0x3c>)
 800b28c:	4413      	add	r3, r2
 800b28e:	7a18      	ldrb	r0, [r3, #8]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	68b9      	ldr	r1, [r7, #8]
 800b296:	47a0      	blx	r4
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	371c      	adds	r7, #28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd90      	pop	{r4, r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	2001474c 	.word	0x2001474c

0800b2ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	603a      	str	r2, [r7, #0]
 800b2b6:	71fb      	strb	r3, [r7, #7]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b2bc:	79fb      	ldrb	r3, [r7, #7]
 800b2be:	4a09      	ldr	r2, [pc, #36]	@ (800b2e4 <disk_ioctl+0x38>)
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	79fa      	ldrb	r2, [r7, #7]
 800b2ca:	4906      	ldr	r1, [pc, #24]	@ (800b2e4 <disk_ioctl+0x38>)
 800b2cc:	440a      	add	r2, r1
 800b2ce:	7a10      	ldrb	r0, [r2, #8]
 800b2d0:	79b9      	ldrb	r1, [r7, #6]
 800b2d2:	683a      	ldr	r2, [r7, #0]
 800b2d4:	4798      	blx	r3
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	2001474c 	.word	0x2001474c

0800b2e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b2f8:	89fb      	ldrh	r3, [r7, #14]
 800b2fa:	021b      	lsls	r3, r3, #8
 800b2fc:	b21a      	sxth	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b21b      	sxth	r3, r3
 800b304:	4313      	orrs	r3, r2
 800b306:	b21b      	sxth	r3, r3
 800b308:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b30a:	89fb      	ldrh	r3, [r7, #14]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3303      	adds	r3, #3
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	021b      	lsls	r3, r3, #8
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	3202      	adds	r2, #2
 800b330:	7812      	ldrb	r2, [r2, #0]
 800b332:	4313      	orrs	r3, r2
 800b334:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	3201      	adds	r2, #1
 800b33e:	7812      	ldrb	r2, [r2, #0]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	021b      	lsls	r3, r3, #8
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	7812      	ldrb	r2, [r2, #0]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b350:	68fb      	ldr	r3, [r7, #12]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	887a      	ldrh	r2, [r7, #2]
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	887b      	ldrh	r3, [r7, #2]
 800b378:	0a1b      	lsrs	r3, r3, #8
 800b37a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	1c5a      	adds	r2, r3, #1
 800b380:	607a      	str	r2, [r7, #4]
 800b382:	887a      	ldrh	r2, [r7, #2]
 800b384:	b2d2      	uxtb	r2, r2
 800b386:	701a      	strb	r2, [r3, #0]
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	1c5a      	adds	r2, r3, #1
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	b2d2      	uxtb	r2, r2
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	0a1b      	lsrs	r3, r3, #8
 800b3ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	607a      	str	r2, [r7, #4]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	701a      	strb	r2, [r3, #0]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	b2d2      	uxtb	r2, r2
 800b3cc:	701a      	strb	r2, [r3, #0]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	0a1b      	lsrs	r3, r3, #8
 800b3d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	607a      	str	r2, [r7, #4]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00d      	beq.n	800b422 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	1c53      	adds	r3, r2, #1
 800b40a:	613b      	str	r3, [r7, #16]
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	1c59      	adds	r1, r3, #1
 800b410:	6179      	str	r1, [r7, #20]
 800b412:	7812      	ldrb	r2, [r2, #0]
 800b414:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3b01      	subs	r3, #1
 800b41a:	607b      	str	r3, [r7, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d1f1      	bne.n	800b406 <mem_cpy+0x1a>
	}
}
 800b422:	bf00      	nop
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b42e:	b480      	push	{r7}
 800b430:	b087      	sub	sp, #28
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	617a      	str	r2, [r7, #20]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3b01      	subs	r3, #1
 800b44e:	607b      	str	r3, [r7, #4]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f3      	bne.n	800b43e <mem_set+0x10>
}
 800b456:	bf00      	nop
 800b458:	bf00      	nop
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b464:	b480      	push	{r7}
 800b466:	b089      	sub	sp, #36	@ 0x24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	61fb      	str	r3, [r7, #28]
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	61fa      	str	r2, [r7, #28]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	4619      	mov	r1, r3
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	61ba      	str	r2, [r7, #24]
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	1acb      	subs	r3, r1, r3
 800b490:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	3b01      	subs	r3, #1
 800b496:	607b      	str	r3, [r7, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d002      	beq.n	800b4a4 <mem_cmp+0x40>
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d0eb      	beq.n	800b47c <mem_cmp+0x18>

	return r;
 800b4a4:	697b      	ldr	r3, [r7, #20]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3724      	adds	r7, #36	@ 0x24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b4bc:	e002      	b.n	800b4c4 <chk_chr+0x12>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	607b      	str	r3, [r7, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <chk_chr+0x26>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d1f2      	bne.n	800b4be <chk_chr+0xc>
	return *str;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	781b      	ldrb	r3, [r3, #0]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	e029      	b.n	800b550 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b4fc:	4a27      	ldr	r2, [pc, #156]	@ (800b59c <chk_lock+0xb4>)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	4413      	add	r3, r2
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d01d      	beq.n	800b546 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b50a:	4a24      	ldr	r2, [pc, #144]	@ (800b59c <chk_lock+0xb4>)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	4413      	add	r3, r2
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d116      	bne.n	800b54a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b51c:	4a1f      	ldr	r2, [pc, #124]	@ (800b59c <chk_lock+0xb4>)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	011b      	lsls	r3, r3, #4
 800b522:	4413      	add	r3, r2
 800b524:	3304      	adds	r3, #4
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d10c      	bne.n	800b54a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b530:	4a1a      	ldr	r2, [pc, #104]	@ (800b59c <chk_lock+0xb4>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	4413      	add	r3, r2
 800b538:	3308      	adds	r3, #8
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b540:	429a      	cmp	r2, r3
 800b542:	d102      	bne.n	800b54a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b544:	e007      	b.n	800b556 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b546:	2301      	movs	r3, #1
 800b548:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3301      	adds	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d9d2      	bls.n	800b4fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	d109      	bne.n	800b570 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d102      	bne.n	800b568 <chk_lock+0x80>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d101      	bne.n	800b56c <chk_lock+0x84>
 800b568:	2300      	movs	r3, #0
 800b56a:	e010      	b.n	800b58e <chk_lock+0xa6>
 800b56c:	2312      	movs	r3, #18
 800b56e:	e00e      	b.n	800b58e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d108      	bne.n	800b588 <chk_lock+0xa0>
 800b576:	4a09      	ldr	r2, [pc, #36]	@ (800b59c <chk_lock+0xb4>)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	4413      	add	r3, r2
 800b57e:	330c      	adds	r3, #12
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b586:	d101      	bne.n	800b58c <chk_lock+0xa4>
 800b588:	2310      	movs	r3, #16
 800b58a:	e000      	b.n	800b58e <chk_lock+0xa6>
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	2001472c 	.word	0x2001472c

0800b5a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
 800b5aa:	e002      	b.n	800b5b2 <enq_lock+0x12>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	607b      	str	r3, [r7, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d806      	bhi.n	800b5c6 <enq_lock+0x26>
 800b5b8:	4a09      	ldr	r2, [pc, #36]	@ (800b5e0 <enq_lock+0x40>)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	4413      	add	r3, r2
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f2      	bne.n	800b5ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	bf14      	ite	ne
 800b5cc:	2301      	movne	r3, #1
 800b5ce:	2300      	moveq	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	2001472c 	.word	0x2001472c

0800b5e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	e01f      	b.n	800b634 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b5f4:	4a41      	ldr	r2, [pc, #260]	@ (800b6fc <inc_lock+0x118>)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	011b      	lsls	r3, r3, #4
 800b5fa:	4413      	add	r3, r2
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	429a      	cmp	r2, r3
 800b604:	d113      	bne.n	800b62e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b606:	4a3d      	ldr	r2, [pc, #244]	@ (800b6fc <inc_lock+0x118>)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	4413      	add	r3, r2
 800b60e:	3304      	adds	r3, #4
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b616:	429a      	cmp	r2, r3
 800b618:	d109      	bne.n	800b62e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b61a:	4a38      	ldr	r2, [pc, #224]	@ (800b6fc <inc_lock+0x118>)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	011b      	lsls	r3, r3, #4
 800b620:	4413      	add	r3, r2
 800b622:	3308      	adds	r3, #8
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d006      	beq.n	800b63c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d9dc      	bls.n	800b5f4 <inc_lock+0x10>
 800b63a:	e000      	b.n	800b63e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b63c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b02      	cmp	r3, #2
 800b642:	d132      	bne.n	800b6aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b644:	2300      	movs	r3, #0
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	e002      	b.n	800b650 <inc_lock+0x6c>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d806      	bhi.n	800b664 <inc_lock+0x80>
 800b656:	4a29      	ldr	r2, [pc, #164]	@ (800b6fc <inc_lock+0x118>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	4413      	add	r3, r2
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1f2      	bne.n	800b64a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b02      	cmp	r3, #2
 800b668:	d101      	bne.n	800b66e <inc_lock+0x8a>
 800b66a:	2300      	movs	r3, #0
 800b66c:	e040      	b.n	800b6f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4922      	ldr	r1, [pc, #136]	@ (800b6fc <inc_lock+0x118>)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	011b      	lsls	r3, r3, #4
 800b678:	440b      	add	r3, r1
 800b67a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689a      	ldr	r2, [r3, #8]
 800b680:	491e      	ldr	r1, [pc, #120]	@ (800b6fc <inc_lock+0x118>)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	011b      	lsls	r3, r3, #4
 800b686:	440b      	add	r3, r1
 800b688:	3304      	adds	r3, #4
 800b68a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	695a      	ldr	r2, [r3, #20]
 800b690:	491a      	ldr	r1, [pc, #104]	@ (800b6fc <inc_lock+0x118>)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	011b      	lsls	r3, r3, #4
 800b696:	440b      	add	r3, r1
 800b698:	3308      	adds	r3, #8
 800b69a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b69c:	4a17      	ldr	r2, [pc, #92]	@ (800b6fc <inc_lock+0x118>)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	011b      	lsls	r3, r3, #4
 800b6a2:	4413      	add	r3, r2
 800b6a4:	330c      	adds	r3, #12
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d009      	beq.n	800b6c4 <inc_lock+0xe0>
 800b6b0:	4a12      	ldr	r2, [pc, #72]	@ (800b6fc <inc_lock+0x118>)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	4413      	add	r3, r2
 800b6b8:	330c      	adds	r3, #12
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <inc_lock+0xe0>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	e015      	b.n	800b6f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d108      	bne.n	800b6dc <inc_lock+0xf8>
 800b6ca:	4a0c      	ldr	r2, [pc, #48]	@ (800b6fc <inc_lock+0x118>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	011b      	lsls	r3, r3, #4
 800b6d0:	4413      	add	r3, r2
 800b6d2:	330c      	adds	r3, #12
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	e001      	b.n	800b6e0 <inc_lock+0xfc>
 800b6dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6e0:	4906      	ldr	r1, [pc, #24]	@ (800b6fc <inc_lock+0x118>)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	011b      	lsls	r3, r3, #4
 800b6e6:	440b      	add	r3, r1
 800b6e8:	330c      	adds	r3, #12
 800b6ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3301      	adds	r3, #1
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	2001472c 	.word	0x2001472c

0800b700 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3b01      	subs	r3, #1
 800b70c:	607b      	str	r3, [r7, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b01      	cmp	r3, #1
 800b712:	d825      	bhi.n	800b760 <dec_lock+0x60>
		n = Files[i].ctr;
 800b714:	4a17      	ldr	r2, [pc, #92]	@ (800b774 <dec_lock+0x74>)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	4413      	add	r3, r2
 800b71c:	330c      	adds	r3, #12
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b722:	89fb      	ldrh	r3, [r7, #14]
 800b724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b728:	d101      	bne.n	800b72e <dec_lock+0x2e>
 800b72a:	2300      	movs	r3, #0
 800b72c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b72e:	89fb      	ldrh	r3, [r7, #14]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <dec_lock+0x3a>
 800b734:	89fb      	ldrh	r3, [r7, #14]
 800b736:	3b01      	subs	r3, #1
 800b738:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b73a:	4a0e      	ldr	r2, [pc, #56]	@ (800b774 <dec_lock+0x74>)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	4413      	add	r3, r2
 800b742:	330c      	adds	r3, #12
 800b744:	89fa      	ldrh	r2, [r7, #14]
 800b746:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b748:	89fb      	ldrh	r3, [r7, #14]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <dec_lock+0x5a>
 800b74e:	4a09      	ldr	r2, [pc, #36]	@ (800b774 <dec_lock+0x74>)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	4413      	add	r3, r2
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	737b      	strb	r3, [r7, #13]
 800b75e:	e001      	b.n	800b764 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b760:	2302      	movs	r3, #2
 800b762:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b764:	7b7b      	ldrb	r3, [r7, #13]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	2001472c 	.word	0x2001472c

0800b778 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b780:	2300      	movs	r3, #0
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e010      	b.n	800b7a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b786:	4a0d      	ldr	r2, [pc, #52]	@ (800b7bc <clear_lock+0x44>)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	4413      	add	r3, r2
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d105      	bne.n	800b7a2 <clear_lock+0x2a>
 800b796:	4a09      	ldr	r2, [pc, #36]	@ (800b7bc <clear_lock+0x44>)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	011b      	lsls	r3, r3, #4
 800b79c:	4413      	add	r3, r2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d9eb      	bls.n	800b786 <clear_lock+0xe>
	}
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr
 800b7bc:	2001472c 	.word	0x2001472c

0800b7c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	78db      	ldrb	r3, [r3, #3]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d034      	beq.n	800b83e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	7858      	ldrb	r0, [r3, #1]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	f7ff fd40 	bl	800b26c <disk_write>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d002      	beq.n	800b7f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]
 800b7f6:	e022      	b.n	800b83e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a1b      	ldr	r3, [r3, #32]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	1ad2      	subs	r2, r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d217      	bcs.n	800b83e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	789b      	ldrb	r3, [r3, #2]
 800b812:	613b      	str	r3, [r7, #16]
 800b814:	e010      	b.n	800b838 <sync_window+0x78>
					wsect += fs->fsize;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	4413      	add	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	7858      	ldrb	r0, [r3, #1]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b82a:	2301      	movs	r3, #1
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	f7ff fd1d 	bl	800b26c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3b01      	subs	r3, #1
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d8eb      	bhi.n	800b816 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d01b      	beq.n	800b898 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff ffad 	bl	800b7c0 <sync_window>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d113      	bne.n	800b898 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	7858      	ldrb	r0, [r3, #1]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b87a:	2301      	movs	r3, #1
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	f7ff fcd5 	bl	800b22c <disk_read>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d004      	beq.n	800b892 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b888:	f04f 33ff 	mov.w	r3, #4294967295
 800b88c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b88e:	2301      	movs	r3, #1
 800b890:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	683a      	ldr	r2, [r7, #0]
 800b896:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b898:	7bfb      	ldrb	r3, [r7, #15]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff ff87 	bl	800b7c0 <sync_window>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d158      	bne.n	800b96e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d148      	bne.n	800b956 <sync_fs+0xb2>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	791b      	ldrb	r3, [r3, #4]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d144      	bne.n	800b956 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	3330      	adds	r3, #48	@ 0x30
 800b8d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff fda9 	bl	800b42e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3330      	adds	r3, #48	@ 0x30
 800b8e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7ff fd38 	bl	800b35e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3330      	adds	r3, #48	@ 0x30
 800b8f2:	4921      	ldr	r1, [pc, #132]	@ (800b978 <sync_fs+0xd4>)
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7ff fd4d 	bl	800b394 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3330      	adds	r3, #48	@ 0x30
 800b8fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b902:	491e      	ldr	r1, [pc, #120]	@ (800b97c <sync_fs+0xd8>)
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff fd45 	bl	800b394 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3330      	adds	r3, #48	@ 0x30
 800b90e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7ff fd3b 	bl	800b394 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	3330      	adds	r3, #48	@ 0x30
 800b922:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	4619      	mov	r1, r3
 800b92c:	4610      	mov	r0, r2
 800b92e:	f7ff fd31 	bl	800b394 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	1c5a      	adds	r2, r3, #1
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7858      	ldrb	r0, [r3, #1]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94a:	2301      	movs	r3, #1
 800b94c:	f7ff fc8e 	bl	800b26c <disk_write>
			fs->fsi_flag = 0;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	785b      	ldrb	r3, [r3, #1]
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff fca4 	bl	800b2ac <disk_ioctl>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <sync_fs+0xca>
 800b96a:	2301      	movs	r3, #1
 800b96c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}
 800b978:	41615252 	.word	0x41615252
 800b97c:	61417272 	.word	0x61417272

0800b980 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	3b02      	subs	r3, #2
 800b98e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	695b      	ldr	r3, [r3, #20]
 800b994:	3b02      	subs	r3, #2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d301      	bcc.n	800b9a0 <clust2sect+0x20>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e008      	b.n	800b9b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	895b      	ldrh	r3, [r3, #10]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	fb03 f202 	mul.w	r2, r3, r2
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	4413      	add	r3, r2
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d904      	bls.n	800b9de <get_fat+0x20>
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d302      	bcc.n	800b9e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b9de:	2301      	movs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	e08e      	b.n	800bb02 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d061      	beq.n	800bab6 <get_fat+0xf8>
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	dc7b      	bgt.n	800baee <get_fat+0x130>
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d002      	beq.n	800ba00 <get_fat+0x42>
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d041      	beq.n	800ba82 <get_fat+0xc4>
 800b9fe:	e076      	b.n	800baee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	085b      	lsrs	r3, r3, #1
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6a1a      	ldr	r2, [r3, #32]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	0a5b      	lsrs	r3, r3, #9
 800ba16:	4413      	add	r3, r2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6938      	ldr	r0, [r7, #16]
 800ba1c:	f7ff ff14 	bl	800b848 <move_window>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d166      	bne.n	800baf4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	60fa      	str	r2, [r7, #12]
 800ba2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4413      	add	r3, r2
 800ba34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	6a1a      	ldr	r2, [r3, #32]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	0a5b      	lsrs	r3, r3, #9
 800ba42:	4413      	add	r3, r2
 800ba44:	4619      	mov	r1, r3
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f7ff fefe 	bl	800b848 <move_window>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d152      	bne.n	800baf8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ba60:	021b      	lsls	r3, r3, #8
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <get_fat+0xba>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	091b      	lsrs	r3, r3, #4
 800ba76:	e002      	b.n	800ba7e <get_fat+0xc0>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba7e:	617b      	str	r3, [r7, #20]
			break;
 800ba80:	e03f      	b.n	800bb02 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	6a1a      	ldr	r2, [r3, #32]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	0a1b      	lsrs	r3, r3, #8
 800ba8a:	4413      	add	r3, r2
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6938      	ldr	r0, [r7, #16]
 800ba90:	f7ff feda 	bl	800b848 <move_window>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d130      	bne.n	800bafc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800baa8:	4413      	add	r3, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fc1c 	bl	800b2e8 <ld_word>
 800bab0:	4603      	mov	r3, r0
 800bab2:	617b      	str	r3, [r7, #20]
			break;
 800bab4:	e025      	b.n	800bb02 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	6a1a      	ldr	r2, [r3, #32]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	09db      	lsrs	r3, r3, #7
 800babe:	4413      	add	r3, r2
 800bac0:	4619      	mov	r1, r3
 800bac2:	6938      	ldr	r0, [r7, #16]
 800bac4:	f7ff fec0 	bl	800b848 <move_window>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d118      	bne.n	800bb00 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800badc:	4413      	add	r3, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff fc1a 	bl	800b318 <ld_dword>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800baea:	617b      	str	r3, [r7, #20]
			break;
 800baec:	e009      	b.n	800bb02 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800baee:	2301      	movs	r3, #1
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	e006      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf4:	bf00      	nop
 800baf6:	e004      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800baf8:	bf00      	nop
 800bafa:	e002      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bafc:	bf00      	nop
 800bafe:	e000      	b.n	800bb02 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb00:	bf00      	nop
		}
	}

	return val;
 800bb02:	697b      	ldr	r3, [r7, #20]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b089      	sub	sp, #36	@ 0x24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bb18:	2302      	movs	r3, #2
 800bb1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	f240 80d9 	bls.w	800bcd6 <put_fat+0x1ca>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	f080 80d3 	bcs.w	800bcd6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	f000 8096 	beq.w	800bc66 <put_fat+0x15a>
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	f300 80cb 	bgt.w	800bcd6 <put_fat+0x1ca>
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d002      	beq.n	800bb4a <put_fat+0x3e>
 800bb44:	2b02      	cmp	r3, #2
 800bb46:	d06e      	beq.n	800bc26 <put_fat+0x11a>
 800bb48:	e0c5      	b.n	800bcd6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	61bb      	str	r3, [r7, #24]
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	085b      	lsrs	r3, r3, #1
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	4413      	add	r3, r2
 800bb56:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6a1a      	ldr	r2, [r3, #32]
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	0a5b      	lsrs	r3, r3, #9
 800bb60:	4413      	add	r3, r2
 800bb62:	4619      	mov	r1, r3
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7ff fe6f 	bl	800b848 <move_window>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb6e:	7ffb      	ldrb	r3, [r7, #31]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f040 80a9 	bne.w	800bcc8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	1c59      	adds	r1, r3, #1
 800bb80:	61b9      	str	r1, [r7, #24]
 800bb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb86:	4413      	add	r3, r2
 800bb88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00d      	beq.n	800bbb0 <put_fat+0xa4>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	b25b      	sxtb	r3, r3
 800bb9a:	f003 030f 	and.w	r3, r3, #15
 800bb9e:	b25a      	sxtb	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	b25b      	sxtb	r3, r3
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	b25b      	sxtb	r3, r3
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	e001      	b.n	800bbb4 <put_fat+0xa8>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6a1a      	ldr	r2, [r3, #32]
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	0a5b      	lsrs	r3, r3, #9
 800bbc6:	4413      	add	r3, r2
 800bbc8:	4619      	mov	r1, r3
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7ff fe3c 	bl	800b848 <move_window>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bbd4:	7ffb      	ldrb	r3, [r7, #31]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d178      	bne.n	800bccc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe6:	4413      	add	r3, r2
 800bbe8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <put_fat+0xf0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	091b      	lsrs	r3, r3, #4
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	e00e      	b.n	800bc1a <put_fat+0x10e>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	f023 030f 	bic.w	r3, r3, #15
 800bc06:	b25a      	sxtb	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	b25b      	sxtb	r3, r3
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	b25b      	sxtb	r3, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	b25b      	sxtb	r3, r3
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	697a      	ldr	r2, [r7, #20]
 800bc1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2201      	movs	r2, #1
 800bc22:	70da      	strb	r2, [r3, #3]
			break;
 800bc24:	e057      	b.n	800bcd6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a1a      	ldr	r2, [r3, #32]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	4413      	add	r3, r2
 800bc30:	4619      	mov	r1, r3
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f7ff fe08 	bl	800b848 <move_window>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc3c:	7ffb      	ldrb	r3, [r7, #31]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d146      	bne.n	800bcd0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bc50:	4413      	add	r3, r2
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	b292      	uxth	r2, r2
 800bc56:	4611      	mov	r1, r2
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fb80 	bl	800b35e <st_word>
			fs->wflag = 1;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	70da      	strb	r2, [r3, #3]
			break;
 800bc64:	e037      	b.n	800bcd6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	6a1a      	ldr	r2, [r3, #32]
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	09db      	lsrs	r3, r3, #7
 800bc6e:	4413      	add	r3, r2
 800bc70:	4619      	mov	r1, r3
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f7ff fde8 	bl	800b848 <move_window>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc7c:	7ffb      	ldrb	r3, [r7, #31]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d128      	bne.n	800bcd4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bc96:	4413      	add	r3, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fb3d 	bl	800b318 <ld_dword>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bca4:	4323      	orrs	r3, r4
 800bca6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bcb6:	4413      	add	r3, r2
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fb6a 	bl	800b394 <st_dword>
			fs->wflag = 1;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	70da      	strb	r2, [r3, #3]
			break;
 800bcc6:	e006      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcc8:	bf00      	nop
 800bcca:	e004      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bccc:	bf00      	nop
 800bcce:	e002      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcd0:	bf00      	nop
 800bcd2:	e000      	b.n	800bcd6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bcd4:	bf00      	nop
		}
	}
	return res;
 800bcd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3724      	adds	r7, #36	@ 0x24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd90      	pop	{r4, r7, pc}

0800bce0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d904      	bls.n	800bd06 <remove_chain+0x26>
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	695b      	ldr	r3, [r3, #20]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d301      	bcc.n	800bd0a <remove_chain+0x2a>
 800bd06:	2302      	movs	r3, #2
 800bd08:	e04b      	b.n	800bda2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00c      	beq.n	800bd2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bd10:	f04f 32ff 	mov.w	r2, #4294967295
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	69b8      	ldr	r0, [r7, #24]
 800bd18:	f7ff fef8 	bl	800bb0c <put_fat>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bd20:	7ffb      	ldrb	r3, [r7, #31]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d001      	beq.n	800bd2a <remove_chain+0x4a>
 800bd26:	7ffb      	ldrb	r3, [r7, #31]
 800bd28:	e03b      	b.n	800bda2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff fe46 	bl	800b9be <get_fat>
 800bd32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d031      	beq.n	800bd9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <remove_chain+0x64>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e02e      	b.n	800bda2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd4a:	d101      	bne.n	800bd50 <remove_chain+0x70>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e028      	b.n	800bda2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bd50:	2200      	movs	r2, #0
 800bd52:	68b9      	ldr	r1, [r7, #8]
 800bd54:	69b8      	ldr	r0, [r7, #24]
 800bd56:	f7ff fed9 	bl	800bb0c <put_fat>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bd5e:	7ffb      	ldrb	r3, [r7, #31]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d001      	beq.n	800bd68 <remove_chain+0x88>
 800bd64:	7ffb      	ldrb	r3, [r7, #31]
 800bd66:	e01c      	b.n	800bda2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	691a      	ldr	r2, [r3, #16]
 800bd6c:	69bb      	ldr	r3, [r7, #24]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	3b02      	subs	r3, #2
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d20b      	bcs.n	800bd8e <remove_chain+0xae>
			fs->free_clst++;
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	791b      	ldrb	r3, [r3, #4]
 800bd84:	f043 0301 	orr.w	r3, r3, #1
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d3c6      	bcc.n	800bd2a <remove_chain+0x4a>
 800bd9c:	e000      	b.n	800bda0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bd9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3720      	adds	r7, #32
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b088      	sub	sp, #32
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10d      	bne.n	800bddc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d004      	beq.n	800bdd6 <create_chain+0x2c>
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	69ba      	ldr	r2, [r7, #24]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d31b      	bcc.n	800be0e <create_chain+0x64>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	61bb      	str	r3, [r7, #24]
 800bdda:	e018      	b.n	800be0e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f7ff fded 	bl	800b9be <get_fat>
 800bde4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d801      	bhi.n	800bdf0 <create_chain+0x46>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e070      	b.n	800bed2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d101      	bne.n	800bdfc <create_chain+0x52>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	e06a      	b.n	800bed2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	429a      	cmp	r2, r3
 800be04:	d201      	bcs.n	800be0a <create_chain+0x60>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	e063      	b.n	800bed2 <create_chain+0x128>
		scl = clst;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	3301      	adds	r3, #1
 800be16:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d307      	bcc.n	800be32 <create_chain+0x88>
				ncl = 2;
 800be22:	2302      	movs	r3, #2
 800be24:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800be26:	69fa      	ldr	r2, [r7, #28]
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d901      	bls.n	800be32 <create_chain+0x88>
 800be2e:	2300      	movs	r3, #0
 800be30:	e04f      	b.n	800bed2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800be32:	69f9      	ldr	r1, [r7, #28]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff fdc2 	bl	800b9be <get_fat>
 800be3a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00e      	beq.n	800be60 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d003      	beq.n	800be50 <create_chain+0xa6>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be4e:	d101      	bne.n	800be54 <create_chain+0xaa>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	e03e      	b.n	800bed2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800be54:	69fa      	ldr	r2, [r7, #28]
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d1da      	bne.n	800be12 <create_chain+0x68>
 800be5c:	2300      	movs	r3, #0
 800be5e:	e038      	b.n	800bed2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800be60:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800be62:	f04f 32ff 	mov.w	r2, #4294967295
 800be66:	69f9      	ldr	r1, [r7, #28]
 800be68:	6938      	ldr	r0, [r7, #16]
 800be6a:	f7ff fe4f 	bl	800bb0c <put_fat>
 800be6e:	4603      	mov	r3, r0
 800be70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d109      	bne.n	800be8c <create_chain+0xe2>
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d006      	beq.n	800be8c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800be7e:	69fa      	ldr	r2, [r7, #28]
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6938      	ldr	r0, [r7, #16]
 800be84:	f7ff fe42 	bl	800bb0c <put_fat>
 800be88:	4603      	mov	r3, r0
 800be8a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d116      	bne.n	800bec0 <create_chain+0x116>
		fs->last_clst = ncl;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	69fa      	ldr	r2, [r7, #28]
 800be96:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	691a      	ldr	r2, [r3, #16]
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	695b      	ldr	r3, [r3, #20]
 800bea0:	3b02      	subs	r3, #2
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d804      	bhi.n	800beb0 <create_chain+0x106>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	1e5a      	subs	r2, r3, #1
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	791b      	ldrb	r3, [r3, #4]
 800beb4:	f043 0301 	orr.w	r3, r3, #1
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	711a      	strb	r2, [r3, #4]
 800bebe:	e007      	b.n	800bed0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d102      	bne.n	800becc <create_chain+0x122>
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295
 800beca:	e000      	b.n	800bece <create_chain+0x124>
 800becc:	2301      	movs	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bed0:	69fb      	ldr	r3, [r7, #28]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800beda:	b480      	push	{r7}
 800bedc:	b087      	sub	sp, #28
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beee:	3304      	adds	r3, #4
 800bef0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	0a5b      	lsrs	r3, r3, #9
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	8952      	ldrh	r2, [r2, #10]
 800befa:	fbb3 f3f2 	udiv	r3, r3, r2
 800befe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	613a      	str	r2, [r7, #16]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <clmt_clust+0x3a>
 800bf10:	2300      	movs	r3, #0
 800bf12:	e010      	b.n	800bf36 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d307      	bcc.n	800bf2c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	617b      	str	r3, [r7, #20]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	3304      	adds	r3, #4
 800bf28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bf2a:	e7e9      	b.n	800bf00 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bf2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	4413      	add	r3, r2
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b086      	sub	sp, #24
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf58:	d204      	bcs.n	800bf64 <dir_sdi+0x22>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	f003 031f 	and.w	r3, r3, #31
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bf64:	2302      	movs	r3, #2
 800bf66:	e063      	b.n	800c030 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d106      	bne.n	800bf88 <dir_sdi+0x46>
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	2b02      	cmp	r3, #2
 800bf80:	d902      	bls.n	800bf88 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10c      	bne.n	800bfa8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	095b      	lsrs	r3, r3, #5
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	8912      	ldrh	r2, [r2, #8]
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d301      	bcc.n	800bf9e <dir_sdi+0x5c>
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	e048      	b.n	800c030 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	61da      	str	r2, [r3, #28]
 800bfa6:	e029      	b.n	800bffc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	895b      	ldrh	r3, [r3, #10]
 800bfac:	025b      	lsls	r3, r3, #9
 800bfae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfb0:	e019      	b.n	800bfe6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6979      	ldr	r1, [r7, #20]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fd01 	bl	800b9be <get_fat>
 800bfbc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc4:	d101      	bne.n	800bfca <dir_sdi+0x88>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e032      	b.n	800c030 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d904      	bls.n	800bfda <dir_sdi+0x98>
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	695b      	ldr	r3, [r3, #20]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d301      	bcc.n	800bfde <dir_sdi+0x9c>
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e028      	b.n	800c030 <dir_sdi+0xee>
			ofs -= csz;
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d2e1      	bcs.n	800bfb2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bfee:	6979      	ldr	r1, [r7, #20]
 800bff0:	6938      	ldr	r0, [r7, #16]
 800bff2:	f7ff fcc5 	bl	800b980 <clust2sect>
 800bff6:	4602      	mov	r2, r0
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <dir_sdi+0xcc>
 800c00a:	2302      	movs	r3, #2
 800c00c:	e010      	b.n	800c030 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	69da      	ldr	r2, [r3, #28]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	0a5b      	lsrs	r3, r3, #9
 800c016:	441a      	add	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c028:	441a      	add	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c02e:	2300      	movs	r3, #0
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	3320      	adds	r3, #32
 800c04e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	69db      	ldr	r3, [r3, #28]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d003      	beq.n	800c060 <dir_next+0x28>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c05e:	d301      	bcc.n	800c064 <dir_next+0x2c>
 800c060:	2304      	movs	r3, #4
 800c062:	e0aa      	b.n	800c1ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f040 8098 	bne.w	800c1a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	699b      	ldr	r3, [r3, #24]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10b      	bne.n	800c09a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	095b      	lsrs	r3, r3, #5
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	8912      	ldrh	r2, [r2, #8]
 800c08a:	4293      	cmp	r3, r2
 800c08c:	f0c0 8088 	bcc.w	800c1a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	61da      	str	r2, [r3, #28]
 800c096:	2304      	movs	r3, #4
 800c098:	e08f      	b.n	800c1ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	0a5b      	lsrs	r3, r3, #9
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	8952      	ldrh	r2, [r2, #10]
 800c0a2:	3a01      	subs	r2, #1
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d17a      	bne.n	800c1a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	f7ff fc83 	bl	800b9be <get_fat>
 800c0b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d801      	bhi.n	800c0c4 <dir_next+0x8c>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e07a      	b.n	800c1ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ca:	d101      	bne.n	800c0d0 <dir_next+0x98>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e074      	b.n	800c1ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	697a      	ldr	r2, [r7, #20]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d358      	bcc.n	800c18c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	61da      	str	r2, [r3, #28]
 800c0e6:	2304      	movs	r3, #4
 800c0e8:	e067      	b.n	800c1ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	f7ff fe59 	bl	800bdaa <create_chain>
 800c0f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <dir_next+0xcc>
 800c100:	2307      	movs	r3, #7
 800c102:	e05a      	b.n	800c1ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	2b01      	cmp	r3, #1
 800c108:	d101      	bne.n	800c10e <dir_next+0xd6>
 800c10a:	2302      	movs	r3, #2
 800c10c:	e055      	b.n	800c1ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d101      	bne.n	800c11a <dir_next+0xe2>
 800c116:	2301      	movs	r3, #1
 800c118:	e04f      	b.n	800c1ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fb50 	bl	800b7c0 <sync_window>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <dir_next+0xf2>
 800c126:	2301      	movs	r3, #1
 800c128:	e047      	b.n	800c1ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3330      	adds	r3, #48	@ 0x30
 800c12e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c132:	2100      	movs	r1, #0
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff f97a 	bl	800b42e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c13a:	2300      	movs	r3, #0
 800c13c:	613b      	str	r3, [r7, #16]
 800c13e:	6979      	ldr	r1, [r7, #20]
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f7ff fc1d 	bl	800b980 <clust2sect>
 800c146:	4602      	mov	r2, r0
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c14c:	e012      	b.n	800c174 <dir_next+0x13c>
						fs->wflag = 1;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2201      	movs	r2, #1
 800c152:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c154:	68f8      	ldr	r0, [r7, #12]
 800c156:	f7ff fb33 	bl	800b7c0 <sync_window>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <dir_next+0x12c>
 800c160:	2301      	movs	r3, #1
 800c162:	e02a      	b.n	800c1ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	3301      	adds	r3, #1
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	895b      	ldrh	r3, [r3, #10]
 800c178:	461a      	mov	r2, r3
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d3e6      	bcc.n	800c14e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c192:	6979      	ldr	r1, [r7, #20]
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f7ff fbf3 	bl	800b980 <clust2sect>
 800c19a:	4602      	mov	r2, r0
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b2:	441a      	add	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b086      	sub	sp, #24
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c1d2:	2100      	movs	r1, #0
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff feb4 	bl	800bf42 <dir_sdi>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d12b      	bne.n	800c23c <dir_alloc+0x7a>
		n = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	69db      	ldr	r3, [r3, #28]
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff fb2a 	bl	800b848 <move_window>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d11d      	bne.n	800c23a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2be5      	cmp	r3, #229	@ 0xe5
 800c206:	d004      	beq.n	800c212 <dir_alloc+0x50>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a1b      	ldr	r3, [r3, #32]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d107      	bne.n	800c222 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3301      	adds	r3, #1
 800c216:	613b      	str	r3, [r7, #16]
 800c218:	693a      	ldr	r2, [r7, #16]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d102      	bne.n	800c226 <dir_alloc+0x64>
 800c220:	e00c      	b.n	800c23c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c222:	2300      	movs	r3, #0
 800c224:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c226:	2101      	movs	r1, #1
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff ff05 	bl	800c038 <dir_next>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d0d7      	beq.n	800c1e8 <dir_alloc+0x26>
 800c238:	e000      	b.n	800c23c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c23a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c23c:	7dfb      	ldrb	r3, [r7, #23]
 800c23e:	2b04      	cmp	r3, #4
 800c240:	d101      	bne.n	800c246 <dir_alloc+0x84>
 800c242:	2307      	movs	r3, #7
 800c244:	75fb      	strb	r3, [r7, #23]
	return res;
 800c246:	7dfb      	ldrb	r3, [r7, #23]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	331a      	adds	r3, #26
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff f842 	bl	800b2e8 <ld_word>
 800c264:	4603      	mov	r3, r0
 800c266:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d109      	bne.n	800c284 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	3314      	adds	r3, #20
 800c274:	4618      	mov	r0, r3
 800c276:	f7ff f837 	bl	800b2e8 <ld_word>
 800c27a:	4603      	mov	r3, r0
 800c27c:	041b      	lsls	r3, r3, #16
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	4313      	orrs	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c284:	68fb      	ldr	r3, [r7, #12]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	331a      	adds	r3, #26
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	b292      	uxth	r2, r2
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff f85a 	bl	800b35e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d109      	bne.n	800c2c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	f103 0214 	add.w	r2, r3, #20
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0c1b      	lsrs	r3, r3, #16
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	4619      	mov	r1, r3
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	f7ff f84c 	bl	800b35e <st_word>
	}
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b086      	sub	sp, #24
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c2d8:	2304      	movs	r3, #4
 800c2da:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800c2e2:	e03c      	b.n	800c35e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	69db      	ldr	r3, [r3, #28]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f7ff faac 	bl	800b848 <move_window>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c2f4:	7dfb      	ldrb	r3, [r7, #23]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d136      	bne.n	800c368 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6a1b      	ldr	r3, [r3, #32]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d102      	bne.n	800c30e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c308:	2304      	movs	r3, #4
 800c30a:	75fb      	strb	r3, [r7, #23]
 800c30c:	e031      	b.n	800c372 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	330b      	adds	r3, #11
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c31a:	73bb      	strb	r3, [r7, #14]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	7bba      	ldrb	r2, [r7, #14]
 800c320:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800c322:	7bfb      	ldrb	r3, [r7, #15]
 800c324:	2be5      	cmp	r3, #229	@ 0xe5
 800c326:	d011      	beq.n	800c34c <dir_read+0x7e>
 800c328:	7bfb      	ldrb	r3, [r7, #15]
 800c32a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c32c:	d00e      	beq.n	800c34c <dir_read+0x7e>
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	2b0f      	cmp	r3, #15
 800c332:	d00b      	beq.n	800c34c <dir_read+0x7e>
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	f023 0320 	bic.w	r3, r3, #32
 800c33a:	2b08      	cmp	r3, #8
 800c33c:	bf0c      	ite	eq
 800c33e:	2301      	moveq	r3, #1
 800c340:	2300      	movne	r3, #0
 800c342:	b2db      	uxtb	r3, r3
 800c344:	461a      	mov	r2, r3
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00f      	beq.n	800c36c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c34c:	2100      	movs	r1, #0
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff fe72 	bl	800c038 <dir_next>
 800c354:	4603      	mov	r3, r0
 800c356:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d108      	bne.n	800c370 <dir_read+0xa2>
	while (dp->sect) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1be      	bne.n	800c2e4 <dir_read+0x16>
 800c366:	e004      	b.n	800c372 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c368:	bf00      	nop
 800c36a:	e002      	b.n	800c372 <dir_read+0xa4>
				break;
 800c36c:	bf00      	nop
 800c36e:	e000      	b.n	800c372 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c370:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <dir_read+0xb0>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	61da      	str	r2, [r3, #28]
	return res;
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c396:	2100      	movs	r1, #0
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f7ff fdd2 	bl	800bf42 <dir_sdi>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d001      	beq.n	800c3ac <dir_find+0x24>
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	e03e      	b.n	800c42a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	69db      	ldr	r3, [r3, #28]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f7ff fa48 	bl	800b848 <move_window>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d12f      	bne.n	800c422 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d102      	bne.n	800c3d6 <dir_find+0x4e>
 800c3d0:	2304      	movs	r3, #4
 800c3d2:	75fb      	strb	r3, [r7, #23]
 800c3d4:	e028      	b.n	800c428 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	330b      	adds	r3, #11
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3e2:	b2da      	uxtb	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
 800c3ec:	330b      	adds	r3, #11
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	f003 0308 	and.w	r3, r3, #8
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <dir_find+0x86>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6a18      	ldr	r0, [r3, #32]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3324      	adds	r3, #36	@ 0x24
 800c400:	220b      	movs	r2, #11
 800c402:	4619      	mov	r1, r3
 800c404:	f7ff f82e 	bl	800b464 <mem_cmp>
 800c408:	4603      	mov	r3, r0
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00b      	beq.n	800c426 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c40e:	2100      	movs	r1, #0
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff fe11 	bl	800c038 <dir_next>
 800c416:	4603      	mov	r3, r0
 800c418:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d0c5      	beq.n	800c3ac <dir_find+0x24>
 800c420:	e002      	b.n	800c428 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c422:	bf00      	nop
 800c424:	e000      	b.n	800c428 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c426:	bf00      	nop

	return res;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c440:	2101      	movs	r1, #1
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff febd 	bl	800c1c2 <dir_alloc>
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c44c:	7bfb      	ldrb	r3, [r7, #15]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d11c      	bne.n	800c48c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	4619      	mov	r1, r3
 800c458:	68b8      	ldr	r0, [r7, #8]
 800c45a:	f7ff f9f5 	bl	800b848 <move_window>
 800c45e:	4603      	mov	r3, r0
 800c460:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c462:	7bfb      	ldrb	r3, [r7, #15]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d111      	bne.n	800c48c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a1b      	ldr	r3, [r3, #32]
 800c46c:	2220      	movs	r2, #32
 800c46e:	2100      	movs	r1, #0
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe ffdc 	bl	800b42e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6a18      	ldr	r0, [r3, #32]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	3324      	adds	r3, #36	@ 0x24
 800c47e:	220b      	movs	r2, #11
 800c480:	4619      	mov	r1, r3
 800c482:	f7fe ffb3 	bl	800b3ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2201      	movs	r2, #1
 800c48a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f7ff f9cc 	bl	800b848 <move_window>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800c4b4:	7afb      	ldrb	r3, [r7, #11]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a1b      	ldr	r3, [r3, #32]
 800c4be:	22e5      	movs	r2, #229	@ 0xe5
 800c4c0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
	...

0800c4d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	3324      	adds	r3, #36	@ 0x24
 800c4e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c4ea:	220b      	movs	r2, #11
 800c4ec:	2120      	movs	r1, #32
 800c4ee:	68b8      	ldr	r0, [r7, #8]
 800c4f0:	f7fe ff9d 	bl	800b42e <mem_set>
	si = i = 0; ni = 8;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	61fb      	str	r3, [r7, #28]
 800c4fc:	2308      	movs	r3, #8
 800c4fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	61fa      	str	r2, [r7, #28]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c50e:	7efb      	ldrb	r3, [r7, #27]
 800c510:	2b20      	cmp	r3, #32
 800c512:	d94e      	bls.n	800c5b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c514:	7efb      	ldrb	r3, [r7, #27]
 800c516:	2b2f      	cmp	r3, #47	@ 0x2f
 800c518:	d006      	beq.n	800c528 <create_name+0x54>
 800c51a:	7efb      	ldrb	r3, [r7, #27]
 800c51c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c51e:	d110      	bne.n	800c542 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c520:	e002      	b.n	800c528 <create_name+0x54>
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	3301      	adds	r3, #1
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	4413      	add	r3, r2
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b2f      	cmp	r3, #47	@ 0x2f
 800c532:	d0f6      	beq.n	800c522 <create_name+0x4e>
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4413      	add	r3, r2
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c53e:	d0f0      	beq.n	800c522 <create_name+0x4e>
			break;
 800c540:	e038      	b.n	800c5b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c542:	7efb      	ldrb	r3, [r7, #27]
 800c544:	2b2e      	cmp	r3, #46	@ 0x2e
 800c546:	d003      	beq.n	800c550 <create_name+0x7c>
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d30c      	bcc.n	800c56a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2b0b      	cmp	r3, #11
 800c554:	d002      	beq.n	800c55c <create_name+0x88>
 800c556:	7efb      	ldrb	r3, [r7, #27]
 800c558:	2b2e      	cmp	r3, #46	@ 0x2e
 800c55a:	d001      	beq.n	800c560 <create_name+0x8c>
 800c55c:	2306      	movs	r3, #6
 800c55e:	e044      	b.n	800c5ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c560:	2308      	movs	r3, #8
 800c562:	613b      	str	r3, [r7, #16]
 800c564:	230b      	movs	r3, #11
 800c566:	617b      	str	r3, [r7, #20]
			continue;
 800c568:	e022      	b.n	800c5b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c56a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	da04      	bge.n	800c57c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c572:	7efb      	ldrb	r3, [r7, #27]
 800c574:	3b80      	subs	r3, #128	@ 0x80
 800c576:	4a1f      	ldr	r2, [pc, #124]	@ (800c5f4 <create_name+0x120>)
 800c578:	5cd3      	ldrb	r3, [r2, r3]
 800c57a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c57c:	7efb      	ldrb	r3, [r7, #27]
 800c57e:	4619      	mov	r1, r3
 800c580:	481d      	ldr	r0, [pc, #116]	@ (800c5f8 <create_name+0x124>)
 800c582:	f7fe ff96 	bl	800b4b2 <chk_chr>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <create_name+0xbc>
 800c58c:	2306      	movs	r3, #6
 800c58e:	e02c      	b.n	800c5ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c590:	7efb      	ldrb	r3, [r7, #27]
 800c592:	2b60      	cmp	r3, #96	@ 0x60
 800c594:	d905      	bls.n	800c5a2 <create_name+0xce>
 800c596:	7efb      	ldrb	r3, [r7, #27]
 800c598:	2b7a      	cmp	r3, #122	@ 0x7a
 800c59a:	d802      	bhi.n	800c5a2 <create_name+0xce>
 800c59c:	7efb      	ldrb	r3, [r7, #27]
 800c59e:	3b20      	subs	r3, #32
 800c5a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	1c5a      	adds	r2, r3, #1
 800c5a6:	613a      	str	r2, [r7, #16]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	7efa      	ldrb	r2, [r7, #27]
 800c5ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c5b0:	e7a6      	b.n	800c500 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	441a      	add	r2, r3
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <create_name+0xf4>
 800c5c4:	2306      	movs	r3, #6
 800c5c6:	e010      	b.n	800c5ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2be5      	cmp	r3, #229	@ 0xe5
 800c5ce:	d102      	bne.n	800c5d6 <create_name+0x102>
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2205      	movs	r2, #5
 800c5d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5d6:	7efb      	ldrb	r3, [r7, #27]
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d801      	bhi.n	800c5e0 <create_name+0x10c>
 800c5dc:	2204      	movs	r2, #4
 800c5de:	e000      	b.n	800c5e2 <create_name+0x10e>
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	330b      	adds	r3, #11
 800c5e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c5e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3720      	adds	r7, #32
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	0800f268 	.word	0x0800f268
 800c5f8:	0800e490 	.word	0x0800e490

0800c5fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c610:	e002      	b.n	800c618 <follow_path+0x1c>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	3301      	adds	r3, #1
 800c616:	603b      	str	r3, [r7, #0]
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c61e:	d0f8      	beq.n	800c612 <follow_path+0x16>
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b5c      	cmp	r3, #92	@ 0x5c
 800c626:	d0f4      	beq.n	800c612 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2200      	movs	r2, #0
 800c62c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b1f      	cmp	r3, #31
 800c634:	d80a      	bhi.n	800c64c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2280      	movs	r2, #128	@ 0x80
 800c63a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c63e:	2100      	movs	r1, #0
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fc7e 	bl	800bf42 <dir_sdi>
 800c646:	4603      	mov	r3, r0
 800c648:	75fb      	strb	r3, [r7, #23]
 800c64a:	e043      	b.n	800c6d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c64c:	463b      	mov	r3, r7
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff ff3f 	bl	800c4d4 <create_name>
 800c656:	4603      	mov	r3, r0
 800c658:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c65a:	7dfb      	ldrb	r3, [r7, #23]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d134      	bne.n	800c6ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff fe91 	bl	800c388 <dir_find>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c670:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00a      	beq.n	800c68e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	2b04      	cmp	r3, #4
 800c67c:	d127      	bne.n	800c6ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	f003 0304 	and.w	r3, r3, #4
 800c684:	2b00      	cmp	r3, #0
 800c686:	d122      	bne.n	800c6ce <follow_path+0xd2>
 800c688:	2305      	movs	r3, #5
 800c68a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c68c:	e01f      	b.n	800c6ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	f003 0304 	and.w	r3, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11c      	bne.n	800c6d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	799b      	ldrb	r3, [r3, #6]
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6a4:	2305      	movs	r3, #5
 800c6a6:	75fb      	strb	r3, [r7, #23]
 800c6a8:	e014      	b.n	800c6d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	695b      	ldr	r3, [r3, #20]
 800c6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b8:	4413      	add	r3, r2
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	68f8      	ldr	r0, [r7, #12]
 800c6be:	f7ff fdc7 	bl	800c250 <ld_clust>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6c8:	e7c0      	b.n	800c64c <follow_path+0x50>
			if (res != FR_OK) break;
 800c6ca:	bf00      	nop
 800c6cc:	e002      	b.n	800c6d4 <follow_path+0xd8>
				break;
 800c6ce:	bf00      	nop
 800c6d0:	e000      	b.n	800c6d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6d2:	bf00      	nop
			}
		}
	}

	return res;
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b087      	sub	sp, #28
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d031      	beq.n	800c758 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	617b      	str	r3, [r7, #20]
 800c6fa:	e002      	b.n	800c702 <get_ldnumber+0x24>
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	3301      	adds	r3, #1
 800c700:	617b      	str	r3, [r7, #20]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b20      	cmp	r3, #32
 800c708:	d903      	bls.n	800c712 <get_ldnumber+0x34>
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c710:	d1f4      	bne.n	800c6fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b3a      	cmp	r3, #58	@ 0x3a
 800c718:	d11c      	bne.n	800c754 <get_ldnumber+0x76>
			tp = *path;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	60fa      	str	r2, [r7, #12]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	3b30      	subs	r3, #48	@ 0x30
 800c72a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d80e      	bhi.n	800c750 <get_ldnumber+0x72>
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	429a      	cmp	r2, r3
 800c738:	d10a      	bne.n	800c750 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d107      	bne.n	800c750 <get_ldnumber+0x72>
					vol = (int)i;
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	3301      	adds	r3, #1
 800c748:	617b      	str	r3, [r7, #20]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	e002      	b.n	800c75a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c754:	2300      	movs	r3, #0
 800c756:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c758:	693b      	ldr	r3, [r7, #16]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	371c      	adds	r7, #28
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
	...

0800c768 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	70da      	strb	r2, [r3, #3]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f04f 32ff 	mov.w	r2, #4294967295
 800c77e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff f860 	bl	800b848 <move_window>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <check_fs+0x2a>
 800c78e:	2304      	movs	r3, #4
 800c790:	e038      	b.n	800c804 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3330      	adds	r3, #48	@ 0x30
 800c796:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7fe fda4 	bl	800b2e8 <ld_word>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d001      	beq.n	800c7b0 <check_fs+0x48>
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e029      	b.n	800c804 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7b6:	2be9      	cmp	r3, #233	@ 0xe9
 800c7b8:	d009      	beq.n	800c7ce <check_fs+0x66>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c7c0:	2beb      	cmp	r3, #235	@ 0xeb
 800c7c2:	d11e      	bne.n	800c802 <check_fs+0x9a>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c7ca:	2b90      	cmp	r3, #144	@ 0x90
 800c7cc:	d119      	bne.n	800c802 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3330      	adds	r3, #48	@ 0x30
 800c7d2:	3336      	adds	r3, #54	@ 0x36
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fe fd9f 	bl	800b318 <ld_dword>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c7e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c80c <check_fs+0xa4>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d101      	bne.n	800c7ea <check_fs+0x82>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e00c      	b.n	800c804 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3330      	adds	r3, #48	@ 0x30
 800c7ee:	3352      	adds	r3, #82	@ 0x52
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fd91 	bl	800b318 <ld_dword>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	4a05      	ldr	r2, [pc, #20]	@ (800c810 <check_fs+0xa8>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d101      	bne.n	800c802 <check_fs+0x9a>
 800c7fe:	2300      	movs	r3, #0
 800c800:	e000      	b.n	800c804 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c802:	2302      	movs	r3, #2
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	00544146 	.word	0x00544146
 800c810:	33544146 	.word	0x33544146

0800c814 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b096      	sub	sp, #88	@ 0x58
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	4613      	mov	r3, r2
 800c820:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	2200      	movs	r2, #0
 800c826:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	f7ff ff58 	bl	800c6de <get_ldnumber>
 800c82e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c832:	2b00      	cmp	r3, #0
 800c834:	da01      	bge.n	800c83a <find_volume+0x26>
 800c836:	230b      	movs	r3, #11
 800c838:	e22d      	b.n	800cc96 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c83a:	4aa1      	ldr	r2, [pc, #644]	@ (800cac0 <find_volume+0x2ac>)
 800c83c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c842:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <find_volume+0x3a>
 800c84a:	230c      	movs	r3, #12
 800c84c:	e223      	b.n	800cc96 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c852:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c854:	79fb      	ldrb	r3, [r7, #7]
 800c856:	f023 0301 	bic.w	r3, r3, #1
 800c85a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01a      	beq.n	800c89a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c866:	785b      	ldrb	r3, [r3, #1]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fe fc9d 	bl	800b1a8 <disk_status>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c874:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c878:	f003 0301 	and.w	r3, r3, #1
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d10c      	bne.n	800c89a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c880:	79fb      	ldrb	r3, [r7, #7]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d007      	beq.n	800c896 <find_volume+0x82>
 800c886:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c88a:	f003 0304 	and.w	r3, r3, #4
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c892:	230a      	movs	r3, #10
 800c894:	e1ff      	b.n	800cc96 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c896:	2300      	movs	r3, #0
 800c898:	e1fd      	b.n	800cc96 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89c:	2200      	movs	r2, #0
 800c89e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fc95 	bl	800b1dc <disk_initialize>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8bc:	f003 0301 	and.w	r3, r3, #1
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e1e6      	b.n	800cc96 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d007      	beq.n	800c8de <find_volume+0xca>
 800c8ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8d2:	f003 0304 	and.w	r3, r3, #4
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c8da:	230a      	movs	r3, #10
 800c8dc:	e1db      	b.n	800cc96 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c8e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c8e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c8e6:	f7ff ff3f 	bl	800c768 <check_fs>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c8f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d149      	bne.n	800c98c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8fc:	e01e      	b.n	800c93c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c900:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c906:	011b      	lsls	r3, r3, #4
 800c908:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c90c:	4413      	add	r3, r2
 800c90e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c912:	3304      	adds	r3, #4
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d006      	beq.n	800c928 <find_volume+0x114>
 800c91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91c:	3308      	adds	r3, #8
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe fcfa 	bl	800b318 <ld_dword>
 800c924:	4602      	mov	r2, r0
 800c926:	e000      	b.n	800c92a <find_volume+0x116>
 800c928:	2200      	movs	r2, #0
 800c92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c92c:	009b      	lsls	r3, r3, #2
 800c92e:	3358      	adds	r3, #88	@ 0x58
 800c930:	443b      	add	r3, r7
 800c932:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c938:	3301      	adds	r3, #1
 800c93a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d9dd      	bls.n	800c8fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c942:	2300      	movs	r3, #0
 800c944:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <find_volume+0x13e>
 800c94c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c94e:	3b01      	subs	r3, #1
 800c950:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	3358      	adds	r3, #88	@ 0x58
 800c958:	443b      	add	r3, r7
 800c95a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c95e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c962:	2b00      	cmp	r3, #0
 800c964:	d005      	beq.n	800c972 <find_volume+0x15e>
 800c966:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c968:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c96a:	f7ff fefd 	bl	800c768 <check_fs>
 800c96e:	4603      	mov	r3, r0
 800c970:	e000      	b.n	800c974 <find_volume+0x160>
 800c972:	2303      	movs	r3, #3
 800c974:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c978:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d905      	bls.n	800c98c <find_volume+0x178>
 800c980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c982:	3301      	adds	r3, #1
 800c984:	643b      	str	r3, [r7, #64]	@ 0x40
 800c986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c988:	2b03      	cmp	r3, #3
 800c98a:	d9e2      	bls.n	800c952 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c98c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c990:	2b04      	cmp	r3, #4
 800c992:	d101      	bne.n	800c998 <find_volume+0x184>
 800c994:	2301      	movs	r3, #1
 800c996:	e17e      	b.n	800cc96 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c998:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d901      	bls.n	800c9a4 <find_volume+0x190>
 800c9a0:	230d      	movs	r3, #13
 800c9a2:	e178      	b.n	800cc96 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a6:	3330      	adds	r3, #48	@ 0x30
 800c9a8:	330b      	adds	r3, #11
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fe fc9c 	bl	800b2e8 <ld_word>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9b6:	d001      	beq.n	800c9bc <find_volume+0x1a8>
 800c9b8:	230d      	movs	r3, #13
 800c9ba:	e16c      	b.n	800cc96 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9be:	3330      	adds	r3, #48	@ 0x30
 800c9c0:	3316      	adds	r3, #22
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe fc90 	bl	800b2e8 <ld_word>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d106      	bne.n	800c9e0 <find_volume+0x1cc>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	3330      	adds	r3, #48	@ 0x30
 800c9d6:	3324      	adds	r3, #36	@ 0x24
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fc9d 	bl	800b318 <ld_dword>
 800c9de:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f2:	789b      	ldrb	r3, [r3, #2]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d005      	beq.n	800ca04 <find_volume+0x1f0>
 800c9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fa:	789b      	ldrb	r3, [r3, #2]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d001      	beq.n	800ca04 <find_volume+0x1f0>
 800ca00:	230d      	movs	r3, #13
 800ca02:	e148      	b.n	800cc96 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca06:	789b      	ldrb	r3, [r3, #2]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca0c:	fb02 f303 	mul.w	r3, r2, r3
 800ca10:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca18:	461a      	mov	r2, r3
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca20:	895b      	ldrh	r3, [r3, #10]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d008      	beq.n	800ca38 <find_volume+0x224>
 800ca26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca2e:	895b      	ldrh	r3, [r3, #10]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	4013      	ands	r3, r2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <find_volume+0x228>
 800ca38:	230d      	movs	r3, #13
 800ca3a:	e12c      	b.n	800cc96 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3e:	3330      	adds	r3, #48	@ 0x30
 800ca40:	3311      	adds	r3, #17
 800ca42:	4618      	mov	r0, r3
 800ca44:	f7fe fc50 	bl	800b2e8 <ld_word>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ca50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca52:	891b      	ldrh	r3, [r3, #8]
 800ca54:	f003 030f 	and.w	r3, r3, #15
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <find_volume+0x24e>
 800ca5e:	230d      	movs	r3, #13
 800ca60:	e119      	b.n	800cc96 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ca62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca64:	3330      	adds	r3, #48	@ 0x30
 800ca66:	3313      	adds	r3, #19
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7fe fc3d 	bl	800b2e8 <ld_word>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ca72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d106      	bne.n	800ca86 <find_volume+0x272>
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	3330      	adds	r3, #48	@ 0x30
 800ca7c:	3320      	adds	r3, #32
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fe fc4a 	bl	800b318 <ld_dword>
 800ca84:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ca86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca88:	3330      	adds	r3, #48	@ 0x30
 800ca8a:	330e      	adds	r3, #14
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fc2b 	bl	800b2e8 <ld_word>
 800ca92:	4603      	mov	r3, r0
 800ca94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d101      	bne.n	800caa0 <find_volume+0x28c>
 800ca9c:	230d      	movs	r3, #13
 800ca9e:	e0fa      	b.n	800cc96 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800caa0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800caa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caa4:	4413      	add	r3, r2
 800caa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800caa8:	8912      	ldrh	r2, [r2, #8]
 800caaa:	0912      	lsrs	r2, r2, #4
 800caac:	b292      	uxth	r2, r2
 800caae:	4413      	add	r3, r2
 800cab0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cab2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d204      	bcs.n	800cac4 <find_volume+0x2b0>
 800caba:	230d      	movs	r3, #13
 800cabc:	e0eb      	b.n	800cc96 <find_volume+0x482>
 800cabe:	bf00      	nop
 800cac0:	20014724 	.word	0x20014724
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cac4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cacc:	8952      	ldrh	r2, [r2, #10]
 800cace:	fbb3 f3f2 	udiv	r3, r3, r2
 800cad2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d101      	bne.n	800cade <find_volume+0x2ca>
 800cada:	230d      	movs	r3, #13
 800cadc:	e0db      	b.n	800cc96 <find_volume+0x482>
		fmt = FS_FAT32;
 800cade:	2303      	movs	r3, #3
 800cae0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800caea:	4293      	cmp	r3, r2
 800caec:	d802      	bhi.n	800caf4 <find_volume+0x2e0>
 800caee:	2302      	movs	r3, #2
 800caf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d802      	bhi.n	800cb04 <find_volume+0x2f0>
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	1c9a      	adds	r2, r3, #2
 800cb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb10:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb12:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cb14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb16:	441a      	add	r2, r3
 800cb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cb1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb20:	441a      	add	r2, r3
 800cb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb24:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cb26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d11e      	bne.n	800cb6c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb30:	3330      	adds	r3, #48	@ 0x30
 800cb32:	332a      	adds	r3, #42	@ 0x2a
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fe fbd7 	bl	800b2e8 <ld_word>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <find_volume+0x330>
 800cb40:	230d      	movs	r3, #13
 800cb42:	e0a8      	b.n	800cc96 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb46:	891b      	ldrh	r3, [r3, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <find_volume+0x33c>
 800cb4c:	230d      	movs	r3, #13
 800cb4e:	e0a2      	b.n	800cc96 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb52:	3330      	adds	r3, #48	@ 0x30
 800cb54:	332c      	adds	r3, #44	@ 0x2c
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fbde 	bl	800b318 <ld_dword>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb60:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	695b      	ldr	r3, [r3, #20]
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb6a:	e01f      	b.n	800cbac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6e:	891b      	ldrh	r3, [r3, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <find_volume+0x364>
 800cb74:	230d      	movs	r3, #13
 800cb76:	e08e      	b.n	800cc96 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7a:	6a1a      	ldr	r2, [r3, #32]
 800cb7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb7e:	441a      	add	r2, r3
 800cb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb82:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cb84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d103      	bne.n	800cb94 <find_volume+0x380>
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	005b      	lsls	r3, r3, #1
 800cb92:	e00a      	b.n	800cbaa <find_volume+0x396>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb96:	695a      	ldr	r2, [r3, #20]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	005b      	lsls	r3, r3, #1
 800cb9c:	4413      	add	r3, r2
 800cb9e:	085a      	lsrs	r2, r3, #1
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	695b      	ldr	r3, [r3, #20]
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cbaa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbae:	699a      	ldr	r2, [r3, #24]
 800cbb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbb2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cbb6:	0a5b      	lsrs	r3, r3, #9
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d201      	bcs.n	800cbc0 <find_volume+0x3ac>
 800cbbc:	230d      	movs	r3, #13
 800cbbe:	e06a      	b.n	800cc96 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc6:	611a      	str	r2, [r3, #16]
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbca:	691a      	ldr	r2, [r3, #16]
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd2:	2280      	movs	r2, #128	@ 0x80
 800cbd4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cbd6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d149      	bne.n	800cc72 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	3330      	adds	r3, #48	@ 0x30
 800cbe2:	3330      	adds	r3, #48	@ 0x30
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fe fb7f 	bl	800b2e8 <ld_word>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d140      	bne.n	800cc72 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cbf8:	f7fe fe26 	bl	800b848 <move_window>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d137      	bne.n	800cc72 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc04:	2200      	movs	r2, #0
 800cc06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0a:	3330      	adds	r3, #48	@ 0x30
 800cc0c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe fb69 	bl	800b2e8 <ld_word>
 800cc16:	4603      	mov	r3, r0
 800cc18:	461a      	mov	r2, r3
 800cc1a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d127      	bne.n	800cc72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	3330      	adds	r3, #48	@ 0x30
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7fe fb76 	bl	800b318 <ld_dword>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	4a1c      	ldr	r2, [pc, #112]	@ (800cca0 <find_volume+0x48c>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d11e      	bne.n	800cc72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc36:	3330      	adds	r3, #48	@ 0x30
 800cc38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fe fb6b 	bl	800b318 <ld_dword>
 800cc42:	4603      	mov	r3, r0
 800cc44:	4a17      	ldr	r2, [pc, #92]	@ (800cca4 <find_volume+0x490>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d113      	bne.n	800cc72 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4c:	3330      	adds	r3, #48	@ 0x30
 800cc4e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fb60 	bl	800b318 <ld_dword>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc60:	3330      	adds	r3, #48	@ 0x30
 800cc62:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe fb56 	bl	800b318 <ld_dword>
 800cc6c:	4602      	mov	r2, r0
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc70:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cc78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cca8 <find_volume+0x494>)
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	4b09      	ldr	r3, [pc, #36]	@ (800cca8 <find_volume+0x494>)
 800cc84:	801a      	strh	r2, [r3, #0]
 800cc86:	4b08      	ldr	r3, [pc, #32]	@ (800cca8 <find_volume+0x494>)
 800cc88:	881a      	ldrh	r2, [r3, #0]
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cc90:	f7fe fd72 	bl	800b778 <clear_lock>
#endif
	return FR_OK;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3758      	adds	r7, #88	@ 0x58
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	41615252 	.word	0x41615252
 800cca4:	61417272 	.word	0x61417272
 800cca8:	20014728 	.word	0x20014728

0800ccac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ccb6:	2309      	movs	r3, #9
 800ccb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d01c      	beq.n	800ccfa <validate+0x4e>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d018      	beq.n	800ccfa <validate+0x4e>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d013      	beq.n	800ccfa <validate+0x4e>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	889a      	ldrh	r2, [r3, #4]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	88db      	ldrh	r3, [r3, #6]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d10c      	bne.n	800ccfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	785b      	ldrb	r3, [r3, #1]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fe fa5e 	bl	800b1a8 <disk_status>
 800ccec:	4603      	mov	r3, r0
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <validate+0x4e>
			res = FR_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <validate+0x5a>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	e000      	b.n	800cd08 <validate+0x5c>
 800cd06:	2300      	movs	r3, #0
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	6013      	str	r3, [r2, #0]
	return res;
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd2a:	f107 0310 	add.w	r3, r7, #16
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7ff fcd5 	bl	800c6de <get_ldnumber>
 800cd34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	da01      	bge.n	800cd40 <f_mount+0x28>
 800cd3c:	230b      	movs	r3, #11
 800cd3e:	e02b      	b.n	800cd98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd40:	4a17      	ldr	r2, [pc, #92]	@ (800cda0 <f_mount+0x88>)
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d005      	beq.n	800cd5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd50:	69b8      	ldr	r0, [r7, #24]
 800cd52:	f7fe fd11 	bl	800b778 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	490d      	ldr	r1, [pc, #52]	@ (800cda0 <f_mount+0x88>)
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <f_mount+0x66>
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d001      	beq.n	800cd82 <f_mount+0x6a>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e00a      	b.n	800cd98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd82:	f107 010c 	add.w	r1, r7, #12
 800cd86:	f107 0308 	add.w	r3, r7, #8
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff fd41 	bl	800c814 <find_volume>
 800cd92:	4603      	mov	r3, r0
 800cd94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3720      	adds	r7, #32
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	20014724 	.word	0x20014724

0800cda4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b098      	sub	sp, #96	@ 0x60
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <f_open+0x18>
 800cdb8:	2309      	movs	r3, #9
 800cdba:	e1a9      	b.n	800d110 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cdbc:	79fb      	ldrb	r3, [r7, #7]
 800cdbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cdc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cdc4:	79fa      	ldrb	r2, [r7, #7]
 800cdc6:	f107 0110 	add.w	r1, r7, #16
 800cdca:	f107 0308 	add.w	r3, r7, #8
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff fd20 	bl	800c814 <find_volume>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cdda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f040 818d 	bne.w	800d0fe <f_open+0x35a>
		dj.obj.fs = fs;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	f107 0314 	add.w	r3, r7, #20
 800cdee:	4611      	mov	r1, r2
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7ff fc03 	bl	800c5fc <follow_path>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cdfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d118      	bne.n	800ce36 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ce08:	b25b      	sxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	da03      	bge.n	800ce16 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce0e:	2306      	movs	r3, #6
 800ce10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce14:	e00f      	b.n	800ce36 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	bf8c      	ite	hi
 800ce1c:	2301      	movhi	r3, #1
 800ce1e:	2300      	movls	r3, #0
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	461a      	mov	r2, r3
 800ce24:	f107 0314 	add.w	r3, r7, #20
 800ce28:	4611      	mov	r1, r2
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fe fb5c 	bl	800b4e8 <chk_lock>
 800ce30:	4603      	mov	r3, r0
 800ce32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	f003 031c 	and.w	r3, r3, #28
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d07f      	beq.n	800cf40 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ce40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d017      	beq.n	800ce78 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce4c:	2b04      	cmp	r3, #4
 800ce4e:	d10e      	bne.n	800ce6e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ce50:	f7fe fba6 	bl	800b5a0 <enq_lock>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d006      	beq.n	800ce68 <f_open+0xc4>
 800ce5a:	f107 0314 	add.w	r3, r7, #20
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fae7 	bl	800c432 <dir_register>
 800ce64:	4603      	mov	r3, r0
 800ce66:	e000      	b.n	800ce6a <f_open+0xc6>
 800ce68:	2312      	movs	r3, #18
 800ce6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	f043 0308 	orr.w	r3, r3, #8
 800ce74:	71fb      	strb	r3, [r7, #7]
 800ce76:	e010      	b.n	800ce9a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce78:	7ebb      	ldrb	r3, [r7, #26]
 800ce7a:	f003 0311 	and.w	r3, r3, #17
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d003      	beq.n	800ce8a <f_open+0xe6>
					res = FR_DENIED;
 800ce82:	2307      	movs	r3, #7
 800ce84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce88:	e007      	b.n	800ce9a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <f_open+0xf6>
 800ce94:	2308      	movs	r3, #8
 800ce96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d168      	bne.n	800cf74 <f_open+0x1d0>
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	f003 0308 	and.w	r3, r3, #8
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d063      	beq.n	800cf74 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ceac:	f7fe f810 	bl	800aed0 <get_fattime>
 800ceb0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ceb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb4:	330e      	adds	r3, #14
 800ceb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f7fe fa6b 	bl	800b394 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec0:	3316      	adds	r3, #22
 800cec2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fe fa65 	bl	800b394 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ceca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cecc:	330b      	adds	r3, #11
 800cece:	2220      	movs	r2, #32
 800ced0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff f9b9 	bl	800c250 <ld_clust>
 800cede:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cee4:	2200      	movs	r2, #0
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7ff f9d1 	bl	800c28e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ceec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceee:	331c      	adds	r3, #28
 800cef0:	2100      	movs	r1, #0
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe fa4e 	bl	800b394 <st_dword>
					fs->wflag = 1;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	2201      	movs	r2, #1
 800cefc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cefe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d037      	beq.n	800cf74 <f_open+0x1d0>
						dw = fs->winsect;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cf0a:	f107 0314 	add.w	r3, r7, #20
 800cf0e:	2200      	movs	r2, #0
 800cf10:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fe fee4 	bl	800bce0 <remove_chain>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cf1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d126      	bne.n	800cf74 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe fc8c 	bl	800b848 <move_window>
 800cf30:	4603      	mov	r3, r0
 800cf32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cf3a:	3a01      	subs	r2, #1
 800cf3c:	60da      	str	r2, [r3, #12]
 800cf3e:	e019      	b.n	800cf74 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d115      	bne.n	800cf74 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf48:	7ebb      	ldrb	r3, [r7, #26]
 800cf4a:	f003 0310 	and.w	r3, r3, #16
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <f_open+0x1b6>
					res = FR_NO_FILE;
 800cf52:	2304      	movs	r3, #4
 800cf54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf58:	e00c      	b.n	800cf74 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cf5a:	79fb      	ldrb	r3, [r7, #7]
 800cf5c:	f003 0302 	and.w	r3, r3, #2
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d007      	beq.n	800cf74 <f_open+0x1d0>
 800cf64:	7ebb      	ldrb	r3, [r7, #26]
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <f_open+0x1d0>
						res = FR_DENIED;
 800cf6e:	2307      	movs	r3, #7
 800cf70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cf74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d126      	bne.n	800cfca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	f003 0308 	and.w	r3, r3, #8
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cf86:	79fb      	ldrb	r3, [r7, #7]
 800cf88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf8c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cf96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	bf8c      	ite	hi
 800cfa2:	2301      	movhi	r3, #1
 800cfa4:	2300      	movls	r3, #0
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f107 0314 	add.w	r3, r7, #20
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7fe fb17 	bl	800b5e4 <inc_lock>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	691b      	ldr	r3, [r3, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <f_open+0x226>
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cfca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	f040 8095 	bne.w	800d0fe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfd8:	4611      	mov	r1, r2
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff f938 	bl	800c250 <ld_clust>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe8:	331c      	adds	r3, #28
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe f994 	bl	800b318 <ld_dword>
 800cff0:	4602      	mov	r2, r0
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	88da      	ldrh	r2, [r3, #6]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	79fa      	ldrb	r2, [r7, #7]
 800d00e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	3330      	adds	r3, #48	@ 0x30
 800d026:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d02a:	2100      	movs	r1, #0
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fe f9fe 	bl	800b42e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d060      	beq.n	800d0fe <f_open+0x35a>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d05c      	beq.n	800d0fe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	68da      	ldr	r2, [r3, #12]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	895b      	ldrh	r3, [r3, #10]
 800d050:	025b      	lsls	r3, r3, #9
 800d052:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d060:	e016      	b.n	800d090 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe fca9 	bl	800b9be <get_fat>
 800d06c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d06e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d070:	2b01      	cmp	r3, #1
 800d072:	d802      	bhi.n	800d07a <f_open+0x2d6>
 800d074:	2302      	movs	r3, #2
 800d076:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d07a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d080:	d102      	bne.n	800d088 <f_open+0x2e4>
 800d082:	2301      	movs	r3, #1
 800d084:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d088:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d08a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d090:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d094:	2b00      	cmp	r3, #0
 800d096:	d103      	bne.n	800d0a0 <f_open+0x2fc>
 800d098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d09a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d8e0      	bhi.n	800d062 <f_open+0x2be>
				}
				fp->clust = clst;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d0a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d127      	bne.n	800d0fe <f_open+0x35a>
 800d0ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d022      	beq.n	800d0fe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fc5f 	bl	800b980 <clust2sect>
 800d0c2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d103      	bne.n	800d0d2 <f_open+0x32e>
						res = FR_INT_ERR;
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d0d0:	e015      	b.n	800d0fe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d0d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d4:	0a5a      	lsrs	r2, r3, #9
 800d0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0d8:	441a      	add	r2, r3
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	7858      	ldrb	r0, [r3, #1]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6a1a      	ldr	r2, [r3, #32]
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	f7fe f89d 	bl	800b22c <disk_read>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d002      	beq.n	800d0fe <f_open+0x35a>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <f_open+0x368>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d10c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d110:	4618      	mov	r0, r3
 800d112:	3760      	adds	r7, #96	@ 0x60
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08e      	sub	sp, #56	@ 0x38
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f107 0214 	add.w	r2, r7, #20
 800d136:	4611      	mov	r1, r2
 800d138:	4618      	mov	r0, r3
 800d13a:	f7ff fdb7 	bl	800ccac <validate>
 800d13e:	4603      	mov	r3, r0
 800d140:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d144:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d107      	bne.n	800d15c <f_read+0x44>
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	7d5b      	ldrb	r3, [r3, #21]
 800d150:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d154:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <f_read+0x4a>
 800d15c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d160:	e115      	b.n	800d38e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	7d1b      	ldrb	r3, [r3, #20]
 800d166:	f003 0301 	and.w	r3, r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <f_read+0x5a>
 800d16e:	2307      	movs	r3, #7
 800d170:	e10d      	b.n	800d38e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	68da      	ldr	r2, [r3, #12]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	699b      	ldr	r3, [r3, #24]
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	429a      	cmp	r2, r3
 800d184:	f240 80fe 	bls.w	800d384 <f_read+0x26c>
 800d188:	6a3b      	ldr	r3, [r7, #32]
 800d18a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d18c:	e0fa      	b.n	800d384 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	699b      	ldr	r3, [r3, #24]
 800d192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d196:	2b00      	cmp	r3, #0
 800d198:	f040 80c6 	bne.w	800d328 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	699b      	ldr	r3, [r3, #24]
 800d1a0:	0a5b      	lsrs	r3, r3, #9
 800d1a2:	697a      	ldr	r2, [r7, #20]
 800d1a4:	8952      	ldrh	r2, [r2, #10]
 800d1a6:	3a01      	subs	r2, #1
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d12f      	bne.n	800d212 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	699b      	ldr	r3, [r3, #24]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d103      	bne.n	800d1c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1c0:	e013      	b.n	800d1ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d007      	beq.n	800d1da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f7fe fe82 	bl	800beda <clmt_clust>
 800d1d6:	6338      	str	r0, [r7, #48]	@ 0x30
 800d1d8:	e007      	b.n	800d1ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	69db      	ldr	r3, [r3, #28]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	4610      	mov	r0, r2
 800d1e4:	f7fe fbeb 	bl	800b9be <get_fat>
 800d1e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d804      	bhi.n	800d1fa <f_read+0xe2>
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	755a      	strb	r2, [r3, #21]
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	e0c9      	b.n	800d38e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d200:	d104      	bne.n	800d20c <f_read+0xf4>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2201      	movs	r2, #1
 800d206:	755a      	strb	r2, [r3, #21]
 800d208:	2301      	movs	r3, #1
 800d20a:	e0c0      	b.n	800d38e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d210:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	69db      	ldr	r3, [r3, #28]
 800d218:	4619      	mov	r1, r3
 800d21a:	4610      	mov	r0, r2
 800d21c:	f7fe fbb0 	bl	800b980 <clust2sect>
 800d220:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d104      	bne.n	800d232 <f_read+0x11a>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2202      	movs	r2, #2
 800d22c:	755a      	strb	r2, [r3, #21]
 800d22e:	2302      	movs	r3, #2
 800d230:	e0ad      	b.n	800d38e <f_read+0x276>
			sect += csect;
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	4413      	add	r3, r2
 800d238:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	0a5b      	lsrs	r3, r3, #9
 800d23e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d242:	2b00      	cmp	r3, #0
 800d244:	d039      	beq.n	800d2ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d246:	69fa      	ldr	r2, [r7, #28]
 800d248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24a:	4413      	add	r3, r2
 800d24c:	697a      	ldr	r2, [r7, #20]
 800d24e:	8952      	ldrh	r2, [r2, #10]
 800d250:	4293      	cmp	r3, r2
 800d252:	d905      	bls.n	800d260 <f_read+0x148>
					cc = fs->csize - csect;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	895b      	ldrh	r3, [r3, #10]
 800d258:	461a      	mov	r2, r3
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	7858      	ldrb	r0, [r3, #1]
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	69ba      	ldr	r2, [r7, #24]
 800d268:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d26a:	f7fd ffdf 	bl	800b22c <disk_read>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d004      	beq.n	800d27e <f_read+0x166>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2201      	movs	r2, #1
 800d278:	755a      	strb	r2, [r3, #21]
 800d27a:	2301      	movs	r3, #1
 800d27c:	e087      	b.n	800d38e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	7d1b      	ldrb	r3, [r3, #20]
 800d282:	b25b      	sxtb	r3, r3
 800d284:	2b00      	cmp	r3, #0
 800d286:	da14      	bge.n	800d2b2 <f_read+0x19a>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6a1a      	ldr	r2, [r3, #32]
 800d28c:	69bb      	ldr	r3, [r7, #24]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d292:	429a      	cmp	r2, r3
 800d294:	d90d      	bls.n	800d2b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6a1a      	ldr	r2, [r3, #32]
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	025b      	lsls	r3, r3, #9
 800d2a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2a2:	18d0      	adds	r0, r2, r3
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	3330      	adds	r3, #48	@ 0x30
 800d2a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	f7fe f89d 	bl	800b3ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b4:	025b      	lsls	r3, r3, #9
 800d2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d2b8:	e050      	b.n	800d35c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	69ba      	ldr	r2, [r7, #24]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d02e      	beq.n	800d322 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	7d1b      	ldrb	r3, [r3, #20]
 800d2c8:	b25b      	sxtb	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	da18      	bge.n	800d300 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	7858      	ldrb	r0, [r3, #1]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6a1a      	ldr	r2, [r3, #32]
 800d2dc:	2301      	movs	r3, #1
 800d2de:	f7fd ffc5 	bl	800b26c <disk_write>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d004      	beq.n	800d2f2 <f_read+0x1da>
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	755a      	strb	r2, [r3, #21]
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e04d      	b.n	800d38e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	7d1b      	ldrb	r3, [r3, #20]
 800d2f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	7858      	ldrb	r0, [r3, #1]
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d30a:	2301      	movs	r3, #1
 800d30c:	69ba      	ldr	r2, [r7, #24]
 800d30e:	f7fd ff8d 	bl	800b22c <disk_read>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d004      	beq.n	800d322 <f_read+0x20a>
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	755a      	strb	r2, [r3, #21]
 800d31e:	2301      	movs	r3, #1
 800d320:	e035      	b.n	800d38e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	69ba      	ldr	r2, [r7, #24]
 800d326:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d330:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d334:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d901      	bls.n	800d342 <f_read+0x22a>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d350:	4413      	add	r3, r2
 800d352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d354:	4619      	mov	r1, r3
 800d356:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d358:	f7fe f848 	bl	800b3ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d360:	4413      	add	r3, r2
 800d362:	627b      	str	r3, [r7, #36]	@ 0x24
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	699a      	ldr	r2, [r3, #24]
 800d368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d36a:	441a      	add	r2, r3
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	619a      	str	r2, [r3, #24]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d376:	441a      	add	r2, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	f47f af01 	bne.w	800d18e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3738      	adds	r7, #56	@ 0x38
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b08c      	sub	sp, #48	@ 0x30
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	60f8      	str	r0, [r7, #12]
 800d39e:	60b9      	str	r1, [r7, #8]
 800d3a0:	607a      	str	r2, [r7, #4]
 800d3a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f107 0210 	add.w	r2, r7, #16
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fc78 	bl	800ccac <validate>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d107      	bne.n	800d3da <f_write+0x44>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	7d5b      	ldrb	r3, [r3, #21]
 800d3ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d3d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <f_write+0x4a>
 800d3da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3de:	e14b      	b.n	800d678 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	7d1b      	ldrb	r3, [r3, #20]
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <f_write+0x5a>
 800d3ec:	2307      	movs	r3, #7
 800d3ee:	e143      	b.n	800d678 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	699a      	ldr	r2, [r3, #24]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	441a      	add	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	f080 812d 	bcs.w	800d65c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	43db      	mvns	r3, r3
 800d408:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d40a:	e127      	b.n	800d65c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	699b      	ldr	r3, [r3, #24]
 800d410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d414:	2b00      	cmp	r3, #0
 800d416:	f040 80e3 	bne.w	800d5e0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	0a5b      	lsrs	r3, r3, #9
 800d420:	693a      	ldr	r2, [r7, #16]
 800d422:	8952      	ldrh	r2, [r2, #10]
 800d424:	3a01      	subs	r2, #1
 800d426:	4013      	ands	r3, r2
 800d428:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d143      	bne.n	800d4b8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10c      	bne.n	800d452 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d440:	2b00      	cmp	r3, #0
 800d442:	d11a      	bne.n	800d47a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2100      	movs	r1, #0
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fcae 	bl	800bdaa <create_chain>
 800d44e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d450:	e013      	b.n	800d47a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	4619      	mov	r1, r3
 800d460:	68f8      	ldr	r0, [r7, #12]
 800d462:	f7fe fd3a 	bl	800beda <clmt_clust>
 800d466:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d468:	e007      	b.n	800d47a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	69db      	ldr	r3, [r3, #28]
 800d470:	4619      	mov	r1, r3
 800d472:	4610      	mov	r0, r2
 800d474:	f7fe fc99 	bl	800bdaa <create_chain>
 800d478:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 80f2 	beq.w	800d666 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d484:	2b01      	cmp	r3, #1
 800d486:	d104      	bne.n	800d492 <f_write+0xfc>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2202      	movs	r2, #2
 800d48c:	755a      	strb	r2, [r3, #21]
 800d48e:	2302      	movs	r3, #2
 800d490:	e0f2      	b.n	800d678 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d498:	d104      	bne.n	800d4a4 <f_write+0x10e>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2201      	movs	r2, #1
 800d49e:	755a      	strb	r2, [r3, #21]
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e0e9      	b.n	800d678 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d102      	bne.n	800d4b8 <f_write+0x122>
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	7d1b      	ldrb	r3, [r3, #20]
 800d4bc:	b25b      	sxtb	r3, r3
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	da18      	bge.n	800d4f4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	7858      	ldrb	r0, [r3, #1]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6a1a      	ldr	r2, [r3, #32]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f7fd fecb 	bl	800b26c <disk_write>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d004      	beq.n	800d4e6 <f_write+0x150>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	755a      	strb	r2, [r3, #21]
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e0c8      	b.n	800d678 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	7d1b      	ldrb	r3, [r3, #20]
 800d4ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4f4:	693a      	ldr	r2, [r7, #16]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	69db      	ldr	r3, [r3, #28]
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	f7fe fa3f 	bl	800b980 <clust2sect>
 800d502:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d104      	bne.n	800d514 <f_write+0x17e>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2202      	movs	r2, #2
 800d50e:	755a      	strb	r2, [r3, #21]
 800d510:	2302      	movs	r3, #2
 800d512:	e0b1      	b.n	800d678 <f_write+0x2e2>
			sect += csect;
 800d514:	697a      	ldr	r2, [r7, #20]
 800d516:	69bb      	ldr	r3, [r7, #24]
 800d518:	4413      	add	r3, r2
 800d51a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	0a5b      	lsrs	r3, r3, #9
 800d520:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d522:	6a3b      	ldr	r3, [r7, #32]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d03c      	beq.n	800d5a2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	6a3b      	ldr	r3, [r7, #32]
 800d52c:	4413      	add	r3, r2
 800d52e:	693a      	ldr	r2, [r7, #16]
 800d530:	8952      	ldrh	r2, [r2, #10]
 800d532:	4293      	cmp	r3, r2
 800d534:	d905      	bls.n	800d542 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	895b      	ldrh	r3, [r3, #10]
 800d53a:	461a      	mov	r2, r3
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	7858      	ldrb	r0, [r3, #1]
 800d546:	6a3b      	ldr	r3, [r7, #32]
 800d548:	697a      	ldr	r2, [r7, #20]
 800d54a:	69f9      	ldr	r1, [r7, #28]
 800d54c:	f7fd fe8e 	bl	800b26c <disk_write>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d004      	beq.n	800d560 <f_write+0x1ca>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2201      	movs	r2, #1
 800d55a:	755a      	strb	r2, [r3, #21]
 800d55c:	2301      	movs	r3, #1
 800d55e:	e08b      	b.n	800d678 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	6a1a      	ldr	r2, [r3, #32]
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	1ad3      	subs	r3, r2, r3
 800d568:	6a3a      	ldr	r2, [r7, #32]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d915      	bls.n	800d59a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6a1a      	ldr	r2, [r3, #32]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	1ad3      	subs	r3, r2, r3
 800d57c:	025b      	lsls	r3, r3, #9
 800d57e:	69fa      	ldr	r2, [r7, #28]
 800d580:	4413      	add	r3, r2
 800d582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d586:	4619      	mov	r1, r3
 800d588:	f7fd ff30 	bl	800b3ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d594:	b2da      	uxtb	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	025b      	lsls	r3, r3, #9
 800d59e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d5a0:	e03f      	b.n	800d622 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d016      	beq.n	800d5da <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	699a      	ldr	r2, [r3, #24]
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d210      	bcs.n	800d5da <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	7858      	ldrb	r0, [r3, #1]
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	697a      	ldr	r2, [r7, #20]
 800d5c6:	f7fd fe31 	bl	800b22c <disk_read>
 800d5ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d004      	beq.n	800d5da <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	755a      	strb	r2, [r3, #21]
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	e04e      	b.n	800d678 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	697a      	ldr	r2, [r7, #20]
 800d5de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d5ec:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d901      	bls.n	800d5fa <f_write+0x264>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d608:	4413      	add	r3, r2
 800d60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d60c:	69f9      	ldr	r1, [r7, #28]
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fd feec 	bl	800b3ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	7d1b      	ldrb	r3, [r3, #20]
 800d618:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d61c:	b2da      	uxtb	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d622:	69fa      	ldr	r2, [r7, #28]
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	4413      	add	r3, r2
 800d628:	61fb      	str	r3, [r7, #28]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	699a      	ldr	r2, [r3, #24]
 800d62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d630:	441a      	add	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	619a      	str	r2, [r3, #24]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	429a      	cmp	r2, r3
 800d640:	bf38      	it	cc
 800d642:	461a      	movcc	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	60da      	str	r2, [r3, #12]
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64e:	441a      	add	r2, r3
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	601a      	str	r2, [r3, #0]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f47f aed4 	bne.w	800d40c <f_write+0x76>
 800d664:	e000      	b.n	800d668 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d666:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d670:	b2da      	uxtb	r2, r3
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3730      	adds	r7, #48	@ 0x30
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b086      	sub	sp, #24
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f107 0208 	add.w	r2, r7, #8
 800d68e:	4611      	mov	r1, r2
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff fb0b 	bl	800ccac <validate>
 800d696:	4603      	mov	r3, r0
 800d698:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d168      	bne.n	800d772 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7d1b      	ldrb	r3, [r3, #20]
 800d6a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d062      	beq.n	800d772 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7d1b      	ldrb	r3, [r3, #20]
 800d6b0:	b25b      	sxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	da15      	bge.n	800d6e2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	7858      	ldrb	r0, [r3, #1]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a1a      	ldr	r2, [r3, #32]
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	f7fd fdd1 	bl	800b26c <disk_write>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <f_sync+0x54>
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	e04f      	b.n	800d774 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d6e2:	f7fd fbf5 	bl	800aed0 <get_fattime>
 800d6e6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7fe f8a9 	bl	800b848 <move_window>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d138      	bne.n	800d772 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d704:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	330b      	adds	r3, #11
 800d70a:	781a      	ldrb	r2, [r3, #0]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	330b      	adds	r3, #11
 800d710:	f042 0220 	orr.w	r2, r2, #32
 800d714:	b2d2      	uxtb	r2, r2
 800d716:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6818      	ldr	r0, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	461a      	mov	r2, r3
 800d722:	68f9      	ldr	r1, [r7, #12]
 800d724:	f7fe fdb3 	bl	800c28e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f103 021c 	add.w	r2, r3, #28
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	4619      	mov	r1, r3
 800d734:	4610      	mov	r0, r2
 800d736:	f7fd fe2d 	bl	800b394 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	3316      	adds	r3, #22
 800d73e:	6939      	ldr	r1, [r7, #16]
 800d740:	4618      	mov	r0, r3
 800d742:	f7fd fe27 	bl	800b394 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	3312      	adds	r3, #18
 800d74a:	2100      	movs	r1, #0
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fd fe06 	bl	800b35e <st_word>
					fs->wflag = 1;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	2201      	movs	r2, #1
 800d756:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fe f8a2 	bl	800b8a4 <sync_fs>
 800d760:	4603      	mov	r3, r0
 800d762:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	7d1b      	ldrb	r3, [r3, #20]
 800d768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d772:	7dfb      	ldrb	r3, [r7, #23]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7ff ff7b 	bl	800d680 <f_sync>
 800d78a:	4603      	mov	r3, r0
 800d78c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d118      	bne.n	800d7c6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f107 0208 	add.w	r2, r7, #8
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7ff fa85 	bl	800ccac <validate>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7a6:	7bfb      	ldrb	r3, [r7, #15]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10c      	bne.n	800d7c6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	691b      	ldr	r3, [r3, #16]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fd ffa5 	bl	800b700 <dec_lock>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d7ba:	7bfb      	ldrb	r3, [r7, #15]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d102      	bne.n	800d7c6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b090      	sub	sp, #64	@ 0x40
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f107 0208 	add.w	r2, r7, #8
 800d7e0:	4611      	mov	r1, r2
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7ff fa62 	bl	800ccac <validate>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d7ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d103      	bne.n	800d7fe <f_lseek+0x2e>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7d5b      	ldrb	r3, [r3, #21]
 800d7fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d7fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d802:	2b00      	cmp	r3, #0
 800d804:	d002      	beq.n	800d80c <f_lseek+0x3c>
 800d806:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d80a:	e1e6      	b.n	800dbda <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 80d1 	beq.w	800d9b8 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81c:	d15a      	bne.n	800d8d4 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d822:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d826:	1d1a      	adds	r2, r3, #4
 800d828:	627a      	str	r2, [r7, #36]	@ 0x24
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	2302      	movs	r3, #2
 800d830:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d03a      	beq.n	800d8b4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	613b      	str	r3, [r7, #16]
 800d842:	2300      	movs	r3, #0
 800d844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d848:	3302      	adds	r3, #2
 800d84a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d852:	3301      	adds	r3, #1
 800d854:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fe f8af 	bl	800b9be <get_fat>
 800d860:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d864:	2b01      	cmp	r3, #1
 800d866:	d804      	bhi.n	800d872 <f_lseek+0xa2>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	755a      	strb	r2, [r3, #21]
 800d86e:	2302      	movs	r3, #2
 800d870:	e1b3      	b.n	800dbda <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d878:	d104      	bne.n	800d884 <f_lseek+0xb4>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	755a      	strb	r2, [r3, #21]
 800d880:	2301      	movs	r3, #1
 800d882:	e1aa      	b.n	800dbda <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d0de      	beq.n	800d84c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d88e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	429a      	cmp	r2, r3
 800d894:	d809      	bhi.n	800d8aa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d898:	1d1a      	adds	r2, r3, #4
 800d89a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d89c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d89e:	601a      	str	r2, [r3, #0]
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a2:	1d1a      	adds	r2, r3, #4
 800d8a4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8a6:	693a      	ldr	r2, [r7, #16]
 800d8a8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d3c4      	bcc.n	800d83e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8ba:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d8bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d803      	bhi.n	800d8cc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	e184      	b.n	800dbd6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d8cc:	2311      	movs	r3, #17
 800d8ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d8d2:	e180      	b.n	800dbd6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d902      	bls.n	800d8e4 <f_lseek+0x114>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f000 8172 	beq.w	800dbd6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f7fe faee 	bl	800beda <clmt_clust>
 800d8fe:	4602      	mov	r2, r0
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	69db      	ldr	r3, [r3, #28]
 800d90a:	4619      	mov	r1, r3
 800d90c:	4610      	mov	r0, r2
 800d90e:	f7fe f837 	bl	800b980 <clust2sect>
 800d912:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d104      	bne.n	800d924 <f_lseek+0x154>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2202      	movs	r2, #2
 800d91e:	755a      	strb	r2, [r3, #21]
 800d920:	2302      	movs	r3, #2
 800d922:	e15a      	b.n	800dbda <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	3b01      	subs	r3, #1
 800d928:	0a5b      	lsrs	r3, r3, #9
 800d92a:	68ba      	ldr	r2, [r7, #8]
 800d92c:	8952      	ldrh	r2, [r2, #10]
 800d92e:	3a01      	subs	r2, #1
 800d930:	4013      	ands	r3, r2
 800d932:	69ba      	ldr	r2, [r7, #24]
 800d934:	4413      	add	r3, r2
 800d936:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8148 	beq.w	800dbd6 <f_lseek+0x406>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	69ba      	ldr	r2, [r7, #24]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	f000 8142 	beq.w	800dbd6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7d1b      	ldrb	r3, [r3, #20]
 800d956:	b25b      	sxtb	r3, r3
 800d958:	2b00      	cmp	r3, #0
 800d95a:	da18      	bge.n	800d98e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	7858      	ldrb	r0, [r3, #1]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6a1a      	ldr	r2, [r3, #32]
 800d96a:	2301      	movs	r3, #1
 800d96c:	f7fd fc7e 	bl	800b26c <disk_write>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d004      	beq.n	800d980 <f_lseek+0x1b0>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	755a      	strb	r2, [r3, #21]
 800d97c:	2301      	movs	r3, #1
 800d97e:	e12c      	b.n	800dbda <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	7d1b      	ldrb	r3, [r3, #20]
 800d984:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	7858      	ldrb	r0, [r3, #1]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d998:	2301      	movs	r3, #1
 800d99a:	69ba      	ldr	r2, [r7, #24]
 800d99c:	f7fd fc46 	bl	800b22c <disk_read>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <f_lseek+0x1e0>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	755a      	strb	r2, [r3, #21]
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e114      	b.n	800dbda <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	69ba      	ldr	r2, [r7, #24]
 800d9b4:	621a      	str	r2, [r3, #32]
 800d9b6:	e10e      	b.n	800dbd6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	683a      	ldr	r2, [r7, #0]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d908      	bls.n	800d9d4 <f_lseek+0x204>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7d1b      	ldrb	r3, [r3, #20]
 800d9c6:	f003 0302 	and.w	r3, r3, #2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d102      	bne.n	800d9d4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9e2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 80a7 	beq.w	800db3a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	895b      	ldrh	r3, [r3, #10]
 800d9f0:	025b      	lsls	r3, r3, #9
 800d9f2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d9f4:	6a3b      	ldr	r3, [r7, #32]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d01b      	beq.n	800da32 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	1e5a      	subs	r2, r3, #1
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	fbb2 f2f3 	udiv	r2, r2, r3
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	1e59      	subs	r1, r3, #1
 800da08:	69fb      	ldr	r3, [r7, #28]
 800da0a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800da0e:	429a      	cmp	r2, r3
 800da10:	d30f      	bcc.n	800da32 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800da12:	6a3b      	ldr	r3, [r7, #32]
 800da14:	1e5a      	subs	r2, r3, #1
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	425b      	negs	r3, r3
 800da1a:	401a      	ands	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	699b      	ldr	r3, [r3, #24]
 800da24:	683a      	ldr	r2, [r7, #0]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	69db      	ldr	r3, [r3, #28]
 800da2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da30:	e022      	b.n	800da78 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	689b      	ldr	r3, [r3, #8]
 800da36:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d119      	bne.n	800da72 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2100      	movs	r1, #0
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe f9b1 	bl	800bdaa <create_chain>
 800da48:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d104      	bne.n	800da5a <f_lseek+0x28a>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2202      	movs	r2, #2
 800da54:	755a      	strb	r2, [r3, #21]
 800da56:	2302      	movs	r3, #2
 800da58:	e0bf      	b.n	800dbda <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da60:	d104      	bne.n	800da6c <f_lseek+0x29c>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2201      	movs	r2, #1
 800da66:	755a      	strb	r2, [r3, #21]
 800da68:	2301      	movs	r3, #1
 800da6a:	e0b6      	b.n	800dbda <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da70:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da76:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800da78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d05d      	beq.n	800db3a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800da7e:	e03a      	b.n	800daf6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	603b      	str	r3, [r7, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	699a      	ldr	r2, [r3, #24]
 800da8c:	69fb      	ldr	r3, [r7, #28]
 800da8e:	441a      	add	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	f003 0302 	and.w	r3, r3, #2
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00b      	beq.n	800dab8 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fe f980 	bl	800bdaa <create_chain>
 800daaa:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800daac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d108      	bne.n	800dac4 <f_lseek+0x2f4>
							ofs = 0; break;
 800dab2:	2300      	movs	r3, #0
 800dab4:	603b      	str	r3, [r7, #0]
 800dab6:	e022      	b.n	800dafe <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fd ff7e 	bl	800b9be <get_fat>
 800dac2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daca:	d104      	bne.n	800dad6 <f_lseek+0x306>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	755a      	strb	r2, [r3, #21]
 800dad2:	2301      	movs	r3, #1
 800dad4:	e081      	b.n	800dbda <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d904      	bls.n	800dae6 <f_lseek+0x316>
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	695b      	ldr	r3, [r3, #20]
 800dae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d304      	bcc.n	800daf0 <f_lseek+0x320>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2202      	movs	r2, #2
 800daea:	755a      	strb	r2, [r3, #21]
 800daec:	2302      	movs	r3, #2
 800daee:	e074      	b.n	800dbda <f_lseek+0x40a>
					fp->clust = clst;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800daf4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d8c0      	bhi.n	800da80 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	699a      	ldr	r2, [r3, #24]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	441a      	add	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db10:	2b00      	cmp	r3, #0
 800db12:	d012      	beq.n	800db3a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800db18:	4618      	mov	r0, r3
 800db1a:	f7fd ff31 	bl	800b980 <clust2sect>
 800db1e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db22:	2b00      	cmp	r3, #0
 800db24:	d104      	bne.n	800db30 <f_lseek+0x360>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2202      	movs	r2, #2
 800db2a:	755a      	strb	r2, [r3, #21]
 800db2c:	2302      	movs	r3, #2
 800db2e:	e054      	b.n	800dbda <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	0a5b      	lsrs	r3, r3, #9
 800db34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db36:	4413      	add	r3, r2
 800db38:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	699a      	ldr	r2, [r3, #24]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	429a      	cmp	r2, r3
 800db44:	d90a      	bls.n	800db5c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	699a      	ldr	r2, [r3, #24]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	7d1b      	ldrb	r3, [r3, #20]
 800db52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db56:	b2da      	uxtb	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db64:	2b00      	cmp	r3, #0
 800db66:	d036      	beq.n	800dbd6 <f_lseek+0x406>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db6e:	429a      	cmp	r2, r3
 800db70:	d031      	beq.n	800dbd6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	7d1b      	ldrb	r3, [r3, #20]
 800db76:	b25b      	sxtb	r3, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	da18      	bge.n	800dbae <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	7858      	ldrb	r0, [r3, #1]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a1a      	ldr	r2, [r3, #32]
 800db8a:	2301      	movs	r3, #1
 800db8c:	f7fd fb6e 	bl	800b26c <disk_write>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d004      	beq.n	800dba0 <f_lseek+0x3d0>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2201      	movs	r2, #1
 800db9a:	755a      	strb	r2, [r3, #21]
 800db9c:	2301      	movs	r3, #1
 800db9e:	e01c      	b.n	800dbda <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	7d1b      	ldrb	r3, [r3, #20]
 800dba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	7858      	ldrb	r0, [r3, #1]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbb8:	2301      	movs	r3, #1
 800dbba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbbc:	f7fd fb36 	bl	800b22c <disk_read>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d004      	beq.n	800dbd0 <f_lseek+0x400>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	755a      	strb	r2, [r3, #21]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e004      	b.n	800dbda <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbd4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dbd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3740      	adds	r7, #64	@ 0x40
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b09e      	sub	sp, #120	@ 0x78
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dbee:	f107 010c 	add.w	r1, r7, #12
 800dbf2:	1d3b      	adds	r3, r7, #4
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe fe0c 	bl	800c814 <find_volume>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800dc06:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f040 808e 	bne.w	800dd2c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7fe fcef 	bl	800c5fc <follow_path>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800dc24:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d108      	bne.n	800dc3e <f_unlink+0x5c>
 800dc2c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc30:	2102      	movs	r1, #2
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd fc58 	bl	800b4e8 <chk_lock>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800dc3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d172      	bne.n	800dd2c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dc46:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dc4a:	b25b      	sxtb	r3, r3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	da03      	bge.n	800dc58 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800dc50:	2306      	movs	r3, #6
 800dc52:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800dc56:	e008      	b.n	800dc6a <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800dc58:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800dc64:	2307      	movs	r3, #7
 800dc66:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800dc6a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d134      	bne.n	800dcdc <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dc76:	4611      	mov	r1, r2
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7fe fae9 	bl	800c250 <ld_clust>
 800dc7e:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800dc80:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800dc84:	f003 0310 	and.w	r3, r3, #16
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d027      	beq.n	800dcdc <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800dc90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dc92:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800dc94:	f107 0310 	add.w	r3, r7, #16
 800dc98:	2100      	movs	r1, #0
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fe f951 	bl	800bf42 <dir_sdi>
 800dca0:	4603      	mov	r3, r0
 800dca2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800dca6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d116      	bne.n	800dcdc <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800dcae:	f107 0310 	add.w	r3, r7, #16
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fb0a 	bl	800c2ce <dir_read>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dcc0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <f_unlink+0xec>
 800dcc8:	2307      	movs	r3, #7
 800dcca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dcce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dcd2:	2b04      	cmp	r3, #4
 800dcd4:	d102      	bne.n	800dcdc <f_unlink+0xfa>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800dcdc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d123      	bne.n	800dd2c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dce4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7fe fbd4 	bl	800c496 <dir_remove>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800dcf4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10c      	bne.n	800dd16 <f_unlink+0x134>
 800dcfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d009      	beq.n	800dd16 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800dd02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd06:	2200      	movs	r2, #0
 800dd08:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fd ffe8 	bl	800bce0 <remove_chain>
 800dd10:	4603      	mov	r3, r0
 800dd12:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800dd16:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d106      	bne.n	800dd2c <f_unlink+0x14a>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fd fdbf 	bl	800b8a4 <sync_fs>
 800dd26:	4603      	mov	r3, r0
 800dd28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800dd2c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3778      	adds	r7, #120	@ 0x78
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800dd38:	b590      	push	{r4, r7, lr}
 800dd3a:	b0a5      	sub	sp, #148	@ 0x94
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800dd42:	463b      	mov	r3, r7
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fe fcca 	bl	800c6de <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800dd4a:	f107 0120 	add.w	r1, r7, #32
 800dd4e:	1d3b      	adds	r3, r7, #4
 800dd50:	2202      	movs	r2, #2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fe fd5e 	bl	800c814 <find_volume>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800dd5e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 80db 	bne.w	800df1e <f_rename+0x1e6>
		djo.obj.fs = fs;
 800dd68:	6a3b      	ldr	r3, [r7, #32]
 800dd6a:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800dd72:	4611      	mov	r1, r2
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe fc41 	bl	800c5fc <follow_path>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800dd80:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d108      	bne.n	800dd9a <f_rename+0x62>
 800dd88:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800dd8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d002      	beq.n	800dd9a <f_rename+0x62>
 800dd94:	2306      	movs	r3, #6
 800dd96:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800dd9a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d108      	bne.n	800ddb4 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800dda2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800dda6:	2102      	movs	r1, #2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fd fb9d 	bl	800b4e8 <chk_lock>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800ddb4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f040 80b0 	bne.w	800df1e <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800ddbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ddc0:	f103 010b 	add.w	r1, r3, #11
 800ddc4:	f107 0308 	add.w	r3, r7, #8
 800ddc8:	2215      	movs	r2, #21
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fd fb0e 	bl	800b3ec <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800ddd0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800ddd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ddd8:	2230      	movs	r2, #48	@ 0x30
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fd fb06 	bl	800b3ec <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dde6:	4611      	mov	r1, r2
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe fc07 	bl	800c5fc <follow_path>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800ddf4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10c      	bne.n	800de16 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800ddfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de00:	429a      	cmp	r2, r3
 800de02:	d105      	bne.n	800de10 <f_rename+0xd8>
 800de04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de08:	429a      	cmp	r2, r3
 800de0a:	d101      	bne.n	800de10 <f_rename+0xd8>
 800de0c:	2304      	movs	r3, #4
 800de0e:	e000      	b.n	800de12 <f_rename+0xda>
 800de10:	2308      	movs	r3, #8
 800de12:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800de16:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	d168      	bne.n	800def0 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800de1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de22:	4618      	mov	r0, r3
 800de24:	f7fe fb05 	bl	800c432 <dir_register>
 800de28:	4603      	mov	r3, r0
 800de2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800de2e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800de32:	2b00      	cmp	r3, #0
 800de34:	d15c      	bne.n	800def0 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800de36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800de3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de40:	f103 000d 	add.w	r0, r3, #13
 800de44:	f107 0308 	add.w	r3, r7, #8
 800de48:	3302      	adds	r3, #2
 800de4a:	2213      	movs	r2, #19
 800de4c:	4619      	mov	r1, r3
 800de4e:	f7fd facd 	bl	800b3ec <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800de52:	7a3a      	ldrb	r2, [r7, #8]
 800de54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de58:	330b      	adds	r3, #11
 800de5a:	f042 0220 	orr.w	r2, r2, #32
 800de5e:	b2d2      	uxtb	r2, r2
 800de60:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800de62:	6a3b      	ldr	r3, [r7, #32]
 800de64:	2201      	movs	r2, #1
 800de66:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800de68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de6c:	330b      	adds	r3, #11
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	f003 0310 	and.w	r3, r3, #16
 800de74:	2b00      	cmp	r3, #0
 800de76:	d03b      	beq.n	800def0 <f_rename+0x1b8>
 800de78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d037      	beq.n	800def0 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800de80:	6a3c      	ldr	r4, [r7, #32]
 800de82:	6a3b      	ldr	r3, [r7, #32]
 800de84:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fe f9e1 	bl	800c250 <ld_clust>
 800de8e:	4603      	mov	r3, r0
 800de90:	4619      	mov	r1, r3
 800de92:	4620      	mov	r0, r4
 800de94:	f7fd fd74 	bl	800b980 <clust2sect>
 800de98:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800de9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d103      	bne.n	800deac <f_rename+0x174>
								res = FR_INT_ERR;
 800dea4:	2302      	movs	r3, #2
 800dea6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800deaa:	e021      	b.n	800def0 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fd fcc8 	bl	800b848 <move_window>
 800deb8:	4603      	mov	r3, r0
 800deba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800debe:	6a3b      	ldr	r3, [r7, #32]
 800dec0:	3330      	adds	r3, #48	@ 0x30
 800dec2:	3320      	adds	r3, #32
 800dec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800dec8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800decc:	2b00      	cmp	r3, #0
 800dece:	d10f      	bne.n	800def0 <f_rename+0x1b8>
 800ded0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ded4:	3301      	adds	r3, #1
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	2b2e      	cmp	r3, #46	@ 0x2e
 800deda:	d109      	bne.n	800def0 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dee0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fe f9d2 	bl	800c28e <st_clust>
									fs->wflag = 1;
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	2201      	movs	r2, #1
 800deee:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800def0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800def4:	2b00      	cmp	r3, #0
 800def6:	d112      	bne.n	800df1e <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800def8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe faca 	bl	800c496 <dir_remove>
 800df02:	4603      	mov	r3, r0
 800df04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800df08:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d106      	bne.n	800df1e <f_rename+0x1e6>
					res = sync_fs(fs);
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	4618      	mov	r0, r3
 800df14:	f7fd fcc6 	bl	800b8a4 <sync_fs>
 800df18:	4603      	mov	r3, r0
 800df1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800df1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800df22:	4618      	mov	r0, r3
 800df24:	3794      	adds	r7, #148	@ 0x94
 800df26:	46bd      	mov	sp, r7
 800df28:	bd90      	pop	{r4, r7, pc}
	...

0800df2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b087      	sub	sp, #28
 800df30:	af00      	add	r7, sp, #0
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	4613      	mov	r3, r2
 800df38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df3a:	2301      	movs	r3, #1
 800df3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df3e:	2300      	movs	r3, #0
 800df40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df42:	4b1f      	ldr	r3, [pc, #124]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df44:	7a5b      	ldrb	r3, [r3, #9]
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d131      	bne.n	800dfb0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df4c:	4b1c      	ldr	r3, [pc, #112]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df4e:	7a5b      	ldrb	r3, [r3, #9]
 800df50:	b2db      	uxtb	r3, r3
 800df52:	461a      	mov	r2, r3
 800df54:	4b1a      	ldr	r3, [pc, #104]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df56:	2100      	movs	r1, #0
 800df58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df5a:	4b19      	ldr	r3, [pc, #100]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df5c:	7a5b      	ldrb	r3, [r3, #9]
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	4a17      	ldr	r2, [pc, #92]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df6a:	4b15      	ldr	r3, [pc, #84]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df6c:	7a5b      	ldrb	r3, [r3, #9]
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	461a      	mov	r2, r3
 800df72:	4b13      	ldr	r3, [pc, #76]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df74:	4413      	add	r3, r2
 800df76:	79fa      	ldrb	r2, [r7, #7]
 800df78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df7a:	4b11      	ldr	r3, [pc, #68]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df7c:	7a5b      	ldrb	r3, [r3, #9]
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	b2d1      	uxtb	r1, r2
 800df84:	4a0e      	ldr	r2, [pc, #56]	@ (800dfc0 <FATFS_LinkDriverEx+0x94>)
 800df86:	7251      	strb	r1, [r2, #9]
 800df88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df8a:	7dbb      	ldrb	r3, [r7, #22]
 800df8c:	3330      	adds	r3, #48	@ 0x30
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3301      	adds	r3, #1
 800df98:	223a      	movs	r2, #58	@ 0x3a
 800df9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	3302      	adds	r3, #2
 800dfa0:	222f      	movs	r2, #47	@ 0x2f
 800dfa2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	3303      	adds	r3, #3
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	371c      	adds	r7, #28
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	2001474c 	.word	0x2001474c

0800dfc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfce:	2200      	movs	r2, #0
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff ffaa 	bl	800df2c <FATFS_LinkDriverEx>
 800dfd8:	4603      	mov	r3, r0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <malloc>:
 800dfe4:	4b02      	ldr	r3, [pc, #8]	@ (800dff0 <malloc+0xc>)
 800dfe6:	4601      	mov	r1, r0
 800dfe8:	6818      	ldr	r0, [r3, #0]
 800dfea:	f000 b82d 	b.w	800e048 <_malloc_r>
 800dfee:	bf00      	nop
 800dff0:	2000001c 	.word	0x2000001c

0800dff4 <free>:
 800dff4:	4b02      	ldr	r3, [pc, #8]	@ (800e000 <free+0xc>)
 800dff6:	4601      	mov	r1, r0
 800dff8:	6818      	ldr	r0, [r3, #0]
 800dffa:	f000 b967 	b.w	800e2cc <_free_r>
 800dffe:	bf00      	nop
 800e000:	2000001c 	.word	0x2000001c

0800e004 <sbrk_aligned>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	4e0f      	ldr	r6, [pc, #60]	@ (800e044 <sbrk_aligned+0x40>)
 800e008:	460c      	mov	r4, r1
 800e00a:	6831      	ldr	r1, [r6, #0]
 800e00c:	4605      	mov	r5, r0
 800e00e:	b911      	cbnz	r1, 800e016 <sbrk_aligned+0x12>
 800e010:	f000 f90a 	bl	800e228 <_sbrk_r>
 800e014:	6030      	str	r0, [r6, #0]
 800e016:	4621      	mov	r1, r4
 800e018:	4628      	mov	r0, r5
 800e01a:	f000 f905 	bl	800e228 <_sbrk_r>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d103      	bne.n	800e02a <sbrk_aligned+0x26>
 800e022:	f04f 34ff 	mov.w	r4, #4294967295
 800e026:	4620      	mov	r0, r4
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	1cc4      	adds	r4, r0, #3
 800e02c:	f024 0403 	bic.w	r4, r4, #3
 800e030:	42a0      	cmp	r0, r4
 800e032:	d0f8      	beq.n	800e026 <sbrk_aligned+0x22>
 800e034:	1a21      	subs	r1, r4, r0
 800e036:	4628      	mov	r0, r5
 800e038:	f000 f8f6 	bl	800e228 <_sbrk_r>
 800e03c:	3001      	adds	r0, #1
 800e03e:	d1f2      	bne.n	800e026 <sbrk_aligned+0x22>
 800e040:	e7ef      	b.n	800e022 <sbrk_aligned+0x1e>
 800e042:	bf00      	nop
 800e044:	20014758 	.word	0x20014758

0800e048 <_malloc_r>:
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	1ccd      	adds	r5, r1, #3
 800e04e:	f025 0503 	bic.w	r5, r5, #3
 800e052:	3508      	adds	r5, #8
 800e054:	2d0c      	cmp	r5, #12
 800e056:	bf38      	it	cc
 800e058:	250c      	movcc	r5, #12
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	4606      	mov	r6, r0
 800e05e:	db01      	blt.n	800e064 <_malloc_r+0x1c>
 800e060:	42a9      	cmp	r1, r5
 800e062:	d904      	bls.n	800e06e <_malloc_r+0x26>
 800e064:	230c      	movs	r3, #12
 800e066:	6033      	str	r3, [r6, #0]
 800e068:	2000      	movs	r0, #0
 800e06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e144 <_malloc_r+0xfc>
 800e072:	f000 f869 	bl	800e148 <__malloc_lock>
 800e076:	f8d8 3000 	ldr.w	r3, [r8]
 800e07a:	461c      	mov	r4, r3
 800e07c:	bb44      	cbnz	r4, 800e0d0 <_malloc_r+0x88>
 800e07e:	4629      	mov	r1, r5
 800e080:	4630      	mov	r0, r6
 800e082:	f7ff ffbf 	bl	800e004 <sbrk_aligned>
 800e086:	1c43      	adds	r3, r0, #1
 800e088:	4604      	mov	r4, r0
 800e08a:	d158      	bne.n	800e13e <_malloc_r+0xf6>
 800e08c:	f8d8 4000 	ldr.w	r4, [r8]
 800e090:	4627      	mov	r7, r4
 800e092:	2f00      	cmp	r7, #0
 800e094:	d143      	bne.n	800e11e <_malloc_r+0xd6>
 800e096:	2c00      	cmp	r4, #0
 800e098:	d04b      	beq.n	800e132 <_malloc_r+0xea>
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	4639      	mov	r1, r7
 800e09e:	4630      	mov	r0, r6
 800e0a0:	eb04 0903 	add.w	r9, r4, r3
 800e0a4:	f000 f8c0 	bl	800e228 <_sbrk_r>
 800e0a8:	4581      	cmp	r9, r0
 800e0aa:	d142      	bne.n	800e132 <_malloc_r+0xea>
 800e0ac:	6821      	ldr	r1, [r4, #0]
 800e0ae:	1a6d      	subs	r5, r5, r1
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7ff ffa6 	bl	800e004 <sbrk_aligned>
 800e0b8:	3001      	adds	r0, #1
 800e0ba:	d03a      	beq.n	800e132 <_malloc_r+0xea>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	442b      	add	r3, r5
 800e0c0:	6023      	str	r3, [r4, #0]
 800e0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	bb62      	cbnz	r2, 800e124 <_malloc_r+0xdc>
 800e0ca:	f8c8 7000 	str.w	r7, [r8]
 800e0ce:	e00f      	b.n	800e0f0 <_malloc_r+0xa8>
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	1b52      	subs	r2, r2, r5
 800e0d4:	d420      	bmi.n	800e118 <_malloc_r+0xd0>
 800e0d6:	2a0b      	cmp	r2, #11
 800e0d8:	d917      	bls.n	800e10a <_malloc_r+0xc2>
 800e0da:	1961      	adds	r1, r4, r5
 800e0dc:	42a3      	cmp	r3, r4
 800e0de:	6025      	str	r5, [r4, #0]
 800e0e0:	bf18      	it	ne
 800e0e2:	6059      	strne	r1, [r3, #4]
 800e0e4:	6863      	ldr	r3, [r4, #4]
 800e0e6:	bf08      	it	eq
 800e0e8:	f8c8 1000 	streq.w	r1, [r8]
 800e0ec:	5162      	str	r2, [r4, r5]
 800e0ee:	604b      	str	r3, [r1, #4]
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	f000 f82f 	bl	800e154 <__malloc_unlock>
 800e0f6:	f104 000b 	add.w	r0, r4, #11
 800e0fa:	1d23      	adds	r3, r4, #4
 800e0fc:	f020 0007 	bic.w	r0, r0, #7
 800e100:	1ac2      	subs	r2, r0, r3
 800e102:	bf1c      	itt	ne
 800e104:	1a1b      	subne	r3, r3, r0
 800e106:	50a3      	strne	r3, [r4, r2]
 800e108:	e7af      	b.n	800e06a <_malloc_r+0x22>
 800e10a:	6862      	ldr	r2, [r4, #4]
 800e10c:	42a3      	cmp	r3, r4
 800e10e:	bf0c      	ite	eq
 800e110:	f8c8 2000 	streq.w	r2, [r8]
 800e114:	605a      	strne	r2, [r3, #4]
 800e116:	e7eb      	b.n	800e0f0 <_malloc_r+0xa8>
 800e118:	4623      	mov	r3, r4
 800e11a:	6864      	ldr	r4, [r4, #4]
 800e11c:	e7ae      	b.n	800e07c <_malloc_r+0x34>
 800e11e:	463c      	mov	r4, r7
 800e120:	687f      	ldr	r7, [r7, #4]
 800e122:	e7b6      	b.n	800e092 <_malloc_r+0x4a>
 800e124:	461a      	mov	r2, r3
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	42a3      	cmp	r3, r4
 800e12a:	d1fb      	bne.n	800e124 <_malloc_r+0xdc>
 800e12c:	2300      	movs	r3, #0
 800e12e:	6053      	str	r3, [r2, #4]
 800e130:	e7de      	b.n	800e0f0 <_malloc_r+0xa8>
 800e132:	230c      	movs	r3, #12
 800e134:	6033      	str	r3, [r6, #0]
 800e136:	4630      	mov	r0, r6
 800e138:	f000 f80c 	bl	800e154 <__malloc_unlock>
 800e13c:	e794      	b.n	800e068 <_malloc_r+0x20>
 800e13e:	6005      	str	r5, [r0, #0]
 800e140:	e7d6      	b.n	800e0f0 <_malloc_r+0xa8>
 800e142:	bf00      	nop
 800e144:	2001475c 	.word	0x2001475c

0800e148 <__malloc_lock>:
 800e148:	4801      	ldr	r0, [pc, #4]	@ (800e150 <__malloc_lock+0x8>)
 800e14a:	f000 b8a7 	b.w	800e29c <__retarget_lock_acquire_recursive>
 800e14e:	bf00      	nop
 800e150:	2001489c 	.word	0x2001489c

0800e154 <__malloc_unlock>:
 800e154:	4801      	ldr	r0, [pc, #4]	@ (800e15c <__malloc_unlock+0x8>)
 800e156:	f000 b8a2 	b.w	800e29e <__retarget_lock_release_recursive>
 800e15a:	bf00      	nop
 800e15c:	2001489c 	.word	0x2001489c

0800e160 <realloc>:
 800e160:	4b02      	ldr	r3, [pc, #8]	@ (800e16c <realloc+0xc>)
 800e162:	460a      	mov	r2, r1
 800e164:	4601      	mov	r1, r0
 800e166:	6818      	ldr	r0, [r3, #0]
 800e168:	f000 b802 	b.w	800e170 <_realloc_r>
 800e16c:	2000001c 	.word	0x2000001c

0800e170 <_realloc_r>:
 800e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e174:	4680      	mov	r8, r0
 800e176:	4615      	mov	r5, r2
 800e178:	460c      	mov	r4, r1
 800e17a:	b921      	cbnz	r1, 800e186 <_realloc_r+0x16>
 800e17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e180:	4611      	mov	r1, r2
 800e182:	f7ff bf61 	b.w	800e048 <_malloc_r>
 800e186:	b92a      	cbnz	r2, 800e194 <_realloc_r+0x24>
 800e188:	f000 f8a0 	bl	800e2cc <_free_r>
 800e18c:	2400      	movs	r4, #0
 800e18e:	4620      	mov	r0, r4
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e194:	f000 f8e4 	bl	800e360 <_malloc_usable_size_r>
 800e198:	4285      	cmp	r5, r0
 800e19a:	4606      	mov	r6, r0
 800e19c:	d802      	bhi.n	800e1a4 <_realloc_r+0x34>
 800e19e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e1a2:	d8f4      	bhi.n	800e18e <_realloc_r+0x1e>
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	f7ff ff4e 	bl	800e048 <_malloc_r>
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d0ec      	beq.n	800e18c <_realloc_r+0x1c>
 800e1b2:	42b5      	cmp	r5, r6
 800e1b4:	462a      	mov	r2, r5
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	bf28      	it	cs
 800e1ba:	4632      	movcs	r2, r6
 800e1bc:	f000 f878 	bl	800e2b0 <memcpy>
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	f000 f882 	bl	800e2cc <_free_r>
 800e1c8:	463c      	mov	r4, r7
 800e1ca:	e7e0      	b.n	800e18e <_realloc_r+0x1e>

0800e1cc <memset>:
 800e1cc:	4402      	add	r2, r0
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d100      	bne.n	800e1d6 <memset+0xa>
 800e1d4:	4770      	bx	lr
 800e1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1da:	e7f9      	b.n	800e1d0 <memset+0x4>

0800e1dc <strcat>:
 800e1dc:	b510      	push	{r4, lr}
 800e1de:	4602      	mov	r2, r0
 800e1e0:	7814      	ldrb	r4, [r2, #0]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	3201      	adds	r2, #1
 800e1e6:	2c00      	cmp	r4, #0
 800e1e8:	d1fa      	bne.n	800e1e0 <strcat+0x4>
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e1f4:	2a00      	cmp	r2, #0
 800e1f6:	d1f9      	bne.n	800e1ec <strcat+0x10>
 800e1f8:	bd10      	pop	{r4, pc}

0800e1fa <strrchr>:
 800e1fa:	b538      	push	{r3, r4, r5, lr}
 800e1fc:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800e200:	4603      	mov	r3, r0
 800e202:	d10e      	bne.n	800e222 <strrchr+0x28>
 800e204:	4621      	mov	r1, r4
 800e206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e20a:	f000 b8b1 	b.w	800e370 <strchr>
 800e20e:	1c43      	adds	r3, r0, #1
 800e210:	4605      	mov	r5, r0
 800e212:	4621      	mov	r1, r4
 800e214:	4618      	mov	r0, r3
 800e216:	f000 f8ab 	bl	800e370 <strchr>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d1f7      	bne.n	800e20e <strrchr+0x14>
 800e21e:	4628      	mov	r0, r5
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	2500      	movs	r5, #0
 800e224:	e7f5      	b.n	800e212 <strrchr+0x18>
	...

0800e228 <_sbrk_r>:
 800e228:	b538      	push	{r3, r4, r5, lr}
 800e22a:	4d06      	ldr	r5, [pc, #24]	@ (800e244 <_sbrk_r+0x1c>)
 800e22c:	2300      	movs	r3, #0
 800e22e:	4604      	mov	r4, r0
 800e230:	4608      	mov	r0, r1
 800e232:	602b      	str	r3, [r5, #0]
 800e234:	f7f6 f948 	bl	80044c8 <_sbrk>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <_sbrk_r+0x1a>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	b103      	cbz	r3, 800e242 <_sbrk_r+0x1a>
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	20014898 	.word	0x20014898

0800e248 <__errno>:
 800e248:	4b01      	ldr	r3, [pc, #4]	@ (800e250 <__errno+0x8>)
 800e24a:	6818      	ldr	r0, [r3, #0]
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	2000001c 	.word	0x2000001c

0800e254 <__libc_init_array>:
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	4d0d      	ldr	r5, [pc, #52]	@ (800e28c <__libc_init_array+0x38>)
 800e258:	4c0d      	ldr	r4, [pc, #52]	@ (800e290 <__libc_init_array+0x3c>)
 800e25a:	1b64      	subs	r4, r4, r5
 800e25c:	10a4      	asrs	r4, r4, #2
 800e25e:	2600      	movs	r6, #0
 800e260:	42a6      	cmp	r6, r4
 800e262:	d109      	bne.n	800e278 <__libc_init_array+0x24>
 800e264:	4d0b      	ldr	r5, [pc, #44]	@ (800e294 <__libc_init_array+0x40>)
 800e266:	4c0c      	ldr	r4, [pc, #48]	@ (800e298 <__libc_init_array+0x44>)
 800e268:	f000 f890 	bl	800e38c <_init>
 800e26c:	1b64      	subs	r4, r4, r5
 800e26e:	10a4      	asrs	r4, r4, #2
 800e270:	2600      	movs	r6, #0
 800e272:	42a6      	cmp	r6, r4
 800e274:	d105      	bne.n	800e282 <__libc_init_array+0x2e>
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	f855 3b04 	ldr.w	r3, [r5], #4
 800e27c:	4798      	blx	r3
 800e27e:	3601      	adds	r6, #1
 800e280:	e7ee      	b.n	800e260 <__libc_init_array+0xc>
 800e282:	f855 3b04 	ldr.w	r3, [r5], #4
 800e286:	4798      	blx	r3
 800e288:	3601      	adds	r6, #1
 800e28a:	e7f2      	b.n	800e272 <__libc_init_array+0x1e>
 800e28c:	0800f2f0 	.word	0x0800f2f0
 800e290:	0800f2f0 	.word	0x0800f2f0
 800e294:	0800f2f0 	.word	0x0800f2f0
 800e298:	0800f2f4 	.word	0x0800f2f4

0800e29c <__retarget_lock_acquire_recursive>:
 800e29c:	4770      	bx	lr

0800e29e <__retarget_lock_release_recursive>:
 800e29e:	4770      	bx	lr

0800e2a0 <strcpy>:
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2a6:	f803 2b01 	strb.w	r2, [r3], #1
 800e2aa:	2a00      	cmp	r2, #0
 800e2ac:	d1f9      	bne.n	800e2a2 <strcpy+0x2>
 800e2ae:	4770      	bx	lr

0800e2b0 <memcpy>:
 800e2b0:	440a      	add	r2, r1
 800e2b2:	4291      	cmp	r1, r2
 800e2b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2b8:	d100      	bne.n	800e2bc <memcpy+0xc>
 800e2ba:	4770      	bx	lr
 800e2bc:	b510      	push	{r4, lr}
 800e2be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e2c6:	4291      	cmp	r1, r2
 800e2c8:	d1f9      	bne.n	800e2be <memcpy+0xe>
 800e2ca:	bd10      	pop	{r4, pc}

0800e2cc <_free_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	2900      	cmp	r1, #0
 800e2d2:	d041      	beq.n	800e358 <_free_r+0x8c>
 800e2d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2d8:	1f0c      	subs	r4, r1, #4
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	bfb8      	it	lt
 800e2de:	18e4      	addlt	r4, r4, r3
 800e2e0:	f7ff ff32 	bl	800e148 <__malloc_lock>
 800e2e4:	4a1d      	ldr	r2, [pc, #116]	@ (800e35c <_free_r+0x90>)
 800e2e6:	6813      	ldr	r3, [r2, #0]
 800e2e8:	b933      	cbnz	r3, 800e2f8 <_free_r+0x2c>
 800e2ea:	6063      	str	r3, [r4, #4]
 800e2ec:	6014      	str	r4, [r2, #0]
 800e2ee:	4628      	mov	r0, r5
 800e2f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2f4:	f7ff bf2e 	b.w	800e154 <__malloc_unlock>
 800e2f8:	42a3      	cmp	r3, r4
 800e2fa:	d908      	bls.n	800e30e <_free_r+0x42>
 800e2fc:	6820      	ldr	r0, [r4, #0]
 800e2fe:	1821      	adds	r1, r4, r0
 800e300:	428b      	cmp	r3, r1
 800e302:	bf01      	itttt	eq
 800e304:	6819      	ldreq	r1, [r3, #0]
 800e306:	685b      	ldreq	r3, [r3, #4]
 800e308:	1809      	addeq	r1, r1, r0
 800e30a:	6021      	streq	r1, [r4, #0]
 800e30c:	e7ed      	b.n	800e2ea <_free_r+0x1e>
 800e30e:	461a      	mov	r2, r3
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	b10b      	cbz	r3, 800e318 <_free_r+0x4c>
 800e314:	42a3      	cmp	r3, r4
 800e316:	d9fa      	bls.n	800e30e <_free_r+0x42>
 800e318:	6811      	ldr	r1, [r2, #0]
 800e31a:	1850      	adds	r0, r2, r1
 800e31c:	42a0      	cmp	r0, r4
 800e31e:	d10b      	bne.n	800e338 <_free_r+0x6c>
 800e320:	6820      	ldr	r0, [r4, #0]
 800e322:	4401      	add	r1, r0
 800e324:	1850      	adds	r0, r2, r1
 800e326:	4283      	cmp	r3, r0
 800e328:	6011      	str	r1, [r2, #0]
 800e32a:	d1e0      	bne.n	800e2ee <_free_r+0x22>
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	6053      	str	r3, [r2, #4]
 800e332:	4408      	add	r0, r1
 800e334:	6010      	str	r0, [r2, #0]
 800e336:	e7da      	b.n	800e2ee <_free_r+0x22>
 800e338:	d902      	bls.n	800e340 <_free_r+0x74>
 800e33a:	230c      	movs	r3, #12
 800e33c:	602b      	str	r3, [r5, #0]
 800e33e:	e7d6      	b.n	800e2ee <_free_r+0x22>
 800e340:	6820      	ldr	r0, [r4, #0]
 800e342:	1821      	adds	r1, r4, r0
 800e344:	428b      	cmp	r3, r1
 800e346:	bf04      	itt	eq
 800e348:	6819      	ldreq	r1, [r3, #0]
 800e34a:	685b      	ldreq	r3, [r3, #4]
 800e34c:	6063      	str	r3, [r4, #4]
 800e34e:	bf04      	itt	eq
 800e350:	1809      	addeq	r1, r1, r0
 800e352:	6021      	streq	r1, [r4, #0]
 800e354:	6054      	str	r4, [r2, #4]
 800e356:	e7ca      	b.n	800e2ee <_free_r+0x22>
 800e358:	bd38      	pop	{r3, r4, r5, pc}
 800e35a:	bf00      	nop
 800e35c:	2001475c 	.word	0x2001475c

0800e360 <_malloc_usable_size_r>:
 800e360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e364:	1f18      	subs	r0, r3, #4
 800e366:	2b00      	cmp	r3, #0
 800e368:	bfbc      	itt	lt
 800e36a:	580b      	ldrlt	r3, [r1, r0]
 800e36c:	18c0      	addlt	r0, r0, r3
 800e36e:	4770      	bx	lr

0800e370 <strchr>:
 800e370:	b2c9      	uxtb	r1, r1
 800e372:	4603      	mov	r3, r0
 800e374:	4618      	mov	r0, r3
 800e376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e37a:	b112      	cbz	r2, 800e382 <strchr+0x12>
 800e37c:	428a      	cmp	r2, r1
 800e37e:	d1f9      	bne.n	800e374 <strchr+0x4>
 800e380:	4770      	bx	lr
 800e382:	2900      	cmp	r1, #0
 800e384:	bf18      	it	ne
 800e386:	2000      	movne	r0, #0
 800e388:	4770      	bx	lr
	...

0800e38c <_init>:
 800e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38e:	bf00      	nop
 800e390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e392:	bc08      	pop	{r3}
 800e394:	469e      	mov	lr, r3
 800e396:	4770      	bx	lr

0800e398 <_fini>:
 800e398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39a:	bf00      	nop
 800e39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e39e:	bc08      	pop	{r3}
 800e3a0:	469e      	mov	lr, r3
 800e3a2:	4770      	bx	lr
